/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:41:33 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PipedReader;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.REPTree;
import weka.clusterers.FilteredClusterer;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.estimators.DiscreteEstimator;
import weka.filters.AllFilter;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.m_SumSqrErr;
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, " ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      Vote vote0 = new Vote();
      Evaluation.makeOptionString(vote0, false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 4.0);
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.48717948717948717
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.doubles();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "import weka.core.Attribute;\n");
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.rootMeanPriorSquaredError();
      double double0 = evaluation1.numTruePositives(1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.parallelStream();
      evaluation0.m_TotalSizeOfRegions = 4697.20236;
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = evaluation0.m_SumAbsErr;
      evaluation0.setPriors(instances0);
      double double2 = evaluation0.m_ConfLevel;
      MockRandom mockRandom0 = new MockRandom(2L);
      double double3 = evaluation0.m_SumClassPredicted;
      evaluation0.trueNegativeRate(109);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.setDebug(true);
      MockRandom mockRandom0 = new MockRandom((-2));
      MockRandom mockRandom1 = new MockRandom();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.buildClassifier(instances0);
      decisionStump0.setDebug(false);
      testInstances0.setHandler(decisionStump0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      DenseInstance denseInstance0 = new DenseInstance(1);
      MockRandom mockRandom2 = new MockRandom();
      mockRandom2.ints();
      evaluation0.toMatrixString(".arff");
      evaluation0.matthewsCorrelationCoefficient(1284);
      evaluation0.falsePositiveRate(79);
      PipedReader pipedReader0 = new PipedReader();
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(pipedReader0, (-1647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      Evaluation.makeOptionString(rEPTree0, true);
      Random.setNextRandom((-3));
      Null null0 = new Null();
      null0.getHeader();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.setClassIndex(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.setPriors(instances0);
      evaluation0.areaUnderROC(3440);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)98;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double1 = evaluation0.numFalsePositives((byte) (-4));
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double2 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      BayesNet bayesNet0 = new BayesNet();
      try { 
        evaluation0.evaluateModel((Classifier) bayesNet0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.m_ConfLevel;
      MockRandom mockRandom0 = new MockRandom(2L);
      double double1 = evaluation0.m_SumClassPredicted;
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.precision(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_TotalCoverage;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Evaluation.makeOptionString((Classifier) null, true);
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4888888888888889
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.setDebug(false);
      testInstances0.setHandler(decisionStump0);
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      
      DenseInstance denseInstance0 = new DenseInstance((byte)6);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      String string0 = evaluation0.toMatrixString(".bsi");
      assertEquals(".bsi\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.717020786717215
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1348;
      doubleArray0[2] = (double) 1348;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 1348;
      doubleArray0[5] = (double) 1348;
      doubleArray0[6] = (-454.7836080251649);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom((-2));
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.doubles();
      gaussianProcesses0.listOptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.resample(mockRandom0);
      mockRandom1.doubles();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances1 = instances0.resample(mockRandom0);
      MockRandom mockRandom2 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.weightedRecall();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.kappa();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      evaluation0.trueNegativeRate((-1108));
      double double2 = evaluation0.weightedAreaUnderROC();
      double double3 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(4.9E-324, 4.9E-324);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      evaluation0.getDiscardPredictions();
      testInstances0.generate();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      evaluation0.m_MinTarget = (-1268.1515263);
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.m_TotalCoverage;
      Stacking stacking0 = new Stacking();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      double double1 = evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.m_TotalCoverage;
      double double3 = evaluation0.m_SumClassPredicted;
      double double4 = evaluation0.m_Unclassified;
      double double5 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      properties1.entrySet();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      DenseInstance denseInstance0 = new DenseInstance(2265);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Class complexity | order 0         ");
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      SGDText sGDText0 = new SGDText();
      Classifier classifier0 = AbstractClassifier.makeCopy(sGDText0);
      try { 
        evaluation0.evaluationForSingleInstance(classifier0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-67);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte) (-67);
      doubleArray0[1] = (double) (byte)14;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (byte) (-67);
      doubleArray0[4] = (-4.0);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (byte)51);
      DenseInstance denseInstance0 = new DenseInstance((byte)3);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation1.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.setDebug(false);
      testInstances0.setHandler(decisionStump0);
      evaluation0.weightedMatthewsCorrelation();
      DenseInstance denseInstance0 = new DenseInstance((byte)6);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = '$';
      charArray0[2] = 'L';
      charArray0[3] = 'z';
      denseInstance0.s_numericAfterDecimalPoint = (int) '=';
      charArray0[5] = '/';
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) decisionStump0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.doubles();
      instances0.parallelStream();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.m_TotalCoverage;
      double double2 = evaluation0.m_SumClassPredicted;
      double double3 = evaluation0.trueNegativeRate(845);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.weightedTruePositiveRate();
      assertEquals(double4, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.toArray();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      Evaluation.handleCostOption("", 109);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@data";
      stringArray0[1] = "Partitioned options: ";
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(109, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      double double1 = evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom(0L);
      double double3 = evaluation0.m_SumClassPredicted;
      double double4 = evaluation0.m_Unclassified;
      double double5 = evaluation0.weightedFMeasure();
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5956883120599223
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      Evaluation evaluation0 = new Evaluation(instances0);
      Float float0 = new Float((double) (-2));
      String string0 = evaluation0.toClassDetailsString("8*Mc|jd>@");
      assertEquals("8*Mc|jd>@\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      mockRandom0.doubles();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".xml");
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      double double1 = evaluation0.truePositiveRate((-598));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFMeasure();
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.KBMeanInformation();
      double double4 = evaluation0.KBRelativeInformation();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.parallelStream();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.m_TotalCoverage;
      double double2 = evaluation0.m_SumClassPredicted;
      double double3 = evaluation0.numTrueNegatives((-3375));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.trueNegativeRate((byte) (-34));
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.weightedTruePositiveRate();
      assertEquals(double5, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      evaluation0.m_SumPriorEntropy = (double) (-1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedTrueNegativeRate();
      Bagging bagging0 = new Bagging();
      Evaluation.makeOptionString(bagging0, false);
      int int0 = 2397;
      testInstances0.setClassType(2397);
      int int1 = 2;
      evaluation2.getClassPriors();
      try { 
        Evaluation.handleCostOption(".arff", 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.areaUnderPRC((-980));
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      instances0.stream();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 429.5485582;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 429.5485582;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(429.5485582, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.toArray();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom(0L);
      double double2 = evaluation0.m_SumClassPredicted;
      double double3 = evaluation0.numTrueNegatives(239);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double4, double0, 0.01);
      
      evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-10.0);
      doubleArray0[1] = (double) 0;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-967.1841163053263));
      DenseInstance denseInstance0 = new DenseInstance(1000);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.confusionMatrix();
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.setPriors(instances0);
      evaluation0.areaUnderROC(3440);
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate(62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      costSensitiveClassifier0.costMatrixSourceTipText();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, (Instance) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".xml");
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBMeanInformation();
      double double2 = evaluation0.avgCost();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.makeOptionString(zeroR0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setWordSeparators(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedAreaUnderPRC();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String string0 = Evaluation.getGlobalInfo(naiveBayes0);
      assertEquals("\nSynopsis for weka.classifiers.bayes.NaiveBayes:\n\nClass for a Naive Bayes classifier using estimator classes. Numeric estimator precision values are chosen based on analysis of the  training data. For this reason, the classifier is not an UpdateableClassifier (which in typical usage are initialized with zero training instances) -- if you need the UpdateableClassifier functionality, use the NaiveBayesUpdateable classifier. The NaiveBayesUpdateable classifier will  use a default precision of 0.1 for numeric attributes when buildClassifier is called with zero training instances.\n\nFor more information on Naive Bayes classifiers, see\n\nGeorge H. John, Pat Langley: Estimating Continuous Distributions in Bayesian Classifiers. In: Eleventh Conference on Uncertainty in Artificial Intelligence, San Mateo, 338-345, 1995.", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      LinearRegression linearRegression0 = new LinearRegression();
      String string0 = Evaluation.makeOptionString(linearRegression0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      instances0.stream();
      char[] charArray0 = new char[8];
      charArray0[0] = '$';
      charArray0[1] = '<';
      charArray0[2] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = 'L';
      charArray0[6] = 'S';
      charArray0[7] = '<';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 2913);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances1 = instances0.resample(mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attribute attribute0 = new Attribute(".xml", instances0, protectedProperties1);
      Evaluation evaluation0 = new Evaluation(instances1);
      String string0 = evaluation0.toClassDetailsString("");
      assertEquals("\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      evaluation1.toMatrixString(".bsi");
      String string1 = evaluation0.num2ShortID(11, (char[]) null, 0);
      assertEquals("", string1);
      
      evaluation1.areaUnderROC(17);
      assertEquals(Double.NaN, evaluation1.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".xml");
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      double double1 = evaluation0.truePositiveRate((-598));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.fMeasure((-3362));
      assertEquals(double2, double0, 0.01);
      
      evaluation0.correct();
      double double3 = evaluation0.weightedFMeasure();
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = evaluation0.m_SumClassPredicted;
      evaluation0.setPriors(instances0);
      evaluation0.areaUnderROC((-2959));
      evaluation0.trueNegativeRate((-1));
      evaluation0.meanAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom(0L);
      double double3 = evaluation0.falseNegativeRate((-3058));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.falsePositiveRate((-3712));
      assertEquals(0.0, double4, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      instances0.parallelStream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom((-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1);
      int int0 = 1871;
      // Undeclared exception!
      try { 
        evaluation0.recall(1871);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1871
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = evaluation0.m_SumClassPredicted;
      double double2 = evaluation0.trueNegativeRate(341);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNumString(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-897));
      try { 
        evaluation0.toClassDetailsString("weka/core/Capabilities.props");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom(1);
      double double0 = evaluation0.m_SumAbsErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[2] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1747.7884874), intArray0, 300);
      try { 
        evaluation1.evaluateModelOnce((Classifier) vote0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resample(mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate((byte)14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.setDebug(false);
      testInstances0.setHandler(decisionStump0);
      evaluation0.weightedMatthewsCorrelation();
      DenseInstance denseInstance0 = new DenseInstance((byte)6);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'L';
      charArray0[3] = 'z';
      denseInstance0.s_numericAfterDecimalPoint = (int) '=';
      charArray0[5] = '/';
      charArray0[6] = '<';
      charArray0[7] = '$';
      charArray0[8] = 'S';
      String string0 = evaluation0.num2ShortID(3829, charArray0, 11);
      assertEquals("       \u0000jj\u0000", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.setDebug(false);
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(sMOreg0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DenseInstance denseInstance0 = new DenseInstance(14);
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = '<';
      String string0 = evaluation0.num2ShortID((-2), charArray0, (byte)6);
      assertEquals("     j", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 1814;
      instances0.setRelationName("p_(zl*Ct#9*WLdD5ni");
      textDirectoryLoader0.setDebug(true);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1814, (char[]) null, 300);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.parallelStream();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-92);
      instances0.stream();
      MockRandom mockRandom0 = new MockRandom((byte) (-34));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((byte) (-34), (byte)14);
      evaluation0.rootMeanSquaredError();
      System.setCurrentTimeMillis(1912L);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(4.9E-324, (-0.4375));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PCjL";
      stringArray0[1] = ".arff";
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-532.0078584);
      doubleArray0[1] = (-0.4375);
      doubleArray0[2] = (-0.15323485933726277);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-532.0078584), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom((byte)6);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double3 = evaluation0.numFalseNegatives(103);
      double double4 = evaluation0.SFPriorEntropy();
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom((-2));
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.numFalseNegatives((-2));
      evaluation0.numTruePositives((-1994981129));
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.stream();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom(0L);
      double double3 = evaluation0.m_SumClassPredicted;
      evaluation0.numTrueNegatives(239);
      double double4 = evaluation0.numTrueNegatives(0);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DenseInstance denseInstance0 = new DenseInstance((byte)6);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.areaUnderPRC(25);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)57;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.doubles();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      Stacking stacking0 = new Stacking();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.numFalseNegatives((byte)57);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.errorRate();
      evaluation0.KBRelativeInformation();
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-966.0));
      DenseInstance denseInstance0 = new DenseInstance(1000);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = instances0.stringFreeStructure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      instances1.stream();
      gaussianProcesses0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.KBInformation();
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances1 = instances0.resample(mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.nextBoolean();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.numInstances();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-92));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".xml");
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) gaussianProcesses0, (Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Classifier classifier0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CorrelationAttributeEval :\n\nEvaluates the worth of an attribute by measuring the correlation (Pearson's) between it and the class.\n\nNominal attributes are considered on a value by value basis by treating each value as an indicator. An overall correlation for a nominal attribute is arrived at via a weighted average.\n";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.m_TotalCoverage;
      double double2 = evaluation0.m_SumClassPredicted;
      double double3 = evaluation0.m_Unclassified;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom((-1));
      mockRandom0.doubles();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      DenseInstance denseInstance0 = new DenseInstance(2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      MockRandom mockRandom1 = new MockRandom(0L);
      double double1 = evaluation0.m_SumClassPredicted;
      // Undeclared exception!
      try { 
        evaluation0.precision(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Filter filter0 = filteredClusterer0.getFilter();
      try { 
        Filter.useFilter(instances0, filter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-92);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom((-182L));
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.numTrueNegatives(0);
      int int0 = 101;
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives(101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances1 = instances0.resample(mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.errorRate();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.equals(naiveBayesMultinomialText0);
      double double1 = evaluation0.m_MaxTarget;
      try { 
        CostMatrix.parseMatlab("@relation");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(3886, (char[]) null, (-970));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-62);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      int int0 = 3448;
      REPTree rEPTree0 = new REPTree();
      try { 
        evaluation0.evaluateModel((Classifier) rEPTree0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@data";
      stringArray0[5] = ".bsi";
      TextDirectoryLoader.main(stringArray0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.fMeasure(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-296.279036278248), 0.0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom(0L);
      double double1 = Evaluation.MIN_SF_PROB;
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives((-1343));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom((-2));
      mockRandom0.doubles();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      DenseInstance denseInstance0 = new DenseInstance(21);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(2142495862);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2142495862
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom((-3940L));
      int int0 = (-1405);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, (-1405), (java.util.Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, 4, (java.util.Random) mockRandom0, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.parallelStream();
      double double0 = evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.stream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.recall(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      GaussianProcesses.main(stringArray0);
      // Undeclared exception!
      try { 
        instances0.setClassIndex(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class index: 2
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-966.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.stream();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom(0L);
      double double3 = evaluation0.m_SumAbsErr;
      MockRandom mockRandom1 = new MockRandom((-1L));
      double double4 = evaluation0.m_SumClassPredicted;
      double double5 = evaluation0.numTrueNegatives(239);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = evaluation0.falseNegativeRate(11);
      assertEquals(0.0, double6, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      stringArray0[4] = " ";
      stringArray0[5] = ".arff";
      stringArray0[6] = " ";
      stringArray0[7] = ".arff";
      testInstances0.setOptions(stringArray0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      Stacking stacking0 = new Stacking();
      double double1 = evaluation0.falseNegativeRate((-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.recall(2215);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(0);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom1.doubles();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.resample(mockRandom1);
      MockRandom mockRandom2 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.recall((byte)6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.getClassPriors();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      DenseInstance denseInstance0 = new DenseInstance(0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1097.8603247789;
      doubleArray0[1] = 61.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 61;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-0.4375);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 2;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom(601);
      try { 
        evaluation1.crossValidateModel("O[<$@O43nozm", instances0, 601, testInstances0.DEFAULT_WORDS, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: O[<$@O43nozm
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5898403588435481
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.buildClassifier(instances0);
      testInstances0.setHandler(decisionStump0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      DenseInstance denseInstance0 = new DenseInstance((byte)6);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      String string0 = evaluation0.toMatrixString(".bsi");
      assertEquals(".bsi\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation0.matthewsCorrelationCoefficient(3008);
      assertNotEquals(double1, double0, 0.01);
      
      evaluation0.falsePositiveRate((-2));
      evaluation0.toSummaryString(true);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-92);
      instances0.stream();
      MockRandom mockRandom0 = new MockRandom((byte) (-34));
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 704.062;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      evaluation0.unweightedMacroFmeasure();
      instances0.resample(mockRandom0);
      evaluation0.toSummaryString();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 202.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      textDirectoryLoader0.setOutputFilename(true);
      evaluation0.m_SumAbsErr = Double.NaN;
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.m_Incorrect;
      evaluation0.errorRate();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      properties0.values();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      String string0 = "\tPreserves the order in the percentage split.\n";
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString("@relation", false);
      // Undeclared exception!
      try { 
        evaluation1.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      evaluation0.m_MaxTarget = (double) 0;
      instances0.setClassIndex(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString("keywords", true);
      // Undeclared exception!
      try { 
        evaluation1.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(1348);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[3];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      instances0.parallelStream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom((-2));
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.doubles();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.resample(mockRandom0);
      MockRandom mockRandom2 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(1);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.4, intArray0, (-1));
      evaluation0.weightedMatthewsCorrelation();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((double) 0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      instances0.parallelStream();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.precision((-2));
      evaluation0.weightedFalsePositiveRate();
      evaluation0.getRevision();
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorEntropy = 4.9E-324;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      instances0.parallelStream();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.truePositiveRate(846);
      KDTree kDTree0 = new KDTree();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.totalCost();
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Instance instance0 = null;
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      instances0.resample(mockRandom0);
      instances0.enumerateAttributes();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      // Undeclared exception!
      try { 
        instances0.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Properties properties0 = new Properties();
      DenseInstance denseInstance0 = new DenseInstance(2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("      if (PROCESS[n] && (i[n] != null))\n", arrayList0, 1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      double double1 = evaluation0.m_TotalCoverage;
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double3 = evaluation0.pctCorrect();
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation.handleCostOption("", (-997));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(1.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation.makeOptionString(regressionByDiscretization0, false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-467.282228386802);
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (-838.6);
      doubleArray1[5] = (-5850.200460486737);
      doubleArray1[6] = 5506.830190067863;
      doubleArray1[7] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1948.7031626357286, doubleArray1);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-92);
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      instances0.setClassIndex(0);
      textDirectoryLoader0.setOutputFilename(false);
      String string0 = "";
      DenseInstance denseInstance0 = new DenseInstance(0);
      double[] doubleArray0 = new double[2];
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      instances0.resample(mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.toMatrixString("@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-34);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, (String) null);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has beenspecified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "C16,)&`g%\"WN8sJ";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "C16,)&`g%\"WN8sJ";
      try { 
        Evaluation.evaluateModel("C16,)&`g%\"WN8sJ", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name C16,)&`g%\"WN8sJ.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(1348.0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1348
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      try { 
        CostMatrix.parseMatlab("*b =");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-27);
      instances0.stream();
      MockRandom mockRandom0 = new MockRandom((-978L));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "!8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(112);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, (-1.7976931348623157E308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)51;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.weightedPrecision();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setClassIndex(0);
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(1);
      mockRandom0.doubles();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances1 = instances0.resample(mockRandom0);
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.weightedRecall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom1 = new MockRandom((-1L));
      instances0.resample(mockRandom1);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      stringArray0[1] = "^7XY/RA3 m]S(s";
      stringArray0[2] = "@data";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@relation";
      stringArray0[6] = "ns:";
      stringArray0[7] = ".arff";
      stringArray0[8] = "@data";
      TextDirectoryLoader.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      textDirectoryLoader0.setOutputFilename(false);
      double double0 = evaluation0.numTrueNegatives(239);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate((-2588));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      ArffLoader arffLoader0 = new ArffLoader();
      Random.setNextRandom((-2));
      CostMatrix costMatrix0 = new CostMatrix(7);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DiscreteEstimator discreteEstimator0 = new DiscreteEstimator((byte)14, 3047.2773227);
      Capabilities capabilities0 = discreteEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption((String) null, (-997));
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
