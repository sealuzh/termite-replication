/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:17:14 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.raw.data.BaseDataFileFactory;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(363, "SELECT  FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.countProviders();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT  FROM ", defaultDBTable0, dBDataType0, integer0, integer0);
      MockFile mockFile0 = new MockFile("SELECT  FROM ", "SELECT  FROM ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create materialized view";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "$>:+RkTa", true, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.delete();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BaseDataFileFactory baseDataFileFactory0 = new BaseDataFileFactory();
      baseDataFileFactory0.getIdentifier();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Te;PB,?M";
      stringArray1[1] = "SELECT  FROM ";
      stringArray1[2] = "SELECT  FROM ";
      stringArray1[3] = "SELECT  FROM ";
      stringArray1[4] = "SELECT  FROM ";
      stringArray1[5] = "SELECT  FROM ";
      stringArray1[6] = "SELECT  FROM ";
      stringArray1[7] = "SELECT  FROM ";
      stringArray1[8] = "SELECT  FROM ";
      String string0 = SQLUtil.renderColumnListWithTableName("SELECT  FROM ", stringArray1);
      assertEquals("SELECT  FROM .Te;PB,?M, SELECT  FROM .SELECT  FROM , SELECT  FROM .SELECT  FROM , SELECT  FROM .SELECT  FROM , SELECT  FROM .SELECT  FROM , SELECT  FROM .SELECT  FROM , SELECT  FROM .SELECT  FROM , SELECT  FROM .SELECT  FROM , SELECT  FROM .SELECT  FROM ", string0);
      
      boolean boolean0 = SQLUtil.isQuery("]vx_e;A4U85w:38WFg");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "\u0006#3px90vnv4n<tn");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rename@)5ei;o}{ k0`");
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-194494081), "exec");
      Integer integer0 = new Integer((-194494081));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      TableContainer tableContainer0 = new TableContainer("exec");
      Boolean.valueOf("exec");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.normalize("exec", false);
      System.setCurrentTimeMillis((-194494081));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "exec";
      stringArray0[1] = "exec";
      stringArray0[2] = "exec";
      stringArray0[3] = "exec";
      stringArray0[4] = "exec";
      stringArray0[5] = "exec";
      stringArray0[6] = "exec";
      stringArray0[7] = "exec";
      stringArray0[8] = "exec";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2014023220140038
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT  FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT  FROM ", defaultDBTable0, 628, "~-$fy3vd");
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("SELECT  FROM  ~-$FY3VD NOT NULL", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      stringBuilder0.reverse();
      DBDataType.getInstance((-4565), " NULL");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(" NULL");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" NULL", true, defaultDBTable2, (String[]) null, defaultDBTable2, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \" NULL\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
      
      String string1 = SQLUtil.renderValue("/*");
      assertEquals("'/*'", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.isDDL(" /* ");
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "insertcallex`c";
      stringArray0[1] = "";
      stringArray0[2] = "insertcallex`c";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "cSuli";
      SQLUtil.join("insertcallex`c", "", stringArray0, "ALTER TABLE ", "", stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=bJA\"_>7h\"ORDZR-", (DBTable) null, 1750, "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBTable dBTable0 = null;
      String string1 = "p&Ny{rk-J@{";
      DBDataType dBDataType0 = DBDataType.getInstance(1650, "p&Ny{rk-J@{");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("", "-DZFI[P\"", "-DZFI[P\"");
      assertEquals("", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("REGEXP");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "create unique indexinner";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-194494081), "exec");
      Integer integer0 = new Integer((-194494081));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Expected time to be colon-separated, got '", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn1.isEquivalent(defaultDBTable0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      File file0 = FileUtil.canonicalFile(" or ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("3QlU\"qey-p#");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(363, "SELECT  FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT  FROM ", defaultDBTable0, dBDataType0, integer0, integer0);
      MockFile mockFile0 = new MockFile("SELECT  FROM ", "SELECT  FROM ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BaseDataFileFactory baseDataFileFactory0 = new BaseDataFileFactory();
      baseDataFileFactory0.getIdentifier();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.isDML(" /* ");
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      SQLUtil.typeAndName(dBCatalog0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "create materialized view}69owi;hoqpmo*+b";
      DBDataType dBDataType0 = DBDataType.getInstance((-494), "create materialized view}69owi;hoqpmo*+b");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create materialized view}69owi;hoqpmo*+b");
      defaultDBTable1.countProviders();
      Integer integer0 = new Integer((-494));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}69owi", defaultDBTable1, dBDataType0, integer0, integer0);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "giz_kdM##_Z^].";
      stringArray1[1] = "updateselnctwcl7te";
      stringArray1[2] = "omqL)fC$%f";
      stringArray1[3] = "e4fOF~c";
      stringArray1[4] = "org.apache.derby.impl.sql.compile.GroupByNode";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create sequ";
      String string0 = SQLUtil.leftJoin("create sequ", stringArray0, "fn!7?ny\u0003m|l74v{^{2", "create sequ", stringArray0);
      assertEquals("left join fn!7?ny\u0003m|l74v{^{2 as create sequ on create sequ.create sequ = create sequ.create sequ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("left join fn!7?ny\u0003m|l74v{^{2 as create sequ on create sequ.create sequ = create sequ.create sequ");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create sequ", defaultDBTable0, (-2869), "L}gPN");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create sequ L}GPN NULL", string1);
      
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "ALTER TABLE ", true, "create sequ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("create sequ NOT NULL", string2);
      
      StringBuilder stringBuilder0 = new StringBuilder("#>6=aX)4");
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 'r';
      charArray0[2] = 'P';
      stringBuilder0.append(charArray0);
      StringBuilder stringBuilder1 = stringBuilder0.append((long) (-2869));
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      String string3 = SQLUtil.constraintName(dBNotNullConstraint0);
      assertEquals("CONSTRAINT \"ALTER TABLE \" ", string3);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string4 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("create sequ, create sequ, create sequ", string4);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "tan(double)";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("tan(double)");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Illegal column type format: ";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("FOREIGN KEY ", defaultDBTable0, 750, "tan(double)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"double\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLUtil.isDDL("crate uniue index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("crate uniue index");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "crate uniue index";
      stringArray0[1] = "crate uniue index";
      stringArray0[2] = "crate uniue index";
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)63;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[0] = (byte) (-107);
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("crate uniue index", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte)88);
      MockPrintStream mockPrintStream0 = new MockPrintStream("crate uniue index");
      mockPrintStream0.println(true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "crate uniue index", (Object[]) stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("constraint", false, "crate uniue index", "constraint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "etString(loW,Itring,int,int";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("etString(loW,Itring,int,int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: etString(loW,Itring,int,int
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBTable dBTable0 = null;
      int int0 = (-1747767208);
      DBDataType.getInstance((-1747767208), "(NBsxy!t>zueN");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(NBsxy!t>zueN", (DBTable) null, (-1747767208), "(NBsxy!t>zueN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (NBsxy!t>zueN
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "alter tableor", (String[]) null, "alter tableor", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Character character0 = new Character('U');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'U'", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      String string0 = "alter materialized viewpwnyl,b";
      // Undeclared exception!
      try { 
        SQLUtil.join(":Wdsy?#j2C+HiH", ":Wdsy?#j2C+HiH", stringArray0, "alter materialized viewpwnyl,b", "alter materialized viewpwnyl,b", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5402095130751898
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "calli";
      String string0 = SQLUtil.join("calli", "create unique indexexec", stringArray0, "create unique indexexec", "create unique indexexec", stringArray0);
      assertEquals("calli join create unique indexexec as create unique indexexec on create unique indexexec.calli = create unique indexexec.calli", string0);
      
      String string1 = SQLUtil.renderValue("calli");
      assertEquals("'calli'", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique indexexec", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (calli)", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "columnNames == null\n";
      stringArray0[1] = "columnNames == null\n";
      stringArray0[2] = "columnNames == null\n";
      stringArray0[3] = "columnNames == null\n";
      stringArray0[4] = "columnNames == null\n";
      stringArray0[5] = "columnNames == null\n";
      stringArray0[6] = "columnNames == null\n";
      Boolean.valueOf("columnNames == null\n");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "columnNames == null\n";
      stringArray1[1] = "columnNames == null\n";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("call", stringArray0, "columnNames == null\n", "n<A", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("*nK9)k^eVh", "exec2bqwgdye?w<h6(f|6", "exec2bqwgdye?w<h6(f|6");
      assertEquals("*nK9)k^eVh", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "unknown constraint type", false, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1840700267), "//");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[%c#= n}n([1", defaultDBTable0, dBDataType0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column [%c#= n}n([1", string0);
      assertNotNull(string0);
      
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("execute", false);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("select", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "2B(WGdYe?7w%,U(F$6";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("2B(WGdYe?7w%,U(F$6", defaultDBTable0, 39, "2B(WGdYe?7w%,U(F$6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 2B(WGdYe?7w%,U(F$6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--";
      stringArray0[1] = "--";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "--", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insert");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("M%04+IY");
      stringBuilder0.reverse();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      columnDescriptorList0.add((Object) integer0);
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("!kFaG</5+/[(C'U", true);
      assertEquals("! kFaG < / 5 + / [ (C 'U'", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join(",", (String) null, stringArray0, "info.BUILD_ID", "info.BUILD_ID", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "42001";
      stringArray0[1] = "42001";
      stringArray0[2] = "42001";
      stringArray0[3] = "`]dH8D\"Xb*\"";
      stringArray0[4] = "42001";
      stringArray0[5] = "42001";
      stringArray0[6] = "42001";
      stringArray0[7] = "42001";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("42001", stringArray0, "42001", "+k:^", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("call", false, (String) null, "call");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT call CHECK call", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5441310817026408
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("cSuli", "dHus>Od5/&2@&[\u0002JJ8", stringArray0, "dHus>Od5/&2@&[\u0002JJ8", "dHus>Od5/&2@&[\u0002JJ8", stringArray0);
      assertEquals("cSuli join dHus>Od5/&2@&[\u0002JJ8 as dHus>Od5/&2@&[\u0002JJ8 on dHus>Od5/&2@&[\u0002JJ8.null = dHus>Od5/&2@&[\u0002JJ8.null", string0);
      
      Random.setNextRandom(439);
      boolean boolean0 = SQLUtil.isProcedureCall("gPsHe}3b");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop tableinternal_stopslave", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("gPsHe}3b", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("C/HECK ", "C/HECK ", (String[]) null, "C/HECK ", "C/HECK ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("@U+j'4lo$f_u", compositeDBObject0);
      tableContainer0.getTable("wH*lI");
      DBDataType dBDataType0 = DBDataType.getInstance((-244), "wH*lI");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("derby.storage.logBufferSize", (DBTable) null, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("wH*lI", (DBTable) null, dBDataType0);
      assertFalse(defaultDBColumn1.isVersionColumn());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLUtil.isDML("X%04+IY");
      SQLUtil.normalize("*/", false);
      String string0 = "";
      SQLUtil.isDML("h=#A:6(OtV&Zx\"!");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("executetruncatecan't set query timeout negative", "setParameterMode", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("lgV? !pVKu?+P VbV+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'executetruncatecan't set query timeout negative'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = SQLUtil.isProcedureCall("calli");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execute");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "setString(long,String,int,int)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setString(long,String,int,int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"long\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("executeorg.apache.derby.impl.sql.compile.hastablefunctionvisitor", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.937566794583933
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize(")ml-+\"vdX9s%e", false);
      assertEquals(") ml - + \"vdX9s%e\"", string0);
      
      SQLUtil.removeComments(") ml - + \"vdX9s%e\"");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")ml-+\"vdX9s%e";
      stringArray0[1] = ") ml - + \"vdX9s%e\"";
      stringArray0[2] = ") ml - + \"vdX9s%e\"";
      stringArray0[3] = "L0xDd|";
      stringArray0[4] = ")ml-+\"vdX9s%e";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ") ml - + \"vdX9s%e\"", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \") ml - + \"vdX9s%e\"\" PRIMARY KEY ()ml-+\"vdX9s%e, ) ml - + \"vdX9s%e\", ) ml - + \"vdX9s%e\", L0xDd|, )ml-+\"vdX9s%e)", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = SQLUtil.normalize("2B(WGdYe?7w%,U(F$6", true);
      assertEquals("2B (WGdYe ? 7w %, U (F $ 6", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = SQLUtil.normalize("TZCJ{?)v6vsj", false);
      assertEquals("TZ  CJ { ?) v6vsj", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("CHECK ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLUtil.removeComments("select");
      SQLUtil.isQuery("select");
      try { 
        Integer.valueOf(" ZA >N,?;$=L>yfW<P", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "alter tableor";
      String string1 = "select into";
      SQLUtil.isQuery("select into");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tableor");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("select into");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'select into' not found in table 'alter tableor'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I}vf", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "I}vf";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("I}vf", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      boolean boolean0 = SQLUtil.isQuery("@DrIqVlCASp6[Bjoi.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I}vf", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jKVV$0iaiY,i}GC(F";
      stringArray0[1] = "jKVV$0iaiY,i}GC(F";
      stringArray0[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "jKVV$0iaiY,i}GC(F", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("jKVV$0iaiY,i}GC(F", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable1.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8bNYp'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYp'}$.s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(180);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      assertEquals("s8bNYp'}$.s", defaultDBTable0.getName());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "columnNames == null\n";
      String[] stringArray0 = new String[8];
      stringArray0[1] = "columnNames == null\n";
      stringArray0[2] = "columnNames == null\n";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":.*");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[3], true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(46);
      String string1 = "truncate";
      MockPrintStream mockPrintStream0 = new MockPrintStream("truncate");
      mockPrintStream0.println(true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(mockPrintStream0, false, "columnNames == null\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // columnNames == null
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "alter materialized view";
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "Unknown constraint type: ";
      String string1 = "/*";
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.join("?oLsr1<musF$", "?oLsr1<musF$", stringArray1, "?oLsr1<musF$", "c'wP@", stringArray0);
      assertEquals("?oLsr1<musF$ join ?oLsr1<musF$ as c'wP@ on ", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "$";
      stringArray0[1] = "$";
      stringArray0[2] = "$";
      stringArray0[3] = "$";
      stringArray0[4] = "$";
      stringArray0[5] = "$";
      stringArray0[6] = "$";
      String[] stringArray1 = new String[2];
      stringArray1[0] = ", but is: ";
      stringArray1[1] = "$";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("$", stringArray0, "drop table", ", but is: ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "s8bNYp'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYp'}$.s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.7598407318671061
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLUtil.normalize("g&Qb&3M|<m-%*OH~|", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = SQLUtil.normalize("k?.wdepjx#", false);
      assertEquals("k ?.wdepjx #", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(47, " REFEREN>CES ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFEREN>CES ", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" REFEREN>CES   REFEREN>CES (2,2) NULL", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("P.]>)Ipe@H[KH&gD]Y");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      try { 
        Integer.valueOf("", 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 1 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "call";
      stringArray0[1] = "call";
      stringArray0[2] = "call";
      stringArray0[3] = "call";
      stringArray0[4] = "call";
      stringArray0[5] = "call";
      stringArray0[6] = "call";
      stringArray0[7] = "mGfq)Ds/NbB-^PrFp";
      stringArray0[8] = "call";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("call", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (call, call, call, call, call, call, call, mGfq)Ds/NbB-^PrFp, call) REFERENCES null(call, call, call, call, call, call, call, mGfq)Ds/NbB-^PrFp, call)", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[4] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[5] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.impl.sql.compile.CreateSchemaNode", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      PrintWriter printWriter0 = mockPrintWriter0.append('x');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.renderValue(stringArray0[1]);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("$I</]+:ofCMc]<,nwCv", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals(".$I</]+:ofCMc]<,nwCv", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("mW9A4yDC`X<;l|OGo/");
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("mW9A4yDC`X<;l|OGo/", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "call";
      stringArray0[1] = "select into";
      stringArray0[2] = "$I</]+:ofCMc]<,nwCv";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT  FROM ", false, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "select into");
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "SELECT  FROM ", 292, 292);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 292, end 292, s.length() 13
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter ", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("$I</]+:ofCMc]<,nwCv", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT $I</]+:ofCMc]<,nwCv ", stringBuilder0.toString());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("9L2=Wz/B7*", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("create unique indexalter tablecrate uniue index");
      SQLUtil.addOptionalCondition("create unique indexalter tablecrate uniue index", stringBuilder0);
      assertEquals("create unique indexalter tablecrate uniue index or create unique indexalter tablecrate uniue index", stringBuilder0.toString());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter tableor");
      SQLUtil.addRequiredCondition("\u0001\u0120", stringBuilder0);
      assertEquals("alter tableor and \u0001\u0120", stringBuilder0.toString());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("Batch updates should be run with auto-commit disabled.", stringBuilder0);
      assertEquals("Batch updates should be run with auto-commit disabled.", stringBuilder0.toString());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.leftJoin("update", stringArray0, "0Zzj%", "update", stringArray0);
      assertEquals("left join 0Zzj% as update on update.null = update.null and update.null = update.null and update.null = update.null and update.null = update.null and update.null = update.null and update.null = update.null and update.null = update.null and update.null = update.null", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("0Zzj%", stringArray0, (String) null, "-j.y:8\"", stringArray0);
      assertEquals("left join null as -j.y:8\" on ", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(".RdK:'cmJ", (String[]) null, "renamecan't set query timeout negative", ".RdK:'cmJ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-194494081), "exec");
      Integer integer0 = new Integer((-194494081));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn1.isEquivalent(defaultDBTable0);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      TableContainer tableContainer0 = new TableContainer("exec");
      defaultDBColumn0.isEquivalent(tableContainer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = " NULL";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-4565), " NULL");
      Integer integer0 = new Integer((-4565));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NULL", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getObjectID();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewcalli");
      DBDataType dBDataType0 = DBDataType.getInstance(25165824, "create materialized viewcalli");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("select(", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE MATERIALIZED VIEWCALLI", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(42121, "UDT");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("S", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (DBDataType) null, (Integer) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "create unique indexexec";
      stringArray0[1] = "create unique indexexec";
      stringArray0[2] = "create unique indexexec";
      stringArray0[3] = "create unique indexexec";
      stringArray0[4] = "create unique indexexec";
      stringArray0[5] = "create unique indexexec";
      stringArray0[6] = "create unique indexexec";
      stringArray0[7] = "create unique indexexec";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "create unique indexexec";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(42121, "_q9\"'");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLUtil.isDDL("create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "create unique index";
      stringArray0[2] = "create unique index";
      stringArray0[3] = "create unique index";
      stringArray0[5] = "create unique index";
      stringArray0[6] = "create unique index";
      stringArray0[7] = "create unique index";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'O' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tableorg.apac");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("`pSG`xmo(@vWxjTe");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("!}B'");
      assertNull(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("rename");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionupdate");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "alter t[blXor";
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "XBM08.D";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.9254455824627208
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop tablelt?'^vh/?1q, j-");
      String string0 = SQLUtil.normalize(")ml-+\"vdX9s%e", false);
      assertEquals(") ml - + \"vdX9s%e\"", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop tablelt?'^vh/?1q, j-";
      stringArray0[1] = ")ml-+\"vdX9s%e";
      stringArray0[2] = ")ml-+\"vdX9s%e";
      stringArray0[3] = "F:xF^b{%r";
      stringArray0[4] = "`uj:HS_";
      stringArray0[5] = ") ml - + \"vdX9s%e\"";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (drop tablelt?'^vh/?1q, j-, )ml-+\"vdX9s%e, )ml-+\"vdX9s%e, F:xF^b{%r, `uj:HS_, ) ml - + \"vdX9s%e\")", string1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "drop materialized view";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view");
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[13];
      Boolean boolean0 = Boolean.FALSE;
      String string0 = SQLUtil.innerJoin(stringArray0[5], stringArray0, stringArray0[2], stringArray0[4], stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.join("10", "10", stringArray0, "10", "alter table", stringArray0);
      assertEquals("10 join 10 as alter table on 10.null = alter table.null and 10.null = alter table.null and 10.null = alter table.null and 10.null = alter table.null and 10.null = alter table.null and 10.null = alter table.null and 10.null = alter table.null and 10.null = alter table.null and 10.null = alter table.null and 10.null = alter table.null", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("Hn`*mXP", "Hn`*mXP", stringArray0, "calli", "Hn`*mXP", stringArray0);
      assertEquals("Hn`*mXP join calli as Hn`*mXP on Hn`*mXP.null = Hn`*mXP.null", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(")ml-+\"vdX9s%e", (String[]) null, "alter table", ")ml-+\"vdX9s%e", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.innerJoin("create unique indexexec", stringArray0, "$", "$", stringArray0);
      assertEquals("$ as $ on create unique indexexec.null = $.null", string0);
  }
}
