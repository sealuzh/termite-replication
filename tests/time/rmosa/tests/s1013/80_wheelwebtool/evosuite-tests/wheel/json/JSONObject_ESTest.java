/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:19:12 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.440292171527223
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      JSONObject jSONObject0 = new JSONObject(object0);
      long long0 = 2314L;
      JSONObject jSONObject1 = jSONObject0.put("b[}k0)$Xr0urmLva^Y", 2314L);
      jSONObject1.getLong("b[}k0)$Xr0urmLva^Y");
      jSONObject1.remove("A JSONObject text must end with '}'");
      jSONObject1.length();
      int int0 = 3863;
      jSONObject0.toString(3863);
      jSONObject0.remove("gettoString");
      String string0 = "f2Ly=LQP%(X@nJf|";
      jSONObject1.optString("f2Ly=LQP%(X@nJf|", (String) null);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString((-1110), 328);
      try { 
        jSONObject0.getString("getgetBoolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetBoolean\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1000039501699495
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Long long0 = new Long((byte) (-1));
      JSONObject jSONObject1 = jSONObject0.putOpt(",:]}/\"[{;=#", long0);
      jSONObject1.getLong(",:]}/\"[{;=#");
      JSONTokener jSONTokener0 = new JSONTokener(",:]}/\"[{;=#");
      JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject((Object) jSONTokener0);
      jSONObject2.optInt("PvC", (int) (byte) (-1));
      jSONObject2.optDouble("P#G3");
      JSONTokener jSONTokener1 = new JSONTokener("\f");
      String string0 = JSONObject.quote("PhB>=y");
      assertEquals("\"PhB>=y\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9619408850766493
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.getNames((Object) "&=&6ubObV");
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("&=&6ubObV", hashMap0);
      boolean boolean0 = jSONObject0.has("&=&6ubObV");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4457086174148452
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float(2955.3954064145896);
      Float.sum(454.0F, (-1270.0F));
      Float.sum(0.0F, 0.0F);
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(65);
      JSONObject.doubleToString(65);
      jSONObject0.optJSONArray("{}");
      String string0 = "] is not a number.";
      jSONObject0.has("] is not a number.");
      jSONObject0.optJSONArray("] is not a number.");
      JSONObject jSONObject1 = jSONObject0.put("{}", 0L);
      jSONObject0.put("65", (double) 65);
      JSONObject jSONObject2 = jSONObject1.put("Expected a ':' after a key", (Object) jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v<{-]4,oJ/i";
      stringArray0[1] = "JSONArray[";
      JSONArray jSONArray2 = new JSONArray();
      JSONArray jSONArray3 = jSONObject0.toJSONArray(jSONArray1);
      assertNotSame(jSONArray3, jSONArray0);
      assertEquals(1, jSONArray3.length());
      assertNotNull(jSONArray3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4417779176503545
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[3];
      Long.getLong("/nDV)?'kD[");
      stringArray0[0] = "/nDV)?'kD[";
      stringArray0[1] = "] is not a JSONArray.";
      stringArray0[2] = "000";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Long.toUnsignedString(0L);
      Long long1 = new Long(3703L);
      Long.sum(0L, 3703L);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", long1);
      jSONObject1.optLong("", 3703L);
      JSONObject.getNames(jSONObject0);
      jSONObject1.optString("oyYrO.6#=m/8MS:[G", "cop");
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONArray.", 8);
      JSONObject jSONObject3 = jSONObject1.put("000", (Collection) null);
      jSONObject2.toString();
      JSONObject jSONObject4 = jSONObject2.append("t$UIX|+", "cop");
      jSONObject4.accumulate(" of ", "cop");
      jSONObject0.getJSONArray("000");
      jSONObject1.optLong("?)YB;WL ?");
      jSONObject3.put("{\"java.lang.String@0000000007\":wheel.json.JSONArray@0000000006,\"java.lang.String@0000000002\":java.lang.Integer@0000000005}", 8);
      try { 
        jSONObject0.getJSONObject(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.076925319807672
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double double0 = new Double((-2769.38357));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-860));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("java.lang.Double@0000000001", integer0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("java.lang.Double@0000000001");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Double@0000000001", (long) (-860));
      boolean boolean0 = jSONObject1.has("j!`#6 ds");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.toString(57, 39);
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\n                                                                                                \"java.lang.String@0000000004\": \"java.lang.StringBuffer@0000000005\",\n                                                                                                \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n                                       }");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]\"\"I^l36l,%l", "]\"\"I^l36l,%l");
      boolean boolean0 = jSONObject1.optBoolean("]\"\"I^l36l,%l", false);
      HashMap<Boolean, Object> hashMap1 = new HashMap<Boolean, Object>();
      Long long0 = new Long(4141L);
      String[] stringArray0 = JSONObject.getNames((Object) "]\"\"I^l36l,%l");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = jSONObject0.isNull("]\"\"I^l36l,%l");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-50));
      JSONObject.numberToString(byte0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Byte@0000000001";
      stringArray0[1] = "java.lang.Byte@0000000001";
      stringArray0[2] = "java.lang.Byte@0000000001";
      stringArray0[3] = "java.lang.Byte@0000000001";
      stringArray0[4] = "java.lang.Byte@0000000001";
      stringArray0[5] = "java.lang.Byte@0000000001";
      stringArray0[6] = "java.lang.Byte@0000000001";
      JSONObject jSONObject0 = new JSONObject("java.lang.Byte@0000000001", stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Byte@0000000001", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]\"\"I^l36l,%l";
      jSONObject0.putOpt("]\"\"I^l36l,%l", object0);
      Byte byte0 = new Byte((byte) (-49));
      Byte byte1 = new Byte((byte) (-49));
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Boolean boolean0 = new Boolean("]\"\"I^l36l,%l");
      hashMap0.put((Double) null, boolean0);
      try { 
        jSONObject0.getBoolean("]\"\"I^l36l,%l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]\\\"\\\"I^l36l,%l\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2829875394034933
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.keys();
      jSONObject0.toString((int) (byte) (-1), (int) (byte) (-1));
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      Float float0 = new Float(4330.4126F);
      JSONObject.valueToString(float0);
      JSONObject.valueToString(jSONObject1);
      jSONObject0.optLong("[BeQ$@=H8;4");
      assertEquals(1, jSONObject0.length());
      
      String string0 = jSONObject1.optString("Mp]l3kKb!d^EMVp");
      assertEquals("", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "E$D|");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 687, 687);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = (byte) (-16);
      Byte byte1 = new Byte((byte) (-16));
      Byte.toUnsignedInt((byte) (-16));
      JSONObject jSONObject0 = new JSONObject(byte1);
      jSONObject0.keys();
      jSONObject0.toString(10, (int) (byte) (-1));
      String string0 = "{";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("]\"\"I^l36l,%l", "BTnrvWdRj");
      jSONObject1.getString("]\"\"I^l36l,%l");
      jSONObject1.optBoolean("]\"\"I^l36l,%l", false);
      try { 
        jSONObject1.getJSONObject("\".Ha~a.)S+'Bi6'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\".Ha~a.)S+'Bi6'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.099633990865473
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Long long0 = new Long(0L);
      jSONObject0.putOpt(",:]}/\"[{;=#", long0);
      Byte byte1 = new Byte((byte) (-1));
      Byte.compare((byte)37, (byte)37);
      jSONObject0.optInt("is", 0);
      jSONObject0.put(",:]}/\"[{;=#", (-137L));
      jSONObject0.toString(0, 0);
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\",\n\"java.lang.String@0000000004\": java.lang.Long@0000000007\n}");
      JSONTokener jSONTokener1 = new JSONTokener(",:]}/\"[{;=#");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,:]}/\"[{;=#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(23);
      hashMap0.put((String) null, integer0);
      JSONObject.getNames(jSONObject0);
      Integer integer1 = new Integer((-1361));
      Integer.getInteger((String) null, (Integer) null);
      Integer.sum((-1361), 92);
      hashMap0.put("d/!/<go", (Integer) null);
      Integer integer2 = new Integer((-1269));
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("d/!/<go", integer1, biFunction0);
      jSONObject0.put("u ", (Map) hashMap0);
      JSONObject.quote(" at character ");
      try { 
        jSONObject0.append("u ", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[u ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.doubleToString((-4391.91162657301));
      StringWriter stringWriter0 = new StringWriter(160);
      JSONObject jSONObject1 = jSONObject0.put("li", (Map) hashMap0);
      jSONObject1.toJSONArray(jSONArray0);
      stringWriter0.append('&');
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2027, 2027);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.keys();
      jSONObject0.toString(2027, 2200);
      Integer integer0 = new Integer(2027);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{A~vg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {A~vg
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject.valueToString(linkedList0, (-1755), (-1755));
      Float float0 = new Float(1368.0F);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "par";
      stringArray0[3] = "par";
      stringArray0[4] = "[]";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getJSONObject("U??,z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U??,z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.87565606324755
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = ",:]}/\\\"[{;=#";
      Long long0 = new Long(0L);
      jSONObject0.putOpt(",:]}/\"[{;=#", long0);
      Byte byte1 = new Byte((byte) (-1));
      jSONObject0.getInt(",:]}/\"[{;=#");
      Byte.compare((byte)37, (byte)37);
      jSONObject0.put(",:]}/\"[{;=#", (-137L));
      Byte.toUnsignedInt((byte)80);
      jSONObject0.toString(0, 0);
      Integer integer0 = new Integer(660);
      Short short0 = new Short((short)1433);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(57, (-2044));
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{>94$?)vVb90=v");
      jSONTokener0.skipTo('I');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 14 of {>94$?)vVb90=v
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(467L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = "r<_";
      jSONObject0.putOpt("r<_", "r<_");
      try { 
        jSONObject0.getLong("r<_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r<_\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = ",:]}/\\\"[{;=#";
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt(",:]}/\"[{;=#", long0);
      jSONObject1.getLong(",:]}/\"[{;=#");
      jSONObject1.optDouble(",:]}/\"[{;=#");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject1.put("istoUpperCase", (Map) hashMap0);
      try { 
        jSONObject0.getInt("istoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUpperCase\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put(",\n", 389L);
      jSONObject1.optInt(",\n");
      jSONObject1.optBoolean("LB[ )jFL0Ie+", true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject((Map) null);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject2.toJSONArray(jSONArray1);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("islongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of islongValue
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(90, 1113);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", 1113);
      jSONObject1.length();
      int int0 = jSONObject1.getInt("{}");
      assertEquals(1113, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(57, 24);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{>94$?)v#b90=v");
      jSONTokener0.skipTo('2');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {>94$?)v#b90=v
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Long long0 = new Long((-1371L));
      jSONObject0.putOpt(",:]}/\"[{;=#", byte0);
      double double0 = jSONObject0.optDouble(",:]}/\"[{;=#");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("Y+S:ZAfiNF?YwQ{", (double) 2029);
      Integer integer0 = Integer.getInteger("Y+S:ZAfiNF?YwQ{", 125);
      JSONObject jSONObject2 = jSONObject0.accumulate("Y+S:ZAfiNF?YwQ{", "Y+S:ZAfiNF?YwQ{");
      jSONObject2.accumulate("Y+S:ZAfiNF?YwQ{", integer0);
      jSONObject1.length();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("]\"\"I^l36l,%l", "BTnrvWdRj");
      boolean boolean0 = jSONObject1.optBoolean("]\"\"I^l36l,%l", false);
      assertFalse(boolean0);
      
      String string0 = jSONObject1.optString("]\"\"I^l36l,%l", (String) null);
      assertNotNull(string0);
      
      boolean boolean1 = jSONObject1.optBoolean("_6^ x>W<)9");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Integer integer0 = Integer.getInteger("7j", 2241);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7j";
      stringArray0[1] = "toU";
      stringArray0[2] = "7j";
      stringArray0[3] = "+Hi7$%";
      stringArray0[4] = "+Hi7$%";
      stringArray0[5] = "+Hi7$%";
      stringArray0[6] = "7j";
      stringArray0[7] = "7j";
      stringArray0[8] = "+Hi7$%";
      JSONObject jSONObject0 = new JSONObject("int", stringArray0);
      Integer integer1 = new Integer(2241);
      JSONObject jSONObject1 = jSONObject0.accumulate("7j", integer1);
      jSONObject0.append("+Hi7$%", "+Hi7$%");
      double double0 = jSONObject1.optDouble("7j", 1034.421);
      assertEquals(2241.0, double0, 0.01);
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      jSONObject1.length();
      Object object0 = jSONObject1.opt("7j");
      assertTrue(object0.equals((Object)integer0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      Short.toUnsignedInt((short) (-225));
      Short.toUnsignedInt((short)2470);
      JSONObject.valueToString(short1);
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0);
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      Float float0 = new Float(2567.426F);
      hashMap0.getOrDefault((Object) null, float0);
      Float float1 = new Float((double) (short)0);
      hashMap0.put((JSONArray) null, float1);
      Float.sum(161.3515F, 0L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float2 = new Float((float) (short) (-225));
      hashMap0.replace(jSONArray0, (Float) null, float2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("java.lang.Short@0000000001");
      jSONObject0.names();
      String string0 = "getdecode";
      jSONObject0.put("getdecode", (Collection) linkedList0);
      jSONObject0.optJSONArray("getdecode");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((short) (-225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte) (-53));
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "]\"\"I336,l";
      JSONObject jSONObject1 = jSONObject0.putOpt("]\"\"I336,l", object0);
      try { 
        jSONObject1.getLong("]\"\"I336,l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]\\\"\\\"I336,l\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float(3565.7F);
      Float float1 = new Float(3565.7F);
      JSONObject jSONObject0 = new JSONObject(float1);
      jSONObject0.put("L&8U'sBScc:2N", false);
      String string0 = JSONObject.numberToString(float1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("Substring bounds error", "Substring bounds error");
      try { 
        jSONObject1.getJSONObject("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Double double0 = new Double((-905.83096));
      Double.max((-905.83096), (-905.83096));
      JSONObject.testValidity(double0);
      String string0 = JSONObject.valueToString((Object) null, (-1029), (-533));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONTokener jSONTokener0 = new JSONTokener("0");
      jSONTokener0.nextValue();
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optDouble("0");
      JSONObject jSONObject1 = jSONObject0.put("0", 0.0);
      jSONObject0.getDouble("0");
      long long0 = jSONObject1.optLong("%SO)rN!:tBWUY;");
      assertEquals(4, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4442371584913811
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.pollFirst();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optString((String) null, (String) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.toString((-341), 46);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2795643472768354
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.has("wtt#&Q7E%[-S");
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(hashMap0, 128, 128);
      assertEquals("{}", string0);
      
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", (-3457.3073));
      jSONObject0.getDouble("{}");
      long long0 = jSONObject1.optLong("{}");
      assertEquals((-3457L), long0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Float float0 = new Float(1.0F);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nZkv:{MsbgiV";
      stringArray0[1] = "_pwv[a";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("_pwv[a", false);
      boolean boolean0 = jSONObject1.getBoolean("_pwv[a");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("Y+S:ZAfiNF?YwQ{", (double) 2029);
      Integer.getInteger("Y+S:ZAfiNF?YwQ{", 125);
      JSONObject jSONObject1 = jSONObject0.accumulate("Y+S:ZAfiNF?YwQ{", "Y+S:ZAfiNF?YwQ{");
      jSONObject1.get("Y+S:ZAfiNF?YwQ{");
      JSONObject.quote("] is not a number.");
      Integer integer0 = new Integer(9);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("A JSONArray text must start with '['");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of A JSONArray text must start with '['
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      short short0 = (short)13;
      Short short1 = new Short((short)13);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 8448, (short)13);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(short1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      HashMap<Integer, Boolean> hashMap1 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject.valueToString(jSONObject0, 46, 46);
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONObject[", (Object) null);
      try { 
        jSONObject1.getJSONObject("o+-rN<Hau#3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o+-rN<Hau#3\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject.quote("f7go!Usn#/??y-@]T");
      HashMap<Short, Long> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Short, Long>((-838), (-838));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -838
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, (-2063.547015323474));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Double double0 = new Double(Double.NaN);
      Double.max(0.0, (-789.9280602));
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.11477503786003
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("{}", 1061);
      String string0 = "e~Ba6\\9,(x";
      try { 
        jSONObject0.getLong("e~Ba69,(x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"e~Ba69,(x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8788316745527265
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-1));
      JSONObject jSONObject0 = new JSONObject(byte0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt(",:]}/\"[{;=#", long0);
      jSONObject1.getLong(",:]}/\"[{;=#");
      Byte.compare((byte)37, (byte)37);
      Byte byte1 = new Byte((byte)37);
      jSONObject1.append("par", byte1);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.keys();
      jSONObject2.toString((-286));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('S');
      CharBuffer.allocate(65);
      stringWriter1.append((CharSequence) "par");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-99));
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(byte0, boolean0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Integer integer0 = new Integer(3638);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(1944.8F);
      JSONObject jSONObject1 = jSONObject0.append("pc", float0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Integer.getInteger((String) null, 63);
      Long long0 = new Long(0L);
      try { 
        jSONObject0.append((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 1.0F);
      HashMap<Short, Long> hashMap1 = new HashMap<Short, Long>(2029, 1.0F);
      Object object0 = new Object();
      JSONObject.valueToString(hashMap1, (-3245), 2029);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of T
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      String string0 = JSONObject.doubleToString((-1253.1395));
      assertEquals("-1253.1395", string0);
      
      String string1 = JSONObject.valueToString(hashMap0, 10, 10);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.putOpt("42Gd#'2H{dk1", "");
      Byte byte0 = new Byte((byte) (-53));
      // Undeclared exception!
      jSONObject1.toString(1582, 5331);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = new Long(2024);
      Long long1 = new Long(2024);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.putOpt("getrotateLeft", boolean0);
      // Undeclared exception!
      jSONObject0.toString(3336, 3336);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(100, 3638);
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      jSONTokener0.nextValue();
      JSONTokener jSONTokener1 = new JSONTokener("[]");
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer(3638);
      Short short0 = new Short((short)23454);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("toS", stringArray0);
      Short short1 = new Short((short)23454);
      JSONObject jSONObject1 = jSONObject0.put("toS", (Object) short1);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject.quote(",\n");
      JSONObject.quote(",\n");
      Integer integer0 = new Integer(1947);
      JSONTokener jSONTokener0 = new JSONTokener("y?>3CCmJn");
      Float.isFinite(1947);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject((-728));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-728] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer.getInteger("wheel.json.JSONException", 125);
      JSONObject jSONObject1 = jSONObject0.accumulate("+Hi7$%", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble("2c266`;wl6nj", (-828.285189075818));
      assertEquals((-828.285189075818), double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(57, 2301.75F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer.getInteger("Y+S:ZAfiNF?YwQ{", 98);
      Integer integer0 = Integer.getInteger("Y+S:ZAfiNF?YwQ{", 98);
      JSONObject jSONObject1 = jSONObject0.accumulate("Y+S:ZAfiNF?YwQ{", integer0);
      Object object0 = jSONObject1.get("Y+S:ZAfiNF?YwQ{");
      assertEquals(98, object0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optLong(2029);
      JSONObject.valueToString(jSONArray0, 93, 93);
      jSONObject0.optDouble("");
      jSONArray0.optBoolean(2029);
      jSONObject0.put("[]", 977.023061454);
      jSONObject0.getDouble("[]");
      Integer integer0 = new Integer((-4028));
      assertEquals((-4028), (int)integer0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 1.0F);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      long long0 = jSONObject0.optLong(" NY?6Md5", (-548L));
      assertEquals((-548L), long0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble("getcopyValueOf", 434.614298);
      assertEquals(434.614298, double0, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("??*^P3;u=||*vZa", hashMap0);
      boolean boolean0 = jSONObject1.optBoolean("??*^P3;u=||*vZa", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1882928116279063
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject.quote("??tYv1-");
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer(125);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "??tYv1-";
      stringArray0[1] = ";*z-.B";
      stringArray0[2] = "??tYv1-";
      stringArray0[3] = ";*z-.B";
      stringArray0[4] = "\"??tYv1-\"";
      stringArray0[5] = "\"??tYv1-\"";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "\"??tYv1-\"");
      jSONObject1.toString();
      try { 
        jSONObject1.getBoolean(":}?w3Y+ags8o4{PJ[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":}?w3Y+ags8o4{PJ[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = new Float(774.4775);
      Long long0 = new Long(0L);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("Bad value from toJSONString: ", object0);
      int int0 = Byte.compare((byte)15, (byte)25);
      Float float0 = new Float((double) (byte)15);
      jSONObject1.put(",:]}/\"[{;=#", (Object) float0);
      JSONObject.numberToString(float0);
      jSONObject0.toString();
      Integer integer0 = new Integer(17);
      assertFalse(integer0.equals((Object)int0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "]\"\"I^l36l,%l";
      jSONObject0.putOpt("]\"\"I^l36l,%l", "]\"\"I^l36l,%l");
      Byte byte0 = new Byte((byte) (-49));
      Byte byte1 = new Byte((byte) (-49));
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      Boolean boolean0 = new Boolean("]\"\"I^l36l,%l");
      try { 
        jSONObject0.getBoolean("]\"\"I^l36l,%l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]\\\"\\\"I^l36l,%l\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("F*+Gb9mYr#K}8", (-4241));
      try { 
        jSONObject0.getInt(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble(",\n", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      Integer integer0 = new Integer((-1113));
      Integer.getInteger(",\n");
      Integer.getInteger(",\n", (-1113));
      Integer integer1 = Integer.valueOf(1);
      JSONObject.valueToString(integer1, 1, 4);
      int int0 = jSONObject0.optInt("j$az,iN }eL/");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 157, 157);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}oJ!h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }oJ!h
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("P+C");
      assertEquals("", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "]\"\"I^l36l,%l");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Missing value", "]\"\"I^l36l,%l");
      assertEquals("]\"\"I^l36l,%l", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "getgetChars";
      double double0 = (-1751.4148);
      jSONObject0.optDouble("getgetChars", (-1751.4148));
      JSONObject jSONObject1 = jSONObject0.put("getgetChars", false);
      jSONObject1.optString("getgetChars");
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      try { 
        jSONObject1.getJSONObject("java.lang.Boolean@0000000003");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Boolean@0000000003\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)74);
      hashMap0.put(byte0, "A JSONObject text must begin with '{'");
      long long0 = jSONObject0.optLong("wheel.json.JSONArray");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("]1tkl", (Object) null);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 117);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      try { 
        jSONArray0.getJSONObject(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[11] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("] is not a Boolean.", hashMap0);
      jSONObject0.length();
      jSONObject0.opt("] is not a Boolean.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("-NM", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject.getNames((Object) boolean0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer((-551));
      hashMap0.put(integer0, "hV[1.>4P{2,#HSl>3");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Object object0 = jSONObject0.opt("a/&");
      assertNull(object0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(88, 88);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("y\r@C]@RCJ/eF>H'|Ng", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.quote("f?jqF-7f6a5\u0000ar4h");
      assertEquals("\"f?jqF-7f6a5\\u0000ar4h\"", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = new Boolean(",6'ibH/_Q\"");
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote(",6'ibH/_Q\"");
      assertEquals("\",6'ibH/_Q\\\"\"", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Short, Long> hashMap0 = new HashMap<Short, Long>(2029, 2029);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("\f", (long) 2029);
      assertEquals(2029L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("tU80;z!", (Object) "tU80;z!");
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject1.putOpt("tU80;z!", boolean0);
      JSONObject.getNames(jSONObject1);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.keySet();
      Integer integer0 = new Integer(34);
      Integer.min(34, 57);
      Boolean boolean0 = Boolean.valueOf("to");
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("zW\"5XXg5H;'dW?JSfB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zW\\\"5XXg5H;'dW?JSfB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-3484));
      JSONObject.getNames(jSONObject0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(1338);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getInt(")8#lnEdWMK8C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")8#lnEdWMK8C\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("t ", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("]\"\"I^l36l,%l", "BTnrvWdRj");
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Integer.getInteger(",\n");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString("getintern", 8, 367);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Byte byte0 = new Byte((byte) (-110));
      hashMap0.put("[T<e", byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(559, (int) (byte) (-110));
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Byte byte0 = new Byte((byte)125);
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      Short short0 = new Short((short)61);
      hashMap0.put((Long) null, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-56), 88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Object object0 = JSONObject.NULL;
      hashMap0.put(object0, (Object) null);
      Integer integer0 = new Integer(59);
      hashMap0.remove((Object) integer0, (Object) integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.quote("a\"g%hbOX");
      assertEquals("\"a\\\"g%hbOX\"", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = "getsplit";
      JSONObject jSONObject1 = jSONObject0.put("getsplit", (Collection) linkedList0);
      try { 
        jSONObject1.getDouble("getsplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsplit\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Substring bounds error";
      JSONObject jSONObject1 = jSONObject0.putOpt("Substring bounds error", hashMap0);
      try { 
        jSONObject1.getInt("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getDouble("isaccumulate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isaccumulate\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 1;
      String string0 = " of ";
      jSONObject0.put(" of ", (Object) " of ");
      try { 
        jSONObject0.getJSONArray(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean(",\n", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject1.optBoolean("yO$YIz0JLXni");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Short short0 = new Short((short)32);
      try { 
        jSONObject0.accumulate((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0, 8192, (-940));
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      float float1 = Float.sum((-726.8566F), 0.0F);
      Float.isFinite(0.0F);
      JSONObject.testValidity(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = Float.valueOf((float) 2032);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      Boolean boolean0 = Boolean.valueOf("*ZHr<?0:xe5;AJzO-");
      String string0 = JSONObject.valueToString(boolean0, (-359), (-359));
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      try { 
        jSONObject0.getString("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("z;%)Q}C%*PKp&-");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of z;%)Q}C%*PKp&-
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*2eCAT9^m#aDxdp";
      stringArray0[1] = "*2eCAT9^m#aDxdp";
      stringArray0[2] = "*2eCAT9^m#aDxdp";
      stringArray0[3] = "*2eCAT9^m#aDxdp";
      stringArray0[5] = "*2eCAT9^m#aDxdp";
      stringArray0[6] = "*2eCAT9^m#aDxdp";
      stringArray0[7] = "*2eCAT9^m#aDxdp";
      JSONObject jSONObject0 = new JSONObject("*2eCAT9^m#aDxdp", stringArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put("*2eCAT9^m#aDxdp", (Map) hashMap0);
      jSONObject0.remove("*2eCAT9^m#aDxdp");
      Long long0 = new Long(2616L);
      try { 
        jSONObject0.getBoolean("*2eCAT9^m#aDxdp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*2eCAT9^m#aDxdp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove(".");
      assertNull(object0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)10);
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      Byte.toUnsignedInt((byte)124);
      hashMap0.put(double0, object0);
      try { 
        jSONObject0.put((String) null, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put(" of ", (Map) null);
      try { 
        jSONObject0.getInt("B/1uLZ2}YN{R*f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B/1uLZ2}YN{R*f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      Map<Double, Object> map0 = null;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("]\"\"I^l36l,%l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]\\\"\\\"I^l36l,%l\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.get("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }
}
