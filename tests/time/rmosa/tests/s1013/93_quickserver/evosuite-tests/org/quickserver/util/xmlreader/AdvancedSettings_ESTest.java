/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:11:58 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.380167676263512
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getMaxThreadsForNioWrite();
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.630821318732888
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(65536);
      String string0 = "org.quickserver.net.server.impl.OptimisticClientIdentifier";
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesLatency((-357));
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.setClientSocketReceiveBufferSize(585);
      String string1 = advancedSettings0.toXML("\t<client-socket-send-buffer-size>");
      advancedSettings0.setClientSocketReceiveBufferSize((-357));
      advancedSettings0.setPerformancePreferencesBandwidth((-357));
      advancedSettings0.setMaxThreadsForNioWrite((-357));
      advancedSettings0.setMaxThreadsForNioWrite((-357));
      advancedSettings0.setClientSocketReceiveBufferSize(585);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setBacklog(585);
      String string2 = "f;ut\"RD";
      advancedSettings0.setQSObjectPoolMaker("f;ut\"RD");
      advancedSettings0.getPerformancePreferencesLatency();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset(string1);
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<client-socket-send-buffer-size><advanced-settings>
         // \t<client-socket-send-buffer-size>\t<charset>ISO-8859-1</charset>
         // \t<client-socket-send-buffer-size>\t<use-direct-byte-buffer>true</use-direct-byte-buffer>
         // \t<client-socket-send-buffer-size>\t<byte-buffer-size>65536</byte-buffer-size>
         // \t<client-socket-send-buffer-size>\t<backlog>0</backlog>
         // \t<client-socket-send-buffer-size>\t<socket-linger>-1</socket-linger>
         // \t<client-socket-send-buffer-size>\t<debug-non-blocking-mode>false</debug-non-blocking-mode>
         // \t<client-socket-send-buffer-size>\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<client-socket-send-buffer-size>\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>
         // \t<client-socket-send-buffer-size>\t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<client-socket-send-buffer-size>\t<performance-preferences-connection-time>0</performance-preferences-connection-time>
         // \t<client-socket-send-buffer-size>\t<performance-preferences-latency>-357</performance-preferences-latency>
         // \t<client-socket-send-buffer-size>\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>
         // \t<client-socket-send-buffer-size>\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>
         // \t<client-socket-send-buffer-size>\t<client-socket-receive-buffer-size>585</client-socket-receive-buffer-size>
         // \t<client-socket-send-buffer-size>\t<client-socket-send-buffer-size>65536</client-socket-send-buffer-size>
         // \t<client-socket-send-buffer-size></advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-837);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize((-837));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getQSObjectPoolMaker();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3818971816249785
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1411));
      advancedSettings0.toXML("`e6zK&\"AXp[<hh-auK");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-1411));
      advancedSettings1.setMaxThreadsForNioWrite(1);
      advancedSettings0.setMaxThreadsForNioWrite((-2187));
      advancedSettings0.setClientSocketReceiveBufferSize((-1411));
      advancedSettings1.getByteBufferSize();
      advancedSettings1.setBacklog(1);
      advancedSettings1.setClientIdentifier("`e6zK&\"AXp[<hh-auK");
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-2187), int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setBacklog(7);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2116));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("%69*<yEF2]]1l~6iCqv");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getCharset();
      advancedSettings0.getDebugNonBlockingMode();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(7, advancedSettings0.getBacklog());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertNotNull(string0);
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3868752543996616
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency(1360);
      advancedSettings0.setBacklog(1360);
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setPerformancePreferencesLatency((-3168));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesBandwidth((-3168));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-3168), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4342348975337873
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(2);
      advancedSettings0.toXML("gF\"*PWMKZagZGu^L_");
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(2, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4910593763577293
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("Ol,]*(d$n8tbi");
      advancedSettings0.setClientSocketReceiveBufferSize(58);
      advancedSettings0.toXML("|l<b@n[K(5GOJw");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getCharset();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset((String) null);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals("Ol,]*(d$n8tbi", advancedSettings0.getClientIdentifier());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize(3726);
      advancedSettings0.setQSObjectPoolMaker("9cA2");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(3726);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getCharset();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(3726, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(1);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setSocketLinger((-198));
      advancedSettings0.setBacklog(0);
      advancedSettings1.setBacklog((-521));
      advancedSettings1.setBacklog(3);
      advancedSettings1.setQSObjectPoolMaker("</client-socket-receive-buffer-size>\n");
      advancedSettings1.setUseDirectByteBuffer(true);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("</use-direct-byte-buffer>\n");
      advancedSettings0.setCharset("");
      advancedSettings1.setByteBufferSize((-521));
      advancedSettings2.setByteBufferSize(1);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setByteBufferSize((-1799));
      advancedSettings3.setQSObjectPoolMaker("\t<client-identifier>");
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-246));
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings0.getByteBufferSize();
      advancedSettings2.getQSObjectPoolMaker();
      assertEquals("</use-direct-byte-buffer>\n", advancedSettings2.getClientIdentifier());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(1858);
      advancedSettings0.setQSObjectPoolMaker("q%6CrjU");
      advancedSettings0.getUseDirectByteBuffer();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(1858, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog((-2993));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(1144);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog((-452));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.getClientSocketReceiveBufferSize();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6297470894923682
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-176));
      advancedSettings0.setBacklog(65536);
      advancedSettings0.setClientSocketTrafficClass("\t<client-socket-traffic-class>");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(65536);
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.toXML("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-420));
      advancedSettings0.setSocketLinger((-676));
      advancedSettings0.setPerformancePreferencesBandwidth((-1651));
      advancedSettings0.setClientSocketReceiveBufferSize((-1651));
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientIdentifier();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog((-2993));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(1144);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog((-452));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientIdentifier();
      assertEquals(65536, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.setPerformancePreferencesBandwidth(562);
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(10, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(562, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("9cA2");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("9cA2");
      advancedSettings0.setClientSocketTrafficClass("9cA2");
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setUseDirectByteBuffer(true);
      int int0 = 0;
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("uVy.Qxl");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // uVy.Qxl
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.58379607654672
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("K.HonG ^");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime(201);
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(201, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1899));
      advancedSettings0.getBacklog();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(16);
      advancedSettings1.setCharset("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(16, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = (-5051);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientIdentifier("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("V(F");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // V(F
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(801);
      advancedSettings0.getBacklog();
      advancedSettings0.getClientIdentifier();
      assertEquals(801, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5365859297869138
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(4826);
      advancedSettings0.setSocketLinger(4826);
      advancedSettings0.setPerformancePreferencesBandwidth(475);
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesConnectionTime(2267);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("\t<performance-preferences-latency>");
      advancedSettings0.setPerformancePreferencesBandwidth(2267);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(2267);
      advancedSettings0.setPerformancePreferencesConnectionTime(12);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(0);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(12, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(4826, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, int0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-357));
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-2254));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("9cA2");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 9cA2
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }
}
