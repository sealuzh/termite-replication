/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:04:57 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.Proxy;
import java.net.SocketException;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("IOError {0}");
      theClient0.getClientObjectHandler();
      theClient0.toString();
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = quickServer0.getConfig();
      quickServer0.configQuickServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      QuickServer quickServer1 = theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.setServer(quickServer1);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTry((-2682));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("m_[#nVe9GyV");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      boolean boolean0 = theClient0.getCommunicationLogging();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setKeepAlive(true);
      theClient0.setSocket(mockSocket0);
      theClient0.getClientBinaryHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      QuickServer quickServer0 = new QuickServer("hMaS? #H");
      quickServer0.setSecurityManagerClass("IQ;`B/");
      quickServer0.makeServerSocket();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      boolean boolean1 = theClient0.getTrusted();
      assertFalse(boolean1 == boolean0);
      
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientEventHandler();
      assertEquals(0, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Q8Md0]>)?F");
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientEvent();
      theClient0.getClientExtendedEventHandler();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getClientCommandHandler();
      ClientHandler clientHandler0 = null;
      // Undeclared exception!
      try { 
        defaultClientEventHandler0.lostConnection((ClientHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.DefaultClientEventHandler", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getServer();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:28>", blockingClientHandler0.getName());
      
      theClient0.setServer((QuickServer) null);
      theClient0.setMaxAuthTryMsg("");
      TheClient theClient1 = new TheClient();
      theClient1.getClientData();
      theClient0.getMaxAuthTryMsg();
      theClient1.getClientEventHandler();
      TheClient theClient2 = new TheClient();
      theClient2.setMaxConnectionMsg("");
      theClient2.getSocketChannel();
      theClient2.getClientExtendedEventHandler();
      theClient0.getMaxConnectionMsg();
      //  // Unstable assertion: assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      theClient0.getClientExtendedEventHandler();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "{TheClient ");
      theClient0.setMaxAuthTry(125);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.getMaxAuthTry();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      theClient0.toString();
      theClient0.getClientEvent();
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.toString();
      assertEquals(125, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(878);
      int int0 = theClient0.getTimeout();
      assertEquals(878, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setCommunicationLogging(false);
      theClient0.setTimeout(521);
      theClient0.getCommunicationLogging();
      theClient0.getClientWriteHandler();
      theClient0.getServer();
      theClient0.getAuthenticator();
      assertEquals(521, theClient0.getTimeout());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getMaxAuthTryMsg();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientEventHandler();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("`(h%");
      theClient0.setTimeout((-1077));
      int int0 = theClient0.getTimeout();
      assertEquals((-1077), int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("i.D.");
      theClient0.getTimeoutMsg();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("{TheClient ", 0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2be44fc0
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("<Ri~i[]Ip=lC3");
      theClient0.getMaxConnectionMsg();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      try { 
        blockingClientHandler0.isConected();
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("`(h%");
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTry((-1077));
      assertEquals((-1077), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getTrusted();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      try { 
        blockingClientHandler0.sendClientBinary((byte[]) null, 0, (-2217));
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setMaxAuthTry((-2950));
      theClient0.getTrusted();
      theClient0.getMaxAuthTry();
      theClient0.getClientBinaryHandler();
      theClient0.getTimeoutMsg();
      assertEquals((-2950), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getCommunicationLogging();
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.setTimeoutMsg("");
      theClient0.setTrusted(true);
      theClient0.getTrusted();
      TheClient theClient1 = new TheClient();
      theClient1.getMaxAuthTry();
      assertFalse(theClient1.getTrusted());
      
      theClient0.toString();
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("m_[#nVe9GyV");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      boolean boolean0 = theClient0.getCommunicationLogging();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setKeepAlive(true);
      theClient0.getClientBinaryHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      QuickServer quickServer0 = new QuickServer("m_[#nVe9GyV");
      theClient0.setServer(quickServer0);
      theClient0.getClientCommandHandler();
      boolean boolean1 = theClient0.getTrusted();
      assertFalse(boolean1 == boolean0);
      
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientEventHandler();
      assertEquals(0, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("Invoked {0} hook [{1}] was: {2}", 956);
      quickServer0.setRawCommunicationLogging(false);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      assertEquals("<ClientHandler-Pool#-1-ID:1>", blockingClientHandler0.getName());
      
      MockInetSocketAddress.createUnresolved(", Event: ", 136);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.setTimeout(0);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = 0;
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(0);
      nonBlockingClientHandler0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      String string0 = "NAZO";
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("NAZO", 0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@2be44fc0
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getAuthenticator();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
