/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:44:46 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      String string0 = "{";
      simpleNode0.setIdentifier("P]c&g'TCo");
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      int int0 = 2633;
      StringWriter stringWriter0 = new StringWriter(1437);
      simpleNode0.dump(" ", stringWriter0);
      stringWriter0.write(63);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int1 = 2724;
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 2724, 63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter(48);
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'j';
      charArray0[2] = 'U';
      charArray0[3] = 'E';
      stringWriter0.write(charArray0);
      simpleNode0.dump("", stringWriter0);
      assertEquals("XjUE<RelationalExpression>\n  <identifier>*ge</identifier>\n</RelationalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.setIdentifier(">=");
      SimpleNode simpleNode1 = new SimpleNode(47);
      simpleNode1.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter(11);
      StringWriter stringWriter1 = stringWriter0.append(']');
      stringWriter1.write("<identifier>Literal Value</identifier>\n");
      simpleNode1.dump("<identifier>Literal Value</identifier>\n", stringWriter0);
      assertEquals("]<identifier>Literal Value</identifier>\n<InstanceOfExpression>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.setIdentifier(";");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter0 = new StringWriter(13);
      stringWriter0.write("\"~\"");
      stringWriter0.close();
      StringWriter stringWriter1 = new StringWriter(19);
      simpleNode0.dump("q}rs_~h6]3r-sc:", stringWriter0);
      assertEquals("\"~\"<VariableInitializer>\n</VariableInitializer>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode1.identifiers = null;
      // Undeclared exception!
      try { 
        simpleNode1.setIdentifier("{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier(">>");
      simpleNode0.setIdentifier("@");
      StringWriter stringWriter0 = new StringWriter(48);
      StringWriter stringWriter1 = stringWriter0.append('p');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "V4Z|y+z/s");
      simpleNode0.dump(">>", stringWriter2);
      assertEquals("pV4Z|y+z/s<RelationalExpression>\n  <identifier>*ge</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>@</identifier>\n</RelationalExpression>\n", stringWriter2.toString());
      assertEquals("pV4Z|y+z/s<RelationalExpression>\n  <identifier>*ge</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>@</identifier>\n</RelationalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier("-");
      simpleNode0.toString();
      simpleNode0.setIdentifier("Java Parser Version 1.1:  Reading from standard input . . .");
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = (Node) simpleNode0;
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("Literal", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CompilationUnit : -");
      simpleNode0.dump("Java Parser Version 1.1:  Reading from standard input . . .", stringWriter1);
      assertEquals("<CompilationUnit>\n  <identifier>-</identifier>\n  <identifier>Java Parser Version 1.1:  Reading from standard input . . .</identifier>\n</CompilationUnit>\nCompilationUnit : -<CompilationUnit>\n  <identifier>-</identifier>\n  <identifier>Java Parser Version 1.1:  Reading from standard input . . .</identifier>\n</CompilationUnit>\n", stringWriter1.toString());
      
      simpleNode0.jjtGetParent();
      String string0 = simpleNode0.toString(". /'0,RP.<B");
      assertEquals(". /'0,RP.<BCompilationUnit : - : Java Parser Version 1.1:  Reading from standard input . . .", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.884968101172941
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.setIdentifier("!");
      simpleNode0.toString();
      StringReader stringReader0 = new StringReader("CompilationUnit : !");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 10);
      simpleNode1.setIdentifier("CompilationUnit : !");
      Node node0 = simpleNode0.parent;
      simpleNode1.setIdentifier("CompilationUnit : !");
      simpleNode1.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode1.toString("");
      simpleNode0.jjtAddChild(simpleNode1, 0);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Java Parser Version 1.1:  Reading from standard input . . .");
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 's';
      charArray0[2] = '$';
      charArray0[3] = '$';
      simpleNode1.id = (int) '$';
      charArray0[4] = '$';
      charArray0[5] = 'S';
      charArray0[6] = 'F';
      stringWriter1.write(charArray0);
      simpleNode1.dump("EnumConstant : CompilationUnit : ! : CompilationUnit : !", stringWriter1);
      simpleNode1.dump("EnumConstant : CompilationUnit : ! : CompilationUnit : !", stringWriter0);
      simpleNode1.jjtAddChild(simpleNode0, 's');
      // Undeclared exception!
      simpleNode0.dump("EnumConstant : CompilationUnit : ! : CompilationUnit : !", stringWriter0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      String string0 = "{";
      simpleNode0.setIdentifier(">");
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(2633);
      simpleNode0.dump("P]c&g'TCo", stringWriter0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      stringWriter0.write(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 1, 2724);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier("{");
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("CompilationUnit : {", stringWriter0);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3);
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("Modifiers");
      simpleNode0.setIdentifier("&");
      simpleNode0.dump("\"<=\"", stringWriter0);
      assertEquals("Modifiers<Modifiers>\n  <identifier>*amp</identifier>\n</Modifiers>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0905146706729578
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      simpleNode0.setIdentifier("}}Jp\"Vmo2.D.b@@");
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "}}Jp\"Vmo2.D.b@@");
      simpleNode0.setIdentifier("&&");
      simpleNode0.dump("CompilationUnit : }}Jp\"Vmo2.D.b@@", stringWriter0);
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1437515815));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode0.toString("char");
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(85);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) "charCompilationUnit");
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = 'F';
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("CompilationUnit", stringWriter2);
      simpleNode0.dump("char", stringWriter1);
      simpleNode0.jjtAddChild((Node) null, 194);
      simpleNode0.toString("-");
      simpleNode0.jjtGetChild(0);
      assertEquals(195, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.setIdentifier("");
      // Undeclared exception!
      try { 
        simpleNode0.dump("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter0 = new StringWriter(19);
      stringWriter0.write("5R$; Kuyo!}xg>");
      simpleNode0.dump("$[42xOWj", stringWriter0);
      assertEquals("5R$; Kuyo!}xg><VariableInitializer>\n  <identifier>*lshft</identifier>\n</VariableInitializer>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      StringReader stringReader0 = new StringReader("CompilationUnit : ");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 10);
      simpleNode1.setIdentifier("CompilationUnit : ");
      Node node0 = simpleNode0.parent;
      simpleNode1.setIdentifier("CompilationUnit : ");
      simpleNode1.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
      
      simpleNode1.toString("");
      simpleNode0.jjtAddChild(simpleNode1, 0);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Java Parser Version 1.1:  Reading from standard input . . .");
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 's';
      stringWriter1.write(charArray0);
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.dump("^8 aPR8", stringWriter0);
      simpleNode1.jjtAddChild(simpleNode2, 0);
      simpleNode0.jjtGetChild(0);
      simpleNode1.toString();
      String string0 = simpleNode1.toString("'`Q,3FYOma");
      assertEquals("'`Q,3FYOmaEnumConstant : CompilationUnit :  : CompilationUnit : ", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.append((CharSequence) "", 0, 0);
      char[] charArray0 = new char[8];
      charArray0[2] = 'F';
      charArray0[3] = 'G';
      charArray0[4] = 'E';
      charArray0[5] = '/';
      charArray0[6] = 'E';
      charArray0[7] = 's';
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-141952309));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -141952309
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.009656341980306
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.toString("<");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("ha<(g.[G8&.");
      simpleNode0.setIdentifier("<");
      simpleNode0.dump("ha<(g.[G8&.", stringWriter0);
      assertEquals("ha<(g.[G8&.<VariableInitializer>\n  <identifier>*lt</identifier>\n</VariableInitializer>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("VariableInitializer : <", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      simpleNode0.setIdentifier("Java Parser Version 1.1:  Reading from standard input . . .");
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode0.toString("^8 aPR8");
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "CompilationUnit :  : Java Parser Version 1.1:  Reading from standard input . . . : ");
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[1] = 'F';
      charArray0[2] = '/';
      charArray0[3] = 'F';
      charArray0[4] = 'S';
      charArray0[5] = '$';
      charArray0[6] = 's';
      stringWriter1.write(charArray0);
      simpleNode0.dump("CompilationUnit : ", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 1);
      assertEquals(2, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode0.toString("char");
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(85);
      StringWriter stringWriter1 = new StringWriter(0);
      simpleNode0.dump("wqUo1vbV", stringWriter1);
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1512
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      StringReader stringReader0 = new StringReader("QRhXvr,s3fRc");
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter(18);
      char[] charArray0 = new char[5];
      charArray0[1] = 'w';
      charArray0[2] = '0';
      stringWriter0.flush();
      charArray0[3] = 'K';
      charArray0[4] = '*';
      stringReader0.read(charArray0);
      simpleNode0.dump("\t", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 18);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(19, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier(">");
      simpleNode0.toString();
      Node node0 = simpleNode0.parent;
      Node[] nodeArray0 = new Node[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      nodeArray0[0] = null;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter(2633);
      simpleNode0.dump("P]c&g'TCo", stringWriter0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      stringWriter0.write(0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-1360));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode0.toString("char");
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(85);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) "charCompilationUnit");
      char[] charArray0 = new char[9];
      charArray0[0] = 'a';
      charArray0[1] = 'F';
      charArray0[2] = '\'';
      charArray0[3] = 'F';
      charArray0[4] = 'm';
      charArray0[5] = 'o';
      charArray0[6] = 'S';
      charArray0[7] = 'F';
      charArray0[8] = 'F';
      stringWriter1.write(charArray0);
      simpleNode0.dump("k+r&!P", stringWriter1);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 125);
      assertEquals(126, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier("");
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("CompilationUnit : ", stringWriter0);
      assertEquals("<CompilationUnit>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(242);
      SimpleNode simpleNode1 = new SimpleNode((-1909529041));
      JavaParser javaParser0 = new JavaParser("\"this\"");
      simpleNode1.parser = javaParser0;
      Node[] nodeArray0 = new Node[0];
      simpleNode1.children = nodeArray0;
      simpleNode1.dump("<", (Writer) null);
      assertFalse(simpleNode1.equals((Object)simpleNode0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1115);
      // Undeclared exception!
      try { 
        simpleNode0.toString("D$Hyqh1/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1115
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.002663334987299
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter(11);
      stringWriter0.write("5R$; Kuyo!}xg>");
      simpleNode0.dump("]HQ2j($f.", stringWriter0);
      assertEquals("5R$; Kuyo!}xg><VariableInitializer>\n  <identifier></identifier>\n</VariableInitializer>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess");
      assertEquals("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccessVariableInitializer : ", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.setIdentifier("~");
      Node node0 = simpleNode0.parent;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "D(?");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "D(?", 0, 0);
      simpleNode0.dump("~", stringWriter2);
      Node node1 = simpleNode0.jjtGetParent();
      assertNull(node1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter(48);
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      char char0 = 'j';
      JavaParser javaParser0 = new JavaParser((Reader) null);
      Node node0 = javaParser0.currNode;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("]Wo");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 114);
      simpleNode0.jjtClose();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9749540746744716
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier(",");
      simpleNode0.jjtOpen();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("hNBf4.z");
      simpleNode0.dump("\"MV>$F", stringWriter0);
      assertEquals("hNBf4.z<VariableDeclaratorId>\n  <identifier>,</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(258);
      Node[] nodeArray0 = new Node[3];
      StringReader stringReader0 = new StringReader("YOV`");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      Node node0 = javaParser0.currNode;
      nodeArray0[0] = null;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump("!@Jv8f", (Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 258
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 108;
      SimpleNode simpleNode0 = new SimpleNode(108);
      simpleNode0.parser = null;
      SimpleNode simpleNode1 = new SimpleNode(108);
      simpleNode0.jjtSetParent(simpleNode1);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, 1620);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 3;
      SimpleNode simpleNode0 = new SimpleNode(3);
      String string0 = "\"case\"";
      simpleNode0.setIdentifier("\"case\"");
      StringWriter stringWriter0 = new StringWriter(3);
      simpleNode0.dump("&&", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(1047);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }
}
