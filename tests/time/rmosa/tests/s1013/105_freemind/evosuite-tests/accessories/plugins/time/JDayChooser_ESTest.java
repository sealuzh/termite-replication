/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:38:27 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.filemode.FileMode;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.ImageCapabilities;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.awt.image.renderable.ParameterBlock;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.text.AttributedCharacterIterator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Stack;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.help.ForwardAction;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.ImageNode;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFStream;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.800923963425939
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.PRC;
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMaxDayCharacters(1007);
      jDayChooser0.setMaxDayCharacters((-1318));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1007, 2678400000L, (-1318), 23, '$');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      System.setCurrentTimeMillis((-1318));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8961770597399514
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMaxDayCharacters(23);
      jDayChooser0.setMaxDayCharacters(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 11, 34, '$');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8016776519777116
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.getChangeListeners();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 917, 32, 32, 40, '-', (MenuElement[]) null, menuSelectionManager0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(menuKeyEvent0);
      try { 
        Cursor.getSystemCustomCursor("Windows");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HashMap<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      Object object0 = new Object();
      jDayChooser0.putClientProperty(hashMap0, object0);
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 44, 1654L, 44, 35, '8');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeComponentListener((ComponentListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 0L, (-2495), 38, 'l');
      jDayChooser0.keyPressed(keyEvent0);
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      ResourceBundle.Control resourceBundle_Control0 = ResourceBundle.Control.getControl(list0);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        resourceBundle_Control0.getFallbackLocale("day", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Metal");
      System.setCurrentTimeMillis((-71L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      jDayChooser0.imageUpdate(bufferedImage0, 27, 709, (-635), 12, 27);
      GraphicContext graphicContext0 = new GraphicContext();
      RenderingHints renderingHints0 = graphicContext0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp(2856.05F, (-71L), renderingHints0);
      rescaleOp0.filter(bufferedImage0, bufferedImage0);
      PDFDocument pDFDocument0 = new PDFDocument("4");
      jDayChooser0.setMonth(12);
      try { 
        Cursor.getSystemCustomCursor("11");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5778234187024895
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getHierarchyListeners();
      Locale locale0 = Locale.PRC;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getRenderingHints();
      RescaleOp rescaleOp0 = new RescaleOp((-1.0F), (-1.0F), (RenderingHints) null);
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      jDayChooser0.decorationBordersVisible = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      bufferedImage1.getScaledInstance((-1125), 760, 13);
      jDayChooser0.imageUpdate(bufferedImage1, 5, 210, 210, 5, 5);
      PDFDocument pDFDocument0 = new PDFDocument("1");
      jDayChooser0.setMonth(210);
      ImageNode imageNode0 = new ImageNode();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Metal");
      System.setCurrentTimeMillis((-71L));
      int int0 = 27;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.getChangeListeners();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 27, (-71L), 27, 27, '`', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      try { 
        Cursor.getSystemCustomCursor((String) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HashMap<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      Object object0 = new Object();
      PDFStream pDFStream0 = new PDFStream();
      PDFPage pDFPage0 = new PDFPage((PDFResources) null, pDFStream0, 970, 970);
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("0N&F");
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, fontInfo0, pDFDocument0, pDFPage0, "Fo5ma6NY7@*By{+tXE]", "", 7);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.896211771114869
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHierarchyListeners();
      Locale locale0 = Locale.KOREA;
      jDayChooser0.setLocale(locale0);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getLocale();
      jDayChooser0.setWeekdayForeground((Color) null);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, (-2848), 37, 3486, 37, 'l', 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setMonth(0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.695563447768113
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LR3`uz");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Metal");
      System.setCurrentTimeMillis((-71L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getComponentListeners();
      jDayChooser0.getWeekdayForeground();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.monthChooser = jMonthChooser0;
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5785241104871752
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          JDayChooser jDayChooser0 = new JDayChooser(true);
          jDayChooser0.getGraphicsConfiguration();
          jDayChooser0.isPaintingTile();
          jDayChooser0.setAlwaysFireDayProperty(true);
          jDayChooser0.initDecorations();
          BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2941);
          // Undeclared exception!
          try { 
            Font.createFont(2941, (InputStream) bufferedInputStream0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // font format not recognized
             //
             verifyException("java.awt.Font", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "28";
      stringArray0[1] = "28";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Color color0 = Color.MAGENTA;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.577883909281082
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ActionEvent actionEvent0 = new ActionEvent("Windows", 11, "Windows", 11);
      actionEvent0.paramString();
      Integer integer0 = StrokingTextPainter.ADJUST_SPACING;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Attempted to set null ErrorHandler.");
      System.setCurrentTimeMillis(2746L);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFResources pDFResources0 = new PDFResources(11);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(11);
      jDayChooser0.setEnabled(true);
      ImageNode imageNode0 = new ImageNode();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(1592);
      jDayChooser0.setFont((Font) null);
      MockDate mockDate0 = new MockDate(2746L);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(917);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.getChangeListeners();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1721), (-5867), (-4756), (-84), 32, (-5867));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1721,MONTH=-5867,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-4756,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-84,HOUR_OF_DAY=-84,MINUTE=32,SECOND=-5867,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeComponentListener((ComponentListener) null);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack0, stack0);
      parameterBlock0.getParameters();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources((-1470));
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, fontInfo0, (PDFDocument) null, pDFResourceContext0, "l", "28", (-363.4915F));
      System.setCurrentTimeMillis(15);
      jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getHierarchyListeners();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getRenderingHints();
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setMonth((-1647));
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JViewport jViewport0 = new JViewport();
      jViewport0.setFocusable(true);
      Dimension dimension0 = jViewport0.getExtentSize();
      jDayChooser0.getSize(dimension0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ActionEvent actionEvent0 = new ActionEvent("3-tR$oJv#", 0, (String) null, 11);
      actionEvent0.paramString();
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      actionEvent0.paramString();
      Object object0 = new Object();
      actionEvent0.setSource(object0);
      actionEvent0.paramString();
      actionEvent0.paramString();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeComponentListener((ComponentListener) null);
      jDayChooser0.setDayBordersVisible(false);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent("day", 32, (String) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8009015913105437
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      jDayChooser0.addListeners(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 61441, 61441, '!');
      keyEvent0.consume();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-56), 4);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getConditionForKeyStroke(keyStroke0);
      jDayChooser_DecoratorButton0.setBounds((-2063), 2067, 61441, 2067);
      jDayChooser_DecoratorButton0.isFocusable();
      Color color0 = Color.BLACK;
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.ITALY;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0);
      KeyEvent keyEvent0 = new KeyEvent(jTable0, 213, 0L, 213, 213, 'z', 0);
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5776871557149237
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHierarchyListeners();
      Locale locale0 = Locale.PRC;
      jDayChooser0.setLocale(locale0);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, (-2848), 37, 3486, 37, 'l', 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 3486, 1222L, 43, 40, 'd', 44);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      int int0 = 181;
      DefaultTableModel defaultTableModel0 = null;
      try {
        defaultTableModel0 = new DefaultTableModel(181, (-346));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -346
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.getDaysInMonth();
      boolean boolean0 = true;
      jDayChooser0.setDayBordersVisible(true);
      FileMode fileMode0 = new FileMode();
      // Undeclared exception!
      try { 
        fileMode0.activate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.filemode.FileMode", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-657), (-989L), (-2775), (-2775), '#', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      Object object0 = new Object();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695749651082532
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object object0 = new Object();
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      RescaleOp rescaleOp0 = new RescaleOp(0.0F, 0.0F, (RenderingHints) null);
      BufferedImage bufferedImage1 = rescaleOp0.filter(bufferedImage0, bufferedImage0);
      rescaleOp0.filter(bufferedImage1, bufferedImage1);
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.imageUpdate(bufferedImage1, 5, 5, (-4309), 4, (-2428));
      jDayChooser0.setMonth((-2428));
      jDayChooser0.setEnabled(false);
      ImageNode imageNode0 = new ImageNode();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.updateUI();
      Color color0 = Color.MAGENTA;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) bufferedImage1;
      objectArray0[1] = (Object) null;
      objectArray0[4] = object0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) rescaleOp0;
      JList<Object> jList0 = new JList<Object>(objectArray0);
      jList0.getSelectionForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("13", 0.0, 0.0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager.defaultManager();
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 16, 0, 777, 49, 'f');
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      jDayChooser0.createVolatileImage((-3257), 777, imageCapabilities0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, (-474), "day", 24);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6955852330739245
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 16, 0, 777, 49, 'f');
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      imageCapabilities0.clone();
      jDayChooser0.createVolatileImage((-3257), 777, imageCapabilities0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setMaxDayCharacters(49);
      jDayChooser0.setMonth((-3257));
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = SwingConstants.NORTH;
      jDayChooser0.setSundayForeground((Color) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JScrollPane jScrollPane0 = new JScrollPane(jDayChooser0);
      JViewport jViewport0 = jScrollPane0.getViewport();
      jViewport0.getGraphics();
      jDayChooser0.setWeekOfYearVisible(true);
      SystemColor systemColor0 = SystemColor.controlText;
      assertEquals(0, systemColor0.getRed());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6955852330739245
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ActionEvent actionEvent0 = new ActionEvent("3-tR$oJv#", 0, "3-tR$oJv#", 11);
      actionEvent0.paramString();
      Integer integer0 = StrokingTextPainter.ADJUST_SPACING;
      Object object0 = new Object();
      actionEvent0.setSource(object0);
      actionEvent0.paramString();
      actionEvent0.paramString();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isWeekOfYearVisible();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setMaxDayCharacters((-479));
      jDayChooser0.setMonth(11);
      jDayChooser0.setMaxDayCharacters(13);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = new Object();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(246);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-3302));
      System.setCurrentTimeMillis((-2310L));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3302), 35, 718, (-3302), '~');
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent(jDayChooser0, (-2848), 37, 557, (-2848), '~', 504);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ActionEvent actionEvent0 = new ActionEvent("", 17, "", 17);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDay(17);
      boolean boolean0 = false;
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext(17, (String[]) null, (String[]) null, (String[]) null, (String[]) null, iBindingFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(14);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.darkGray;
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(0, 0);
      jDayChooser_DecoratorButton0.getConditionForKeyStroke(keyStroke0);
      jDayChooser_DecoratorButton0.setBounds(1424, 1424, 1424, 2139095040);
      jDayChooser_DecoratorButton0.isFocusable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "ON]7";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext(0, stringArray0, stringArray0, stringArray0, stringArray0, (IBindingFactory) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxDayCharacters();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      locale0.clone();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.getTime();
      // Undeclared exception!
      try { 
        jDayChooser0.putClientProperty((Object) null, mockGregorianCalendar0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(1300, 680);
      jDayChooser_DecoratorButton0.getConditionForKeyStroke(keyStroke0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setYear((-1));
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.textHighlight;
      int int0 = 0;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      floatArray0[3] = 3722.7737F;
      floatArray0[4] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      systemColor0.getComponents(floatArray0);
      Color.getColor("day", 0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Boolean boolean0 = new Boolean("day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isDayBordersVisible();
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_RTL;
      try { 
        Integer.parseUnsignedInt("day");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"day\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.focusLost((FocusEvent) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
