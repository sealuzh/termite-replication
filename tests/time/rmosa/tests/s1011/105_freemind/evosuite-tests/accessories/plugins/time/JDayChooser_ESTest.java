/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 00:53:00 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.sql.Timestamp;
import java.time.Clock;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import javax.swing.Box;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StyleContext;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0632428728198993
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setRequestFocusEnabled(false);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1534.8627F;
      floatArray0[2] = 1000.0F;
      floatArray0[3] = (-1184.8823F);
      floatArray0[4] = 1502.7445F;
      floatArray0[5] = (-2346.0F);
      floatArray0[6] = (-4.0F);
      floatArray0[7] = 0.0F;
      color0.getRGBComponents(floatArray0);
      jDayChooser0.getMaxSelectableDate();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setFocus();
      jDayChooser0.getLocale();
      jDayChooser0.setMinSelectableDate(date0);
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(0, color1.getGreen());
      
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDecorationBackgroundVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.isDecorationBackgroundVisible();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(31);
      JSpinner jSpinner0 = new JSpinner();
      KeyEvent keyEvent0 = new KeyEvent(jSpinner0, 31, 0L, 31, 40, 'a');
      jDayChooser0.keyPressed(keyEvent0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      Rectangle rectangle0 = new Rectangle(578, 1601, 210, 210);
      Rectangle rectangle1 = new Rectangle(rectangle0);
      jDayChooser0.setMonth(1601);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.695529662081982
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.maxDayCharacters = 14;
      jDayChooser0.setDay(31);
      JSpinner jSpinner0 = new JSpinner();
      KeyEvent keyEvent0 = new KeyEvent(jSpinner0, (-109), 31, 31, (-109), 'h');
      jDayChooser0.keyPressed(keyEvent0);
      Locale locale0 = Locale.KOREA;
      jDayChooser0.setLocale(locale0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.requestFocus(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 210, (-1113L), (-3818), 40, '_');
      jDayChooser0.keyPressed(keyEvent0);
      Locale locale0 = Locale.KOREA;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2866, 36, 36, 38, 'j');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange((String) null, (byte)14, (byte)14);
      jDayChooser0.addListeners((byte)14);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 9829, (-921L), (byte)14, 63723, 'c', (byte) (-79));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(7);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 10, true);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(63707);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(2);
      jDayChooser0.getDaysInMonth();
      assertEquals(2, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 50L, (-2325), 36, 'A');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8016608785763006
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      metalTreeUI0.getExpandedIcon();
      JButton jButton0 = new JButton((Icon) null);
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 2866, "SAX1 driver class {0} loaded but cannot be instantiated", 1073741824L, 2866);
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      Font font0 = styleContext0.getFont("day", 13, 13);
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(31);
      Rectangle rectangle0 = new Rectangle(100, 31, 100, 31);
      jDayChooser0.setMonth(31);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6966125822321803
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setLocation(0, (-514));
      Date date0 = jDayChooser2.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setFocus();
      JMonthChooser jMonthChooser0 = jDayChooser1.monthChooser;
      jDayChooser2.setMonthChooser((JMonthChooser) null);
      jDayChooser2.drawWeeks();
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Box box0 = Box.createHorizontalBox();
      KeyEvent keyEvent0 = new KeyEvent(box0, (-1408), (-1L), (-1408), (-77), 'R');
      Locale locale0 = jDayChooser0.locale;
      locale0.getUnicodeLocaleKeys();
      jDayChooser0.isFocusOwner();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(203, dimension0.width);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxSelectableDate((Date) null);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_EMPTY_PARAGRAPH;
      JComponent.isLightweightComponent(jDayChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.ORANGE;
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setDecorationBackgroundColor(color0);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.896153112519625
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Rectangle rectangle0 = new Rectangle(11, 49);
      jDayChooser0.getBounds(rectangle0);
      jDayChooser_DecoratorButton0.isPaintingForPrint();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setFocus();
      jDayChooser0.getLocale();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 0, true);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1227));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.983211734533764
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-40), "I2S)");
      actionEvent0.paramString();
      jDayChooser0.setToolTipText("I2S)");
      jDayChooser0.revalidate();
      jDayChooser0.getY();
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.firePropertyChange("I2S)", 1L, 0L);
      jDayChooser0.getLocale();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      jDayChooser0.setCalendar(gregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      
      jDayChooser0.setMonth(3424);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.requestFocus(false);
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.983358662171902
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.updateUI();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setWeekOfYearVisible(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1048, 0, 1048, 5, 'A');
      keyEvent0.setKeyCode(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.updateUI();
      int int0 = (-6647);
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane(26, (-6647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid verticalScrollBarPolicy
         //
         verifyException("javax.swing.JScrollPane", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-1437625606));
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getDecorationBackgroundColor();
      Clock clock0 = mock(Clock.class, new ViolatedAssumptionAnswer());
      doReturn((ZoneId) null).when(clock0).getZone();
      doReturn((Instant) null).when(clock0).instant();
      // Undeclared exception!
      try { 
        MockLocalTime.now(clock0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.LocalTime", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0643462211527317
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addNotify();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDoubleBuffered();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeMouseListener(defaultCaret0);
      jDayChooser0.getY();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser1.isDecorationBackgroundVisible();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.getMaxDayCharacters();
      Color color0 = Color.cyan;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      jDayChooser2.firePropertyChange("+Jd\"x_!LX97=nXK3", (-250), 0);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1768.973F;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      Color.RGBtoHSB(0, 0, 0, floatArray0);
      Color color1 = jDayChooser0.decorationBackgroundColor;
      jDayChooser1.setWeekdayForeground(color1);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser2.isWeekOfYearVisible();
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(31);
      JSpinner jSpinner0 = new JSpinner();
      KeyEvent keyEvent0 = new KeyEvent(jSpinner0, 31, 31, 31, 31, 'a');
      jDayChooser0.keyPressed(keyEvent0);
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.maxDayCharacters = (-1621);
      jDayChooser0.setLocation(0, 0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.ORANGE;
      jDayChooser0.setMaxDayCharacters((-2608));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.keyReleased((KeyEvent) null);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      String string0 = ".";
      jDayChooser0.firePropertyChange(".", '2', '2');
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.keyReleased((KeyEvent) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.dayBordersVisible = true;
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = 406;
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.xpath.operations.Mod");
      // Undeclared exception!
      try { 
        jdbcConnection0.prepareStatement("day");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 41, "#g;P%8s9/F", 41, 2866);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isPaintingForPrint();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocus(true);
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y>F");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      SystemColor systemColor0 = SystemColor.windowBorder;
      jDayChooser0.setForeground(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.remove((-2613));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2613
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1624, 1216L, 1435, 1435, 'R');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, (-462L), 39, (-1), 'W');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)13;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      boolean boolean0 = new Boolean("day");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeMouseListener(defaultCaret0);
      jDayChooser0.getY();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isWeekOfYearVisible();
      SystemColor systemColor0 = SystemColor.desktop;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6956064543588734
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      jDayChooser0.revalidate();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getY();
      jDayChooser0.setMaxDayCharacters(328);
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      imageIcon0.setDescription("day");
      JButton jButton0 = new JButton((String) null, imageIcon0);
      jDayChooser0.setYear(328);
      jDayChooser0.setMonth(3);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getGraphicsConfiguration();
      Frame frame0 = null;
      try {
        frame0 = new Frame("day", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setLocation((-1123), (-1621));
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("31", 2488, 3221);
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDoubleBuffered();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeMouseListener(defaultCaret0);
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertNull(jButton0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setDebugGraphicsOptions(1083);
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setLocation((-1123), (-1621));
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Timestamp timestamp0 = new Timestamp(0);
      jDayChooser0.setSelectableDateRange(date0, timestamp0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setLocation((-1408), (-1408));
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("])Fi=uR|", 0L, 0L);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
