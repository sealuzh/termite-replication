/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 01:13:22 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("(m4W@1X:g~m2o#\"+", 102);
      long long0 = jSONObject1.optLong("(m4W@1X:g~m2o#\"+");
      assertEquals(102L, long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, JSONObject> hashMap1 = new HashMap<Object, JSONObject>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("(&~g'Bkjco8-", (Collection) linkedList0);
      Object object0 = new Object();
      Long long0 = new Long(0L);
      jSONObject1.accumulate("\n", hashMap1);
      jSONObject0.optJSONArray("(&~g'Bkjco8-");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.080056919694302
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("islistIterator", (-3562.464));
      jSONObject1.optInt("islistIterator");
      try { 
        jSONObject1.getJSONObject("islistIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islistIterator\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap1 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("nPxE.#P]pZk", (Map) hashMap1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("nPxE.#P]pZk", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("nPxE.#P]pZk");
      JSONArray jSONArray1 = jSONObject0.names();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-1416), (-1416));
      jSONObject0.append("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", linkedList0);
      jSONObject0.getJSONArray("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("|%y,rQH9zNWb", "|%y,rQH9zNWb");
      jSONObject1.put("J_w|p +nA_%*'JVy", (-2043.65054975258));
      try { 
        jSONObject0.getDouble("|%y,rQH9zNWb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|%y,rQH9zNWb\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      Long long1 = new Long((-2553L));
      jSONObject0.optBoolean("WHlE2FKM1+.|mh");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("wheel.json.JSONObject$Null", (Collection) linkedList0);
      Byte byte0 = Byte.valueOf((byte)57);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject$Null", byte0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = "Null key.";
      jSONObject0.remove("Null key.");
      String string1 = ": ";
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject1 = jSONObject0.put(": ", (Map) hashMap0);
      try { 
        jSONObject1.append(": ", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[: ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("|%y,rQH9zNWb", "|%y,rQH9zNWb");
      JSONObject jSONObject2 = jSONObject1.put("{", (-1013.0639749168861));
      double double0 = jSONObject2.getDouble("{");
      assertEquals(2, jSONObject1.length());
      assertEquals((-1013.0639749168861), double0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-2519L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      jSONObject0.optInt((String) null);
      long long0 = 0L;
      jSONObject0.put("g8nf3N3GH-}[zW", 0L);
      jSONObject0.getDouble("g8nf3N3GH-}[zW");
      Float float0 = new Float(1.0F);
      float float1 = 8.824F;
      String string1 = "de";
      try { 
        jSONObject0.getJSONArray("de");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"de\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", hashMap0);
      jSONObject0.put("Expected '", 0.0);
      jSONObject0.toString(101);
      JSONObject.quote("{\"java.lang.String@0000000002\": java.lang.Double@0000000005}");
      jSONObject0.getLong("Expected '");
      double double0 = jSONObject1.getDouble("Expected '");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", hashMap0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.put("Expected '", (double) 101);
      double double0 = jSONObject1.getDouble("Expected '");
      assertEquals(101.0, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("Null key.", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.isNull("Null key.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("v", (-195));
      int int0 = jSONObject0.getInt("v");
      assertEquals((-195), int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.101745604741793
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-757.283F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(27, 0);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\n                           \"java.lang.String@0000000003\": java.lang.Boolean@0000000004,\n                           \"java.lang.String@0000000005\": java.lang.Boolean@0000000006,\n                           \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\"\n}");
      JSONObject.numberToString(float0);
      boolean boolean0 = jSONObject1.isNull("{\n                           \"java.lang.String@0000000003\": java.lang.Boolean@0000000004,\n                           \"java.lang.String@0000000005\": java.lang.Boolean@0000000006,\n                           \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\"\n}");
      assertTrue(boolean0);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8772034520289815
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float((-757.283F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(0, 0);
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Byte.toUnsignedInt((byte)46);
      Byte byte0 = new Byte((byte)46);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = jSONObject1.toString(3220, 3220);
      assertEquals("{}", string0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(3220);
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short)773);
      jSONArray0.optJSONObject(3220);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-697));
      hashMap0.put((Long) null, (JSONObject) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Null pointer", 3100);
      int int0 = jSONObject0.getInt("Null pointer");
      assertEquals(3100, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Null pointer", 3100);
      jSONObject1.remove("Null pointer");
      jSONObject0.toString(16, 16);
      JSONObject jSONObject2 = jSONObject0.put("istoString", (-276.2));
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(808);
      hashMap0.put("B", integer0);
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", true);
      String string1 = jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, JSONObject> hashMap1 = new HashMap<Object, JSONObject>();
      jSONObject0.put("nPxE.#P]pZk", (Map) hashMap1);
      try { 
        jSONObject0.getJSONArray("nPxE.#P]pZk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nPxE.#P]pZk\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K(AT", (-1526));
      double double0 = jSONObject1.optDouble("K(AT");
      assertEquals((-1526.0), double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      Object object0 = JSONObject.NULL;
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean.valueOf(false);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("nS4.sc2j{g1s`W6b4qw");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer integer0 = new Integer((-790));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /TWLQP~))b9";
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("getparseLong", "");
      jSONObject0.opt(" at character ");
      jSONObject0.names();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(";IG /TWLQP~))b9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ;IG /TWLQP~))b9
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(430, 3220);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "{uY|&x2`/2)3c*54";
      JSONTokener jSONTokener0 = new JSONTokener("{uY|&x2`/2)3c*54");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {uY|&x2`/2)3c*54
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.accumulate("] is not a JSONObject.", boolean0);
      jSONObject0.optBoolean("] is not a JSONObject.");
      try { 
        jSONObject0.getJSONObject("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("VI=DaJmNnE", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", 70);
      jSONObject1.optDouble("wheel.json.JSONException");
      JSONObject jSONObject2 = jSONObject1.append("Substring bounds error", "getjoin");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~z$0\"Gh~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~z$0\"Gh~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1L));
      linkedList0.add(long0);
      Long long1 = new Long(0L);
      linkedList0.add(long1);
      Float float0 = new Float(1.0F);
      Float.min(981.6F, 0L);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(4, jSONObject0.length());
      
      JSONObject.valueToString(float0, 62, 123);
      String string0 = JSONObject.doubleToString(3201.3178534488784);
      assertEquals("3201.3178534488784", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short.toUnsignedInt((short)1343);
      JSONObject jSONObject1 = jSONObject0.put("!>", (Collection) null);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      jSONObject0.accumulate("m9i'1w+)Yq;^d?/J.hC", float0);
      jSONObject0.put("getjoin", (Object) "m9i'1w+)Yq;^d?/J.hC");
      StringWriter stringWriter0 = new StringWriter(128);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.accumulate("|%y,rQH9zNWb", boolean0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "|%y,rQH9zNWb", 11, 11);
      jSONObject1.write(stringWriter1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1861049270388184
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer((-790));
      String[] stringArray0 = new String[1];
      JSONObject.doubleToString((-790));
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject((Object) "-790");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      String string0 = JSONObject.quote("-790");
      assertEquals("\"-790\"", string0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"-790\"");
      jSONObject0.write(stringWriter1);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject(integer0, stringArray0);
      jSONObject1.putOpt("'", (Object) null);
      Integer integer1 = new Integer((-790));
      String string1 = JSONObject.doubleToString((-790));
      assertEquals("-790", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long(0L);
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", 59);
      Object object0 = jSONObject0.get("0");
      assertEquals(59, object0);
      
      JSONObject.valueToString(jSONObject0);
      String string0 = JSONObject.quote("n .F64~C/JJ`A");
      assertEquals("\"n .F64~C/JJ`A\"", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      jSONObject0.optLong("", (-2498L));
      String string1 = "w%gxguu8T";
      jSONObject0.optString("w%gxguu8T");
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("getjoin", double0);
      String string2 = "RJvvO^^|\"3gdd5";
      jSONObject1.optString("getjoin", "quo");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("F'rm!2&F9L-6wk]D)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of F'rm!2&F9L-6wk]D)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("A JSONObject text must end with '}'", 0.0);
      Boolean.valueOf(true);
      Boolean boolean0 = Boolean.valueOf("A JSONObject text must end with '}'");
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONObject text must end with '}'", boolean0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("va", (Collection) linkedList0);
      Long long0 = new Long(0L);
      Short short0 = new Short((short)1);
      JSONObject jSONObject1 = jSONObject0.accumulate("va", short0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 16, 47);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3220);
      String string0 = JSONObject.valueToString((Object) null, 1882, 3220);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(1156, 1156);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "Wq;x*5hFl";
      Short.toUnsignedInt((short) (-2525));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("istoString", (Collection) linkedList0);
      Object object0 = new Object();
      Short short0 = new Short((short)1343);
      jSONObject0.accumulate("Wq;x*5hFl", "istoString");
      // Undeclared exception!
      jSONObject1.toString(63011);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ma", false);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Null key.", 2108.4662);
      assertEquals(2108.4662, double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("JSONArray[", 0.0);
      try { 
        jSONObject0.getJSONObject("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer((-790));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "cX*YpH";
      Integer.toUnsignedLong((-790));
      JSONObject.doubleToString(4294966506L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("4.294966506E9");
      String string0 = null;
      String string1 = "*~5clv/)6\".9XdpWTs";
      jSONObject0.optString("E#{!WI\"L-W", (String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "istoArray";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      short short0 = (short) (-620);
      Short short1 = new Short((short) (-620));
      linkedList0.removeLastOccurrence(short1);
      JSONObject jSONObject1 = jSONObject0.put("istoArray", (Collection) linkedList0);
      try { 
        jSONObject1.getInt("istoArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoArray\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("get", (Collection) linkedList0);
      try { 
        jSONObject0.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.104765015237839
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer((-790));
      String[] stringArray0 = new String[6];
      stringArray0[0] = ";IG /TWLQP~))b9";
      Integer.toUnsignedLong((-790));
      JSONObject.doubleToString(4294966506L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(4294966506L);
      Long.sum(4294966506L, (-790));
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(";IG /TWLQP~))b9");
      JSONObject jSONObject0 = new JSONObject((Object) "4.294966506E9");
      JSONObject jSONObject1 = jSONObject0.put(";IG /TWLQP~))b9", (Collection) null);
      jSONObject0.has(";IG /TWLQP~))b9");
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject3);
      try { 
        jSONObject1.get("\"java.lang.String@0000000002\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000002\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "quo";
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Object) "quo");
      // Undeclared exception!
      jSONObject0.toString(3220, 3220);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add((Long) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Object, JSONObject> hashMap1 = new HashMap<Object, JSONObject>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = Boolean.FALSE;
      Double double0 = new Double(943.5833471);
      hashMap0.put(boolean0, double0);
      JSONObject jSONObject1 = jSONObject0.put("(&~g'Bkjco8-", (Collection) linkedList0);
      Object object0 = new Object();
      Long long0 = new Long(0L);
      jSONObject1.names();
      String string0 = jSONObject0.optString("(&~g'Bkjco8-");
      assertNotNull(string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      Byte.compare((byte) (-6), (byte)16);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Unclosed comment";
      stringArray0[1] = "+";
      stringArray0[2] = "yp&R~T";
      stringArray0[3] = "+";
      stringArray0[4] = "+";
      stringArray0[5] = "+";
      JSONObject jSONObject0 = new JSONObject(" Yb]o0vq", stringArray0);
      int int0 = jSONObject0.optInt("+", (-745));
      assertEquals((-745), int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "H t*+&z;|";
      try { 
        jSONObject0.put("H t*+&z;|", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("|%y,rQH9zNWb", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("fRItI4h-w$6s1", 0);
      double double0 = jSONObject1.optDouble("fRItI4h-w$6s1");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "Null key.";
      jSONObject0.put("Null key.", 0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.optDouble("Null key.", 0.0);
      linkedList0.add(jSONObject0);
      try { 
        jSONObject0.getInt("K~ OIBP3.p6N3bz/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K~ OIBP3.p6N3bz/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.putAll(hashMap1);
      jSONObject0.optDouble("");
      HashMap<String, JSONArray> hashMap2 = new HashMap<String, JSONArray>();
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      hashMap1.put((Short) null, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 2777, 41);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 37, 37);
      try { 
        jSONObject0.get("m{`8rr?S$x5q2fT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m{`8rr?S$x5q2fT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" ]ojoA*Bd_n}x/B\u0004Em", (-951.5539655599554));
      jSONObject1.getString(" ]ojoA*Bd_n}x/B\u0004Em");
      jSONObject0.getLong(" ]ojoA*Bd_n}x/B\u0004Em");
      Long.sum((-1304L), (-951L));
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = "PDd}4QM[xCCB(&.";
      Long long0 = new Long((-1304L));
      Long long1 = Long.getLong("PDd}4QM[xCCB(&.", long0);
      linkedList0.offerFirst(long1);
      Long long2 = new Long((-3408L));
      linkedList0.add(long2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      short short0 = (short) (-3);
      Short short1 = new Short((short) (-3));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("*^-H88<5<9", 78.89);
      jSONObject1.getLong("*^-H88<5<9");
      Double double0 = new Double(0.0);
      Double.isFinite(4146.58377338328);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ",\n";
      stringArray0[1] = "A*\" s4";
      stringArray0[2] = "true";
      stringArray0[3] = "\f";
      stringArray0[4] = "&&k|*";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("A*\" s4", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(linkedList0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong(",\n", 3140L);
      assertEquals(3140L, long0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Float float0 = new Float(0.0F);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      jSONObject0.optString("i} F >j'-8oIH", "spl");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject1, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      String[] stringArray0 = new String[3];
      String string0 = " of ";
      stringArray0[0] = " of ";
      stringArray0[1] = "+";
      String string1 = " Yb]o0vq";
      stringArray0[2] = " Yb]o0vq";
      Byte.compare((byte)0, (byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optInt(" Yb]o0vq", (int) (byte)0);
      try { 
        jSONObject0.getJSONArray("java.lang.Long@00000000030");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000030\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = " ]ojoA*Bd_n}x/B\\4Em";
      String string1 = " ]ojoA*Bd_n}x/B\\4Em";
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 1758.94716341848;
      Double double1 = new Double(1758.94716341848);
      try { 
        jSONObject0.accumulate((String) null, double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = " ]ojoA*Bd_n}x/B\\4Em";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(" ]ojoA*Bd_n}x/B\u0004Em", " ]ojoA*Bd_n}x/B\u0004Em");
      jSONObject1.getString(" ]ojoA*Bd_n}x/B\u0004Em");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("java.lang.String@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of java.lang.String@0000000002
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = new Integer(2060);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /TWLQP~))b9";
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt(";IG /TWLQP~))b9");
      JSONObject jSONObject1 = jSONObject0.optJSONObject(";IG /TWLQP~))b9");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt((String) null);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("\"\"");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong(",\n", (-980L));
      assertEquals((-980L), long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(";IQ^XG /TWLQP~))b", ";IQ^XG /TWLQP~))b");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, ";IQ^XG /TWLQP~))b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("A JSONObject text must end with '}'");
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("[3:");
      assertNull(object0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 3100);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("0{LYbj");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-1774.0));
      hashMap0.put("A JSONObject text must end with '}'", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      hashMap0.put(float0, float1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("(m4W@1X:g~m2o#\"+", 102);
      try { 
        jSONObject1.getBoolean("(m4W@1X:g~m2o#\"+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(m4W@1X:g~m2o#\\\"+\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("l@E/=T%YTBSp #u", 0L);
      int int0 = jSONObject1.getInt("l@E/=T%YTBSp #u");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("Ji!xc\"d?`o", 22);
      Integer integer0 = new Integer(2435);
      hashMap0.put("Ji!xc\"d?`o", integer0);
      try { 
        jSONObject0.getDouble("f[8=:/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f[8=:/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("z5c'IK%PpG>a*/D0hI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z5c'IK%PpG>a*_/D0hI\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-169), 32);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Long long0 = new Long(0L);
      Double double0 = new Double(0L);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(3220, 3220);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString("t73S[", 83, 83);
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      JSONObject.valueToString(linkedList0, 1837, (-30733272));
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      Long long0 = Long.valueOf((long) (-30733272));
      linkedList1.add(long0);
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList1);
      Short short0 = new Short((short) (-1755));
      jSONArray1.optJSONObject(4767);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray3 = null;
      try {
        jSONArray3 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0, (-643), 92);
      assertNotNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("getreplaceFirst", jSONObject0);
      jSONObject0.putOpt("qI+YfQ3o0+`Y", "qI+YfQ3o0+`Y");
      jSONObject0.toString(1581, 37);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("y1_a^4bP!VUED2uO");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of y1_a^4bP!VUED2uO
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("istoJSONArray", 1L);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("getnotifyAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getnotifyAll\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-80));
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(194);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.quote("$0*9RE~wo \":@");
      assertEquals("\"$0*9RE~wo \\\":@\"", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("1/zO<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1/zO<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.optDouble("Null key.", (-836.61089));
      boolean boolean0 = linkedList0.add(jSONObject0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt("ispush", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("\"##N,FVB", linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(152);
      JSONObject.quote((String) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("!Bs:", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(69);
      try { 
        jSONObject0.put((String) null, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble("E", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("sTpWmM", true);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(102);
      jSONArray1.optBoolean(122);
      String string0 = "wheel.json.JSONObject$Null";
      String string1 = "d6 k?u'kW6LO!}";
      String string2 = "9L)#m^@^]f";
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("9L)#m^@^]f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 9L)#m^@^]f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = new Integer((-762));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";IG /TWLQP~))b9";
      Integer.toUnsignedLong((-762));
      JSONObject.doubleToString(4294966534L);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(4294966534L);
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      JSONObject.valueToString(";IG /TWLQP~))b9");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("9:*;A+kRf}^tN");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("K(AT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K(AT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Integer integer0 = new Integer(101);
      Integer.getInteger("p`%");
      JSONObject.testValidity(integer0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      int int0 = 1054;
      Integer.toUnsignedLong(1054);
      JSONObject.quote(";IG /TWLQP~))b9");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long((-1180L));
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      Long long1 = new Long((-1180L));
      // Undeclared exception!
      try { 
        Long.remainderUnsigned((-1247L), 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong(",\n", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("Hdp:&");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(2159);
      Long long0 = new Long(1L);
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("getentrySet");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getentrySet\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
