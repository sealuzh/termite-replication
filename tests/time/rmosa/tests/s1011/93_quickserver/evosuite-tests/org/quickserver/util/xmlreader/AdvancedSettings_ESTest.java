/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 00:39:48 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize((-3006));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-3006));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog((-183));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
      assertEquals((-3006), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertNotNull(string0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(2841);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTrafficClass("l$xLd/^98%g");
      advancedSettings0.setClientIdentifier("l$xLd/^98%g");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getCharset();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(0);
      advancedSettings1.setBacklog((-3749));
      advancedSettings1.setCharset("");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      assertEquals("l$xLd/^98%g", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(7);
      advancedSettings0.setPerformancePreferencesLatency(2626);
      advancedSettings0.setPerformancePreferencesLatency((-3131));
      advancedSettings0.setPerformancePreferencesLatency((-912));
      advancedSettings0.setPerformancePreferencesConnectionTime((-3131));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setCharset("");
      assertEquals((-3131), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.430758633903798
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(2);
      advancedSettings0.setClientSocketReceiveBufferSize(2);
      advancedSettings0.setByteBufferSize((-3721));
      advancedSettings0.setClientSocketReceiveBufferSize((-2714));
      advancedSettings0.setByteBufferSize(1387);
      advancedSettings0.setCharset("");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog(1387);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(1666);
      advancedSettings0.setCharset("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      assertEquals(1666, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(1152);
      advancedSettings0.setSocketLinger(450);
      advancedSettings0.setByteBufferSize(1152);
      advancedSettings0.setClientIdentifier("");
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(1152, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setMaxThreadsForNioWrite(1044);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize((-2252));
      advancedSettings0.setBacklog(1044);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("wkH=7e!\"tu&");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // wkH=7e!\"tu&
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertTrue(boolean0);
      
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getCharset();
      advancedSettings0.getCharset();
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setPerformancePreferencesLatency(11);
      advancedSettings0.setPerformancePreferencesLatency((-1307));
      advancedSettings0.setPerformancePreferencesLatency(2337);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesLatency();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.752720193935462
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(3868);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.setPerformancePreferencesLatency(3305);
      advancedSettings0.setPerformancePreferencesBandwidth(3868);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesConnectionTime(1195);
      assertEquals(65536, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getBacklog());
      
      advancedSettings0.setBacklog(1);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(1169);
      advancedSettings0.setPerformancePreferencesLatency((-1366));
      advancedSettings0.setPerformancePreferencesBandwidth(2561);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("EG]a)}<qq|");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // EG]a)}<qq|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setBacklog(36);
      advancedSettings0.setSocketLinger(36);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesLatency(444);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("");
      assertEquals(444, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.toXML("");
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("v]x<2W$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // v]x<2W$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("J");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // J
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-3601));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.setBacklog(65536);
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(3427);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-receive-buffer-size>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-receive-buffer-size>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("SKrYS");
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setSocketLinger(3414);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(3414, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("6:7}^T7Uj");
      advancedSettings0.toXML("6:7}^T7Uj");
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(2561);
      advancedSettings0.setPerformancePreferencesBandwidth((-2420));
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(2561, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-2420), int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setMaxThreadsForNioWrite((-3316));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("+F{,{]la(y");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setBacklog((-186));
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesLatency(808);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketSendBufferSize();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(808, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-3316), int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setSocketLinger(0);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.toXML("(]sRVu<z");
      assertEquals(1, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("", string0);
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-2062));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize((-650));
      advancedSettings0.setPerformancePreferencesConnectionTime((-614));
      advancedSettings0.setPerformancePreferencesLatency((-2197));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getUseDirectByteBuffer();
      int int0 = advancedSettings1.getSocketLinger();
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(785);
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(785, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertNotNull(string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
      
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertFalse(boolean0);
      
      advancedSettings0.setCharset((String) null);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "\\u$\\Rv)(CE\"  ";
      advancedSettings0.setClientIdentifier(string0);
      advancedSettings0.setClientIdentifier("4h<y?sF!jM");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getPerformancePreferencesBandwidth();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals("4h<y?sF!jM", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("CG1nVFm:Fh");
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals("CG1nVFm:Fh<advanced-settings>\nCG1nVFm:Fh\t<charset>ISO-8859-1</charset>\nCG1nVFm:Fh\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\nCG1nVFm:Fh\t<byte-buffer-size>65536</byte-buffer-size>\nCG1nVFm:Fh\t<backlog>0</backlog>\nCG1nVFm:Fh\t<socket-linger>-1</socket-linger>\nCG1nVFm:Fh\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\nCG1nVFm:Fh\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\nCG1nVFm:Fh\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\nCG1nVFm:Fh\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\nCG1nVFm:Fh\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\nCG1nVFm:Fh\t<performance-preferences-latency>0</performance-preferences-latency>\nCG1nVFm:Fh\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\nCG1nVFm:Fh\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\nCG1nVFm:Fh</advanced-settings>\n", string0);
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(10, int0);
      
      int int1 = advancedSettings0.getByteBufferSize();
      assertEquals(65536, int1);
      
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("Wd%f}");
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals("Wd%f}", advancedSettings0.getClientIdentifier());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }
}
