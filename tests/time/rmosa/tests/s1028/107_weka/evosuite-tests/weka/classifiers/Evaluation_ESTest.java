/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:52:02 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.AlphabeticTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      testInstances0.generate();
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.m_TotalCoverage;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double2 = evaluation0.numTruePositives(17);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double3, 0.01);
      
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      SGDText sGDText0 = new SGDText();
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.falseNegativeRate(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      evaluation0.numFalseNegatives(500);
      evaluation0.areaUnderROC((-1114383320));
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">fq_fSbr< Z{");
      testInstances0.setNumRelationalNominalValues((-74));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      double double1 = evaluation0.unweightedMacroFmeasure();
      evaluation0.numFalseNegatives((-1286));
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.22499999403953552;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 4774.73;
      doubleArray0[3] = (-51.723644);
      doubleArray0[4] = 0.95;
      doubleArray0[5] = 0.125;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-656.5));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = "Incorrectly Classified Instances   ";
      stringArray0[4] = "Y. Wang and I. H. Witten";
      stringArray0[5] = ".dat";
      stringArray0[6] = ".bsi";
      Instances.test(stringArray0);
      evaluation0.addNumericTrainClass((-2.0), 1279.1301859612);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.falseNegativeRate(25);
      char[] charArray0 = new char[8];
      charArray0[0] = 'X';
      charArray0[1] = 'D';
      charArray0[2] = '*';
      charArray0[3] = 'C';
      charArray0[4] = 'G';
      charArray0[5] = 'i';
      charArray0[6] = 'G';
      charArray0[7] = '7';
      evaluation0.num2ShortID(205, charArray0, 0);
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumPriorEntropy;
      evaluation0.kappa();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalString(9);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      try { 
        evaluation0.evaluateModelOnce((Classifier) multiClassClassifierUpdateable0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances1);
      double double0 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom();
      SGDText sGDText0 = new SGDText();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.falseNegativeRate(0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = 4.0;
      doubleArray0[7] = 0.0;
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(alphabeticTokenizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.tokenizers.AlphabeticTokenizer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances.test(testInstances0.DEFAULT_WORDS);
      evaluation0.toMatrixString("@data");
      wrapperSubsetEval0.getRevision();
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation0.numTruePositives(1895);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SGD sGD0 = new SGD();
      wrapperSubsetEval0.setClassifier(sGD0);
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.setDebug(true);
      Capabilities capabilities1 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      KStar kStar0 = new KStar();
      CostMatrix costMatrix0 = new CostMatrix(4);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4255.3409;
      int[] intArray0 = new int[8];
      intArray0[1] = 3;
      intArray0[4] = 5;
      intArray0[5] = (-32);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0, intArray0, (-32));
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, sparseInstance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      DenseInstance denseInstance0 = new DenseInstance(8);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassIndex(938);
      testInstances0.setClassIndex(2619);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4891.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1.1;
      SparseInstance sparseInstance0 = new SparseInstance(1.1, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(1.1, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4989561586638831
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.setDebug(true);
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumInstances(232);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      instances1.getRandomNumberGenerator((-1));
      double double0 = evaluation1.m_SumPriorAbsErr;
      double double1 = evaluation1.m_SumAbsErr;
      // Undeclared exception!
      try { 
        evaluation1.precision(232);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances1.generate();
      testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      XML xML0 = new XML();
      xML0.getHeader();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      J48 j48_0 = new J48();
      Capabilities capabilities0 = j48_0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      sVMLightLoader0.setRetrieval(2305);
      try { 
        sVMLightLoader0.setSource((File) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Source file object is null!
         //
         verifyException("weka.core.converters.AbstractFileLoader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1251545599412416
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.unweightedMacroFmeasure();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.resetOptions();
      databaseLoader0.getNextInstance((Instances) null);
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, (Instance) null, (-2086.71311763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("A document having an author and title, but not formally published.");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Instances instances1 = testInstances0.generate();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(200);
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("gk");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", ".dat");
      sVMLightLoader0.setSource(file0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("[#wN&$", arrayList0, 222);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.avgCost();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalNominalValues(226);
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateAttributes();
      evaluation0.confusionMatrix();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanEntropyGain();
      double double0 = evaluation0.m_SumKBInfo;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.2;
      doubleArray0[1] = 0.2;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = Double.NaN;
      evaluation0.priorEntropy();
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.2);
      evaluation0.addNumericTrainClass(0.2, (-1.0));
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.falseNegativeRate(25);
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int int0 = 938;
      testInstances0.setClassIndex(938);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1.7976931348623157E308), (-2));
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate((-2));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\nsqrt (2)\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      testInstances0.setNumRelationalNominalValues((-3036));
      int[] intArray0 = new int[1];
      intArray0[0] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1130.86144), doubleArray0, intArray0, (-2));
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.getRandomNumberGenerator((-2));
      double double0 = evaluation0.m_SumPriorAbsErr;
      testInstances0.getOptions();
      double double1 = evaluation0.m_SumAbsErr;
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("synopsis", "synopsis");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      sVMLightLoader0.setSource(file0);
      Evaluation.makeOptionString((Classifier) null, true);
      CostMatrix costMatrix0 = new CostMatrix(5);
      assertEquals(5, costMatrix0.size());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      evaluation0.priorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFSchemeEntropy();
      evaluation0.errorRate();
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(5, charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      double double0 = evaluation1.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom();
      SGDText sGDText0 = new SGDText();
      Object[] objectArray0 = new Object[1];
      try { 
        evaluation0.crossValidateModel((Classifier) sGDText0, instances1, 7, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      double double0 = evaluation0.m_SumAbsErr;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      try { 
        evaluation0.evaluateModel((Classifier) bayesNet0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      double double0 = evaluation1.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom();
      SGDText sGDText0 = new SGDText();
      Object[] objectArray0 = new Object[0];
      evaluation0.crossValidateModel((Classifier) sGDText0, instances1, 7, (Random) mockRandom0, objectArray0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.getRandomNumberGenerator(688L);
      double double0 = evaluation0.m_SumPriorAbsErr;
      CostMatrix costMatrix0 = new CostMatrix(2);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix1);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      evaluation1.equals(cVParameterSelection0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      WrapperSubsetEval wrapperSubsetEval1 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      Capabilities capabilities1 = new Capabilities(wrapperSubsetEval0);
      Capabilities capabilities2 = wrapperSubsetEval0.getCapabilities();
      wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities2);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4963503649635037
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.setDebug(true);
      Capabilities capabilities1 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      C45Loader c45Loader0 = new C45Loader();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Evaluation.handleCostOption("", 1281);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      KStar kStar0 = new KStar();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4997713763145862
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities1 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      testInstances0.setNumInstances(940);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", ".dat");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      SGDText sGDText0 = new SGDText();
      File file1 = sGDText0.getStopwords();
      sVMLightLoader0.setSource(file1);
      sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.794493388927128
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.setDebug(true);
      Capabilities capabilities1 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation0.meanAbsoluteError();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) m5Rules0, instances0, 5, (Random) mockRandom0, (Object[]) wrapperSubsetEval0.TAGS_EVALUATION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstances(682);
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.listOptions();
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances0, 470, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      J48 j48_0 = new J48();
      Capabilities capabilities0 = j48_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.setDebug(false);
      M5Rules m5Rules1 = new M5Rules();
      m5Rules0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 82, 778.8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.setDebug(false);
      M5Rules m5Rules1 = new M5Rules();
      Capabilities capabilities1 = m5Rules1.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 2478.5119933499805;
      doubleArray0[6] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 5, 0.02500000037252903);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 619877
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      M5Rules m5Rules0 = new M5Rules();
      capabilities0.capabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        evaluation0.evaluateModel((Classifier) decisionStump0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      double double1 = evaluation1.priorEntropy();
      assertEquals(1.0, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.numFalsePositives(2);
      DecisionTable decisionTable0 = new DecisionTable();
      String string0 = Evaluation.getGlobalInfo(decisionTable0);
      assertEquals("\nSynopsis for weka.classifiers.rules.DecisionTable:\n\nClass for building and using a simple decision table majority classifier.\n\nFor more information see: \n\nRon Kohavi: The Power of Decision Tables. In: 8th European Conference on Machine Learning, 174-189, 1995.", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockFile mockFile0 = new MockFile("N!pVL\"q`?ztF)dq=");
      sVMLightLoader0.setSource((File) mockFile0);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "N!pVL\"q`?ztF)dq=");
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      C45Loader c45Loader0 = new C45Loader();
      // Undeclared exception!
      try { 
        ConverterUtils.DataSource.read("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockFile mockFile0 = new MockFile("N!pVL\"q`?ztF)dq=");
      sVMLightLoader0.setSource((File) mockFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      evaluation0.getClassPriors();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = evaluation0.SFEntropyGain();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumClasses(Integer.MIN_VALUE);
      try { 
        evaluation0.evaluateModelOnce(0.07500000298023224, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("synopsis", "synopsis");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-240.92388640351413));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -240
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(2.0, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstances((-1));
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      sVMLightLoader0.reset();
      doubleArray0[4] = 3475.41158;
      doubleArray0[5] = (double) (-2);
      testInstances0.setWordSeparators("@relation");
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateAttributes();
      evaluation0.confusionMatrix();
      double double0 = evaluation0.m_ConfLevel;
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 0.95;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray0 = evaluation1.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      evaluation0.getClassPriors();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setClassifier((Classifier) null);
      // Undeclared exception!
      try { 
        Evaluation.makeOptionString(logitBoost0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.SingleClassifierEnhancer", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockFile.createTempFile("N!pVL\"q`?ztF)dq=", "z+");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      randomSubSpace0.buildClassifier(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      evaluation0.numInstances();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.assign(testInstances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String[] stringArray0 = new String[0];
      testInstances0.setOptions(stringArray0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassIndex(938);
      testInstances0.setClassIndex(2619);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((String) null, instances0, 2619, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: null
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities(wrapperSubsetEval0);
      TestInstances.forCapabilities(capabilities0);
      File file0 = MockFile.createTempFile("47(<Tf-<l$", "weka/core/Capabilities.props");
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation.makeOptionString(inputMappedClassifier0, false);
      CostMatrix costMatrix0 = new CostMatrix(117);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      MockRandom mockRandom0 = new MockRandom();
      SGDText sGDText0 = new SGDText();
      try { 
        evaluation0.crossValidateModel((Classifier) sGDText0, instances0, (-2910), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      sVMLightLoader0.reset();
      File file0 = MockFile.createTempFile("N!pVL\"q`?ztF)dq=", "z+");
      file0.createNewFile();
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      try { 
        Evaluation.handleCostOption("j=Y{ER", 2791);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      TestInstances testInstances0 = new TestInstances();
      String[] stringArray0 = new String[0];
      testInstances0.setOptions(stringArray0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) randomCommittee0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-1995138716));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 98);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      capabilities0.test(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setClassIndex(1);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 98);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", ".dat");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double0 = evaluation0.trueNegativeRate(1957);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("gk");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Y4");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "useAICTipText");
      try { 
        Evaluation.handleCostOption("Y4", 102);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"useAICTipText\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient(9);
      evaluation0.correct();
      Stacking stacking0 = new Stacking();
      int[] intArray0 = new int[0];
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) stacking0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("N!pVL\"q`?ztF)dq=", "N!pVL\"q`?ztF)dq=");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      DenseInstance denseInstance0 = new DenseInstance(1);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) sGDText0, (Instance) denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 98);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.matthewsCorrelationCoefficient(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumKBInfo;
      evaluation0.addNumericTrainClass(0.0, (-2008.8268865));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassIndex(31);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      evaluation0.addNumericTrainClass(961, 31);
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 117;
      evaluation0.addNumericTrainClass((-1), 117);
      int int1 = (-980);
      // Undeclared exception!
      try { 
        testInstances0.setNumRelational((-980));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      M5Rules m5Rules0 = new M5Rules();
      m5Rules0.setDebug(true);
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumInstances(2);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderPRC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      sVMLightLoader0.reset();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", ".dat");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom(1L);
      instances0.resampleWithWeights((Random) mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", ".dat");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      KStar kStar0 = new KStar();
      Evaluation.handleCostOption((String) null, (-32));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.m_SumClass = (double) 4;
      assertEquals(Double.NaN, evaluation1.weightedTrueNegativeRate(), 0.01);
      
      NaiveBayes naiveBayes0 = new NaiveBayes();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4255.3409;
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = 105;
      double double2 = evaluation0.m_SumAbsErr;
      double double3 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      sVMLightLoader0.reset();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", ".dat");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.areaUnderPRC(105);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedTruePositiveRate();
      PART pART0 = new PART();
      String string0 = Evaluation.makeOptionString(pART0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      sVMLightLoader0.reset();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MinTarget;
      evaluation0.trueNegativeRate(1);
      evaluation0.truePositiveRate(1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      boolean boolean0 = evaluation0.m_CoverageStatisticsAvailable;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-4654));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4654
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      testInstances1.generate();
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.m_TotalCoverage;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.numTruePositives(0);
      String string0 = Evaluation.makeOptionString(gaussianProcesses0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.595722115257705
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 80);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      M5Rules m5Rules0 = new M5Rules();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassIndex(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " column ");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      double double1 = evaluation0.m_SumKBInfo;
      evaluation0.numFalsePositives(2);
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      KStar kStar0 = new KStar();
      Evaluation.handleCostOption((String) null, (-32));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toClassDetailsString((String) null);
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(95);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      try { 
        Evaluation.handleCostOption("j=Y{ER", 95);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("N!pVL\"q`?ztF)dq=", "z+");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      sVMLightLoader0.reset();
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.incorrect();
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("N!pVL\"q`?ztF)dq=", "N!pVL\"q`?ztF)dq=");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ArffLoader arffLoader0 = new ArffLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(".arff", true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "  ?  ";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setRelationalClassFormat(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(4409);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances.test(testInstances0.DEFAULT_WORDS);
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(3);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-113), (char[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toMatrixString("@relation");
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getRevision();
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Instances.test(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        instances0.add((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.getRandomNumberGenerator(7);
      double double0 = evaluation0.m_SumKBInfo;
      double double1 = evaluation0.m_SumAbsErr;
      // Undeclared exception!
      try { 
        evaluation0.precision(649);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 649
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(95);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.m_CostMatrix = costMatrix0;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("Y4", 102);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      try { 
        Evaluation.evaluateModel((Classifier) simpleLinearRegression0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SimpleLinearRegression:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      String[] stringArray0 = new String[3];
      try { 
        Evaluation.evaluateModel((Classifier) simpleLogistic0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      testInstances0.setClassIndex(109);
      testInstances0.setClassIndex(2619);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      File file0 = MockFile.createTempFile("Y. Wang and I. H. Witten", "Y. Wang and I. H. Witten");
      sVMLightLoader0.setSource(file0);
      MockFile.createTempFile("numIterationsTipText", ".dat");
      sVMLightLoader0.setSource(file0);
      Instances instances0 = sVMLightLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numTruePositives((-1935));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostMatrix costMatrix0 = new CostMatrix(46);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("useAICTipText", arrayList0, 19);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "\tUse unsmoothed predictions");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Classifier classifier0 = null;
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Evaluation.makeOptionString(simpleLinearRegression0, true);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-2652));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
