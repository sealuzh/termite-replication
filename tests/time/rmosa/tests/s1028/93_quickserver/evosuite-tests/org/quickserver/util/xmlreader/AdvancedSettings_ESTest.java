/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:46:51 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1534));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getByteBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings2.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings2.setClientIdentifier((String) null);
      advancedSettings1.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      // Undeclared exception!
      try { 
        advancedSettings2.setCharset("! W4yooCg5M[BeJf1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ! W4yooCg5M[BeJf1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("ISO-8859-1");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("m");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // m
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = false;
      advancedSettings0.setClientSocketSendBufferSize((-9));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = "-+SM%3#b+aD-h[8b]vB";
      advancedSettings0.getClientSocketSendBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(7);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(7, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(591);
      advancedSettings0.setSocketLinger(591);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesBandwidth(591);
      advancedSettings0.getSocketLinger();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("5Mf/IAnK");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 5Mf/IAnK
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(18);
      advancedSettings0.setClientSocketSendBufferSize(18);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      String string0 = "8E>#S2X)C&a";
      advancedSettings0.setClientSocketTrafficClass("8E>#S2X)C&a");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings1.setPerformancePreferencesConnectionTime((-18));
      advancedSettings1.setByteBufferSize(18);
      String string1 = "";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("8E>#S2X)C&a");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 8E>#S2X)C&a
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-265));
      advancedSettings0.setBacklog((-1774));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite((-6));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-265));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("org.quickserver.util.xmlreader.AdvancedSettings");
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getMaxThreadsForNioWrite();
      int int0 = advancedSettings0.getBacklog();
      assertEquals("org.quickserver.util.xmlreader.AdvancedSettings", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-3203));
      advancedSettings0.setBacklog((-3203));
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-3203), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.27660795407654
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setClientSocketSendBufferSize(3973);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getPerformancePreferencesLatency();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setPerformancePreferencesLatency(1);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getCharset();
      advancedSettings2.setByteBufferSize(0);
      advancedSettings3.setCharset("ISO-8859-1");
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings4.setCharset("org.quickserver.util.xmlreader.AdvancedSettings");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.xmlreader.AdvancedSettings
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setBacklog(10);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("qmz!\"Yop1u-B7uti:T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qmz!\"Yop1u-B7uti:T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.198616238838059
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1534));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientIdentifier("E");
      advancedSettings0.setMaxThreadsForNioWrite((-1534));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getByteBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings2.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings1.getUseDirectByteBuffer();
      advancedSettings0.setBacklog((-1631));
      advancedSettings2.setClientSocketTrafficClass("~X>)MHY9g=");
      advancedSettings1.setCharset("");
      advancedSettings2.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals("E", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(false);
      advancedSettings1.setClientSocketTcpNoDelay(false);
      advancedSettings1.setPerformancePreferencesLatency((-3748));
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings1.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      advancedSettings1.setByteBufferSize(3198);
      advancedSettings0.setCharset("");
      advancedSettings1.setClientSocketTcpNoDelay(false);
      assertEquals((-3748), advancedSettings1.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setClientIdentifier("N!pVL\"q`?ztF)dq=");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setMaxThreadsForNioWrite(3948);
      String string0 = "a9%Z:w<";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("a9%Z:w<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // a9%Z:w<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4297811167972485
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientSocketSendBufferSize(1910);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setPerformancePreferencesLatency(1910);
      advancedSettings2.getCharset();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings2.setPerformancePreferencesConnectionTime(1910);
      advancedSettings1.setByteBufferSize(1910);
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("vv,)*mkAd8&(d1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // vv,)*mkAd8&(d1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("Zu}D~85M4sk(U},-");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketReceiveBufferSize(1455);
      assertEquals(1455, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-828));
      advancedSettings0.toXML("l#PB. KuObt6b*&S");
      assertEquals((-828), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog((-1774));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getBacklog());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setCharset("");
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings2.getClientIdentifier());
      assertEquals(10, advancedSettings2.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings2.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings2.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings2.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings2.getSocketLinger());
      assertTrue(advancedSettings2.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings2.getCharset());
      assertEquals(65536, advancedSettings2.getByteBufferSize());
      assertEquals(0, advancedSettings2.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass("</debug-non-blocking-mode>\n");
      advancedSettings0.setClientSocketTrafficClass("Jol}.*x@H");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5365859297869138
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("\t<performance-preferences-bandwidth>");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketSendBufferSize((-1581));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings1.setSocketLinger((-1));
      advancedSettings1.toXML("");
      advancedSettings0.setByteBufferSize(2542);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-1581), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getBacklog());
      assertNotNull(string0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals((-1), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      
      advancedSettings0.setByteBufferSize(1);
      assertEquals(1, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize((-661));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger((-661));
      advancedSettings0.setBacklog((-661));
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.getClientIdentifier();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals((-661), advancedSettings0.getSocketLinger());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesBandwidth((-2040));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getDebugNonBlockingMode();
      int int0 = advancedSettings0.getBacklog();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, int0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("qmz!\"Yop1u-B7uti:T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qmz!\"Yop1u-B7uti:T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("#y3:s91XVu[pzV");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #y3:s91XVu[pzV
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-540));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("XD:HB*qEU.O3t xJ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // XD:HB*qEU.O3t xJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1774));
      advancedSettings0.toXML("");
      assertEquals((-1774), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("kU");
      assertEquals("kU<advanced-settings>\nkU\t<charset>ISO-8859-1</charset>\nkU\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\nkU\t<byte-buffer-size>65536</byte-buffer-size>\nkU\t<backlog>0</backlog>\nkU\t<socket-linger>-1</socket-linger>\nkU\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\nkU\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\nkU\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\nkU\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\nkU\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\nkU\t<performance-preferences-latency>0</performance-preferences-latency>\nkU\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\nkU\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\nkU</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setByteBufferSize((-1));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("qmz!\"Yop1u-B7uti:T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qmz!\"Yop1u-B7uti:T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("", string0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getCharset();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setSocketLinger(1256);
      assertEquals(1256, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }
}
