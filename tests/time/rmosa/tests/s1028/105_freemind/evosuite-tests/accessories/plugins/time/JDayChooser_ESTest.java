/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:58:29 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.IndexColorModel;
import java.net.URISyntaxException;
import java.text.AttributedCharacterIterator;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import javax.help.GlossaryView;
import javax.help.HelpSet;
import javax.help.JHelpSearchNavigator;
import javax.help.plaf.basic.BasicSearchNavigatorUI;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.TransferHandler;
import javax.swing.plaf.basic.BasicListUI;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledEditorKit;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLIsIndexElementImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xerces.parsers.XML11DTDConfiguration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.983114535092661
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      FontInfo fontInfo0 = pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("B5");
      PDFResources pDFResources0 = new PDFResources(20);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      Hashtable<Locale.Category, Locale.Category> hashtable0 = new Hashtable<Locale.Category, Locale.Category>();
      pDFDocument0.setFilterMap(hashtable0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFResourceContext0, (String) null, ")[", 20);
      jDayChooser0.printComponents(pDFGraphics2D0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isDayBordersVisible();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ISO-8859-1");
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAlignmentX();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DocumentImpl documentImpl0 = new DocumentImpl(true);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(documentImpl0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGGraphics2D0);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D1);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5778234187024895
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      HelpSet helpSet0 = new HelpSet((ClassLoader) null);
      Locale locale0 = Locale.CHINESE;
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser0.setLocale(locale0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DocumentImpl documentImpl0 = new DocumentImpl(false);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(documentImpl0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGGraphics2D0);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      XML11DTDConfiguration xML11DTDConfiguration0 = null;
      try {
        xML11DTDConfiguration0 = new XML11DTDConfiguration();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // fRecognizedFeatures
         //
         verifyException("org.apache.xerces.parsers.XML11DTDConfiguration", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1));
      jDayChooser0.transferFocusUpCycle();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.695518092694581
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFocusTraversalKeys(0);
      jDayChooser0.setDay(0);
      TransferHandler transferHandler0 = new TransferHandler(" not supported by encoding in CDATA section");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'J', 0);
      jDayChooser0.keyPressed(keyEvent0);
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent(object0, 17, "Dialog Plain 11");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(300, (-2233), (-2233));
      mockGregorianCalendar0.set(0, 0);
      MockThread.currentThread();
      MockDate mockDate0 = new MockDate(9993, 0, 3842, 710, 0);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setFocus();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9831015956363767
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.addNotify();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getLocale();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 100, true, jDayChooser0);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      focusEvent0.setSource(styledEditorKit_UnderlineAction0);
      focusEvent0.paramString();
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputMap();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      Color color0 = Color.MAGENTA;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setMaxDayCharacters(41);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8963278746792485
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(2001);
      jDayChooser0.getTreeLock();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ROTATION;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1728));
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMonth(16);
      Locale locale0 = Locale.JAPANESE;
      MockCalendar.getInstance(locale0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      jDayChooser0.getDay();
      jDayChooser0.getWeekdayForeground();
      MockDate mockDate0 = new MockDate(459, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL, (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE, 459, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL);
      MockDate.UTC((-1044), 31, 12, (-2641), (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_LTR, 439);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setMaxDayCharacters((-1387));
      jDayChooser0.init();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-109);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING, 39, byteArray0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_LTR, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 121, 1667L, 37, 37, '#');
      FileSystemHandling.shouldAllThrowIOExceptions();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", true);
      KeyEvent keyEvent1 = new KeyEvent(jCheckBoxMenuItem0, (-18), 0L, 2526, 37, 'm');
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",Vm|");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-2696);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, (-2696), 34, ']');
      keyEvent0.setKeyChar('n');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setDecorationBackgroundVisible(false);
      int int0 = 20;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(20, 26, 13);
      StyleContext styleContext0 = new StyleContext();
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      jDayChooser0.getClientProperty(styledEditorKit_UnderlineAction0);
      StyleContext styleContext1 = new StyleContext();
      // Undeclared exception!
      try { 
        styleContext1.getFont((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.69631050055377
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getTreeLock();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ROTATION;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      jDayChooser0.setMaxDayCharacters((int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO);
      jDayChooser0.getMaxDayCharacters();
      System.setCurrentTimeMillis((-261L));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, 0, "r7FR=XE _8ALEy-Z}", 0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      MindMapMode mindMapMode0 = new MindMapMode();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3264), (-3264), (-1), (-1), 'w');
      jDayChooser0.keyReleased(keyEvent0);
      Color color0 = Color.MAGENTA;
      jDayChooser0.setWeekdayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.578547087297009
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.setLocale(locale0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date1 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser1.setSelectableDateRange(date0, date1);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      ImageHandlerJPEGEncoder imageHandlerJPEGEncoder0 = null;
      try {
        imageHandlerJPEGEncoder0 = new ImageHandlerJPEGEncoder("D-011", "Writing ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(29);
      jDayChooser0.getTreeLock();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8, 5000L, 29, 16, '|');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 16, 16, 16, 16, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(29);
      jDayChooser0.getTreeLock();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.FLOW_PARAGRAPH;
      jDayChooser0.setMonth((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getAutoscrolls();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 49, 49, (-185), (-185), 49, (-2538), true, 41, (-185), (-185));
      jDayChooser0.getToolTipLocation(mouseWheelEvent0);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.CHINESE;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.GREEN;
      jDayChooser0.setSundayForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JList<Object> jList0 = new JList<Object>();
      jList0.setFocusTraversalPolicyProvider(false);
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.695563447768113
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      HelpSet helpSet0 = new HelpSet((ClassLoader) null);
      Locale locale0 = Locale.CHINESE;
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      jDayChooser0.firePropertyChange("Metal", 0.0F, 0.0F);
      GlossaryView glossaryView0 = new GlossaryView(helpSet0, "11", "day", locale0, hashtable0);
      JHelpSearchNavigator jHelpSearchNavigator0 = new JHelpSearchNavigator(glossaryView0);
      BasicSearchNavigatorUI basicSearchNavigatorUI0 = new BasicSearchNavigatorUI(jHelpSearchNavigator0);
      jDayChooser0.removeComponentListener(basicSearchNavigatorUI0);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(121);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      jDayChooser0.setMaxDayCharacters((-1));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Stack<JButton> stack0 = new Stack<JButton>();
      JList<Object> jList0 = new JList<Object>(stack0);
      Stack<Object> stack1 = new Stack<Object>();
      jList0.setFocusTraversalPolicyProvider(true);
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(21);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAlignmentX();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      int int0 = 13;
      jDayChooser0.createVolatileImage(2, 5);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.dayPanel = (JPanel) jMonthChooser0;
      int int1 = 8920;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(8920);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.monthChooser = null;
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(963);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setDay(1042);
      jDayChooser0.getTransferHandler();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, 1042, 1042, 1042, (-4867), 'd');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.createVolatileImage(31, 31);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "day");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(2);
      jDayChooser0.getTreeLock();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ROTATION;
      String string0 = "13";
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      ActionEvent actionEvent0 = new ActionEvent(styledEditorKit_UnderlineAction0, (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL, "13");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      actionEvent0.setSource(defaultTableModel0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.578517327262091
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.createVolatileImage(100, 2);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser1.addListeners(164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      BasicListUI basicListUI0 = new BasicListUI();
      Vector<Integer> vector0 = new Vector<Integer>();
      JList<Integer> jList0 = new JList<Integer>(vector0);
      int int0 = 0;
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      try { 
        MockURI.URI("day", "i", "i", "i", "day");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: day://ii?i#day
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.US;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2719), (-957), (-957), (-2719), (-2719));
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-957));
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, (-957), "day", (-2719));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-371));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        jDayChooser0.getFocusTraversalKeys(210);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid focus traversal key identifier
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 319.3677F;
      floatArray0[2] = 630.9F;
      floatArray0[3] = 3367.5F;
      floatArray0[4] = (-2508.0027F);
      floatArray0[5] = 536.59F;
      floatArray0[6] = 1957.353F;
      floatArray0[7] = 0.0F;
      systemColor0.getRGBColorComponents(floatArray0);
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9831272903573964
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      jCheckBoxMenuItem0.getAccelerator();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8935, 8935, 8935, 8935, 'B');
      AWTKeyStroke.getAWTKeyStrokeForEvent(keyEvent0);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      jDayChooser0.setYear((-4292));
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isWeekOfYearVisible();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.getGraphicsConfiguration();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("H2#Z6z", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction1 = new StyledEditorKit.UnderlineAction();
      jDayChooser0.getClientProperty(styledEditorKit_UnderlineAction0);
      HashMap<AttributedCharacterIterator.Attribute, MockCalendar> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, MockCalendar>();
      Font.getFont("day");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.isDayBordersVisible();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.applyLocalizedPattern("day");
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 164, 164, 1969, 12, 'j', 1969);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction1 = new StyledEditorKit.UnderlineAction();
      jDayChooser0.getClientProperty(styledEditorKit_UnderlineAction0);
      HashMap<AttributedCharacterIterator.Attribute, MockCalendar> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, MockCalendar>();
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashMap0);
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)14;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-58);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.drawDays();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.selectedColor = color0;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLIsIndexElementImpl hTMLIsIndexElementImpl0 = new HTMLIsIndexElementImpl(hTMLDocumentImpl0, "document");
      sVGColorProfileElementBridge0.createICCColorSpaceExt(bridgeContext0, hTMLIsIndexElementImpl0, "1");
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) (byte)0;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (byte) (-58);
      color0.getComponents(floatArray0);
      // Undeclared exception!
      try { 
        color0.getColorComponents((ColorSpace) null, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getDayPanel();
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.addListeners(48);
      // Undeclared exception!
      try { 
        jDayChooser0.getFocusTraversalKeys(48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid focus traversal key identifier
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.firePropertyChange("{kSt!+", false, false);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setForeground(systemColor0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(826);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = (-957);
      Locale locale0 = JComponent.getDefaultLocale();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.firePropertyChange("29", '\"', '=');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.983188436729582
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.transferFocusBackward();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Class<StyledEditorKit.UnderlineAction> class0 = StyledEditorKit.UnderlineAction.class;
      jDayChooser_DecoratorButton0.getListeners(class0);
      jDayChooser_DecoratorButton0.isRequestFocusEnabled();
      jDayChooser_DecoratorButton0.isFocusable();
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      String string0 = "page";
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "year", 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695541075652718
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-1289L), 3, 0, '@', 0);
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5777233286214165
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = new Locale("");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isPaintingTile();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
