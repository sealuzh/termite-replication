/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 13:55:38 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4961832061068702
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.min(0.0, 0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.099633990865473
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer.getInteger("H5z3ZmW)Sdt^");
      Integer.toUnsignedLong(43);
      Integer.remainderUnsigned((-28), (-28));
      Float float0 = new Float(0.0);
      hashMap0.put((Integer) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("getmax", (-70125688));
      String string0 = "val";
      jSONObject0.names();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.toString();
      linkedList0.addLast(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("val", (Collection) linkedList0);
      JSONObject.quote("val");
      Byte byte0 = new Byte((byte)28);
      JSONObject.getNames((Object) byte0);
      JSONObject jSONObject2 = jSONObject0.put("eV$*6,FT", (int) (byte)28);
      JSONObject.quote("\"val\"");
      jSONObject2.toString();
      JSONObject.quote("val");
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("is", (-2631L));
      jSONObject1.putOpt("is", hashMap0);
      jSONObject1.put("G6RVPZRG", (Map) hashMap0);
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      hashMap0.putAll(hashMap1);
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put((Short) null, jSONArray0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(45, (-2544));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("%(!ul[Y+;vE", false);
      boolean boolean0 = jSONObject1.optBoolean("%(!ul[Y+;vE");
      assertFalse(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.accumulate("issum", "issum");
      Float float0 = new Float((-1.0));
      hashMap0.put(float0, jSONObject1);
      jSONObject0.optJSONArray("qDXvbTy6H6x");
      Short short0 = new Short((short)43);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = jSONObject2.has("7MA<jN|:_b");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("is", (-2631L));
      jSONObject1.put("G6RVPRG", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject0.optJSONObject("G6RVPRG");
      assertNotSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Double.sum((-1.0), (-2393.697335));
      linkedList0.add((Long) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("is", (-2631L));
      jSONObject1.put("G6RVPRG", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("G6RVPRG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G6RVPRG\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "?p_";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double.sum((-1.0), (-1.0));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("gettoLowerCase", (Collection) linkedList0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0, 1405, (-2909));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("is", (-2631L));
      JSONObject jSONObject2 = jSONObject1.put("G6RVPRG", (Map) hashMap0);
      String string0 = jSONObject2.toString();
      String string1 = jSONObject1.optString("G6RVPRG");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "u//{#oIhvX";
      stringArray0[1] = "va";
      stringArray0[2] = "h5oKfEP(EjpR";
      stringArray0[3] = "7y}</";
      JSONObject jSONObject1 = new JSONObject("getintern", stringArray0);
      jSONObject1.put("va", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("7y}</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7y}<\\/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a JSONObject.");
      assertEquals("\"] is not a JSONObject.\"", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "] is not a JSONObject.");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("#fxgUgOmqi-UqkJ", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("u//{#oIhvX", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("u//{#oIhvX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u//{#oIhvX\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4384474624881487
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.optLong("java.lang.Long@0000000003.");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000003.", (-2701.73424076393));
      jSONObject1.getLong("java.lang.Long@0000000003.");
      jSONObject0.toString((-3635));
      jSONObject1.toString(70, 70);
      JSONObject.quote("YRWxjv}aLq+yPU)b`");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      int int0 = 46;
      JSONObject.valueToString(hashMap1, 279, 46);
      String string0 = "tuutlDC_-n;><";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("tuutlDC_-n;><");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of tuutlDC_-n;><
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt(",X", object1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(97);
      linkedList0.add(integer0);
      JSONObject jSONObject2 = jSONObject1.put(",X", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject2.getJSONArray(",X");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.names();
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(float0);
      jSONObject0.put("4 jTdc2", 2102);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Short short0 = new Short((short)2860);
      JSONObject jSONObject1 = jSONObject0.putOpt("{yoc@Mn@o%r<qL7:o", short0);
      jSONObject0.getDouble("{yoc@Mn@o%r<qL7:o");
      jSONObject1.putOpt("{yoc@Mn@o%r<qL7:o", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject.testValidity(double0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("J$", hashMap0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("J$");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("is", (-2631L));
      Float float0 = new Float((double) (-2631L));
      JSONObject jSONObject2 = jSONObject1.putOpt((String) null, float0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject.doubleToString(Double.NaN);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Fo", (Collection) linkedList0);
      jSONObject1.isNull("Fo");
      JSONObject jSONObject2 = jSONObject1.accumulate("Fo", "Fo");
      JSONObject.testValidity(jSONObject2);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(3);
      JSONObject jSONObject1 = new JSONObject("{\n   \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(48);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(48);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(61);
      jSONObject0.write(stringWriter0);
      jSONObject0.put("", 3344.53955959);
      jSONObject0.optString("", "] isno a JSONArray.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "=e";
      JSONObject jSONObject0 = new JSONObject((Object) "=e");
      int int0 = 8448;
      // Undeclared exception!
      jSONObject0.toString(8448);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-1L));
      jSONObject1.optInt("");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[]";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("[]", object0);
      try { 
        jSONObject1.getBoolean("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2815553875954016
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("zQ .XVD?>Sb)_", (-7L));
      jSONObject1.optLong("zQ .XVD?>Sb)_");
      Float float0 = new Float((double) 1547L);
      jSONObject1.append("CZ}x.D~SW:q?g_`;A{", jSONObject0);
      Long long0 = new Long((-753L));
      Long.toUnsignedString(220L);
      boolean boolean0 = jSONObject0.optBoolean("CZ}x.D~SW:q?g_`;A{");
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      int int0 = jSONObject0.getInt("zQ .XVD?>Sb)_");
      assertEquals((-7), int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      JSONObject.quote("");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(48);
      Long long0 = new Long(48);
      JSONObject jSONObject0 = new JSONObject(long0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("Fk2rOrCS9J", (Collection) linkedList0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 1358, 1358);
      JSONObject.getNames(jSONObject0);
      Short short0 = new Short((short)7);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject.getNames((Object) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.put("saO'c>nkv,D", false);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-745), (-745));
      String string0 = JSONObject.quote("RzL?\"[");
      assertEquals("\"RzL?\\\"[\"", string0);
      
      String string1 = JSONObject.valueToString(jSONArray0, 125, (-1552));
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject.valueToString(jSONObject0, 1358, 1358);
      JSONObject.getNames(jSONObject0);
      Short short0 = new Short((short)7);
      JSONObject.getNames((Object) "{}");
      jSONObject0.opt("JSONArray[");
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", 1358);
      boolean boolean0 = jSONObject1.has("JSONArray[");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.valueOf("{}");
      Boolean boolean1 = Boolean.TRUE;
      hashMap0.put(boolean0, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("[c!H2>w3/Q&ey");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[c!H2>w3/Q&ey\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Long.getLong("w&OKXdsf(7~O");
      Long.compare(2392L, 2392L);
      Long long0 = new Long(0L);
      Long.getLong("isset", long0);
      Long.max((-989L), (-989L));
      jSONObject0.accumulate("r B?,IY", (Object) null);
      boolean boolean0 = new Boolean("w&OKXdsf(7~O");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("X,;3e&kxvC9pi8apz^U", 0L);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("istrim", (Collection) linkedList0);
      jSONObject0.remove("istrim");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('9');
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONObject0.write(writer0);
      assertEquals("9{}{}", stringWriter1.toString());
      assertEquals("9{}{}", stringWriter0.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("");
      String string0 = JSONObject.quote("getsum");
      assertEquals("\"getsum\"", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("\"getsum\"", (-2642L));
      String string1 = jSONObject1.optString("getsum", "");
      assertEquals("", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("8NLe#Ed%d}o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 8NLe#Ed%d}o
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(12);
      Long long0 = new Long((-2160L));
      Long long1 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.099633990865473
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("zQ .XVD?>Sb)_", 1534L);
      Float float0 = new Float((double) 1534L);
      JSONObject jSONObject2 = jSONObject1.append("=e", float0);
      jSONObject2.getInt("zQ .XVD?>Sb)_");
      Float.sum(1905.91F, 0.0F);
      boolean boolean0 = jSONObject2.optBoolean("zQ .XVD?>Sb)_");
      assertFalse(boolean0);
      
      double double0 = jSONObject2.optDouble("zQ .XVD?>Sb)_", 0.0);
      assertEquals(1534.0, double0, 0.01);
      
      int int0 = jSONObject0.optInt("np.jiG~", 1534);
      assertEquals(1534, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("zQ .XVD?>Sb)_", 1534L);
      Float float0 = new Float((double) 1534L);
      JSONObject jSONObject2 = jSONObject1.append("=e", float0);
      jSONObject2.getInt("zQ .XVD?>Sb)_");
      jSONObject2.optBoolean("zQ .XVD?>Sb)_");
      try { 
        jSONObject2.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("0?[X_u-w%\"qS'Ra#6`", double0);
      double double1 = jSONObject1.optDouble("0?[X_u-w%\"qS'Ra#6`");
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("zQ .XVD?>Sb)_", 0L);
      Float float0 = new Float((double) 1534L);
      jSONObject1.append("CZ}x.D~SW:q?g_`;A{", jSONObject0);
      int int0 = jSONObject0.getInt("zQ .XVD?>Sb)_");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("*SDeI07PA8&d:Qm{h-", (-2601L));
      Float float0 = new Float(0.0);
      jSONObject1.append("CZ}x.D~SW:q?g_`;A{", "=e");
      try { 
        jSONObject1.getInt("CZ}x.D~SW:q?g_`;A{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CZ}x.D~SW:q?g_`;A{\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-1774));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(0L);
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject(object1);
      jSONObject0.put(",+Q 5", 0L);
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      jSONObject0.toString(91, 1986);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float(185.35061);
      Float.min((-1.0F), (-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.valueToString(jSONObject0, 34, 34);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("sl");
      assertEquals("\"sl\"", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, 2648.577);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("%(!ul[Y+;vE", true);
      JSONObject jSONObject2 = jSONObject1.accumulate("nh", "nh");
      Float float0 = new Float((-1.0));
      hashMap0.put(float0, jSONObject1);
      jSONObject0.optJSONArray("qDXvbTy6H6x");
      Short short0 = new Short((short)44);
      JSONObject.getNames((Object) short0);
      boolean boolean0 = jSONObject2.has("7MA<jN|:_b");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-4L));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]";
      Boolean boolean0 = new Boolean("_|5/`#e");
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1798, 1798);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.offer(jSONObject0);
      boolean boolean0 = jSONObject0.isNull("getreverse");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONTokener", object0);
      try { 
        jSONObject1.getBoolean("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("~sCll", "~sCll");
      try { 
        jSONObject1.getBoolean("~sCll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~sCll\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.accumulate("u//{#oIhvX", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("u//{#oIhvX");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray(",\n");
      Double double0 = new Double(0.0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put(",\n", (Object) jSONArray0);
      Long long0 = new Long(1L);
      hashMap0.put(double0, long0);
      hashMap0.put(double0, (Long) null);
      Double double1 = new Double(1318.4832341896001);
      jSONObject0.append(",\n", double1);
      jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.optJSONArray(",\n");
      assertSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("ujcXc4.o1_G5#kA8`", hashMap0);
      jSONObject0.optJSONArray("qDXvbTy6H6x");
      Long long0 = new Long((-1L));
      JSONObject jSONObject2 = jSONObject0.accumulate("ujcXc4.o1_G5#kA8`", long0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", false);
      Double double0 = new Double(1.0);
      try { 
        jSONObject0.append("Null pointer", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Null pointer] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(28L);
      String[] stringArray0 = new String[19];
      stringArray0[12] = "[]";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[]", false);
      JSONObject.valueToString(jSONObject1);
      Object object1 = jSONObject0.get("[]");
      assertEquals(false, object1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (Object) "Substring bounds error");
      jSONObject1.put("Substring bounds error", (Object) jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.remove("Expected '");
      JSONObject jSONObject1 = jSONObject0.put("gettoUpperCase", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("{yoc@Mn@o%r<qL7:o", object0);
      try { 
        jSONObject1.getDouble("{yoc@Mn@o%r<qL7:o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{yoc@Mn@o%r<qL7:o\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("] is not a Boolean.", (-1.0));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.quote(":");
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      jSONObject0.optBoolean((String) null, false);
      int int0 = 8;
      jSONObject0.toString(8);
      String string0 = "' and instead saw '";
      hashMap0.putIfAbsent((Boolean) null, (JSONArray) null);
      jSONObject0.optString("' and instead saw '", (String) null);
      jSONObject0.put("{}", (-160));
      String string1 = "\"R8}MM- x&Eq?y\\#g";
      // Undeclared exception!
      try { 
        hashMap0.putAll((Map<? extends Boolean, ? extends JSONArray>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("0");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float((-1.0));
      Double double0 = new Double((-1.0));
      Double.max(567.846761, (-1.0));
      JSONObject.numberToString(double0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double1 = jSONObject0.optDouble("WeB");
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString(";#>pEx&.lLK!FuZjK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";#>pEx&.lLK!FuZjK\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer((-1248));
      Integer.divideUnsigned(114, 114);
      String string0 = JSONObject.valueToString(integer0, (-1248), 83);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "*SDeI07PA8&d:Qm{h-";
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("*SDeI07PA8&d:Qm{h-", (-2601L));
      Float float0 = new Float(0.0);
      String string1 = "CZ}x.D~SW\\:q?g_`;A{";
      jSONObject1.append("CZ}x.D~SW:q?g_`;A{", "=e");
      Float.isFinite((-1.0F));
      // Undeclared exception!
      jSONObject1.toString(3, 8192);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("wheel.json.JSONObject$1", 1924L);
      assertEquals(1924L, long0);
      
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-1570), (-3083));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-14530064), 12);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONObject$Null cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 1358, 1358);
      assertEquals("{}", string0);
      
      Float float0 = new Float((-4556.4899884));
      String string1 = JSONObject.quote((String) null);
      assertEquals("\"\"", string1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.026378750007062
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.quote("CYy[bB:/");
      Float float0 = new Float((-1.0));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "CYy[bB:/";
      stringArray0[1] = "[";
      stringArray0[2] = "\"CYy[bB:/\"";
      stringArray0[3] = "] is not a JSONObject.";
      stringArray0[4] = "\"CYy[bB:/\"";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("] is not a JSONObject.", jSONArray0);
      String string1 = jSONObject0.toString((-5355), (-5355));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-2544), (-2544));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      hashMap0.keySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 105);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(0.0);
      float float1 = Float.min((-2266.316F), 1853.0F);
      Float.isFinite(1562.608F);
      JSONObject.testValidity(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optLong("] is not a JSONObject.", 0L);
      String string0 = JSONObject.quote("B,Q");
      assertEquals("\"B,Q\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("Mt?FzT*P!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Mt?FzT*P!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(48);
      String string0 = "null";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = new JSONObject((Object) "null");
      Short short0 = new Short((short)60);
      JSONObject jSONObject2 = jSONObject1.accumulate("null", short0);
      jSONObject2.optLong("null");
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "is";
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = (-2631L);
      JSONObject jSONObject1 = jSONObject0.put("is", (-2631L));
      JSONObject jSONObject2 = jSONObject1.accumulate("is", jSONObject0);
      try { 
        jSONObject2.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("", 1534L);
      jSONObject1.append("Null pointer", "");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("0", (Collection) linkedList0);
      long long0 = jSONObject2.getLong("");
      assertEquals(1534L, long0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("[{Q|ws**9<[(", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-2631L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[]";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("[]", object1);
      try { 
        jSONObject1.getLong("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("*SDeI07PA8P&d:Qm{h-", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("*SDeI07PA8P&d:Qm{h-");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("mJN:`NI*");
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      linkedList0.add(double0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = '{';
      charArray0[2] = '=';
      charArray0[3] = '6';
      charArray0[4] = '(';
      CharBuffer.wrap(charArray0);
      JSONObject jSONObject1 = jSONObject0.append("u//{#oIhvX", "u//{#oIhvX");
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("U1i;c", (-78));
      String[] stringArray0 = new String[3];
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("p7g?1BgIDPS$F/z");
      assertEquals("\"p7g?1BgIDPS$F/z\"", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-96));
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Boolean, JSONArray> hashMap1 = new HashMap<Boolean, JSONArray>();
      Boolean.valueOf(false);
      String string0 = "l/KV-";
      JSONObject.doubleToString((-160));
      String string1 = "val";
      jSONObject0.put("val", 1399.758354);
      try { 
        jSONObject0.getLong("$>>^^d,c5UPvf!`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$>>^^d,c5UPvf!`\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("%l2", 144);
      assertEquals(144, int0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.8510944537717136
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("CYy[bB:/");
      assertEquals("\"CYy[bB:/\"", string0);
      
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("CYy[bB:/");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray1 = new JSONArray();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("77fBEt$-K>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"77fBEt$-K>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.quote("gvt%5M\"uPKLnxy=");
      assertEquals("\"gvt%5M\\\"uPKLnxy=\"", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      int int0 = 69;
      JSONObject.valueToString(boolean0, 150, 69);
      Boolean.compare(true, true);
      Boolean.logicalAnd(true, true);
      Object object0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "java.lang.Boolean@0000000001";
      stringArray0[1] = "java.lang.Boolean@0000000001";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      int int0 = 0;
      JSONObject.valueToString((Object) null, 0, 279);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("YYRB3/`?{PeoH+a|b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of YYRB3/`?{PeoH+a|b
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      Byte byte0 = new Byte((byte)116);
      hashMap0.clear();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("va", (-2986L));
      try { 
        jSONObject0.getDouble("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0519094158037667
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      long long0 = jSONObject0.optLong("wheel.json.JSONArray");
      assertEquals(0L, long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(",hXGg=C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,hXGg=C
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = new Boolean("B_q\"Go%_T6LZ.PEt");
      boolean boolean1 = jSONObject0.optBoolean("B_q\"Go%_T6LZ.PEt", true);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.018706115735962
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = JSONObject.quote("CYy[bB:/");
      assertEquals("\"CYy[bB:/\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("A JSONArray text must start with '['");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("Expected a ',' or ']'");
      JSONObject.quote("Expected a ',' or ']'");
      Object object0 = jSONObject0.opt("Expected a ',' or ']'");
      assertNull(object0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("NRs!D^nc3k55RSKsx");
      assertEquals("\"NRs!D^nc3k55RSKsx\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("", "] isno a JSONArray.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString(">3rG$gko/MbMf");
      StringWriter stringWriter0 = new StringWriter(58);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) ">3rG$gko/MbMf", 20, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(1800);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(boolean0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) (-2544));
      jSONObject0.put("getsubstring", (Object) float0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.put((String) null, (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("getget", (Map) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("efDj`xP", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("LIY6@~1W|iIY1s$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"LIY6@~1W|iIY1s$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
