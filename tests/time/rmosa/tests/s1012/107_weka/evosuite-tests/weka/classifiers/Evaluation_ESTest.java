/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 01:41:10 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.util.Random;
import java.util.function.Consumer;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckGOE;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      MockRandom mockRandom0 = new MockRandom(42L);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.setRelationName((String) null);
      double double1 = evaluation1.trueNegativeRate((-1496));
      assertEquals(0.0, double1, 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      double double2 = evaluation1.KBMeanInformation();
      double double3 = evaluation1.unweightedMicroFmeasure();
      assertEquals(double3, double2, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(593, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      DenseInstance denseInstance1 = new DenseInstance(0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(593, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(593);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_TotalCoverage;
      evaluation1.unclassified();
      try { 
        Evaluation.evaluateModel("?`_<Uv?!as", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name ?`_<Uv?!as.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setClassType(16);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumFolds = (-3008);
      Evaluation evaluation1 = new Evaluation(instances0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(593);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(pushbackInputStream0);
      converterUtils_DataSource0.nextElement(instances0);
      boolean boolean0 = evaluation1.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = testInstances0.generate("lnFactorial");
      testInstances0.setClassType((-1));
      Instances instances2 = instances0.stringFreeStructure();
      Evaluation evaluation0 = new Evaluation(instances2, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getOptions();
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.weightedRecall();
      Instance instance0 = BallNode.calcCentroidPivot(2, (-197112209), (int[]) null, instances1);
      try { 
        evaluation0.updatePriors(instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      evaluation1.m_PriorEstimator = null;
      evaluation1.confusionMatrix();
      // Undeclared exception!
      try { 
        evaluation1.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = (double) (-1);
      evaluation0.m_TotalCost = 4337.4113210319;
      doubleArray0[1] = (double) (-1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      M5P m5P0 = new M5P();
      boolean boolean0 = evaluation0.equals(m5P0);
      assertFalse(boolean0);
      
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      String string0 = Evaluation.getGlobalInfo(serializedClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.misc.SerializedClassifier:\n\nA wrapper around a serialized classifier model. This classifier loads a serialized models and uses it to make predictions.\n\nWarning: since the serialized model doesn't get changed, cross-validation cannot bet used with this classifier.", string0);
      
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree(instances0);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(622, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.evaluateModelOnce(1000.0, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(588, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_CoverageStatisticsAvailable = false;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("~Wm{5( ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedRecall();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) filteredClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 622;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-1);
      doubleArray2[3] = (double) 622;
      doubleArray2[4] = (double) 622;
      doubleArray2[5] = (double) (-2);
      doubleArray2[6] = (double) 622;
      doubleArray2[7] = (double) (-1);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      evaluation0.m_ConfusionMatrix = doubleArray1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(622);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.KBRelativeInformation();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses1.getOptions();
      evaluation0.weightedFalseNegativeRate();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(0.5, evaluation0.weightedFalseNegativeRate(), 0.01);
      assertEquals(-0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("~Wm{5( ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(false);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      instances0.iterator();
      instances0.stringFreeStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.avgCost();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(305.0, doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, denseInstance0, (-849.4530424447884));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      
      Instances instances1 = new Instances(instances0);
      Integer integer0 = new Integer((-1));
      double double1 = evaluation0.falsePositiveRate(19);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numInstances();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      MockRandom mockRandom0 = new MockRandom(42L);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      try { 
        Evaluation.handleCostOption("-H <comma seperated numbers for nodes on each layer>", (-1078));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(". ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, (-2352), (Random) mockRandom0, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("P#Lh1472");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "P#Lh1472");
      try { 
        Evaluation.handleCostOption("P#Lh1472", 117);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"P#Lh1472\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      double[] doubleArray0 = new double[4];
      testInstances0.setClassType((-2));
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      instances0.stringFreeStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedAreaUnderROC();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation.makeOptionString(naiveBayesMultinomialUpdateable0, true);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "+.h1N|l!5");
      int int0 = (-1686);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1686));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      instances0.iterator();
      testInstances0.setNumRelationalString(305);
      double double1 = evaluation0.m_SumPredicted;
      testInstances0.getRelationalClassFormat();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, (Instances) null, 0, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      MockRandom mockRandom0 = new MockRandom(42L);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 100, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("~IWm{ ");
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      DenseInstance denseInstance0 = new DenseInstance(3803.4691541, doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      gaussianProcesses0.getOptions();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.weightedRecall();
      try { 
        evaluation0.evaluateModelOnce((Classifier) gaussianProcesses0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OneR oneR0 = new OneR();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) oneR0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.listOptions();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      testInstances0.setNumRelationalString(305);
      double double1 = evaluation0.m_Incorrect;
      instances0.stringFreeStructure();
      double double2 = evaluation0.numFalsePositives((-2));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.totalCost();
      assertEquals(double4, double2, 0.01);
      
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String string0 = Evaluation.getGlobalInfo(votedPerceptron0);
      assertEquals("\nSynopsis for weka.classifiers.functions.VotedPerceptron:\n\nImplementation of the voted perceptron algorithm by Freund and Schapire. Globally replaces all missing values, and transforms nominal attributes into binary ones.\n\nFor more information, see:\n\nY. Freund, R. E. Schapire: Large margin classification using the perceptron algorithm. In: 11th Annual Conference on Computational Learning Theory, New York, NY, 209-217, 1998.", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("_$2Li|");
      testInstances0.setNumRelationalString(305);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      instances0.stringFreeStructure();
      double double1 = evaluation0.m_SumPriorEntropy;
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      double double0 = evaluation0.KBInformation();
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNumRelationalString(305);
      double double1 = evaluation0.m_Incorrect;
      instances0.stringFreeStructure();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      double double2 = evaluation0.numFalsePositives((-1));
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double3, 0.01);
      
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getTokenizer");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      instances0.iterator();
      evaluation0.rootRelativeSquaredError();
      testInstances0.setSeed((-1730));
      instances0.stringFreeStructure();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1004, charArray0, 46);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      instances0.iterator();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.addNumericTrainClass(0.0, 2121.108697784695);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2121.108697784695;
      doubleArray0[1] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      Capabilities capabilities0 = hierarchicalClusterer0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("U:_up'oVh#i>G");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MultiFilter multiFilter0 = new MultiFilter();
      testInstances0.clone();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.matthewsCorrelationCoefficient((-2));
      evaluation0.toSummaryString("K(xBy\"", true);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      evaluation0.kappa();
      instances0.stringFreeStructure();
      double double0 = evaluation0.m_WithClass;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      instances0.stringFreeStructure();
      char[] charArray0 = new char[6];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[4] = ' ';
      charArray0[3] = ' ';
      double double1 = evaluation0.KBMeanInformation();
      charArray0[4] = ' ';
      CostMatrix costMatrix0 = new CostMatrix(' ');
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      instances0.iterator();
      evaluation0.rootRelativeSquaredError();
      Evaluation.handleCostOption("", 857);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 300.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 857;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-650.466933);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (-2.23107);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1391.1345979), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("~IWm{ ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      evaluation0.incorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      Version.MAJOR = 16384;
      evaluation1.falseNegativeRate((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_SumClass;
      evaluation1.toSummaryString(".arff", false);
      evaluation0.numFalsePositives(0);
      evaluation1.KBRelativeInformation();
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat((-495));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -495
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("-NH}", instances0, 2147483645, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: -NH}
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("~IWm{ ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      testInstances0.setSeed((-2));
      instances0.stringFreeStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      String string0 = evaluation1.num2ShortID(1171, charArray0, 65);
      assertEquals("44444444444444444444444444444444444444444444444444444444444444444", string0);
      
      double double0 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string1 = evaluation1.toSummaryString("d.BDkB%QG8}i", false);
      assertEquals("d.BDkB%QG8}i\nTotal Number of Instances                0     \n", string1);
      
      double double1 = evaluation0.numFalsePositives(105);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.areaUnderPRC(2854);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      instances0.deleteAttributeType(1023);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1023;
      doubleArray0[1] = (double) 1;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-7), 1023.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("_$2Li|");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setMultiInstance(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(816.006, 816.006);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      double double0 = evaluation0.pctUnclassified();
      evaluation0.addNumericTrainClass(Double.NaN, 692.6023440348011);
      instances0.parallelStream();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 305;
      doubleArray0[2] = 692.6023440348011;
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = (double) (-2);
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(593, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      DenseInstance denseInstance1 = new DenseInstance(6);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(622, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(622);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_TrainClassWeights = doubleArray0;
      evaluation0.KBRelativeInformation();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      gaussianProcesses1.getOptions();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1764.0337));
      evaluation0.weightedPrecision();
      double[] doubleArray1 = new double[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray1, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      testInstances0.setClassType(588);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.m_SumSqrErr;
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      DenseInstance denseInstance0 = new DenseInstance(588);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostMatrix costMatrix0 = null;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor(0.08333333333334822, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostMatrix costMatrix0 = null;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(593, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.updateStatsForPredictor(695.0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.587973990795769
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OneR oneR0 = new OneR();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.rootRelativeSquaredError();
      Object object0 = new Object();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(true);
      double double1 = evaluation0.matthewsCorrelationCoefficient((-1125));
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation2.toSummaryString("@data", true);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
      
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      evaluation0.equals((Object) null);
      double double2 = evaluation2.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation2.rootMeanPriorSquaredError(), 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, evaluation2.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MultiFilter multiFilter0 = new MultiFilter();
      testInstances0.clone();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation1.toSummaryString(" ", true);
      assertEquals(" \nTotal Number of Instances                0     \n", string0);
      
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      boolean boolean0 = evaluation2.equals(evaluation0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      evaluation0.toMatrixString("@relation");
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.m_TotalCoverage;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances1.setRelationalClassFormat(instances0);
      testInstances0.setNumRelationalString(114);
      double double1 = evaluation0.errorRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.incorrect();
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation0.falseNegativeRate(114);
      assertEquals(0.0, double3, 0.01);
      
      String string0 = evaluation1.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      instances0.iterator();
      testInstances0.setNumRelationalString(305);
      double double1 = evaluation0.m_SumPredicted;
      testInstances0.getRelationalClassFormat();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 305.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.addNumericTrainClass((-1), (-1.7976931348623157E308));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.883404187709486
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(593, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate("@relation");
      evaluation0.toClassDetailsString();
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.m_TotalCoverage;
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      instances0.iterator();
      evaluation0.rootRelativeSquaredError();
      evaluation0.useNoPriors();
      Evaluation.handleCostOption("", 857);
      evaluation0.rootRelativeSquaredError();
      testInstances0.clone();
      evaluation0.KBMeanInformation();
      Evaluation.handleCostOption("", (-1));
      evaluation0.relativeAbsoluteError();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.KBInformation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.2826685601371457
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      instances0.iterator();
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      
      Evaluation.handleCostOption("", 857);
      testInstances0.setSeed(857);
      testInstances0.clone();
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      evaluation0.useNoPriors();
      charArray0[1] = '*';
      evaluation0.weightedTrueNegativeRate();
      evaluation0.toSummaryString("1\"D", true);
      evaluation0.SFEntropyGain();
      evaluation0.getHeader();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.pctUnclassified();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.m_NoPriors = true;
      testInstances0.setNumRelationalString(305);
      double double0 = evaluation0.m_Incorrect;
      Instances instances1 = testInstances0.generate();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances1.forEach(consumer0);
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(593, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      M5P m5P0 = new M5P();
      evaluation0.equals(testInstances0);
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      Evaluation.getGlobalInfo(jRip0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(6, doubleArray0);
      try { 
        kDTree0.nearestNeighbour(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.setClassType(593);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      M5P m5P0 = new M5P();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.equals((Object) null);
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      jRip1.setCheckErrorRate(true);
      Logistic logistic0 = new Logistic();
      Evaluation.getGlobalInfo(logistic0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree(instances0);
      assertEquals(1, KDTree.MAX);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      testInstances0.setNumRelationalString(305);
      double double0 = evaluation0.m_Incorrect;
      instances0.stringFreeStructure();
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'I';
      charArray0[2] = '4';
      charArray0[3] = 'V';
      charArray0[4] = 'G';
      charArray0[5] = 'r';
      charArray0[6] = 'v';
      charArray0[7] = ' ';
      charArray0[8] = '@';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 305);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.falseNegativeRate((-1813));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(593, (int[]) null, 12);
      KDTree kDTree0 = new KDTree();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.falseNegativeRate(6);
      KDTree kDTree0 = new KDTree();
      ConverterUtils.DataSource converterUtils_DataSource0 = null;
      try {
        converterUtils_DataSource0 = new ConverterUtils.DataSource(".bsi");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class weka.core.converters.ConverterUtils
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("globalInfo");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.getHeader();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(593, doubleArray0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFMeanSchemeEntropy();
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.toCumulativeMarginDistributionString();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Instance instance0 = databaseLoader0.getNextInstance(instances0);
      assertNull(instance0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      testInstances0.setMultiInstance(true);
      MultiFilter multiFilter0 = new MultiFilter();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.errorRate();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      testInstances0.setNumRelationalString(305);
      double double1 = evaluation0.m_Incorrect;
      instances0.stringFreeStructure();
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = 'I';
      charArray0[2] = '4';
      charArray0[3] = 'V';
      charArray0[4] = 'G';
      charArray0[5] = 'r';
      charArray0[6] = 'v';
      charArray0[7] = ' ';
      charArray0[8] = '@';
      String string0 = evaluation0.num2ShortID(1004, charArray0, 305);
      assertEquals("                                                                                                                                                                                                                                                                                                             344r", string0);
      
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("~IWm{ ");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'P';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(17, charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      testInstances0.clone();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), (char[]) null, 2272);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      testInstances0.setNumRelationalDate((-1461032992));
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      double double1 = evaluation0.m_SumSqrPredicted;
      Evaluation evaluation1 = new Evaluation(instances0);
      Instances instances1 = instances0.stringFreeStructure();
      double double2 = evaluation1.weightedAreaUnderPRC();
      Evaluation evaluation2 = new Evaluation(instances1);
      double double3 = evaluation2.rootMeanSquaredError();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation1.falsePositiveRate((-2));
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      MockRandom mockRandom0 = new MockRandom((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-10.0);
      doubleArray0[4] = (-4898.060724369402);
      doubleArray0[5] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-10.0), doubleArray0);
      instances0.add((Instance) denseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setClassType(1368);
      double double0 = evaluation0.m_Incorrect;
      String string0 = evaluation0.toSummaryString("YC?x]=V8p)", false);
      assertEquals("YC?x]=V8p)\nTotal Number of Instances                0     \n", string0);
      
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[4];
      testInstances0.setClassType(588);
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      evaluation0.m_TrainClassWeights = doubleArray0;
      double double0 = evaluation0.m_Incorrect;
      char[] charArray0 = new char[2];
      double double1 = evaluation0.weightedMatthewsCorrelation();
      charArray0[1] = 'b';
      evaluation0.toSummaryString();
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.numFalsePositives(121);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.setClassType(1368);
      double double0 = evaluation0.m_Incorrect;
      String string0 = evaluation0.toSummaryString("YC?x]=V8p)", true);
      assertEquals("YC?x]=V8p)\nTotal Number of Instances                0     \n", string0);
      
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      double[] doubleArray0 = new double[4];
      testInstances0.setClassType(593);
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.falsePositiveRate((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.correct();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-2);
      double double0 = evaluation0.m_Incorrect;
      evaluation0.meanPriorAbsoluteError();
      AllFilter allFilter0 = new AllFilter();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(":DWdfMku;=z)>c");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1322.222699);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-389.923086));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      // Undeclared exception!
      try { 
        evaluation0.precision(22);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("6Jo_[<c *o?M");
      double[] doubleArray0 = new double[4];
      testInstances0.setClassType((-2));
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      instances0.stringFreeStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalsePositives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(593, doubleArray0);
      testInstances0.getRevision();
      testInstances0.getOptions();
      DenseInstance denseInstance1 = new DenseInstance((-2), doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numTrueNegatives((-1));
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.mayRemoveInstanceAfterFirstBatchDone());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = new Integer((-1));
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(755);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 755
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.22499999403953552;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 0.7071067811865476;
      testInstances0.toString();
      BallNode ballNode0 = new BallNode((-2));
      try { 
        BallNode.calcPivot(ballNode0, ballNode0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("~Wm{5( ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2.0));
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      double double1 = evaluation0.m_SumPriorAbsErr;
      testInstances0.clone();
      Evaluation.handleCostOption("", 857);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1217));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1217
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getModelPath");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.clone();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.matthewsCorrelationCoefficient(1415);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      CostMatrix costMatrix0 = new CostMatrix(640);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.clone();
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      testInstances1.setNumRelationalString((-1));
      double double0 = evaluation0.m_Incorrect;
      instances0.stringFreeStructure();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      MockRandom mockRandom0 = new MockRandom((-1));
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Integer integer0 = new Integer(100);
      evaluation0.falsePositiveRate((-1));
      try { 
        Evaluation.handleCostOption(".bsi", 2151);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      testInstances0.generate("lnFactorial");
      testInstances0.setClassType((-1));
      Instances instances1 = instances0.stringFreeStructure();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.numFalsePositives(1682);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      testInstances0.getRevision();
      DenseInstance denseInstance0 = new DenseInstance(3803.4691541, doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.numTrueNegatives(2);
      AllFilter allFilter0 = new AllFilter();
      assertFalse(allFilter0.isOutputFormatDefined());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate(" ");
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Capabilities capabilities0 = naiveBayesMultinomialUpdateable0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setClassType((-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorEntropy;
      double double1 = evaluation0.numFalseNegatives((-944));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("gloalInfo");
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[1] = "";
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("NRPx8 oi");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives(0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1902232039517582
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toClassDetailsString("NUM: ");
      ManhattanDistance manhattanDistance0 = new ManhattanDistance();
      Object object0 = new Object();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      CheckGOE checkGOE0 = new CheckGOE();
      JRip jRip0 = new JRip();
      Evaluation.getGlobalInfo(jRip0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      KDTree kDTree0 = new KDTree(instances0);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        kDTree0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.KDTree", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("//\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(12);
      evaluation0.areaUnderROC(9);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate("~IWm{ ");
      MockRandom mockRandom0 = new MockRandom();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "~IWm{ ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, " ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("globalInfo");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, 111);
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      logistic0.listOptions();
      logistic0.setRidge(283.925132281238);
      Evaluation.makeOptionString(logistic0, false);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      try { 
        CostMatrix.parseMatlab("@relation");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OneR oneR0 = new OneR();
      Capabilities capabilities0 = oneR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.OneR:
         // 
         // -B <minimum bucket size>
         // \tThe minimum number of objects in a bucket (default: 6).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1473, true, true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Total Number of Instances          ";
      stringArray0[2] = "";
      simpleLogistic0.setUseCrossValidation(true);
      stringArray0[3] = "";
      stringArray0[4] = "Total Number of Instances          ";
      simpleLogistic0.getRevision();
      stringArray0[6] = "";
      stringArray0[7] = "YQ&w!TsQy=x_N/";
      stringArray0[8] = "]lKjUA@s,KS{l= ";
      try { 
        Evaluation.evaluateModel((Classifier) simpleLogistic0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }
}
