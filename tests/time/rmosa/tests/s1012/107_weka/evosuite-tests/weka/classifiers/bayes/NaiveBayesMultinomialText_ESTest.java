/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 01:23:54 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.estimators.KernelEstimator;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      instances0.add((Instance) denseInstance0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.106580769576958
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(454.440605432488, doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1011185248561324
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t15.0\nclass2\t7.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\nover\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t\nThe\t20.085536923187668\t2.718281828459045\t\nquick\t20.085536923187668\t7.38905609893065\t\nlazy\t20.085536923187668\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t\nbrown\t7.38905609893065\t7.38905609893065\t\ndog\t20.085536923187668\t2.718281828459045\t\nfox\t7.38905609893065\t7.38905609893065\t\n", string0);
      
      naiveBayesMultinomialText0.pruneDictionary();
      String string1 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string1);
      
      naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2889970382888283
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(3);
      instances0.add((Instance) sparseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      SnowballStemmer.main(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.pruneDictionary();
      Random.setNextRandom(2034458192);
      naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3234094224875887
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_norm = 1.0;
      File file0 = MockFile.createTempFile("upC;M_j_=B|?:3", "!yl");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&v<vuhk]O]TCRJ");
      naiveBayesMultinomialText0.setStopwords(file0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("");
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getStopwords();
      Random.setNextRandom(640);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getUseStopList();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&v<vuhk]O]TCRJ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.normTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "&v<vuhk]O]TCRJ";
      stringArray0[1] = "!yl";
      stringArray0[2] = "!yl";
      stringArray0[3] = "!yl";
      stringArray0[4] = "&v<vuhk]O]TCRJ";
      stringArray0[5] = "Eibe Frank and Mark Hall and Bernhard Pfahringer";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.883404187709486
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(454.440605432488, doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getStemmer();
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      binarySparseInstance0.setValue(2, (double) 2);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "U6b:&rf8Nfs)Jm2p (j");
      sGDText0.getCapabilities();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_tYWKVqA$p&", arrayList0, 1);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normTipText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.m_norm = (-1718.6);
      naiveBayesMultinomialText0.setNorm((-3042.15));
      naiveBayesMultinomialText0.getCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P^@J/OfcS?Mh3_.&t/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      naiveBayesMultinomialText0.setNorm((-4290.333));
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.normTipText();
      System.setCurrentTimeMillis(2451L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "The LNorm to use for document length normalization.";
      stringArray0[2] = "The norm of the instances after normalization.";
      stringArray0[3] = "The LNorm to use for document length normalization.";
      stringArray0[4] = "If true, ignores all words that are on the stoplist.";
      stringArray0[5] = "If true, ignores all words that are on the stoplist.";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals((-4290.333), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0577029806499434
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      KernelEstimator kernelEstimator0 = new KernelEstimator((-2));
      Capabilities capabilities1 = kernelEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8834372182627477
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-342.48507713223);
      doubleArray0[3] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2596.22747), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(454.440605432488, doubleArray0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setPeriodicPruning(372);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(372, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      boolean boolean0 = naiveBayesMultinomialText0.getLowercaseTokens();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) nullStemmer0;
      nullStemmer0.getRevision();
      nullStemmer0.getRevision();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      nullStemmer0.getRevision();
      naiveBayesMultinomialText0.useStopListTipText();
      double double0 = 20.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 934;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 11;
      intArray0[4] = (-77);
      intArray0[5] = (-1110);
      intArray0[6] = 1600;
      intArray0[7] = (-1611);
      intArray0[8] = 1879048192;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(20.0, intArray0, (-3962));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      int[] intArray0 = new int[4];
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-2963));
      naiveBayesMultinomialText0.setLNorm((-490));
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(121);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_tokenizer = null;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "\tA file containing stopwords to override the default ones.\n\tUsing this option automatically sets the flag ('-stoplist') to use the\n\tstoplist if the file exists.\n\tFormat: one stopword per line, lines starting with '#'\n\tare interpreted as comments and ignored.";
      stringArray0[2] = "instances\n";
      stringArray0[3] = "QXMi8;<EKTMBJlryz:@";
      stringArray0[4] = "M";
      stringArray0[5] = "-stopwords";
      stringArray0[6] = "-stopwords";
      stringArray0[7] = "    result.setDataset(format);\n";
      stringArray0[8] = "user.dir";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      File file0 = sGDText1.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(2028179000);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2028179000;
      doubleArray0[1] = (double) 2028179000;
      doubleArray0[2] = (double) 2028179000;
      SparseInstance sparseInstance0 = new SparseInstance(2028179000, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 344;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1));
      naiveBayesMultinomialText0.debugTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals((-1), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_norm = 0.0;
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(0.0, double0, 0.01);
      
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getUseStopList();
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
      
      String string1 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string1);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 0.0;
      naiveBayesMultinomialText1.getRevision();
      naiveBayesMultinomialText1.setDebug(true);
      String string2 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string2);
      
      String string3 = naiveBayesMultinomialText0.getRevision();
      assertEquals("9122", string3);
      
      naiveBayesMultinomialText1.pruneDictionary();
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      double[] doubleArray0 = new double[0];
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 3);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.normTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8833357812382339
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(628);
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9780573347195083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.getOptions();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("yW9:x~`Z4|mMRWEYB");
      SnowballStemmer.listStemmers();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.58357976679115
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      NullStemmer nullStemmer0 = new NullStemmer();
      SGDText sGDText1 = new SGDText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getPeriodicPruning();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(12, stringArray0.length);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText0.m_stemmer;
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.getOptions();
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1327282156912077
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      stringArray0[0] = "";
      stringArray0[2] = "21' tbE&&s4";
      stringArray0[3] = "";
      stringArray0[4] = "^p 9yC[6HA4's7ND&_4";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[5] = "}s2(<2q/dgb'0q_*r-l";
      stringArray0[6] = "W";
      stringArray0[7] = "";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.setLNorm((-1.0));
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLNorm();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.reset();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.m_wordFrequencies = false;
      naiveBayesMultinomialText2.getOptions();
      naiveBayesMultinomialText2.getUseStopList();
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.712851728482656
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.setPeriodicPruning(0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.getRevision();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.getCapabilities();
      precomputedKernelMatrixKernel0.toString();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.toString();
      SGDText sGDText0 = new SGDText();
      sGDText0.getTokenizer();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setLNorm(1);
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setMinWordFrequency(1);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.periodicPruningTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getUseWordFrequencies();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(0, doubleArray0, (int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[8];
      intArray0[0] = 93;
      intArray0[1] = (-428);
      intArray0[2] = 1083;
      intArray0[3] = (-1327);
      intArray0[4] = 1;
      intArray0[5] = 69;
      intArray0[7] = 881;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3656.4966), intArray0, (-62));
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.getNormalizeDocLength();
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = "E %aIu";
      naiveBayesMultinomialText0.pruneDictionary();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "U6b:&rf8Nfs)Jm2p (j");
      Capabilities capabilities0 = sGDText0.getCapabilities();
      capabilities0.disableAllAttributes();
      String[] stringArray0 = new String[8];
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      stringArray0[0] = "-stemmer";
      stringArray0[1] = "-stemmer";
      stringArray0[2] = "-stemmer";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "-stemmer";
      stringArray0[6] = "-stemmer";
      stringArray0[7] = "weka/core/Capabilities.props";
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      naiveBayesMultinomialText1.setStopwords((File) null);
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1380.0), doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "-stopwords";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      try { 
        AbstractClassifier.makeCopies((Classifier) null, 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model classifier set
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Ignore any words that don't ocur at least min frequency times in the training data. If periodic pruing is turned on, then the dictionary is prunedPaccording to this value";
      stringArray0[2] = "";
      stringArray0[3] = "Ignore any words that don't ocur at least min frequency times in the training data. If periodic pruing is turned on, then the dictionary is prunedPaccording to this value";
      stringArray0[4] = "-M";
      stringArray0[5] = "";
      stringArray0[6] = "-M";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      SGDText sGDText0 = new SGDText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      boolean boolean0 = naiveBayesMultinomialText0.getLowercaseTokens();
      assertFalse(boolean0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oO%aJv&.aG2-9%[");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.pruneDictionary();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oO%aJv&.aG2-9%[");
      File file0 = MockFile.createTempFile("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value");
      naiveBayesMultinomialText0.setStopwords(file0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.738840717855686
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals("9122", string0);
      
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(12, stringArray0.length);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      Capabilities capabilities0 = sGDText0.getCapabilities();
      capabilities0.disableAllAttributes();
      AbstractClassifier.makeCopy(sGDText1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "";
      stringArray0[2] = "U6b:&rf8Nfs)Jm2p (j";
      stringArray0[3] = "";
      stringArray0[4] = "-P";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "doRegression(";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"weka/core/Capabilities.props\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.toString();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.getLNorm();
      try { 
        naiveBayesMultinomialText0.classifyInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency(0.95);
      assertEquals(0.95, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      sGDText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance((-312.5259437), doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(302.9);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 515);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.LNormTipText();
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertEquals(302.9, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.pruneDictionary();
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setLNorm((-1973.3672624641658));
      assertEquals((-1973.3672624641658), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2567576795645348
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "U6b:&rf8Nfs)Jm2p (j");
      Capabilities capabilities0 = sGDText0.getCapabilities();
      capabilities0.disableAllAttributes();
      String[] stringArray0 = new String[8];
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      stringArray0[0] = "-stemmer";
      stringArray0[1] = "-stemmer";
      stringArray0[2] = "-stemmer";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "-stemmer";
      stringArray0[6] = "-stemmer";
      stringArray0[7] = "weka/core/Capabilities.props";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-M";
      stringArray0[1] = "-M";
      stringArray0[2] = "-M";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.setPeriodicPruning(342);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      NaiveBayesMultinomialText.main(stringArray0);
      naiveBayesMultinomialText0.toString();
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      try { 
        bottomUpConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BottomUpConstructor", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }
}
