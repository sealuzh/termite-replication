/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 01:38:44 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.632761975491991
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(296L);
      Range range1 = Range.of((-128L));
      String string0 = range0.toString();
      assertEquals("[ 0 .. 295 ]/0B", string0);
      
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-3612L), (-1571L));
      assertFalse(range3.isEmpty());
      
      Object object0 = new Object();
      range2.equals((Object) null);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854774599L);
      Long long0 = new Long(9223372036854774599L);
      Range range1 = Range.ofLength(9223372036854774599L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8929447777488657
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(3019L);
      Range range1 = Range.of(3019L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.981257014751505
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775784L, 9223372036854775807L);
      Range range2 = Range.of(9223372036854775784L, 9223372036854775784L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      range0.equals("|Kp^!8tgm>r?");
      assertFalse(range0.equals((Object)range2));
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Object object0 = new Object();
      Long.getLong("");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9804021452834966
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.intersects(range0);
      Long long0 = new Long((-1L));
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long1);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 123L);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = range1.getBegin(range_CoordinateSystem1);
      assertEquals((-1L), long2);
      
      Range range2 = range1.asRange();
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1354602073131
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Object object0 = new Object();
      boolean boolean0 = range2.equals(range1);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1148L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1148L, 1148L);
      Object object0 = new Object();
      Range range1 = Range.of(1148L, 1148L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1148L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1148L, 1148L);
      Object object0 = new Object();
      Range range1 = Range.of(1148L, 1148L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3290116633839473
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(1209L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 9996L, 4294967295L);
      Range range1 = Range.of(148L);
      range1.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854774599L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.060362201498235
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1148L, 1148L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 434L, 1148L);
      Object object0 = new Object();
      Range range1 = Range.of(434L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 435 .. 435 ]/RB", string0);
      
      range1.complementFrom(linkedList0);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2035456965977054
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 752L, 752L);
      Range range1 = Range.of(range_CoordinateSystem1, (-1333L), (-67L));
      range1.intersects(range0);
      range0.intersects(range1);
      Long long0 = new Long((-1078L));
      Long long1 = new Long((-1L));
      range1.getEnd(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 1L, (-3085L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854775784L, 9223372036854775784L);
      range0.getLength();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.ofLength(1209L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9996L, 9223372032559808513L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2724L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7562238788454536
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1148L, 1148L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2537L), 829727L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2537 .. 829727 ]/SB", string0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(829727L);
      long long0 = range1.getLength();
      assertEquals(829727L, long0);
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1148L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 434L, 65535L);
      Object object0 = new Object();
      Range range1 = Range.of(65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range1.equals(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.892518928712349
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-3038L), (-3038L));
      Range range1 = Range.of((-4768L), (-3038L));
      range0.equals(range1);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.688750001065033
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = (-4768L);
      Range range0 = Range.of((-9223372036854775808L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.push((Range) null);
      linkedList0.addFirst(range0);
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(503L, 2147483647L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.892518928712349
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-3038L), (-3038L));
      Range range1 = Range.of((-4768L), (-3038L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean1 = range1.equals(range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.toString(range_CoordinateSystem0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5430561620635976
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.isSubRangeOf(range0);
      range1.complement(range0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1042L), (-1042L));
      range2.getEnd(range_CoordinateSystem0);
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1043 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3L), (-3L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6910517378300467
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = range1.getEnd();
      assertEquals(0L, long0);
      
      range0.equals(linkedList0);
      assertSame(range0, range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-9223372036854771039L));
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.892518928712349
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-4768L), (-3600L));
      Range range1 = Range.of((-2290L), (-2290L));
      range1.equals(range0);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-792L), 0L);
      Range range1 = Range.of((-4768L), 5024L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8314095976155853
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(1209L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.of(4294967295L);
      linkedList1.push(range1);
      linkedList1.push(range0);
      linkedList1.add(range0);
      boolean boolean0 = range1.isEmpty();
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complementFrom(linkedList1);
      assertEquals(1, list0.size());
      
      Long long0 = new Long(9223372036854715871L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1208L, long1);
      
      boolean boolean1 = range1.equals(range_CoordinateSystem0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.9651511074780874
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.ofLength(1209L);
      Range range1 = Range.ofLength(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.of(4294967295L);
      linkedList1.push(range2);
      linkedList1.push(range0);
      linkedList1.add(range1);
      linkedList1.add(range2);
      assertTrue(linkedList1.contains(range1));
      
      range0.complementFrom(linkedList1);
      Long long0 = new Long(9223372036854715862L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      boolean boolean0 = range2.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0579071039404107
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1368928274507564
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.isSubRangeOf(range0);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      range0.getLength();
      Long long0 = new Long(9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1323906629485916
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4768L), (-4768L));
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(range_CoordinateSystem0, 565L, 565L);
      range1.equals((Object) null);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.equals(object0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.632876414882029
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967295 .. 4294967295 ]/SB", string0);
      
      range0.equals("[ 4294967295 .. 4294967295 ]/SB");
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = Range.parseRange("[ 4294967295 .. 4294967295 ]/SB");
      List<Range> list0 = range2.complement(range1);
      assertFalse(range2.isEmpty());
      assertTrue(list0.contains(range2));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.89413587430213
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      Range range2 = range1.intersection(range0);
      range2.equals((Object) null);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 127L, 127L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedShortStartIntLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 536L, 536L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(536L, long0);
      
      range0.equals(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 565L, 565L);
      range0.equals(object0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 24L, 24L);
      long long0 = range0.getEnd();
      assertEquals(24L, long0);
      
      Range range1 = Range.ofLength(24L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1366649851176507
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(758L, 9223372036854775807L);
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        range0.split(9223372036854775050L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2275 would make range [9223372036854774292 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(758L, 9223372036854775807L);
      long long0 = new Long(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6348540110635925
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(1255L);
      Range range1 = Range.ofLength(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range1);
      linkedList0.push(range0);
      linkedList0.add(range0);
      linkedList0.add(range0);
      range1.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1148L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1148L, 1148L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=4.188641924422729
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1732L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, (-1732L), (-1732L));
      range_Builder0.expandBegin(2120L);
      Range.ofLength(2120L);
      Range range1 = Range.ofLength(3779L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range1);
      linkedList0.push(range0);
      linkedList0.add(range1);
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      range0.complementFrom(linkedList0);
      Range.of(3779L, 2147483647L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.6761381215356854
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1732L), 2147483647L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1732 .. 2147483647 ]/RB", string0);
      
      range0.equals("ARRIVAL");
      Range range1 = Range.ofLength(4294967295L);
      range1.getLength();
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.691477450899438
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      long long0 = range0.getEnd();
      assertEquals(4294967294L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2237L, 2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.isEmpty();
      long long0 = new Long((-1L));
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long1);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      Object object0 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.38542126284666
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(251L, 4098L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-418L));
      Range range1 = range_Builder0.build();
      range0.getBegin();
      range1.isEmpty();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775807L);
      range_Builder1.expandEnd(535L);
      String string0 = null;
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854771176 would make range [9223372036854775640 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.0598988524110324
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(3840L);
      range0.split(3840L);
      long long0 = 1618L;
      // Undeclared exception!
      try { 
        Range.of(1618L, 463L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.202999696051705
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.split(1L);
      // Undeclared exception!
      try { 
        Range.parseRange("unable to mkdirs for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to mkdirs for  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3284514392943114
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 536L, 536L);
      range0.getLength();
      Range range1 = Range.of(536L, 536L);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1632L, (-1983L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1190L, 2147485380L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1732L), 2147483647L);
      String string0 = range0.toString();
      assertEquals("[ -1733 .. 2147483646 ]/0B", string0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6350575347064424
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long(127L);
      Range range1 = Range.of((-1L));
      range0.equals(range1);
      range0.getBegin(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range1);
      Range range2 = null;
      linkedList0.push(range0);
      linkedList0.add(range0);
      range1.complementFrom(linkedList0);
      range0.complementFrom(linkedList0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.693092345931261
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-4768L));
      Range range1 = Range.of((-4768L));
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-4768L));
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-1787L), 4294964915L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-1L));
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.796837966557264
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-73L));
      Range range1 = Range.of((-73L));
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.543823137024121
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2821L), (-2821L));
      Object object0 = new Object();
      Range range1 = Range.of((-2821L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      Range range2 = Range.of((-2147483648L), (-1L));
      List<Range> list1 = range2.complement(range0);
      assertEquals(2, list1.size());
      
      List<Range> list2 = new LinkedList<Range>();
      assertTrue(list2.equals((Object)list0));
      
      Range.Builder range_Builder0 = new Range.Builder(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.389272856797264
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = new Long((-701L));
      Range range0 = Range.of((-701L));
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      linkedList2.add(range0);
      LinkedList<Range> linkedList3 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.add(range0);
      assertTrue(linkedList0.contains(range0));
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9847737064218753
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(777L, 65549L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.split(777L);
      // Undeclared exception!
      try { 
        Range.of(777L, (-830L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(1147L);
      range0.split(1147L);
      long long0 = 1201L;
      String string0 = "1K9~.lZxBv3)(%";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("1K9~.lZxBv3)(%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.1K9~.lZxBv3)(%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-3038L), (-3038L));
      range0.equals(range0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-1221L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1450L, 1450L);
      Object object0 = new Object();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1450L, long0);
      
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      
      range0.asRange();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1208L, 9223372036854775785L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.intersects(range1);
      Long long0 = new Long((-1L));
      long long1 = range1.getEnd(range_CoordinateSystem0);
      assertSame(range1, range0);
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775784L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3294539455599756
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2492L);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 1457L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      Range.of(4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2892L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2892 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(502L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(2261L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967291L, (-664L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      Range range0 = Range.of((-1732L));
      long long1 = range0.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9815052892437834
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      range0.getEnd();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      boolean boolean0 = range1.endsBefore(range0);
      Object object0 = new Object();
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      Object object1 = new Object();
      boolean boolean1 = range1.equals(object1);
      assertNotSame(range1, range2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-642L));
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-22L), (-22L));
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3846246314593835
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3105L), (-3105L));
      Range range1 = Range.of(4294967294L);
      range0.complement(range1);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(537L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("SB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854774599L);
      range0.getBegin();
      Long long0 = new Long(4294969091L);
      range0.equals(long0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long long0 = (-229L);
      Range range0 = Range.of((-229L));
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("2 2'o,C|:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 2 2'o,C|: into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(25L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.2680015662764785
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2039L, 2039L);
      range0.iterator();
      List<Range> list0 = range0.split(2039L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = range0.asRange();
      range1.toString();
      range1.getLength();
      String string0 = "[2l$^/@ltxG+";
      // Undeclared exception!
      try { 
        Range.parseRange("[2l$^/@ltxG+", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [2l$^/@ltxG+ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.3863067172457586
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775050L);
      Range range1 = Range.of((-3351L));
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.1342954248533537
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1732L), 2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1732 .. 2147483647 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ -1732 .. 2147483647 ]/RB", range_CoordinateSystem1);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(240L);
      Long long0 = new Long(240L);
      Object object0 = new Object();
      long long1 = range1.getLength();
      assertEquals(240L, long1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.984690667066619
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(565L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.3883141447274405
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-682L), (-135L));
      Object object0 = new Object();
      Range range1 = Range.of((-135L), 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Object object1 = new Object();
      range0.equals(object1);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(1209L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-32768L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1997L), (-1997L));
      range_Builder0.contractEnd((-151L));
      long long0 = (-2681L);
      range_Builder0.shift((-2681L));
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.ofLength((-1997L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(536L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-490L));
      Range.Builder range_Builder2 = range_Builder1.expandEnd(726L);
      Range.Builder range_Builder3 = range_Builder1.contractBegin((-1567L));
      range_Builder0.copy();
      range_Builder2.copy();
      range_Builder0.shift((-490L));
      long long0 = 872L;
      range_Builder3.contractEnd(872L);
      // Undeclared exception!
      try { 
        Range.ofLength((-490L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = 1445L;
      Range.Builder range_Builder0 = new Range.Builder(195L, 1445L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1741L));
      range_Builder0.expandEnd(0L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 92L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1L);
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1338L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.9797520106127435
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 24L, 24L);
      long long0 = range0.getEnd();
      assertEquals(24L, long0);
      
      Range range1 = Range.ofLength(24L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.79709058749954
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-3261L));
      Range range1 = Range.of((-4768L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-73L));
      Range range1 = Range.of(1209L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-1331L));
      Range range1 = Range.of((-32768L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(565L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-311L));
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-311L), long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.688750001065033
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = (-4768L);
      Range range0 = Range.of((-9223372036854775808L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.push((Range) null);
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-3L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.2745180899177098
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-196L), (-196L));
      range_Builder0.copy();
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, (-197L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-170L));
      String string0 = range0.toString();
      assertEquals("[ -170 .. -170 ]/0B", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.7969671154659554
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-4775L));
      Range range1 = Range.of((-4768L));
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$ByteRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$ByteRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[#\">,c,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[#\">,c,
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-4768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4769 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(42L);
      range_Builder0.shift(42L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-1331L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4864L), (-4864L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-73L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1760L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.1369652794060534
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(9223372036854775786L, 9223372036854775786L);
      Range range1 = Range.of(9223372036854775786L, 9223372036854775786L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      List<Range> list0 = range0.split(9223372036854775786L);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      boolean boolean1 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-602L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(1209L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.331103639414866
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-3038L), (-3038L));
      Range range1 = Range.of((-4768L), (-3038L));
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Long long0 = new Long((-3038L));
      assertEquals((-3038L), (long)long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.136439528568138
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.getEnd();
      range0.isSubRangeOf(range0);
      List<Range> list0 = range0.complement(range0);
      Object object0 = new Object();
      range0.equals(list0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("given length %d would make range [%d - ? ] beyond max allowed end offset");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.given length %d would make range [%d - ? ] beyond max allowed end offset
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(1209L);
      Long long0 = new Long(1209L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.6901823238150926
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 9223372036854775807 ]/RB", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(2003L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2147L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-2147L), (-2147L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-59L), 93L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.794892785301738
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem1);
      range0.getBegin(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.endsBefore(range0);
      linkedList0.add(range0);
      linkedList0.push((Range) null);
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1L), (-73L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.693092345931261
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.ofLength(1209L);
      Range range1 = Range.ofLength(1209L);
      Range range2 = Range.ofLength(65535L);
      boolean boolean0 = range2.endsBefore(range0);
      assertFalse(boolean0);
      
      long long0 = range1.getLength();
      assertEquals(1209L, long0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-3864L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3865 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-205L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.contractEnd(0L);
      range_Builder0.expandEnd(1760L);
      range_Builder0.expandBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2315L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, (-2315L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1208L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(42L);
      range_Builder0.shift(42L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("fIBO?M>!", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse fIBO?M>! into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(42L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long long0 = 1148L;
      long long1 = (-281L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-281L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = (-1741L);
      long long1 = 195L;
      Range.Builder range_Builder0 = new Range.Builder(441L, 441L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(4294967295L, (-1741L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("|_#P*x^N86)%a<+'", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse |_#P*x^N86)%a<+' into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
