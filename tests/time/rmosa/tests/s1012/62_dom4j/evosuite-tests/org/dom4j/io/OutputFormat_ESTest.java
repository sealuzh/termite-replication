/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 01:32:59 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-suppresseeclaration";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "5Q4$*esq^xEXrxn_";
      stringArray0[3] = "v<G9gfo&fGj%L'Oj";
      stringArray0[4] = "][]L-gu";
      stringArray0[5] = "2mou#: 8D";
      stringArray0[6] = "j^Mc5gcBHu'[0&5";
      stringArray0[7] = "Y'Bo?^U~AD@\"VRC(}D";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmptypb?vU{";
      stringArray0[1] = "u5D?g*[(~y1j3";
      String string0 = "";
      outputFormat0.setLineSeparator("^s");
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Bftff\"w#:c80`NvuC)");
      outputFormat0.setNewlines(true);
      outputFormat0.setSuppressDeclaration(false);
      String[] stringArray0 = new String[8];
      outputFormat0.setOmitEncoding(true);
      stringArray0[0] = "-xhtmlUTF-8";
      stringArray0[1] = "-xhtmlUTF-8";
      stringArray0[2] = "-xhtmlUTF-8";
      stringArray0[3] = "-xhtmlUTF-8";
      stringArray0[4] = "pb?vU{";
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent("pb?vU{");
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('W');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (W)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("f>K{QWd");
      assertEquals("UTF-8", outputFormat0.getEncoding());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "";
      stringArray0[2] = "-expand:mpty-^iText";
      stringArray0[3] = "f>K{QWd";
      stringArray0[4] = "-expand:mpty-^iText";
      stringArray0[5] = "-expand:mpty-^iText";
      stringArray0[6] = "-expand:mpty-^iText";
      stringArray0[7] = "hN-NaS";
      stringArray0[8] = "-expand:mpty-^iText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("", outputFormat0.getEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Z}#Dd)^<1r(");
      outputFormat0.setIndent((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-html-riTxt";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-html-riTxt\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setNewlines(false);
      outputFormat1.setEncoding("");
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setEncoding("");
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent((String) null);
      outputFormat1.isOmitEncoding();
      outputFormat1.setIndent("");
      outputFormat1.isOmitEncoding();
      outputFormat0.isOmitEncoding();
      outputFormat0.getEncoding();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9946571675310574
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-expand:mpty-^iText";
      stringArray0[2] = "-expand:mpty-^iText";
      stringArray0[3] = "-expand:mpty-^iText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-omitEncoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-indentSize");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-padText";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-indentSize";
      stringArray0[5] = "-padText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-trimText\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptypb?vU{", false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indent");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-indent";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(2, int0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("-indent", outputFormat0.getIndent());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setPadText(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setXHTML(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('/');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (/)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getEncoding();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UTF-8";
      outputFormat0.parseOptions(stringArray0, 1183);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.parseOptions(stringArray0, 1183);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.324122434965307
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("-xhtml");
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterNTags((-3194));
      outputFormat0.setLineSeparator("");
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.isOmitEncoding();
      outputFormat0.setNewlines(false);
      outputFormat0.setTrimText(false);
      outputFormat0.isTrimText();
      outputFormat0.isNewlines();
      outputFormat0.isXHTML();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getLineSeparator();
      OutputFormat outputFormat1 = new OutputFormat("-newlines", false);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.setIndentSize(2640);
      outputFormat1.getEncoding();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('S');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (S)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Bftff\"w#:c80`NvuC)");
      outputFormat0.setNewLineAfterNTags((-3150));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtmlUTF-8";
      stringArray0[1] = "-xhtmlUTF-8";
      stringArray0[3] = "-xhtmlUTF-8";
      stringArray0[3] = "-xhtmlUTF-8";
      stringArray0[4] = "pb?vU{";
      outputFormat0.setEncoding("-xhtmlUTF-8");
      stringArray0[6] = "rLf20Z\"-P1";
      stringArray0[7] = "Bftff\"w#:c80`NvuC)";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("-xhtmlUTF-8", outputFormat0.getEncoding());
      assertEquals((-3150), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`dnzG`");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "-expandEmptyX25nyLpW2";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(1107);
      String[] stringArray0 = new String[2];
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(1107, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, (String) null);
      String string0 = outputFormat0.getEncoding();
      assertNull(string0);
      
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(boolean0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.setIndentSize(379);
      outputFormat0.setEncoding("?Sh(GKm_t^/UQW1");
      outputFormat0.setIndent(false);
      outputFormat0.isPadText();
      outputFormat0.setNewlines(false);
      outputFormat0.isNewlines();
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.setXHTML(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat1.isOmitEncoding();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (%)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("^6_7gw~'{!6_=gHM", false, "^6_7gw~'{!6_=gHM");
      outputFormat0.isSuppressDeclaration();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^6_7gw~'{!6_=gHM";
      stringArray0[1] = "^6_7gw~'{!6_=gHM";
      stringArray0[2] = "^6_7gw~'{!6_=gHM";
      stringArray0[3] = "^6_7gw~'{!6_=gHM";
      stringArray0[5] = "^6_7gw~'{!6_=gHM";
      stringArray0[6] = "^6_7gw~'{!6_=gHM";
      stringArray0[7] = "^6_7gw~'{!6_=gHM";
      stringArray0[8] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2937));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2937
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1909381168));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1909381168
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setIndentSize(0);
      outputFormat0.setEncoding("  ");
      outputFormat0.setTrimText(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "  ";
      stringArray0[1] = "  ";
      stringArray0[2] = "  ";
      stringArray0[4] = "  ";
      stringArray0[5] = "  ";
      stringArray0[6] = "  ";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isTrimText();
      outputFormat0.parseOptions(stringArray0, 599);
      assertEquals("  ", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding((String) null);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("-expand:mpty-^iText");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-expand:mpty-^iText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-expand:mpty-^iText", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize((-7));
      assertEquals("", outputFormat0.getIndent());
      
      outputFormat0.setIndent(true);
      outputFormat0.isTrimText();
      outputFormat0.getIndent();
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-suppresseeclaration";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals("  ", outputFormat1.getIndent());
      assertFalse(outputFormat1.isOmitEncoding());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isPadText());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isXHTML());
      assertTrue(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isPadText());
      
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-suppresseeclaration";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[2];
      outputFormat0.setOmitEncoding(true);
      stringArray0[0] = "-expand:mpty-^iText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3755754015654476
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-expand:mpty-^iText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("h\"UbXiH=Z");
      assertEquals("h\"UbXiH=Z", outputFormat0.getIndent());
      
      outputFormat0.setIndent(false);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expand:mpty-^iText");
      String[] stringArray0 = new String[2];
      outputFormat0.setNewlines(false);
      stringArray0[0] = "-expand:mpty-^iText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("-expand:mpty-^iText", outputFormat0.getIndent());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("]* 8of]_fZgS6", true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setTrimText(true);
      boolean boolean0 = outputFormat0.isNewlines();
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expand:mpty-^iText");
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[14];
      stringArray0[0] = "-expand:mpty-^iText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("-expand:mpty-^iText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-expand:mpty-^iText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Dni)Ct?>N@^");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expand:mpty-^iText";
      outputFormat0.parseOptions(stringArray0, 0);
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals("Dni)Ct?>N@^", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getEncoding();
      outputFormat0.setIndentSize(2271);
      outputFormat0.setEncoding("UTF-8");
      outputFormat0.setXHTML(true);
      outputFormat0.isTrimText();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isXHTML();
      outputFormat0.getIndent();
      outputFormat0.setExpandEmptyElements(false);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize((-7));
      boolean boolean0 = outputFormat0.isTrimText();
      assertFalse(boolean0);
      
      String string0 = outputFormat0.getIndent();
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertEquals("", string0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "";
      OutputFormat outputFormat0 = new OutputFormat("");
      String string1 = null;
      int int0 = 2928;
      outputFormat0.setNewLineAfterNTags(2928);
      outputFormat0.setEncoding((String) null);
      boolean boolean0 = false;
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setIndentSize(2928);
      outputFormat0.getLineSeparator();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('3');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (3)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("  ");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (%)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Bftff\"w#:c80`NvuC)");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtmlUTF-8";
      stringArray0[1] = "-xhtmlUTF-8";
      stringArray0[2] = "-xhtmlUTF-8";
      stringArray0[3] = "-xhtmlUTF-8";
      outputFormat0.setAttributeQuoteCharacter('\"');
      stringArray0[4] = "pb?vU{";
      stringArray0[5] = "rLf20Z\"-P1";
      outputFormat0.setEncoding("-xhtmlUTF-8");
      stringArray0[6] = "rLf20Z\"-P1";
      outputFormat0.setIndent("{m");
      assertEquals("-xhtmlUTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setAttributeQuoteCharacter('\'');
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 2409);
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J:]mJYp$VVbF;";
      outputFormat0.parseOptions(stringArray0, 0);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', char0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-suppresseeclaration";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.946632552840673
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding("nI2\"E9!BS)p!");
      String[] stringArray0 = new String[5];
      outputFormat0.setIndent(false);
      stringArray0[0] = "-riText";
      stringArray0[1] = "-riText";
      stringArray0[2] = "'RO#X9G=9";
      stringArray0[3] = "-xhtml-riText";
      stringArray0[4] = "-riText";
      outputFormat0.parseOptions(stringArray0, 3);
      outputFormat0.parseOptions(stringArray0, 4911);
      assertEquals("nI2\"E9!BS)p!", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = outputFormat0.getIndent();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding("?Sh(GKm_t^/UQW1");
      outputFormat0.setIndent(false);
      outputFormat0.isPadText();
      outputFormat0.setNewlines(true);
      outputFormat0.isNewlines();
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.setXHTML(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.isOmitEncoding();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (%)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration");
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals("-suppressDeclaration", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(boolean0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-riText";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("rLf20Z\"-P1");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("rLf20Z\"-P1", outputFormat0.getIndent());
      assertFalse(boolean0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-suppresseeclaration";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("N3Q*Ap{6))T[J");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N3Q*Ap{6))T[J";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
      
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("N3Q*Ap{6))T[J", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("UTF-8", string0);
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("xUl");
      boolean boolean0 = outputFormat0.isNewlines();
      assertFalse(boolean0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("xUl", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
  }
}
