/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:02:20 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.schememode.SchemeMode;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.nio.charset.Charset;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.TimeZone;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.xalan.processor.StylesheetHandler;
import org.apache.xalan.processor.TransformerFactoryImpl;
import org.apache.xml.serializer.EmptySerializer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Coordinate;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import plugins.collaboration.database.DatabaseConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.896153112519625
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.getParent();
      jDayChooser0.setActionMap(actionMap0);
      Color color0 = Color.MAGENTA;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-973);
      floatArray0[1] = (float) (-973);
      floatArray0[2] = (float) (-973);
      floatArray0[3] = (float) (-973);
      floatArray0[4] = (float) (-973);
      floatArray0[5] = (float) (-973);
      floatArray0[6] = (float) (-973);
      Color.RGBtoHSB((-973), (-973), (-973), floatArray0);
      jDayChooser0.sundayForeground = color0;
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDecorationBackgroundColor();
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date1, date0);
      jDayChooser0.drawDays();
      jDayChooser0.getSundayForeground();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-973), (-973), (-2715), 7, 'e', (-973));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StyleContext.getDefaultStyleContext();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 406, "28");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.801684192093145
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StringContent stringContent0 = new StringContent(1);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      defaultStyledDocument0.getBidiRootElement();
      jDayChooser0.setMaxDayCharacters(1);
      Timestamp timestamp0 = new Timestamp(1);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMinSelectableDate(timestamp0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.983339251668879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, (-1137), (-1137), (-1137), (-1137), 'k');
      KeyEvent.getKeyModifiersText((-1137));
      jDayChooser0.keyReleased(keyEvent0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.keyReleased(keyEvent0);
      System.setCurrentTimeMillis((-1137));
      jDayChooser0.isPaintingTile();
      jDayChooser0.setDayBordersVisible(true);
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.setMinSelectableDate(mockDate0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      Locale locale0 = new Locale("", "");
      locale0.getExtension('k');
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5785534422126952
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Date date0 = jDayChooser1.setMinSelectableDate((Date) null);
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      jDayChooser0.setMonth((-2143289344));
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1731L));
      System.setCurrentTimeMillis((-1731L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea((-874), (-874));
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(9);
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-3133));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Metal");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      DatabaseConnectionHook databaseConnectionHook1 = new DatabaseConnectionHook();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StringContent stringContent0 = new StringContent(1);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      AttributeSet attributeSet0 = styleContext0.removeAttributes((AttributeSet) styleContext_NamedStyle0, (AttributeSet) styleContext_NamedStyle0);
      defaultStyledDocument0.getFont(attributeSet0);
      defaultStyledDocument0.getBidiRootElement();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = JComponent.WHEN_FOCUSED;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10012, 0, 0, 10012, 'y');
      jDayChooser0.keyPressed(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1074, 417, (-3617), 1896, 19);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(38);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.801690638611219
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.isPaintingForPrint();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getHierarchyListeners();
      jDayChooser1.setDay((-1427));
      jDayChooser1.isWeekOfYearVisible();
      jDayChooser0.getDaysInMonth();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setForeground(systemColor0);
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      TimeZone timeZone0 = TimeZone.getTimeZone("}/ASe2$pWO(R~");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      defaultTreeCellRenderer0.getFont();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getCursor();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ActionEvent actionEvent0 = new ActionEvent("28", (-445), "28");
      jDayChooser0.setMaxDayCharacters((-445));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuElement[] menuElementArray0 = new MenuElement[4];
      EmptySerializer emptySerializer0 = new EmptySerializer();
      emptySerializer0.getOutputFormat();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)66;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 11, 11, 11, 11, 'i', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8009457487317504
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      StyleContext styleContext0 = new StyleContext();
      StringContent stringContent0 = new StringContent(0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      Color color0 = styleContext0.getBackground(mutableAttributeSet0);
      jDayChooser0.setWeekdayForeground(color0);
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertEquals(0, color1.getBlue());
      
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.validate();
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StringContent stringContent0 = new StringContent(1);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      defaultStyledDocument0.getBidiRootElement();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, color0.getGreen());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5777114378736075
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = null;
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 337);
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      stylesheetHandler0.getSchema();
      Locale locale0 = Locale.ITALIAN;
      jDayChooser0.setLocale(locale0);
      Coordinate coordinate0 = jMapViewer0.getPosition(90, 14);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jMapViewer0.removeAncestorListener(ancestorListener0);
      jMapViewer0.getMapPosition(coordinate0);
      jDayChooser0.getLocation((Point) null);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setDayBordersVisible(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3154, 2227, 2292, 688, (-626));
      TextField textField0 = null;
      try {
        textField0 = new TextField("-H(%FXG3yBP!@");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDropTarget();
      jDayChooser0.setDropTarget((DropTarget) null);
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-940));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JComponent.getDefaultLocale();
      jMonthChooser0.getName();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      // Undeclared exception!
      try { 
        jDayChooser0.getBaseline((-2754), (-2754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width and height must be >= 0
         //
         verifyException("java.awt.Component", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "31");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StringContent stringContent0 = new StringContent((-2810));
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      Locale locale0 = Locale.FRENCH;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("7", locale0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setSelectableDateRange(date0, date0);
      SchemeMode schemeMode0 = new SchemeMode();
      schemeMode0.getController();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      DatabaseConnectionHook databaseConnectionHook1 = new DatabaseConnectionHook();
      MindMapController mindMapController0 = databaseConnectionHook0.getMindMapController();
      assertNull(mindMapController0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StringContent stringContent0 = new StringContent();
      StyleContext.getDefaultStyleContext();
      MockDate mockDate0 = new MockDate((-3424), 980, (-3424), (-3424), 436);
      jDayChooser0.setSelectableDateRange(mockDate0, (Date) null);
      SchemeMode schemeMode0 = new SchemeMode();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      DatabaseConnectionHook databaseConnectionHook1 = new DatabaseConnectionHook();
      assertFalse(databaseConnectionHook1.equals((Object)databaseConnectionHook0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.983176545981773
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.drawWeeks();
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.getAlignmentX();
      jDayChooser0.setDay(8211);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(3284);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      MenuElement[] menuElementArray0 = null;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      int int0 = 41;
      char char0 = 'y';
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenuBar jMenuBar0 = new JMenuBar();
      // Undeclared exception!
      try { 
        jMenuBar0.getHelpMenu();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // getHelpMenu() not yet implemented.
         //
         verifyException("javax.swing.JMenuBar", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6956064543588734
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.init();
      StyleContext styleContext0 = new StyleContext();
      StringContent stringContent0 = new StringContent(0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      Color color0 = styleContext0.getBackground(mutableAttributeSet0);
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.063207197182792
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.ORANGE;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setFocus();
      jDayChooser0.addNotify();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5461, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 3, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">V O&ZR+pK&";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setEnabled(false);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8009669700166993
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.init();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 2748L, (-864), 41, 'y', (MenuElement[]) null, menuSelectionManager0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.setText("day");
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertEquals(90, color1.getGreen());
      
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusDownCycle();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.contains(1665, (-199));
      Color color0 = jYearChooser0.darkGreen;
      jDayChooser0.setSundayForeground(color0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) null, (-2066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setLocation(59, 44);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      SchemeMode schemeMode0 = new SchemeMode();
      schemeMode0.getController();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      DatabaseConnectionHook databaseConnectionHook1 = new DatabaseConnectionHook();
      databaseConnectionHook1.getMindMapController();
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StyleContext.getDefaultStyleContext();
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(23);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jYearChooser0.repaint((long) 23);
      jDayChooser0.setDecorationBordersVisible(false);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jYearChooser0, 669, (-1949L), (-1297), 2489, 'L', (-301));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusDownCycle();
      jDayChooser0.firePropertyChange("#R.o.", (-2759), (-1351));
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(442);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.896153112519625
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.isValidateRoot();
      int int0 = 92;
      jDayChooser0.setMaxDayCharacters(92);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.addFocusListener((FocusListener) null);
      jDayChooser_DecoratorButton0.setFocusCycleRoot(true);
      jDayChooser_DecoratorButton0.firePropertyChange("day", 1.0, 1.0);
      jDayChooser_DecoratorButton0.setVisible(false);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getWeekdayForeground();
      jDayChooser_DecoratorButton0.getLocale();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      SchemeMode schemeMode0 = new SchemeMode();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      MindMapController mindMapController0 = databaseConnectionHook0.getMindMapController();
      assertNull(mindMapController0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(14);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      jDayChooser0.setYear(1886);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUIClassID();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }
}
