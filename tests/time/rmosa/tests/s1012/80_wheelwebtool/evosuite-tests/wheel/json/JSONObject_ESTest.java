/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 01:27:58 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      Object object0 = new Object();
      hashMap0.remove(object0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.optString((String) null, (String) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(59);
      Long long0 = new Long((-5468L));
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(59);
      JSONObject jSONObject1 = jSONObject0.put("z)#4_EFM", (Object) double0);
      jSONObject0.length();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.keys();
      jSONObject1.toString((-2931), (-1));
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000002\": java.lang.Double@0000000003,\n\"java.lang.Integer@0000000004\": java.lang.Long@0000000005\n}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 82;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>(82, 82);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("K @=T,f-", true);
      jSONObject0.optString("K @=T,f-");
      JSONTokener jSONTokener0 = new JSONTokener("K @=T,f-");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of K @=T,f-
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter(21);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONTokener jSONTokener1 = new JSONTokener("{");
      try { 
        jSONTokener1.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(4);
      Long long0 = new Long((-5468L));
      hashMap0.put((Integer) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Boolean boolean0 = Boolean.valueOf("TW~ofK#");
      JSONObject jSONObject1 = jSONObject0.put("z)#4_EFM", (Object) boolean0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.keys();
      jSONObject1.toString((-2931), 23);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(59);
      JSONTokener jSONTokener0 = new JSONTokener("LvC`{Kv\"BG-Zy");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of LvC`{Kv\"BG-Zy
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double double0 = new Double(792.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      Short short0 = new Short((short)908);
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.101745604741793
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject1);
      jSONObject1.append("wheel.json.JSONObject@0000000002", "wheel.json.JSONObject@0000000002");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt((-26674136), (-26674136));
      JSONObject jSONObject2 = jSONObject1.append("wheel.json.JSONObject@0000000002", jSONArray0);
      jSONObject2.toString((-26674136));
      JSONObject.doubleToString((-26674136));
      jSONObject2.optString("se");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 1721;
      jSONArray0.optInt(1721, 1721);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "CsP*0'2K P&J*n3)dLw");
      // Undeclared exception!
      jSONObject1.toString(1721);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8199839182589028
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Boolean boolean0 = new Boolean("");
      JSONObject.getNames((Object) boolean0);
      jSONObject0.toString(1598, 46);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(8192);
      Long long0 = new Long(8192);
      Integer integer1 = new Integer(8192);
      Long long1 = new Long(59);
      hashMap0.put(integer1, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("z)#4_EFM", (Object) long0);
      jSONObject0.length();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject0.keys();
      // Undeclared exception!
      jSONObject0.toString(33, 8192);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("HM| N{ef(4=^;U6");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of HM| N{ef(4=^;U6
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getdecode", 1142);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(true, false);
      JSONObject.valueToString(boolean0, 120, 0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(13, (-1031));
      Double double0 = new Double((-1779));
      JSONObject jSONObject2 = jSONObject1.append("l'zxBpVV", double0);
      int int0 = jSONObject1.optInt("l'zxBpVV", 13);
      assertEquals(13, int0);
      
      jSONObject2.accumulate("l'zxBpVV", jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("HM| H{Sex(4=/;U6N");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 12 of HM| H{Sex(4=/;U6N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(">)uo=)LH", ">)uo=)LH");
      JSONObject jSONObject2 = jSONObject0.put(">)uo=)LH", (-1L));
      jSONObject1.getDouble(">)uo=)LH");
      int int0 = jSONObject2.optInt(">)uo=)LH");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "A JSONObject text must begin with '{'";
      Float float0 = new Float(Double.NaN);
      Float.max(1.0F, 1.0F);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("false", (-45L));
      Long long0 = new Long((-1L));
      JSONObject jSONObject1 = jSONObject0.accumulate("false", long0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Long long0 = new Long(0L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(8448);
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.keys();
      Float float0 = new Float(Double.NaN);
      String string0 = "CPxc|W`";
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      Byte byte0 = new Byte((byte)82);
      Byte.toUnsignedLong((byte)82);
      hashMap0.remove((Object) byte0, (Object) byte0);
      Byte byte1 = new Byte((byte) (-98));
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(byte1, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject.quote("");
      JSONObject jSONObject2 = jSONObject0.getJSONObject("");
      jSONObject1.put("\"\"", false);
      jSONObject0.optBoolean("+5pyN4py|`B0b");
      try { 
        jSONObject2.put((String) null, (int) (byte) (-98));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short short0 = new Short((short)0);
      Long long0 = new Long((short)0);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((short)0);
      Long long1 = new Long(1263L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("CPxc|W`", (Object) integer0);
      jSONObject1.length();
      jSONObject0.keys();
      jSONObject1.isNull("CPxc|W`");
      double double0 = jSONObject1.optDouble("CPxc|W`");
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("false", 1076L);
      Short.toUnsignedInt((short) (-197));
      Short short0 = new Short((short) (-197));
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONObject1.optDouble("false", (double) 1076L);
      assertEquals(1076.0, double0, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      String string0 = ",\n";
      Short.compare((short) (-927), (short) (-927));
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ",\n";
      stringArray0[1] = ",\n";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", 1930L);
      jSONObject1.getString(",\n");
      Short.toUnsignedInt((short) (-927));
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isappend", (Object) jSONArray0);
      try { 
        jSONObject1.getJSONObject("isappend");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isappend\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("iswait", 0.0);
      jSONObject0.getLong("iswait");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Long long0 = new Long((-5468L));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("z)#4_EFM", (Object) hashMap1);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject0.keys();
      jSONObject0.isNull("z)#4_EFM");
      String string0 = "JSONArray initial value should be a string or collection or array.";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(34);
      Long long0 = new Long(59);
      Integer integer1 = new Integer(34);
      hashMap1.put(integer1, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("3", object0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.keys();
      boolean boolean0 = jSONObject0.isNull("3");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] is not a Boolean.", hashMap0);
      jSONObject1.put("_#nZ^FH?IroYJ\"4.;'", (-1L));
      jSONObject0.getDouble("_#nZ^FH?IroYJ\"4.;'");
      JSONObject jSONObject2 = jSONObject0.putOpt(">)uo=)LH", (Object) null);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      stringArray0[7] = "{}";
      JSONObject jSONObject0 = new JSONObject("{}", stringArray0);
      jSONObject0.put("{}", (-1L));
      Short.toUnsignedInt((short)12);
      jSONObject0.getInt("{}");
      JSONObject.quote("toj");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject1.opt("{}");
      assertNull(object0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("|oyPL.a&", 232L);
      boolean boolean0 = new Boolean("|oyPL.a&");
      long long0 = jSONObject0.optLong("|oyPL.a&");
      assertEquals(232L, long0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iswakit", (-1291.11425136393));
      jSONObject0.getLong("iswakit");
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Short short0 = new Short((short)0);
      Long long0 = new Long((short)0);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((short)0);
      Long long1 = new Long((short)0);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      jSONObject0.put("CPxc|W`", (Object) integer0);
      jSONObject0.opt("CPxc|W`");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Long long0 = new Long((-5468L));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("z)#4_EFM", (Object) hashMap1);
      jSONObject0.length();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      Float float0 = new Float((-631.5));
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(float0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Short.compare((short)92, (short) (-2415));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",\n", 0L);
      Short.toUnsignedInt((short) (-2415));
      jSONObject1.getInt(",\n");
      JSONObject.quote("g,rY%I3");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(754L);
      JSONObject jSONObject1 = jSONObject0.append("isformat", long0);
      JSONObject jSONObject2 = jSONObject1.put("@HUv", 754L);
      double double0 = jSONObject2.getDouble("@HUv");
      assertEquals(754.0, double0, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("VY", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "toS";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("toS", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append(">)uo=)LH", object0);
      jSONObject0.put(">)uo=)LH", 0L);
      double double0 = jSONObject1.getDouble(">)uo=)LH");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      hashMap1.entrySet();
      Long long1 = new Long((-1L));
      hashMap1.getOrDefault((Object) null, long1);
      Integer integer0 = new Integer((-1889));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.optJSONArray("5Q\"XWN-?Uv_");
      JSONObject jSONObject1 = jSONObject0.putOpt("5Q\"XWN-?Uv_", integer0);
      jSONObject1.optBoolean("fo", false);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Short.toUnsignedInt((short)9574);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      Float.min(9574, 0.0F);
      Byte byte0 = new Byte((byte)42);
      jSONObject0.put(">)uo=)LH", (Object) byte0);
      jSONObject0.putOpt((String) null, (Object) null);
      Object object1 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = jSONObject0.optInt(">)uo=)LH");
      assertEquals(42, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5906757807316017
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Short short0 = new Short((short)54);
      Float float0 = Float.valueOf((float) (short)54);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.valueToString(float0);
      JSONObject.valueToString(short0);
      JSONObject.valueToString(jSONObject0, 9, (short)3130);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Float@0000000009";
      JSONObject jSONObject1 = new JSONObject(jSONArray0, stringArray0);
      try { 
        jSONObject1.getJSONArray("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float.valueOf(2352.095F);
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Float, Boolean> hashMap1 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Unterminated string", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Integer integer0 = new Integer((-625));
      Float float0 = new Float((double) (-625));
      Float.max(1837.0F, 1311.498F);
      JSONObject.testValidity(float0);
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)55);
      jSONObject0.putOpt((String) null, short0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("W5DX1,(w-.r_Pw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of W5DX1,(w-.r_Pw
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = new Boolean("lon");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.logicalAnd(true, false);
      Boolean.logicalAnd(false, true);
      JSONObject jSONObject1 = jSONObject0.put("lon", (Object) "lon");
      jSONObject0.get("lon");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject0.get("$i_H Y#>Xw[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$i_H Y#>Xw[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = "Z";
      jSONObject0.accumulate("Z", "Z");
      try { 
        jSONObject0.getInt("Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Short.toUnsignedInt((short)9574);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ">)uo=)LH";
      Float float0 = new Float(0.0);
      byte byte0 = (byte)52;
      Byte byte1 = new Byte((byte)52);
      jSONObject0.put(">)uo=)LH", (Object) byte1);
      try { 
        jSONObject0.append(">)uo=)LH", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[>)uo=)LH] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Short short0 = new Short((short) (-1204));
      hashMap0.put(short0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.1015014044975926
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short.toUnsignedInt((short)12);
      JSONObject jSONObject1 = new JSONObject((Object) "isvalueOf");
      Short.toUnsignedLong((short)12);
      JSONObject jSONObject2 = jSONObject1.put(",\n", true);
      Short.toUnsignedInt((short)12);
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      jSONObject3.optLong(" at character ", (-960L));
      JSONObject.getNames((Object) jSONObject0);
      Short.compare((short)12, (short) (-1076));
      jSONObject3.isNull("isvalueOf");
      Boolean boolean0 = Boolean.valueOf("get");
      JSONObject.valueToString(boolean0, 17, 17);
      boolean boolean1 = jSONObject2.optBoolean(",\n");
      assertEquals(4, jSONObject1.length());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      int int0 = 943;
      JSONObject.valueToString((Object) null, 943, 943);
      JSONTokener jSONTokener0 = new JSONTokener("4E2?kT+m~");
      JSONTokener jSONTokener1 = new JSONTokener("A JSONObject text must end with '}'");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 4E2?kT+m~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.590919980975802
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Short short0 = new Short((short)3130);
      Float float0 = Float.valueOf((float) (short)54);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      String string0 = JSONObject.valueToString(jSONObject0, 9, (short)3130);
      jSONObject0.keys();
      // Undeclared exception!
      jSONObject0.get(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(jSONObject0, (-1937), (-2228));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-1889));
      Long long0 = new Long((-1889));
      Long.getLong("9F]<R_qJ", 23L);
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-1889));
      Long long0 = new Long((-1889));
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.put(">)uom]LH", (Object) float0);
      jSONObject0.optString(">)uom]LH", "eu<Te-7&#A'\"C%");
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1043.7021128995361));
      assertEquals("-1043.7021128995361", string0);
      
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Float float0 = new Float(1012.0137206513909);
      hashMap0.put((Double) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString();
      assertNull(string1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = new Float((-570.402424564));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = new Object();
      Integer integer0 = new Integer(405);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getdecode", 992);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 13, 5498);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add(jSONArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray2 = jSONArray1.put((Collection) linkedList0);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      jSONArray1.toString(723);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray3 = jSONObject0.toJSONArray(jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertNotNull(jSONArray3);
      assertEquals(2, jSONArray3.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[1];
      Short.compare((short)0, (short)0);
      stringArray0[0] = ",\n";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", (long) 0);
      jSONObject1.getLong(",\n");
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = new Object();
      jSONObject1.append("is", object0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ",\n", (int) (short)0, (int) (short)0);
      Writer writer0 = jSONObject1.write(stringWriter1);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
      
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("-1");
      assertEquals("", string1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject.doubleToString(Double.NaN);
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "U&tS#mB(";
      String string1 = "~A|Hg-qlYulw<1";
      Object object0 = new Object();
      hashMap0.clone();
      Integer integer0 = new Integer((-2278));
      jSONObject0.optLong("~A|Hg-qlYulw<1", 0L);
      try { 
        jSONObject0.getLong("~A|Hg-qlYulw<1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~A|Hg-qlYulw<1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("/gBjOh26J|xyU*I", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("has");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("p )#[Va{-");
      String string0 = jSONObject0.optString("getcompare", "getcompare");
      assertEquals("getcompare", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      String string0 = JSONObject.doubleToString((-1043.7021128995361));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("f*C4<qH_", "-1043.7021128995361");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-1889));
      Long long0 = new Long((-1889));
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float(0.0);
      jSONObject0.put(">)uom]LH", (Object) float0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optString(">)uom]LH", "eu<Te-7&#A'\"C%");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8423943585863412
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("~A|Hg-qlYulw<1", (Object) hashMap0);
      jSONObject1.remove("~A|Hg-qlYulw<1");
      try { 
        jSONObject0.getJSONArray("~A|Hg-qlYulw<1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~A|Hg-qlYulw<1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("J*f+Qb/h", 1454.295376);
      assertEquals(1454.295376, double0, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("ZJI*,e:^)Drs7");
      assertNull(object0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double((-686.0721498));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = ".";
      jSONObject0.put(".", 1590.82);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("rem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of rem
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Byte, String> hashMap1 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("~A|Hg-qlYulw<1", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      String string0 = JSONObject.valueToString(hashMap0, 66, 34);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      Integer integer0 = new Integer(4974);
      Long long0 = new Long((-5468L));
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      hashMap1.put((Integer) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("}o.7&BTmD5R2s?m?", (Object) long0);
      jSONObject0.length();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.keys();
      // Undeclared exception!
      try { 
        jSONObject1.toString(59, (-2931));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer(87);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(58);
      hashMap0.put(integer0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float((double) 58);
      JSONObject jSONObject1 = jSONObject0.put(">)uom]LH", (Object) integer0);
      jSONObject1.toString(20, 47);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "add");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      int int0 = 2546;
      Integer.valueOf(2546);
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>(2546, 2546);
      Integer integer0 = new Integer(1123);
      hashMap1.put(integer0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.keys();
      Float float0 = new Float((double) 1123);
      Double double0 = new Double(3881.2245019);
      Object object0 = new Object();
      jSONObject0.put("getgetJSONArray", object0);
      jSONObject0.toString(1123, (-114));
      Byte byte0 = new Byte((byte)54);
      Boolean boolean0 = Boolean.valueOf("getgetJSONArray");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(4);
      Long long0 = new Long(92L);
      HashMap<Integer, Long> hashMap2 = new HashMap<Integer, Long>();
      Long long1 = new Long((-5468L));
      hashMap2.put((Integer) null, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      jSONObject0.put("&ygB4qG8Gv", (Object) hashMap2);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keys();
      // Undeclared exception!
      try { 
        jSONObject0.toString(4, 2191);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("wheel.json.JSONTokener", (-805));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(59);
      Long long0 = new Long(59);
      hashMap0.put(integer0, long0);
      HashMap<JSONObject, String> hashMap1 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("spl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"spl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "<&";
      stringArray0[4] = "\r";
      stringArray0[6] = "C5Qt7f$e";
      stringArray0[7] = "1BHqpzGbQu&Dpe|l~l,";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optInt("true");
      jSONObject0.optInt("OL&+~+]_Zq1<vszC@", 0);
      jSONObject0.toString();
      jSONObject0.has("1BHqpzGbQu&Dpe|l~l,");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Integer integer0 = new Integer(0);
      linkedList1.add((Object) integer0);
      linkedList0.containsAll(linkedList1);
      StringWriter stringWriter0 = new StringWriter(61);
      // Undeclared exception!
      try { 
        stringWriter0.write((char[]) null, (-30733247), (-12469270));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("|v", true);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("u] j`!>7");
      Object object0 = new Object();
      jSONObject0.put("u] j`!>7", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Short short0 = new Short((short)0);
      Long long0 = new Long((short)0);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((short)0);
      Long long1 = new Long((short)0);
      hashMap0.put(integer0, long1);
      Long long2 = new Long(1263L);
      Long.min((short)0, 1L);
      hashMap0.put(integer0, long2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      String string0 = "CPxc|W`";
      jSONObject0.keys();
      jSONObject0.isNull("CPxc|W`");
      try { 
        Integer.decode("] is not a JSONObject.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"] is not a JSONObject.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      try { 
        jSONObject0.append((String) null, jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("D%d\"Ze\"~6fX", "D%d\"Ze\"~6fX");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long((-1L));
      Integer integer0 = new Integer(1397);
      hashMap0.getOrDefault(integer0, long0);
      Integer integer1 = new Integer(1397);
      Long long1 = new Long(1397);
      Integer integer2 = new Integer(1397);
      Long long2 = new Long((-1889));
      hashMap0.put(integer2, long2);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      int int0 = jSONObject0.optInt("");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("false", 1076L);
      Short.toUnsignedInt((short) (-197));
      jSONObject1.getInt("false");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONArray(1076);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1076] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\"BG'ZDkk!,*dJd-~?", hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = Float.valueOf(93.408134F);
      try { 
        jSONObject0.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Collection) linkedList0);
      Short short0 = new Short((short)1051);
      JSONObject.quote("|u\"");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      assertTrue(hashMap1.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      Long long0 = new Long(2678L);
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-4069));
      hashMap1.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "<&";
      stringArray0[4] = "\r";
      stringArray0[6] = "C5Qt7f$e";
      stringArray0[7] = "1BHqpzGbQu&Dpe|l~l,";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optInt("true");
      jSONObject0.optInt("OL&+~+]_Zq1<vszC@", (-129));
      jSONObject0.toString();
      jSONObject0.has("1BHqpzGbQu&Dpe|l~l,");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList1);
      StringWriter stringWriter0 = new StringWriter(61);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      assertEquals("", stringWriter1.toString());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("issignum", (-26674136));
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-2589), 1);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optInt(21, 59);
      jSONArray0.optInt((-2084), 1);
      Object object1 = JSONObject.NULL;
      jSONObject0.append(",\n", object1);
      int int0 = jSONObject1.optInt(".q0{v!", (-1485));
      assertEquals(2, jSONObject1.length());
      assertEquals((-1485), int0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("getwait", 10);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Object object0 = new Object();
      Integer integer0 = new Integer(1504);
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put("] not found.", (Collection) null);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONArray jSONArray2 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",\n", 0L);
      Double double0 = new Double(1966.181339048142);
      JSONObject.valueToString(double0, 44, 83);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray2 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.has(",\n");
      assertEquals(1, jSONObject0.length());
      
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("java.lang.Long@00000000030");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@00000000030\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Collection) linkedList0);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = new JSONArray();
      long long0 = jSONObject0.optLong("Expected a ',' or ']'");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Short short0 = new Short((short)0);
      Long long0 = new Long((short)0);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((short)0);
      Long long1 = new Long(6840L);
      hashMap0.put(integer0, long1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float((double) 6840L);
      JSONObject jSONObject1 = jSONObject0.put("CPxc|W`", (Object) integer0);
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)40);
      JSONObject.getNames((Object) byte0);
      StringWriter stringWriter0 = new StringWriter((byte)40);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">)uom]LH");
      jSONObject1.write(stringWriter1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = Integer.valueOf(93);
      hashMap0.put(integer0, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      Float float0 = new Float((-3558.513691180987));
      Double double0 = new Double(93);
      jSONObject0.toString(0, 20);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      Long long0 = new Long((short)0);
      String string0 = "";
      JSONObject.quote("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean0 = new Boolean("true");
      JSONObject.valueToString(boolean0);
      try { 
        Byte.valueOf("\"\"", (int) (short)0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      jSONObject0.put("e}A>}4(.F", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Long long0 = new Long(0L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(8448);
      HashMap<Object, Long> hashMap1 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Float float0 = new Float(Double.NaN);
      jSONObject0.put(",8>*{e", (Object) ",8>*{e");
      Byte byte0 = new Byte((byte)40);
      StringWriter stringWriter0 = new StringWriter(77);
      stringWriter0.append((CharSequence) "CPxc|W`");
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer((-669));
      Integer integer1 = new Integer((-669));
      hashMap0.put(integer1, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      jSONObject0.toString(745, 745);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Short.toUnsignedInt((short)9574);
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(0.0);
      Long long0 = Long.getLong("false", 0L);
      hashMap0.put((Integer) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float1 = new Float((double) 0L);
      // Undeclared exception!
      try { 
        jSONObject0.toString(1346, 9574);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      Integer integer0 = new Integer(59);
      Long long0 = new Long((-5468L));
      hashMap0.put(integer0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Short short0 = new Short((short)54);
      Short.toUnsignedInt((short)0);
      Short.toUnsignedInt((short)12);
      JSONObject jSONObject0 = new JSONObject();
      Short.toUnsignedLong((short)54);
      String string0 = "*mg49)`";
      jSONObject0.put("*mg49)`", true);
      try { 
        jSONObject0.getLong("*mg49)`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*mg49)`\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      HashMap<JSONArray, Float> hashMap1 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = "V*?eUfv";
      try { 
        jSONObject0.getDouble("V*?eUfv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V*?eUfv\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("JSONArray initial value should be a string or collection or array.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("/}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of /}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote("?[-=R3/");
      assertEquals("\"?[-=R3/\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short short0 = (short) (-624);
      Short.toUnsignedInt((short) (-624));
      Short.toUnsignedInt((short)11);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (short) (-624), 2883);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = new String[7];
      jSONObject0.optLong("null", 1L);
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("\"2e+$($9'i16_A+3&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"2e+$($9'i16_A+3&\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Short short0 = new Short((short)481);
      String string0 = JSONObject.valueToString(short0, 66, (short)481);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float float0 = new Float(1716.586029);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(linkedList0, 7, 7);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("8v>?pajY/");
      assertEquals("\"8v>?pajY/\"", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject.getNames((Object) "{");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("{", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Short short0 = new Short((short)0);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      Float.valueOf(93.408134F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.put((String) null, 1076L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("|oyPL.a&", 232L);
      try { 
        jSONObject1.getBoolean("|oyPL.a&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|oyPL.a&\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("X()Xm P:/MX'uR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X()Xm P:/MX'uR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("~A|Hg-qlYulw<1", (Object) hashMap0);
      try { 
        jSONObject0.getJSONArray("~A|Hg-qlYulw<1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~A|Hg-qlYulw<1\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(1153, 1153);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(1085);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject1 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("UYNz");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("VY", (-1873.26111));
      assertEquals((-1873.26111), double0, 0.01);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("] not found.");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("n`Zd");
      assertNull(object0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }
}
