/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 01:19:45 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2005875145350458
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(365L);
      Player player0 = new Player(1);
      player0.setDead();
      player0.setZ(365L);
      player0.setDead();
      player0.id = 1;
      player0.gangStrength();
      player0.pack();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<\"");
      player0.getZ();
      System.setCurrentTimeMillis(2487L);
      player0.getZ();
      byte[] byteArray0 = player0.pack();
      player0.type();
      player0.getY();
      Player player1 = new Player(1, "QP(rbP*f", "", (-3936));
      player1.unpack(byteArray0);
      player0.setDead();
      player1.remove(player0);
      player1.setY((-3936));
      player0.isJoinOK(player1, false);
      player0.pack();
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis(1392409281320L);
      float float0 = player1.getY();
      assertEquals((-3936.0F), float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B{L^{cTDc");
      Player player0 = new Player(1279, "0.0.0.0", "0.0.0.0", 1931, 2095);
      Player player1 = new Player(1279, "", "0.0.0.0", (short)4919, (-259));
      player1.remove(player0);
      player0.isJoinOK(player1, false);
      player0.pack();
      player1.setX((-1781.328F));
      System.setCurrentTimeMillis(1392409296320L);
      player0.remove(player1);
      player0.pack();
      player0.setDead((long) (-259), true);
      player1.getZ();
      player1.setConnected(false);
      player1.isConnected();
      player0.getX();
      player0.isConnected();
      player1.pack();
      player1.getX();
      System.setCurrentTimeMillis(2862L);
      player0.getX();
      // Undeclared exception!
      try { 
        player1.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((-1), "/5J", "", 844, (-2747));
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      Player player1 = new Player((-1));
      player1.setJoinOK(player0, false);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", player1.toString());
      
      Player player2 = new Player(844, "", "!ASKA]VxwYul", 2787, (-1));
      player2.pack();
      Player player3 = new Player((-252), "", "!ASKA]VxwYul", 0, (-252));
      boolean boolean1 = player0.isJoinOK(player3, false);
      assertTrue(boolean1 == boolean0);
      
      int int0 = player2.getStrength();
      assertEquals("", player2.getIP());
      assertFalse(player2.isDead());
      assertEquals((-1), int0);
      assertEquals(2787, player2.getPictureId());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertTrue(player2.isConnected());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2823), 86);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      player0.getStrength();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player1 = new Player((byte)25);
      player0.setJoinOK(player1, true);
      Player player2 = new Player((byte)25);
      player2.setY((byte)95);
      player0.isJoinOK(player2, false);
      float float0 = player2.getY();
      assertEquals(95.0F, float0, 0.01F);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1902;
      Player player0 = new Player(2147340491, "", "", 0, 1902);
      player0.getIP();
      player0.type();
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player();
      Player player1 = new Player((short)4919);
      player0.setJoinOK(player1, true);
      player0.unpack(dataInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player();
      player0.setJoinOK(player0, false);
      player0.unpack(dataInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      
      boolean boolean0 = player0.isJoinOK(player0, false);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2641141459685947
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(0, "Player", "Player", (-3121));
      Player player1 = new Player((-1391), "@(nCKet5YIgV4l.*Lo+", (short)4919);
      player1.boss = (Party) player0;
      player0.add(player1);
      player1.setZ((-1391));
      player0.getX();
      player0.id = (-3685);
      player0.pack();
      player1.setDead(0L);
      byte[] byteArray0 = player1.pack();
      player1.unpack(byteArray0);
      player0.setDead(0L, true);
      player0.setMoney(1169.61F);
      player1.setDead();
      player0.gangStrength();
      player1.getTimeOfDeath();
      player1.isJoinOK(player0, false);
      player1.isJoinOK(player0, true);
      System.setCurrentTimeMillis(0L);
      player1.getTimeOfDeath();
      player0.getStrength();
      float float0 = player1.getZ();
      assertEquals((-1391.0F), float0, 0.01F);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(3, (String) null, (-1));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)86;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)95);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream1);
      player0.toString();
      Player player1 = new Player(1690, (String) null, (String) null, (-233));
      boolean boolean1 = player0.isJoinOK(player1, true);
      assertTrue(boolean1 == boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      
      int int0 = player1.getStrength();
      assertEquals((-233), player1.getPictureId());
      assertEquals(1, int0);
      assertTrue(player1.isConnected());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(435, (String) null, (String) null, 435);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/27_gangup");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      player0.unpack(dataInputStream0);
      player0.setDead();
      player0.getName();
      int int0 = player0.getStrength();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((-1), (String) null, "lHV[G^_FFAma~w4bh", (-549), (-1));
      int int0 = player0.gangStrength();
      assertEquals((-1), int0);
      
      player0.id = (-1286);
      String string0 = player0.getIP();
      assertNull(string0);
      
      float float0 = player0.getZ();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-549), player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(961, "", "", (-5359));
      Player player1 = new Player(805, "@(nCKet5YIgV4l.*Lo+", 961);
      player0.add(player1);
      Player player2 = new Player((-5359), "", 27999);
      player2.setZ(10);
      player0.getName();
      player0.getX();
      player1.pack();
      player1.setDead((-2615L));
      player0.pack();
      player0.setDead((-896L), true);
      player1.setMoney(27999);
      player2.setDead();
      player1.getTimeOfDeath();
      player0.isJoinOK(player2, true);
      player1.isJoinOK(player2, true);
      assertEquals(10.0F, player2.getZ(), 0.01F);
      assertEquals(27999.0F, player1.getMoney(), 0.01F);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(10, "gCK?p", "~YkKS$H7(!o7{#f)f", (-846));
      player0.pack();
      player0.setMoney((-846));
      player0.getMoney();
      player0.setDead((-72L), false);
      int int0 = player0.type();
      assertEquals((-72L), player0.getTimeOfDeath());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(5, "5-wjPru^eX&X{n!", "5-wjPru^eX&X{n!", (-2365));
      int int0 = player0.getPictureId();
      assertEquals((-2365), int0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(3670, (String) null, (-2559));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(2106, "@>>5@,mNO~", "", 0);
      player0.setDead(0L);
      player0.getZ();
      player0.getStrength();
      player0.getMoney();
      player0.toString();
      player0.getName();
      player0.gangStrength();
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-89);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 4);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      Player player0 = new Player(1279, "", (byte) (-119));
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      player0.toString();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals((-119), player0.getPictureId());
      
      Player player1 = new Player((byte) (-65), "+MD/'U?NAv", (String) null, 4);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(51, "", 51);
      player0.setZ(4);
      Player player1 = new Player();
      player1.getY();
      Party party0 = new Party();
      Player player2 = new Player(285, "&ms~/s", "", 285);
      player2.add(player0);
      player1.reset(true);
      player0.getPictureId();
      Player player3 = new Player((-1103), "ft?VcAp:", "%", 51);
      player3.toString();
      Player player4 = new Player((-615), "%", "%", 51);
      player4.type();
      player2.gangStrength();
      player2.setDead((-2424L), false);
      player3.setZ(2505.3582F);
      int int0 = player2.gangStrength();
      assertEquals((-2424L), player2.getTimeOfDeath());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((byte)67);
      player0.id = (int) (byte)67;
      float float0 = player0.getZ();
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("Player67", player0.toString());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(4, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 4);
      player0.setDead();
      player0.getX();
      boolean boolean0 = player0.isDead();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(0, "", 0);
      Player player1 = new Player();
      player0.head = (Party) player1;
      player0.prev = (Party) player1;
      player0.setY(0);
      player0.pack();
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(0.0F);
      player0.isDead();
      player0.getY();
      player0.getX();
      player0.setX(0.0F);
      player0.getTimeOfDeath();
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(24217);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.isDead();
      System.setCurrentTimeMillis(19L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(76, "", 2706);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      player0.pack(dataOutputStream0);
      assertEquals("\u00137L\u0000\u0001\n\uFFFDA \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
      
      int int0 = player0.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(4);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)3;
      player0.unpack(byteArray0);
      player0.setDead(2206L, true);
      player0.setMoney(1206.4808F);
      player0.setDead();
      player0.gangStrength();
      player0.getTimeOfDeath();
      player0.isConnected();
      Player player1 = new Player();
      player1.isJoinOK(player0, false);
      assertTrue(player0.isDead());
      
      Player player2 = new Player((-1555), "5", (-1555));
      boolean boolean0 = player1.isConnected();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-1095));
      float float0 = player0.getX();
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals("Player-1095", player0.getName());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((-2813), "EK^,LB", "EK^,LB", 16389);
      int int0 = player0.getPictureId();
      assertEquals(16389, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getPictureId();
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(0, "gCK?p", "kSmWA|ts2G`+o|d#}", 10);
      player0.pack();
      player0.setMoney(10);
      float float0 = player0.getMoney();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Player player0 = new Player((-423));
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player((-536));
      String string0 = player0.toString();
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player-536", string0);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player((-14009));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-34);
      player0.unpack(byteArray0);
      int int0 = player0.type();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(5, int0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-14009", player0.toString());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((-1));
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-272));
      byteArrayInputStream0.mark((-272));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      Player player1 = new Player(25, "4r$pQ-", 6400);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player((-3784));
      player0.getName();
      player0.gangStrength();
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byte byte0 = (byte)71;
      byteArray0[1] = (byte)71;
      sequenceInputStream0.read(byteArray0);
      sequenceInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        dataInputStream0.readChar();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player(0, "epzgD09Yy+-rlXC-", "epzgD09Yy+-rlXC-", 2819);
      player0.getMoney();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(".*[.]class$");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player();
      player0.gangStrength();
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      Player player2 = new Player(361, "u(I=^9T4xS[ko", "u(I=^9T4xS[ko", 0, 0);
      player2.getStrength();
      player1.getStrength();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream1);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      player1.unpack(dataInputStream0);
      player0.unpack(dataInputStream1);
      assertEquals(4, byteArrayInputStream0.available());
      
      Player player3 = new Player(0);
      player1.setJoinOK(player2, false);
      Player player4 = new Player((byte)25);
      player4.pack();
      player4.isJoinOK(player3, true);
      assertEquals("Player0", player3.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(50);
      Player player1 = new Player(0, "bpc2vx 9nA}iK6[", "Tb.1bh_ZOdxR#tu'!", 1456, 0);
      player1.setX(0);
      player1.gangStrength();
      player0.boss = (Party) player1;
      player0.isJoinOK(player1, false);
      player0.setY((-3324.956F));
      player1.setX((short)4919);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      mockFileInputStream0.mark(1456);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      player1.unpack(dataInputStream0);
      player1.getStrength();
      player0.setJoinOK(player1, false);
      player1.setDead();
      assertEquals(4919.0F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(0, " ", " ", 998, 998);
      player0.getStrength();
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2647);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pushbackInputStream0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 137;
      Player player0 = new Player(137, "", "", 137, 137);
      player0.gangStrength();
      player0.type();
      Player player1 = new Player(5);
      boolean boolean0 = true;
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      // Undeclared exception!
      try { 
        pipedInputStream0.connect((PipedOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(24382);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 18944);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player((byte) (-34));
      player0.setDead();
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player((-3853));
      player0.gangStrength();
      player0.reset(false);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player();
      String string0 = player0.getIP();
      assertEquals("0.0.0.0", string0);
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-536);
      Player player0 = new Player((-536));
      boolean boolean0 = true;
      player0.setDead(1L);
      Party party0 = null;
      String string0 = "]Q7x,mK3Vn<J";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("]Q7x,mK3Vn<J");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1279;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player(1279);
      player0.unpack(dataInputStream0);
      Player player1 = new Player((short)4919);
      // Undeclared exception!
      try { 
        player1.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player(14335, "module.ModuleBrowserDialog$ModuleFilter", "", 501);
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }
}
