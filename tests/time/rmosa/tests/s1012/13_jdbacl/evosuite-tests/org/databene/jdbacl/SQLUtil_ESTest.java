/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:00:12 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      System.setCurrentTimeMillis((-4L));
      SQLUtil.removeComments(" WHERE ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " WHERE ";
      stringArray0[1] = " WHERE ";
      stringArray0[2] = " WHERE ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" WHERE ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("L2u$$o>)HnMwpXYn", " WHERE ");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = SQLUtil.normalize("k}E0/0", false);
      assertEquals("k } E0 / 0", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      SQLUtil.renderNumber(streamTokenizer0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertFalse(simpleResultSet0.isClosed());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = "renameqi[g4xs~^e>";
      SQLUtil.substituteMarkers("", "renameqi[g4xs~^e>", "renameqi[g4xs~^e>");
      String string1 = "q?EiE0Y&q:";
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("renameqi[g4xs~^e>", ",MUXcxbp@c8V<2|<", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("renameqi[g4xs~^e>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'renameqi[g4xs~^e>'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 1385.2540607786927;
      SQLUtil.renderNumber(streamTokenizer0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertEquals(0, simpleResultSet0.getRow());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(2554, "into");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D/#UNAW!d!|$+!X{{Z!", (DBTable) null, dBDataType0, (Integer) null, integer2);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
      assertEquals("D/#UNAW!d!|$+!X{{Z!", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("l;) MG\u0005_Nei*iqJ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "xmlserialize", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
      
      boolean boolean0 = SQLUtil.isQuery("PRIMARY KEY ()");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "h2.analyzeSample";
      SQLUtil.join("h2.analyzeSample", "[S*Wi{X(W5B] /", stringArray0, "Z0,9Ddi,|Q,nuZj^", "h2.analyzeSample", stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "( /* key:";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("( /* key:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ( /* key:
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = "sin(doube)";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("sin(doube)", defaultDBTable0, (-1346), "sin(doube)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"doube\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("xj~f-;R}daO");
      StringBuilder stringBuilder2 = stringBuilder1.append('\"');
      StringBuilder stringBuilder3 = stringBuilder2.insert(2, 2);
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '\"';
      charArray0[2] = '\'';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      stringBuilder2.append((Object) "tfz](|J0B");
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray0, 2, 2);
      StringBuilder stringBuilder5 = stringBuilder4.append((-1366.61F));
      stringBuilder5.insert(2, (CharSequence) stringBuilder4);
      stringBuilder5.reverse();
      StringBuilder stringBuilder6 = new StringBuilder("xj~f-;R}daO");
      DBSchema dBSchema0 = new DBSchema("tfz](|J0B");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d<<U0YqzYLcUs", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.iapi.types.RawToBinaryFormatStream", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT org.apache.derby.iapi.types.RawToBinaryFormatStream UNIQUE ()", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      SQLUtil.isDDL("P71+a,0CsA/*");
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.isQuery("?/*");
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[2] = "v3T\">**B8pQr{}HVgJ";
      stringArray0[4] = "org.databene.jdbacl.model.DBForeignKeyConstraint";
      stringArray0[3] = "L\u0001>";
      stringArray0[4] = "cC";
      stringArray0[6] = "cC";
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "drop materialized viewalter matrialized view";
      stringArray0[1] = "drop materialized viewalter matrialized view";
      stringArray0[2] = "drop materialized viewalter matrialized view";
      stringArray0[3] = "drop materialized viewalter matrialized view";
      stringArray0[4] = "drop materialized viewalter matrialized view";
      stringArray0[5] = "drop materialized viewalter matrialized view";
      stringArray0[6] = "drop materialized viewalter matrialized view";
      stringArray0[7] = "drop materialized viewalter matrialized view";
      stringArray0[8] = "drop materialized viewalter matrialized view";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "(HS745?fRK00?{t_Lt";
      stringArray1[1] = "(HS745?fRK00?{t_Lt";
      stringArray1[2] = "(HS745?fRK00?{t_Lt";
      stringArray1[3] = "(HS745?fRK00?{t_Lt";
      stringArray1[4] = "drop materialized viewalter matrialized view";
      stringArray1[5] = "drop materialized viewalter matrialized view";
      stringArray1[6] = "drop materialized viewalter matrialized view";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("drop materialized viewalter matrialized view", stringArray0, "drop materialized viewalter matrialized view", "(HS745?fRK00?{t_Lt", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[10];
      String string0 = "Qi[G4Xs~^e>";
      DBCatalog dBCatalog0 = new DBCatalog("Qi[G4Xs~^e>");
      boolean boolean0 = false;
      dBCatalog0.getTable("Qi[G4Xs~^e>", false);
      DBDataType dBDataType0 = DBDataType.getInstance(539, "READ ONLY");
      Integer integer0 = new Integer(539);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Qi[G4Xs~^e>", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBCatalog dBCatalog0 = new DBCatalog("Qi[G4Xs~^e>");
      dBCatalog0.getTable("Qi[G4Xs~^e>", false);
      DBDataType dBDataType0 = DBDataType.getInstance(539, "READ ONLY");
      Integer integer0 = new Integer(539);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Qi[G4Xs~^e>", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "Qi[G4Xs~^e>", false, "Qi[G4Xs~^e>");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "xsm$5T~Y)";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "rename";
      stringArray0[2] = "BLOB";
      stringArray0[3] = "rename";
      stringArray0[4] = "xsm$5T~Y)";
      stringArray0[5] = "xsm$5T~Y)";
      stringArray0[6] = "xsm$5T~Y)";
      stringArray0[7] = "BLOB";
      stringArray0[8] = "BLOB";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "BLOB", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "9kug(E");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-738);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-738), (Object) "xsm$5T~Y)");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -738
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H";
      stringArray0[1] = "v3T\">**B8pQr{}HVgJ";
      stringArray0[2] = "v3T\">**B8pQr{}HVgJ";
      stringArray0[3] = "updateforeign key";
      stringArray0[4] = "v3T\">**B8pQr{}HVgJ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "v3T\">**B8pQr{}HVgJ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("H", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = new Integer(319);
      dBUniqueIndex0.equals(integer0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "updateforeign key", true, stringArray0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.DBUniqueConstraint cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update~^p4*_eg_ zq0kmp");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-2021519401), "1<");
      String string0 = SQLUtil.normalize("v3T\">**B8pQr{}HVgJ", true);
      assertEquals("v3T \">**B8pQr{}HVgJ\"", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      Boolean boolean0 = SQLUtil.mutatesStructure("executetruncateforeign key");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "K]0c?-b-c");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)112;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("l>nml", true, " DEFAULT ", " LIKE ");
      Object object0 = new Object();
      dBCheckConstraint0.equals(object0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK  LIKE ", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "L^S";
      stringArray0[1] = "%/@(ih>5";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("so>4~n8~=:f\"!bQsat", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      String string0 = "g";
      String string1 = "1r,S(&";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1r,S(&");
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("g", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "]zvAm2.[]X^S", "}~FnicK8uif5M8H\"Y-V");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("6.>fg");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container 6.>fg", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "v3T\">**B8pQr{}HVgJ";
      DBDataType dBDataType0 = DBDataType.getInstance((-2021519401), "1<");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ds", defaultDBTable0, dBDataType0, integer0);
      DBDataType.getInstance((-2021519401), "v3T\">**B8pQr{}HVgJ");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "SELECT * FROM ";
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SELECT * FROM ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("select into|kb?f}k!f}uch/8lhs+");
      boolean boolean0 = SQLUtil.isDML("select into|kb?f}k!f}uch/8lhs+");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "ALTER TABLE ";
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      String[] stringArray1 = new String[8];
      stringArray1[0] = "null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null";
      stringArray1[1] = "ALTER TABLE ";
      stringArray1[2] = "wm CCqOu-=";
      stringArray1[3] = ", ";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(39, "i])6");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("i])6", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("I])6", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "STORAGE";
      stringArray0[1] = "STORAGE";
      stringArray0[2] = "STORAGE";
      stringArray0[3] = "bOl@\"mNKLLC*eR";
      stringArray0[4] = "STORAGE";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "STORAGE";
      // Undeclared exception!
      try { 
        SQLUtil.join("STORAGE", "STORAGE", stringArray0, "XyWCYtK[b", "STORAGE", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, (Object[]) null);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("getRowId(String)", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("q[q1U_cj$P`n", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = SQLUtil.normalize(")d*%r}0YO8@", true);
      assertEquals(") d * % r } 0YO8 @", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[10];
      SQLUtil.renderColumnListWithTableName("XJ017.&lS", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("MS/qNp8axF<.aiS");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("MS/qNp8axF<.aiS", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals("MS/qNp8axF<.aiScreate table MS/qNp8axF<.aiS (\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName(".}%hymxe/eX:8=K9vW=", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.normalize("6[)RaN<T3O&\bkm9OK", false);
      assertEquals("6 [) R  aN < T3O & \b km9OK", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("alter tableblob");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":RsK", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":RsK", defaultDBTable0, dBDataType0);
      defaultDBColumn0.isUnique();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "select1j^)xjr");
      VersionNumber versionNumber0 = VersionNumber.valueOf("select1j^)xjr");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("select1j^)xjr", "select1j^)xjr", versionNumber0);
      String string0 = SQLUtil.ownerDotComponent(defaultDatabase0);
      assertEquals("select1j^)xjr", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = null;
      String[] stringArray1 = new String[8];
      stringArray1[0] = "\"";
      stringArray1[1] = "-~@p7;lpm=G3&cjJ}J";
      stringArray1[2] = "P({8^![";
      stringArray1[3] = "\"";
      stringArray1[4] = "-~@p7;lpm=G3&cjJ}J";
      stringArray1[5] = "-~@p7;lpm=G3&cjJ}J";
      stringArray1[6] = "P({8^![";
      stringArray1[7] = "insertforeign key";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("\"", stringArray1, "\"", "P({8^![", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(2554, "into");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter sessiongf;z4sm", (DBTable) null, dBDataType0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "CJ06=-7";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CJ06=-7", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string1 = "";
      StringBuilder stringBuilder0 = new StringBuilder("");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0);
      StringBuilder stringBuilder3 = stringBuilder2.append((-309464311));
      // Undeclared exception!
      try { 
        stringBuilder3.delete(72, (-1823));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v3T\">**B8pQr{}HVgJ";
      stringArray0[1] = "org.apache.derby.impl.sql.execute.IndexRow";
      stringArray0[2] = "ds";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "v3T\">**B8pQr{}HVgJ", true, stringArray0);
      dBUniqueConstraint0.addColumnName("ds");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("v3T\">**B8pQr{}HVgJ", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueIndex0.equals(dBUniqueConstraint1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "v3T\">**B8pQr{}HVgJ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("Q<J`wsm(*Gi9=a;6I");
      DBSchema dBSchema0 = new DBSchema("Q<J`wsm(*Gi9=a;6I", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q<J`wsm(*Gi9=a;6I", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Q<J`wsm(*Gi9=a;6I";
      stringArray0[1] = "drop indexdrgp materialized view";
      stringArray0[2] = "Q<J`wsm(*Gi9=a;6I";
      stringArray0[3] = "Q<J`wsm(*Gi9=a;6I";
      stringArray0[4] = "Q<J`wsm(*Gi9=a;6I";
      stringArray0[5] = "Q<J`wsm(*Gi9=a;6I";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Q<J`wsm(*Gi9=a;6I", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (Q<J`wsm(*Gi9=a;6I, drop indexdrgp materialized view, Q<J`wsm(*Gi9=a;6I, Q<J`wsm(*Gi9=a;6I, Q<J`wsm(*Gi9=a;6I, Q<J`wsm(*Gi9=a;6I)", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "P({8^![";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("P({8^![");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: P({8^![
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setBlob(int, InputStream)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v3T\">**B8pQr{}HVgJ";
      stringArray0[1] = "org.apache.derby.impl.sql.execute.IndexRow";
      stringArray0[2] = "ds";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "v3T\">**B8pQr{}HVgJ", true, stringArray0);
      Character character0 = Character.valueOf('9');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'9'", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.h2.store.LobStorage$LobInputStream", true);
      assertEquals("org.h2.store.LobStorage $ LobInputStream", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("drop materialized viewdrgp materialized view");
      SQLUtil.addOptionalCondition("drop materialized viewdrgp materialized view", stringBuilder0);
      assertEquals("drop materialized viewdrgp materialized view or drop materialized viewdrgp materialized view", stringBuilder0.toString());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.normalize("Ku`'Exs+WYtm!", true);
      assertEquals("Ku ` 'Exs+WYtm!'", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[1] = null;
      stringArray0[3] = null;
      String string0 = SQLUtil.normalize("-SsUOX_ZR=,B", false);
      assertEquals("- SsUOX_Z  R =, B", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("UNION", "UNION", (String[]) null, "UNION", "UNION", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[10];
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = SQLUtil.normalize("s-`#I=;hy!w3(GcOp", false);
      assertEquals("s - ` # I = ; hy ! w3 (GcOp", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.renderColumnListWithTableName("XJ017.&lS", stringArray0);
      assertEquals("XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null, XJ017.&lS.null", "executecasewhen");
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " WHERE ";
      stringArray0[1] = "create unique index{*z#";
      stringArray0[2] = "no%=bZ';1A3{'pWeyY";
      stringArray0[3] = "create unique index{*z#";
      stringArray0[4] = " WHERE ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" WHERE ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \" WHERE \" ", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "updateNClob(int, Reader, long)";
      stringArray0[1] = "alter matrialized view";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "updateNClob(int, Reader, long)", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"updateNClob(int, Reader, long)\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "BLOB", false, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT BLOB ", stringBuilder0.toString());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("lBYQ`|u!@Ry~At)", stringBuilder0);
      assertEquals("lBYQ`|u!@Ry~At)", stringBuilder0.toString());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("BLOB");
      SQLUtil.addRequiredCondition("BLOB", stringBuilder0);
      assertEquals("BLOB and BLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("calleo,", stringBuilder0);
      assertEquals("calleo,", stringBuilder0.toString());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create unique index{*z#");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "FOREIGN KEY ";
      stringArray0[1] = "alter table|seate univue index{*z#";
      stringArray0[2] = "FOREIGN KEY ";
      stringArray0[3] = "FOREIGN KEY ";
      stringArray0[4] = "FOREIGN KEY ";
      stringArray0[5] = "alter table|seate univue index{*z#";
      stringArray0[6] = "alter table|seate univue index{*z#";
      stringArray0[7] = "alter table|seate univue index{*z#";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "alter table|seate univue index{*z#";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter table|seate univue index{*z#", stringArray0, "alter table|seate univue index{*z#", "FOREIGN KEY ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "h2.analyzeSample";
      String string0 = SQLUtil.join("h2.analyzeSample", "75A\"d", stringArray1, "h2.analyzeSample", ".;:}gi>B", stringArray0);
      assertEquals("h2.analyzeSample join h2.analyzeSample as .;:}gi>B on 75A\"d.h2.analyzeSample = .;:}gi>B.null", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = null;
      String[] stringArray1 = new String[1];
      stringArray1[0] = "%rv8F";
      // Undeclared exception!
      try { 
        SQLUtil.join("%rv8F", "%rv8F", (String[]) null, "%rv8F", "%rv8F", stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "org.postgresql.jdbc3.AbstractJdbc3Clob";
      stringArray1[1] = "org.postgresql.jdbc3.AbstractJdbc3Clob";
      stringArray1[2] = "02L";
      stringArray1[3] = "org.postgresql.jdbc3.AbstractJdbc3Clob";
      stringArray1[4] = null;
      stringArray1[5] = "02L";
      stringArray1[6] = "02L";
      stringArray1[7] = "&-U";
      stringArray1[8] = "&-U";
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, (String) null, (String) null, stringArray1);
      assertEquals("null as null on ", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = new Integer(3);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("BLOB", defaultDBColumn0.getName());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v3T\">**B8pQr{}HVgJ";
      String string0 = SQLUtil.innerJoin(" join ", stringArray0, "v3T\">**B8pQr{}HVgJ", "i}8K:DR-b", stringArray0);
      assertEquals("v3T\">**B8pQr{}HVgJ as i}8K:DR-b on  join .v3T\">**B8pQr{}HVgJ = i}8K:DR-b.v3T\">**B8pQr{}HVgJ and  join .null = i}8K:DR-b.null and  join .null = i}8K:DR-b.null and  join .null = i}8K:DR-b.null and  join .null = i}8K:DR-b.null and  join .null = i}8K:DR-b.null and  join .null = i}8K:DR-b.null", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Z&";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "inner";
      stringArray0[4] = "*/";
      stringArray0[5] = "UNION";
      stringArray0[6] = "W!*E:7%";
      stringArray0[7] = "v3T\">**B8pQr{}HVgJ";
      stringArray0[8] = "";
      String string0 = SQLUtil.join("inner", "m3zfiScyjVTIflc]D", stringArray0, "JI~(y/EkfK$@TT$KC", "inner", stringArray0);
      assertEquals("JI~(y/EkfK$@TT$KC as inner on m3zfiScyjVTIflc]D.Z& = inner.Z& and m3zfiScyjVTIflc]D. = inner. and m3zfiScyjVTIflc]D. = inner. and m3zfiScyjVTIflc]D.inner = inner.inner and m3zfiScyjVTIflc]D.*/ = inner.*/ and m3zfiScyjVTIflc]D.UNION = inner.UNION and m3zfiScyjVTIflc]D.W!*E:7% = inner.W!*E:7% and m3zfiScyjVTIflc]D.v3T\">**B8pQr{}HVgJ = inner.v3T\">**B8pQr{}HVgJ and m3zfiScyjVTIflc]D. = inner.", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("gOTVKE^-}}M", (String[]) null, (String) null, "`&-rY p&dAu?[yTT[g", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v3T\">**B8pQr{}HVgJ";
      stringArray0[1] = "org.apache.derby.impl.sql.execute.IndexRow";
      stringArray0[2] = "ds";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "v3T\">**B8pQr{}HVgJ", true, stringArray0);
      dBUniqueConstraint0.addColumnName("ds");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("v3T\">**B8pQr{}HVgJ", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueIndex0.equals(dBUniqueConstraint1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "v3T\">**B8pQr{}HVgJ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[16];
      DBSchema dBSchema0 = new DBSchema("q[q1cj$P`n");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("q[q1cj$P`n", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("`VvC3Dp ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"`VvC3Dp \" FOREIGN KEY (, , , , , , , , , , , , , , , ) REFERENCES q[q1cj$P`n(, , , , , , , , , , , , , , , )", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "B;tB<RdK1nA>";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B;tB<RdK1nA>");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = new Integer(3);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(3, "/*");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("/*(3,3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(2554, "into");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter sessiongf;z4sm", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter sessiongf;z4sm INTO(3) NULL", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "~jHmh";
      stringArray0[5] = "";
      stringArray0[6] = "";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      mockPrintWriter0.append((CharSequence) "");
      mockPrintWriter0.printf("", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("~jHmh");
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = '';
      charArray0[2] = 'S';
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1985), charArray0, (-4), (int) (byte)81);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1985
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "reatematerialized";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("reatematerialized");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "reatematerialized");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) nameSpec0;
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) printWriter0;
      mockPrintWriter1.printf("reatematerialized", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = SQLUtil.renderValue("P(48T^qd");
      assertEquals("'P(48T^qd'", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("varchar", "43X58.U", "43X58.U");
      assertEquals("varchar", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("l>nml");
      assertNull(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionlength");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("deleteselpct *", (DBCatalog) null);
      dBSchema0.getTable("PRIMARY KEY ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "deleteselpct *";
      stringArray0[1] = "PRIMARY KEY ";
      dBSchema0.setName("deleteselpct *");
      stringArray0[2] = "deleteselpct *";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'ferenceXs");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.7890426925472673
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLUtil.normalize("P({8^![", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("P ({ 8 ^ ! [");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("RWU", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, )", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|ZIF!@^v H`]Ay8}";
      stringArray0[1] = "|ZIF!@^v H`]Ay8}";
      String string0 = SQLUtil.leftJoin("|ZIF!@^v H`]Ay8}", stringArray0, "|ZIF!@^v H`]Ay8}", "d=Ibfl+Sz[0J9`HNp", stringArray0);
      assertEquals("left join |ZIF!@^v H`]Ay8} as d=Ibfl+Sz[0J9`HNp on |ZIF!@^v H`]Ay8}.|ZIF!@^v H`]Ay8} = d=Ibfl+Sz[0J9`HNp.|ZIF!@^v H`]Ay8} and |ZIF!@^v H`]Ay8}.|ZIF!@^v H`]Ay8} = d=Ibfl+Sz[0J9`HNp.|ZIF!@^v H`]Ay8}", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join(";}o;[W7", (String) null, stringArray0, "-Z\"0%bA(\"", "-Z\"0%bA(\"", stringArray0);
      assertEquals(";}o;[W7 join -Z\"0%bA(\" as -Z\"0%bA(\" on null.null = -Z\"0%bA(\".null and null.null = -Z\"0%bA(\".null", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("c>SoVC11", "c>SoVC11", stringArray0, "create tableforeign key", "c>SoVC11", stringArray0);
      assertEquals("c>SoVC11 join create tableforeign key as c>SoVC11 on ", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("M9U(:$n~Q1]i;M%", "drop indexselpct *", stringArray0, "M9U(:$n~Q1]i;M%", "drop indexselpct *", stringArray0);
      assertEquals("M9U(:$n~Q1]i;M% join M9U(:$n~Q1]i;M% as drop indexselpct * on ", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "-~@p7;lpm=G3&cjJ}J";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("-~@p7;lpm=G3&cjJ}J", (String[]) null, "insertforeign key", "\"", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("ceate uniqueinex{*z#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("create unique index{*z#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("r-");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("SEECT  RM ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique index{*z#");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = new Integer((-5));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("BLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
