/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 03:01:21 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.main.FreeMind;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.IllegalComponentStateException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Point2D;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Properties;
import javax.help.HelpSet;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.multi.MultiPanelUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xalan.templates.OutputProperties;
import org.apache.xerces.dom.DocumentImpl;
import org.apache.xml.serializer.ToHTMLStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9831398653357044
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.createToolTip();
      Color color0 = jDayChooser0.getWeekdayForeground();
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(color0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.setDay(2350);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDay();
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      ToHTMLStream toHTMLStream0 = new ToHTMLStream();
      // Undeclared exception!
      try { 
        toHTMLStream0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xml.serializer.SerializerBase", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAlignmentY();
      jDayChooser0.calendar = null;
      // Undeclared exception!
      try { 
        jDayChooser0.updateUI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3744, 3744, 3744, 37, '6');
      DefaultListModel<MockGregorianCalendar> defaultListModel0 = new DefaultListModel<MockGregorianCalendar>();
      JList<MockGregorianCalendar> jList0 = new JList<MockGregorianCalendar>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setBackground(color0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-4347), 't', 288, 32, 't');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = SwingConstants.LEFT;
      jDayChooser0.keyPressed(keyEvent0);
      Properties properties0 = FreeMind.props;
      OutputProperties outputProperties0 = new OutputProperties((Properties) null);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(198);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 198, 198, 198, 1985, 'U');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.transferFocusBackward();
      keyEvent0.setKeyCode(1985);
      int int0 = SwingConstants.LEFT;
      jDayChooser0.keyPressed(keyEvent0);
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6955063642778003
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'r');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = SwingConstants.LEFT;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.getParagraphElement(26);
      JTextPane jTextPane0 = new JTextPane();
      JTextPane jTextPane1 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane1.getInputAttributes();
      defaultStyledDocument0.getForeground(mutableAttributeSet0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5777114378736075
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-843));
      jDayChooser0.setMonth(30);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8009128521913698
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((KeyListener) jDayChooser0, (KeyListener) jDayChooser0);
      jDayChooser0.addKeyListener((KeyListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, (-2390L), (-3106), 40, 'k');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = SwingConstants.LEFT;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMinSelectableDate((Date) null);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.getParagraphElement((-3106));
      JTextPane jTextPane0 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      defaultStyledDocument0.getForeground(mutableAttributeSet0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.695563447768113
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDay(244);
      jDayChooser0.setMonth(244);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 2613, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(24576);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.801715527776654
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser1.setMonth((-805));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = SwingConstants.LEFT;
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setDay(8968);
      jDayChooser0.setMonth(35);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((KeyListener) jDayChooser0, (KeyListener) jDayChooser0);
      jDayChooser0.addKeyListener((KeyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(1);
      DefaultListModel<MockGregorianCalendar> defaultListModel0 = new DefaultListModel<MockGregorianCalendar>();
      JList<MockGregorianCalendar> jList0 = new JList<MockGregorianCalendar>(defaultListModel0);
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setBackground(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 19, (-1L), 2154, 38, 'h');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = SwingConstants.LEFT;
      jDayChooser0.keyPressed(keyEvent0);
      Properties properties0 = FreeMind.props;
      OutputProperties outputProperties0 = new OutputProperties((Properties) null);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-5039), (-5039), 46, (-4401), 'E');
      jDayChooser0.setUI((PanelUI) null);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      MockDate mockDate0 = new MockDate();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.695529662081982
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("\")wY", 735.1F, 735.1F);
      jDayChooser0.initialized = false;
      jDayChooser0.updateUI();
      Color color0 = jDayChooser0.getWeekdayForeground();
      Locale locale0 = Locale.KOREA;
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1863));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.897043484041982
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-96);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-96);
      byteArray0[4] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isFocusable();
      jDayChooser0.setDay((byte) (-96));
      assertEquals(1, jDayChooser0.getDay());
      
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser1.setMaxSelectableDate((Date) null);
      jDayChooser1.getWeekdayForeground();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.695552336533544
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.LIGHT_GRAY;
      Color color1 = Color.getColor(",W_np=?t,2DNv}6@c9T", color0);
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.drawDays();
      jDayChooser0.setForeground(color0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setForeground(color1);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9844614138129346
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setForeground(color0);
      JMenu jMenu0 = new JMenu(",|Roo(Kw&lWn2VF");
      jMenu0.add(",|Roo(Kw&lWn2VF");
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.maxDayCharacters = (-16777216);
      jDayChooser2.setEnabled(false);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.setDay((-16777216));
      jDayChooser3.updateUI();
      assertEquals(1, jDayChooser3.getDay());
      
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser1.setYear((-16777216));
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5777350570381974
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(1539L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate1 = new MockDate(1539L);
      jDayChooser0.setSelectableDateRange(mockDate1, mockDate0);
      jDayChooser0.setMonth(1550);
      MockDate mockDate2 = new MockDate();
      MockDate mockDate3 = new MockDate();
      mockDate3.setTime(5L);
      jDayChooser0.setMinSelectableDate(mockDate1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(1561L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      jDayChooser0.setWeekOfYearVisible(false);
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      Color color0 = jDayChooser0.getBackground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5777114378736075
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.addListeners(41);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9832231481044995
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.doLayout();
      jDayChooser0.setToolTipText(">EV.[.F\t");
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getDaysInMonth();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8009669700166993
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getSundayForeground();
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDaysInMonth();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5776993814010902
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(1561L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      int int0 = SwingConstants.PREVIOUS;
      Boolean boolean0 = new Boolean(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DocumentImpl documentImpl0 = new DocumentImpl();
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(documentImpl0, defaultImageHandler0, defaultExtensionHandler0, true);
      DebugGraphics debugGraphics0 = new DebugGraphics(sVGGraphics2D0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<AttributedCharacterIterator.Attribute, RowSorterEvent.Type> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, RowSorterEvent.Type>();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.ANCHOR_TYPE;
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      hashMap0.put(gVTAttributedCharacterIterator_TextAttribute0, rowSorterEvent_Type0);
      Font font0 = new Font(hashMap0);
      jDayChooser0.setFont(font0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.801687426925823
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.magenta;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.drawDays();
      Color color1 = Color.LIGHT_GRAY;
      jDayChooser0.setForeground(color1);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-96);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Instant instant0 = MockInstant.ofEpochSecond((long) (byte)67);
      Instant instant1 = MockInstant.from(instant0);
      Timestamp.from(instant1);
      HelpSet helpSet0 = new HelpSet();
      String string0 = "1";
      String string1 = "HT";
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.getSundayForeground();
      Hashtable<MockGregorianCalendar, RowSorterEvent.Type> hashtable0 = null;
      try {
        hashtable0 = new Hashtable<MockGregorianCalendar, RowSorterEvent.Type>((-319), (-1633.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -319
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695518092694581
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(244);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.initDecorations();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.LIGHT_GRAY;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1373029436503463
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JMenu jMenu0 = new JMenu();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      JPopupMenu jPopupMenu1 = new JPopupMenu();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) 'z';
      intArray0[2] = 0;
      intArray0[3] = 478;
      intArray0[4] = 478;
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(478, 0, intArray0, 478, 8928);
      jPopupMenu0.createImage((ImageProducer) memoryImageSource0);
      menuElementArray0[1] = (MenuElement) jPopupMenu1;
      JMenuItem jMenuItem0 = jMenu0.add("West");
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 478, 1567L, 478, 478, 'z', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0632192536553093
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JMenu jMenu0 = new JMenu();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      menuElementArray0[0] = (MenuElement) jPopupMenu0;
      JPopupMenu jPopupMenu1 = new JPopupMenu();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) 'z';
      intArray0[2] = 0;
      intArray0[3] = 478;
      intArray0[4] = 478;
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(478, 0, intArray0, 478, 8928);
      jPopupMenu0.createImage((ImageProducer) memoryImageSource0);
      menuElementArray0[1] = (MenuElement) jPopupMenu1;
      JMenuItem jMenuItem0 = jMenu0.add("West");
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 478, 1567L, 478, 478, 'z', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = Color.WHITE;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getDaysInMonth();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      Point2D.Double point2D_Double0 = new Point2D.Double(0, 1.0);
      defaultCaret0.setFrameFromCenter((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      jDayChooser0.removeMouseListener(defaultCaret0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1019, 1, 0, 1019, 0);
      jDayChooser0.today = (Calendar) mockGregorianCalendar0;
      jDayChooser0.getSelectedDay();
      Locale locale0 = null;
      DateFormatSymbols dateFormatSymbols0 = null;
      try {
        dateFormatSymbols0 = new DateFormatSymbols((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(90, color0.getGreen());
      
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setMonth(15);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.800934927977544
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.LIGHT_GRAY;
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(1561L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setWeekOfYearVisible(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getDaysInMonth();
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      Color color0 = jDayChooser0.getBackground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      jDayChooser0.getSelectedDay();
      boolean boolean1 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(boolean1);
      
      jDayChooser0.drawDays();
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0631572427661973
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getPropertyChangeListeners("TX^n");
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-852), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.focusGained(focusEvent0);
      int int0 = 2333;
      long long0 = (-817L);
      int int1 = 502;
      char char0 = 'b';
      MenuElement[] menuElementArray0 = new MenuElement[5];
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      MindMapMode mindMapMode0 = new MindMapMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Instant instant0 = MockInstant.ofEpochSecond(649L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      // Undeclared exception!
      try { 
        jDayChooser0.getLocationOnScreen();
        fail("Expecting exception: IllegalComponentStateException");
      
      } catch(IllegalComponentStateException e) {
         //
         // component must be showing on the screen to determine its location
         //
         verifyException("java.awt.Component", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument1.getParagraphElement(203);
      JTextPane jTextPane0 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      jTextPane0.setContentType("day");
      Color color0 = defaultStyledDocument0.getForeground(mutableAttributeSet0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(1561L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setWeekOfYearVisible(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      int int0 = SwingConstants.PREVIOUS;
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Color color0 = Color.green;
      jDayChooser0.setDecorationBackgroundColor(color0);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createImage(1009, 1009);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.imageUpdate((Image) null, 23, 2025, 1073741823, 0, (-2427));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Color color0 = Color.LIGHT_GRAY;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "] >>\nendobj\n");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setFocus();
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.getLocale();
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      jDayChooser0.setUI(multiPanelUI0);
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.minSelectableDate;
      mockDate0.after(date0);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5777350570381974
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate1 = new MockDate(1539L);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange(mockDate0, (Date) null);
      jDayChooser0.setMonth(47);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 478;
      JMenu jMenu0 = new JMenu();
      jMenu0.getPopupMenu();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      boolean boolean0 = true;
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(478, 567);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }
}
