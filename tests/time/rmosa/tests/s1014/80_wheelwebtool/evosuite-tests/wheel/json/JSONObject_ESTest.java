/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 03:27:31 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean0 = new Boolean("] is not a number.");
      int int0 = jSONObject1.optInt("nj`oWz[tu&xvhE", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5898403588435481
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "spl";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONObject jSONObject3 = jSONObject1.put("-2831.633397252297.", (Object) jSONObject2);
      jSONObject3.toString((-4144), (-4144));
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      jSONObject3.optJSONObject("-2831.633397252297.");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wM?L";
      stringArray0[1] = "wM?L";
      stringArray0[2] = "wM?L";
      stringArray0[3] = "'";
      JSONObject jSONObject0 = new JSONObject("'", stringArray0);
      jSONObject0.put("wM?L", (-241.4221338600657));
      JSONObject.valueToString("wM?L");
      jSONObject0.toString((-3024));
      double double0 = jSONObject0.optDouble("wM?L", 1553.1568187887076);
      assertEquals((-241.4221338600657), double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate(" of ", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = JSONObject.quote("");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String string1 = jSONObject0.optString("\"\"", "");
      assertEquals(1, jSONObject0.length());
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = new Integer(1957);
      jSONObject0.append("uol=", hashMap0);
      jSONObject0.append("uol=", "uol=");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wM?L";
      JSONObject jSONObject1 = jSONObject0.put("wM?L", (Object) "wM?L");
      try { 
        jSONObject0.append("wM?L", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wM?L] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean.logicalOr(true, true);
      Float float0 = new Float(Double.NaN);
      Float.min(1.0F, 0.0F);
      Float.max(0.0F, 2507.532F);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSONObject jSONObject1 = jSONObject0.put("Xd8%.", (Collection) linkedList0);
      String string0 = "-2831.633397252297.";
      jSONObject1.getJSONArray("Xd8%.");
      try { 
        jSONObject0.getDouble("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(linkedList0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "[]");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "[]", 32, (-868));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.putOpt("9+X7l>LwyB]=@^R^BE", "9+X7l>LwyB]=@^R^BE");
      jSONObject0.accumulate("getlogicalAnd", "getlogicalAnd");
      try { 
        jSONObject0.getJSONArray("9+X7l>LwyB]=@^R^BE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9+X7l>LwyB]=@^R^BE\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(84, 84);
      jSONObject0.put("{}", (double) 84);
      jSONObject0.optInt("{}");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" at character ", (Object) null);
      JSONArray jSONArray0 = jSONObject0.optJSONArray(" at character ");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("favpYGgo+9</peH9");
      assertEquals("\"favpYGgo+9<\\/peH9\"", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject.doubleToString(241.5161046889605);
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "241.5161046889605";
      stringArray0[1] = "241.5161046889605";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optJSONObject("241.5161046889605");
      JSONObject jSONObject1 = jSONObject0.putOpt("241.5161046889605", "241.5161046889605");
      Double double0 = new Double(241.5161046889605);
      JSONObject jSONObject2 = jSONObject1.accumulate("241.5161046889605", double0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("uol=", "uol=");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.keys();
      String string0 = jSONObject0.optString("uol=");
      assertNotNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(1957);
      JSONObject jSONObject1 = jSONObject0.append("true", hashMap0);
      Long.getLong("true");
      jSONObject1.accumulate("true", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "geput";
      stringArray0[1] = "geput";
      stringArray0[2] = "geput";
      JSONObject jSONObject0 = new JSONObject("geput", stringArray0);
      jSONObject0.put("geput", 0.0);
      double double0 = jSONObject0.optDouble("geput");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("wM?L");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wM?L";
      JSONObject jSONObject1 = new JSONObject(boolean0, stringArray0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Long long0 = new Long((-662L));
      JSONObject.getNames((Object) long0);
      JSONObject jSONObject1 = new JSONObject();
      Byte byte0 = new Byte((byte)118);
      Byte byte1 = new Byte((byte)118);
      JSONObject jSONObject2 = jSONObject0.put("A JSONObject text must begin with '{'", (Object) byte1);
      jSONObject2.getDouble("A JSONObject text must begin with '{'");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1063161653179527
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.quote("&A( U~:j6Wkw'");
      JSONObject jSONObject0 = new JSONObject((Object) "\"&A( U~:j6Wkw'\"");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('H');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "istoString");
      jSONObject0.write(stringWriter2);
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject1 = jSONObject0.accumulate("istoString", float0);
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      jSONObject1.put("769aj%X W'M=", (Map) hashMap0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optJSONObject("06)<Z{}0");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6461831023116953
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "joi";
      stringArray0[2] = "] is not a Boolean.";
      stringArray0[3] = "Expected a ',' or ']'";
      JSONObject.valueToString("joi");
      JSONObject jSONObject0 = new JSONObject((Object) "isintern");
      // Undeclared exception!
      jSONObject0.toString(1011);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(173, 91);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.append("\t", object0);
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject3 = jSONObject2.put("p?R< ][=>U3IsC", (Map) hashMap0);
      jSONObject3.toString();
      boolean boolean0 = jSONObject3.has("p?R< ][=>U3IsC");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("re");
      int int0 = jSONObject0.optInt("re");
      assertEquals(0, int0);
      
      JSONObject.valueToString("re", 26, 27);
      jSONObject0.optJSONArray("re");
      String string0 = JSONObject.doubleToString((-30710023));
      assertEquals("-3.0710023E7", string0);
      
      boolean boolean0 = jSONObject0.isNull("\"java.lang.String@0000000003\"");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      String string0 = JSONObject.valueToString(hashMap0, 3987, 9);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, (-471), (-471));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" at character ", (Object) null);
      JSONArray jSONArray0 = jSONObject0.getJSONArray(" at character ");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(";L&aW YMU\") WhMn5|", true);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Short short0 = new Short((short)1734);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Float.max((-1603), (-1603));
      JSONObject.quote("Expected a ',' or ']'");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, jSONObject0);
      jSONObject0.accumulate("[", "\"Expected a ',' or ']'\"");
      hashMap0.put(jSONObject0, "[");
      String string0 = JSONObject.doubleToString(0.0);
      String string1 = jSONObject0.getString("[");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("si", 16.259887243592598);
      jSONObject0.getLong("si");
      JSONObject.quote("si");
      String string0 = null;
      Long long0 = new Long(16L);
      try { 
        jSONObject0.accumulate((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.put("wM?L", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 1.270900579133745);
      assertEquals(1.270900579133745, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("si", 0.0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\n";
      stringArray0[1] = "si";
      stringArray0[2] = "si";
      stringArray0[3] = "si";
      stringArray0[4] = "si";
      stringArray0[5] = "si";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
      
      Object object0 = jSONObject0.opt("si");
      assertEquals(0.0, object0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8772034520289815
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-2172), (-2172));
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put(double0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.append("uol=", "uol=");
      Byte byte0 = new Byte((byte)79);
      JSONObject.testValidity(byte0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject2.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      jSONObject0.put("geput", (-1L));
      stringArray0[0] = "geput";
      stringArray0[1] = "geput";
      stringArray0[2] = "geput";
      stringArray0[3] = "geput";
      int int0 = jSONObject0.getInt("geput");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wM?L";
      JSONObject jSONObject1 = jSONObject0.put("wM?L", (Object) "wM?L");
      try { 
        jSONObject1.getInt("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "}S\\=T#bSxjc0G fP}]1";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}S=T#bSxjc0G fP}]1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }S=T#bSxjc0G fP}]1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Jb_", (Object) hashMap0);
      try { 
        jSONObject0.getBoolean("Jb_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jb_\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.optString(")y3I8L[_a", (String) null);
      assertEquals(2, jSONObject0.length());
      assertNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      Boolean.logicalAnd(true, false);
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wM?L";
      JSONObject jSONObject1 = jSONObject0.put("wM?L", (Object) boolean0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      String string1 = "K/kp(RcA=";
      Object object0 = JSONObject.NULL;
      jSONObject1.remove("wM?L");
      try { 
        jSONObject1.getJSONObject("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, (Integer) null);
      JSONObject.getNames((Object) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("wE", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Jb_", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Jb_", (Object) "Jb_");
      try { 
        jSONObject0.getBoolean("Jb_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jb_\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.49914529914529915
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Long long0 = new Long(2002L);
      String string0 = "tF^@YwDUQS";
      String string1 = "] is not a Boolean.";
      String string2 = "";
      String string3 = "";
      StringWriter stringWriter0 = new StringWriter(42);
      Float float0 = new Float(1.0F);
      JSONObject.testValidity(float0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 768;
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      jSONArray0.put(768, (Map) hashMap0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 26, 42);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("^738lOl[*D)Zz2I'>~", "^738lOl[*D)Zz2I'>~");
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("uol=", (-1773));
      assertEquals((-1773), int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = JSONObject.quote("eXR;/D<_2");
      assertEquals("\"eXR;/D<_2\"", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      Byte byte0 = new Byte((byte) (-60));
      hashMap0.put(byte0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-3555), 175);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(175, 175);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      jSONObject0.toString(2766, 2766);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("?x", 0.0);
      long long0 = jSONObject0.getLong("?x");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      Boolean.logicalXor(true, false);
      JSONObject.getNames((Object) boolean0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wM?L";
      JSONObject jSONObject1 = jSONObject0.put("wM?L", (Object) boolean0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      try { 
        jSONObject1.getLong("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("J3TY<_UwWj", jSONObject0);
      boolean boolean0 = jSONObject0.isNull("J3TY<_UwWj");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("20.0", (-1618.3));
      assertEquals((-1618.3), double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = new Long(2002L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tF^@YwDUQS";
      stringArray0[1] = "wheel.json.JSONObject$Null";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "] is not a Boolean.";
      stringArray0[4] = "";
      stringArray0[5] = "!]x;B4B";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "";
      stringArray0[8] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(42);
      Float float0 = new Float(1.0F);
      JSONObject.testValidity(float0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, 26, 42);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("J3TY<_UwWj", object0);
      boolean boolean0 = new Boolean("J3TY<_UwWj");
      String string0 = jSONObject1.optString("J3TY<_UwWj", "J3TY<_UwWj");
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      Double double0 = Double.valueOf(0.0);
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put(double0, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.testValidity(hashMap0);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      String string0 = JSONObject.valueToString(jSONArray0, 47, 47);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("getcompare", (Collection) linkedList0);
      String string0 = "-2831.633397252297.";
      String string1 = "spl";
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 577;
      try { 
        jSONArray0.getJSONObject(577);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[577] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "'";
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float(1.0);
      Float.max((-1605), (-145.7F));
      JSONObject.valueToString(linkedList0, (-1605), (-3786));
      long long0 = 2555L;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>(39, 39);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("G'cH*^<VL/");
      assertEquals("", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      Byte byte0 = new Byte((byte) (-109));
      hashMap0.put(byte0, "<%Vi@,Es.vt7hX");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject.quote(" |$2Kr>VY0");
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Short short0 = new Short((short)328);
      hashMap0.put((Float) null, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = " )$I\"!$8}N";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{O~RXp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {O~RXp
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Short short0 = new Short((short)17);
      JSONObject.numberToString(short0);
      String string0 = "{}";
      Short.compare((short)0, (short)46);
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.get("java.lang.Short@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject.quote("");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("hjj_T]B");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject.quote(",\n");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      assertEquals("", stringWriter1.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float((-3644.180262616639));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("vBM8Fnl^`['TF^", 1061L);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 2944L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.8212146057008812
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject.doubleToString(227.90845936431);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.put((String) null, 329.5462184154155);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\b", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(1172);
      jSONArray0.put((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("J3TY<_UwWj");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-1292);
      JSONObject.valueToString(jSONObject0, (-1292), 883);
      JSONArray jSONArray0 = new JSONArray();
      int int1 = (-834);
      try { 
        jSONArray0.getJSONObject((-834));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-834] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("uol=", (Object) "uol=");
      jSONObject0.toString(12, (-3222));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-32646308));
      JSONObject.getNames(jSONObject1);
      JSONArray jSONArray1 = jSONObject0.names();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*WSm9";
      JSONObject jSONObject0 = new JSONObject("*WSm9", stringArray0);
      Object object0 = jSONObject0.opt("*WSm9");
      assertNull(object0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("] is not a JSONArray.", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      jSONObject0.optBoolean((String) null);
      Float float0 = new Float(1.0);
      hashMap0.put(float0, "H\";");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("wheel.json.JSONException", (Collection) linkedList0);
      JSONObject.testValidity(linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("wheel.json.JSONException");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = new Long(2002L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tF^@YwDUQS";
      stringArray0[1] = "wheel.json.JSONObject$Null";
      stringArray0[2] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[3] = "] is not a Boolean.";
      stringArray0[4] = "";
      stringArray0[5] = "!]x;B4B";
      stringArray0[6] = "K/kp(RcA=";
      stringArray0[7] = "";
      stringArray0[8] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(42);
      stringWriter0.append('@');
      Double double0 = new Double(2002L);
      JSONObject.valueToString(double0, 26, 42);
      long long1 = jSONObject0.optLong("K/kp(RcA=", 0L);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(" at character ", " at character ");
      try { 
        jSONObject0.getDouble(" at character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" at character \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wM?L", (Object) "wM?L");
      try { 
        jSONObject1.getJSONObject("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(" at character ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" at character \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "X7w&O?Adfj^Vi3A*n";
      Object object0 = new Object();
      jSONObject0.putOpt("X7w&O?Adfj^Vi3A*n", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "X7w&O?Adfj^Vi3A*n", (-980), (-980));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalOr(false, false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.9106969340870663
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long long0 = new Long((-171L));
      JSONObject.quote("*WSm9");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(88);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("]ziN.>r");
      assertEquals("\"]ziN.>r\"", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(62);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float.isFinite(0.0F);
      Float.min((-3188.2F), (-3188.2F));
      Float.min((-3188.2F), (-2166.0F));
      Float.isFinite(878.11584F);
      Float.sum((-3188.2F), (-192.0F));
      try { 
        JSONObject.valueToString(float0, 2273, 2273);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Jb_";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.put("Jb_", (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("uol=", 968);
      assertEquals(968, int0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.080215658890216
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Float float0 = new Float((double) (-4515));
      Float.max(1.0F, (-1604));
      String string0 = JSONObject.quote("Expected a ',' or ']'");
      assertEquals("\"Expected a ',' or ']'\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("+'(H[ha\"", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove((String) null);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{lxNeH", (-1265));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.quote("\r");
      assertEquals("\"\\r\"", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("false", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("a_eATE#!g)Q\n");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("]+^O}]s<K(t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]+^O}]s<K(t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Long long0 = new Long(1L);
      hashMap0.put((Integer) null, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("I");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of I
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 000
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Short, JSONObject> hashMap0 = new HashMap<Short, JSONObject>();
      Double double0 = new Double((-1009.50057436376));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("0", (long) 15);
      JSONObject.quote("-1.0");
      JSONTokener jSONTokener0 = new JSONTokener("=B(@6;s)Jkyzm_.nHYo");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of =B(@6;s)Jkyzm_.nHYo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer integer0 = new Integer((-2348));
      Integer.remainderUnsigned((-2348), (-2348));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = new Long((-1L));
      String string0 = JSONObject.valueToString(long0, (-1905), (-1905));
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Float float0 = new Float((double) (-4515));
      boolean boolean0 = false;
      Boolean boolean1 = new Boolean(false);
      JSONObject.valueToString(boolean1, (-1604), (-4515));
      String string0 = "A JSONArray text must start with '['";
      Boolean boolean2 = new Boolean("A JSONArray text must start with '['");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(boolean2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double((-0.1728918816481137));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("r\"unXRbg7D6q$/", (-3474L));
      assertEquals((-3474L), long0);
      
      double double0 = jSONObject0.optDouble("false", 381.0);
      assertEquals(381.0, double0, 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("&A(6TU~:j6WPw'");
      assertEquals("\"&A(6TU~:j6WPw'\"", string0);
      
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("\"&A(6TU~:j6WPw'\"");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("1v@B8:Y2:H4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1v@B8:Y2:H4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject0.append((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.append("Jb_", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("PpI\"~S%");
      assertEquals("\"PpI\\\"~S%\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("KD$sb", "KD$sb");
      assertEquals("KD$sb", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("[/JbGa{87y8/Qn0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[/JbGa{87y8/Qn0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("gettrim");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettrim\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
