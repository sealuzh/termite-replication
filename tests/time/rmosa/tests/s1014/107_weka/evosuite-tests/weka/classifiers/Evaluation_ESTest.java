/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 03:24:03 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.Random;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.NumericPrediction;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.HierarchicalClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.NGramTokenizer;
import weka.estimators.NormalEstimator;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4948453608247423
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.fMeasure(17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@relation";
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel("8034", instances0, 6, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: 8034
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC((-1560));
      double double0 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMacroFmeasure();
      double double0 = evaluation0.KBMeanInformation();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation2 = new Evaluation(instances1);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation1.setNumericPriorsFromBuffer();
      LWL lWL0 = new LWL();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      Float float0 = new Float(Double.NaN);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumInstances(468);
      REPTree rEPTree0 = new REPTree();
      Evaluation evaluation4 = new Evaluation(instances1);
      double double1 = evaluation4.m_MinTarget;
      double double2 = evaluation3.weightedRecall();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation2.numFalseNegatives(459);
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.toString();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.numTrueNegatives((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.toString();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval((-435));
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) instances0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) evaluation0;
      objectArray0[5] = (Object) instances0;
      objectArray0[6] = (Object) null;
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 112, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockRandom cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval((-435));
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[26];
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) instances0;
      objectArray0[3] = (Object) mockRandom0;
      objectArray0[4] = (Object) evaluation0;
      objectArray0[5] = (Object) instances0;
      objectArray0[6] = (Object) null;
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 112, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("/H59U[CnR5:");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = evaluation0.m_NumTrainClassVals;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.getDiscardPredictions();
      double[] doubleArray0 = new double[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = Double.NaN;
      CoverTree coverTree0 = new CoverTree();
      KStar kStar0 = new KStar();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) kStar0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstances(16);
      double double0 = evaluation0.m_SumSchemeEntropy;
      testInstances0.setNumRelationalString(20);
      double double1 = evaluation0.m_MinTarget;
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      double double3 = evaluation0.trueNegativeRate((-2));
      double double4 = evaluation0.rootMeanPriorSquaredError();
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.m_ConfLevel;
      testInstances0.setNumInstances(2);
      double double2 = evaluation0.m_TotalCost;
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      LMT lMT0 = new LMT();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance((Instances) null);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation2 = new Evaluation(instances1);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation1.setNumericPriorsFromBuffer();
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      evaluation0.updateNumericScores((double[]) null, doubleArray0, 0);
      evaluation0.recall(2004);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation4.equals(evaluation0);
      PipedReader pipedReader0 = new PipedReader(4);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("/H59U[CnR5:");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = evaluation0.m_NumTrainClassVals;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.getDiscardPredictions();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = Double.NaN;
      CoverTree coverTree0 = new CoverTree();
      SparseInstance sparseInstance0 = new SparseInstance(242.733734, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (-2.0);
      doubleArray0[5] = (-16.855180327042767);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, denseInstance0, 10.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.572592226611343
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = 4307.0;
      System.setCurrentTimeMillis(6371L);
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      int[] intArray0 = new int[7];
      intArray0[1] = 116;
      intArray0[2] = (-5200);
      intArray0[6] = 116;
      evaluation1.truePositiveRate(116);
      evaluation0.toSummaryString(".bsi", true);
      assertEquals(0.0, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.falsePositiveRate(14);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader1.reset();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.reset();
      textDirectoryLoader2.listOptions();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom((-188L));
      instances1.resample(mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.m_MaxTarget;
      double double2 = evaluation0.m_SumSqrPredicted;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation0.m_SumKBInfo;
      evaluation1.addNumericTrainClass(1.809251438808119, (-1000.791934280104));
      assertEquals(Double.NaN, evaluation1.weightedTruePositiveRate(), 0.01);
      
      evaluation0.priorEntropy();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) null, instances1, objectArray0);
      double double4 = evaluation0.meanAbsoluteError();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(112);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderROC(112);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 300.0;
      doubleArray0[2] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance(300.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      stringArray0[1] = "@data";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".arff";
      Evaluation.main(stringArray0);
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedTrueNegativeRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("lN|$rb]<Q");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-637));
      System.setCurrentTimeMillis(0L);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumAbsErr;
      double double2 = evaluation0.m_SumPriorAbsErr;
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      Float float0 = new Float((double) (-2));
      testInstances0.setNumInstances(2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4214.964999;
      doubleArray0[1] = 1167.96744023404;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      evaluation0.m_ClassPriors = doubleArray0;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass(0.0, 4.9E-324);
      evaluation0.priorEntropy();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) float0;
      objectArray0[3] = (Object) costMatrix0;
      try { 
        evaluation0.evaluateModel((Classifier) costSensitiveClassifier0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MissingClass;
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[4] = ".bsi";
      stringArray0[3] = "@data";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@relation";
      stringArray0[6] = ".bsi";
      Evaluation.main(stringArray0);
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DenseInstance denseInstance0 = new DenseInstance(2030);
      try { 
        evaluation0.evaluateModelOnce((-3421.797050499), (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3421
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = 4307.0;
      System.setCurrentTimeMillis(6371L);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2146908646;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.setNumericPriorsFromBuffer();
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 6371L;
      doubleArray0[1] = (double) 116;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 6371L;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = 4307.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      evaluation0.recall(1);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      evaluation0.SFMeanSchemeEntropy();
      assertEquals(0.0, evaluation0.SFMeanSchemeEntropy(), 0.01);
      
      evaluation1.falsePositiveRate(80);
      evaluation2.weightedFalseNegativeRate();
      evaluation2.getClassPriors();
      assertEquals(Double.NaN, evaluation2.SFMeanSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval(6);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      instances0.clear();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.rootMeanPriorSquaredError();
      evaluation0.SFEntropyGain();
      evaluation0.areaUnderPRC(3487);
      evaluation1.m_NumClasses = 497;
      evaluation1.pctUnclassified();
      double double3 = evaluation1.SFMeanEntropyGain();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5956883120599223
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".arff");
      REPTree rEPTree0 = new REPTree();
      double double0 = evaluation0.m_MinTarget;
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      costSensitiveClassifier0.getCostMatrixSource();
      double double1 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.precision(1);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[2] = 1;
      intArray0[3] = 9997;
      Instance instance0 = BallNode.calcCentroidPivot(9997, (-1), intArray0, instances0);
      try { 
        evaluation0.updatePriors(instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      SelectedTag selectedTag0 = multiClassClassifier0.getMethod();
      costSensitiveClassifier0.setCostMatrixSource(selectedTag0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      evaluation0.matthewsCorrelationCoefficient((-1));
      BallTree ballTree0 = new BallTree(instances0);
      evaluation0.truePositiveRate(0);
      // Undeclared exception!
      try { 
        evaluation0.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.meanPriorAbsoluteError();
      Float float0 = new Float(1864.4034843884367);
      double double1 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.weightedFalseNegativeRate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      instances1.indexOf((Object) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (byte)101;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (byte)101;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1.0;
      SparseInstance sparseInstance0 = new SparseInstance(170.6799556775037, doubleArray0);
      sparseInstance0.deleteAttributeAt((-2));
      instances1.add((Instance) sparseInstance0);
      double double2 = evaluation0.m_SumKBInfo;
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation.handleCostOption("", (-414));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\tThe class label to determine the threshold data for\n\t(default is the first label)\n";
      stringArray0[1] = "@data";
      stringArray0[2] = "\n\nCost Matrix\n";
      stringArray0[3] = "@relation";
      stringArray0[4] = "";
      Evaluation.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(1911);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.precision(1);
      double double3 = evaluation0.falsePositiveRate(16);
      assertEquals(double3, double2, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      costSensitiveClassifier0.getCostMatrixSource();
      evaluation0.precision(1);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 9997;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-2), 7.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = 4307.0;
      System.setCurrentTimeMillis(6371L);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.KBMeanInformation();
      evaluation0.setPriors(instances0);
      evaluation0.errorRate();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.errorRate(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.SFMeanEntropyGain();
      double double2 = evaluation0.m_TotalSizeOfRegions;
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double3, double1, 0.01);
      
      double[] doubleArray0 = new double[2];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      double double4 = evaluation0.m_SumKBInfo;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) textDirectoryLoader0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) sparseInstance0;
      objectArray0[4] = (Object) instances0;
      objectArray0[5] = (Object) "8034";
      objectArray0[6] = (Object) textDirectoryLoader0;
      evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      evaluation0.toClassDetailsString(".arff");
      evaluation0.useNoPriors();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFMeanEntropyGain();
      evaluation0.trueNegativeRate((-1947));
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-178.6844794392358);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      instances0.add((Instance) sparseInstance0);
      doubleArray1[4] = (double) (-1947);
      doubleArray1[5] = 0.0;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setRetrieval((-2));
      Instances instances1 = textDirectoryLoader0.getDataSet();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances1, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      costSensitiveClassifier0.getCostMatrixSource();
      double double1 = evaluation0.m_TotalSizeOfRegions;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Evaluation.makeOptionString(naiveBayesMultinomialText0, true);
      double double2 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      double double0 = evaluation0.m_MinTarget;
      double double1 = evaluation0.m_SumSqrErr;
      evaluation0.toCumulativeMarginDistributionString();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[2];
      DenseInstance denseInstance0 = new DenseInstance(479);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      instances0.add((Instance) denseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_MaxTarget;
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "setUsePairwiseCoupling");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "o";
      int int0 = (-414);
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "$gKl6mfp\"}rOC");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5743631318055766
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorAbsErr = 2358.0;
      evaluation0.SFSchemeEntropy();
      String[] stringArray0 = new String[0];
      textDirectoryLoader0.setRetrieval((-44));
      TextDirectoryLoader.main(stringArray0);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFMeanEntropyGain();
      evaluation0.trueNegativeRate((-1947));
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.getDiscardPredictions();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      String[] stringArray0 = new String[0];
      TextDirectoryLoader.main(stringArray0);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFMeanEntropyGain();
      evaluation0.trueNegativeRate((-1947));
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(3470.722, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      Float float0 = new Float((double) (-1));
      testInstances0.setNumInstances(45);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumKBInfo;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3268L);
      doubleArray0[1] = (double) (-3268L);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 300.03839596180654;
      doubleArray0[4] = 0.0;
      evaluation0.weightedFMeasure();
      SparseInstance sparseInstance0 = new SparseInstance(11);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      HierarchicalClusterer hierarchicalClusterer1 = new HierarchicalClusterer();
      hierarchicalClusterer1.getCapabilities();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-1000.7919343);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.setRetrieval(2500);
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(2500);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      Evaluation.main(stringArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-5209.6180394587);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1218.999);
      doubleArray0[1] = (-1218.999);
      instances0.clear();
      doubleArray0[2] = (-1218.999);
      doubleArray0[3] = (-1218.999);
      doubleArray0[4] = (-1218.999);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1218.999), doubleArray0);
      textDirectoryLoader0.getDataSet();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.m_WithClass;
      evaluation0.falsePositiveRate(16);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.toSummaryString("@relation", true);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) naiveBayesMultinomialUpdateable0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1751396805614145
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((-2014516162));
      evaluation0.unweightedMicroFmeasure();
      evaluation0.SFPriorEntropy();
      evaluation0.falsePositiveRate((-2014516162));
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'n';
      charArray0[2] = '^';
      charArray0[3] = '6';
      charArray0[4] = 'V';
      charArray0[5] = 'e';
      charArray0[6] = '`';
      charArray0[7] = 'p';
      charArray0[8] = 'N';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2014516162), charArray0, 106);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      testInstances0.listOptions();
      evaluation0.SFPriorEntropy();
      evaluation0.numFalseNegatives((-1));
      C45Loader c45Loader0 = new C45Loader();
      evaluation0.weightedFMeasure();
      evaluation0.KBRelativeInformation();
      char[] charArray0 = new char[3];
      charArray0[0] = 'b';
      charArray0[1] = 'E';
      charArray0[2] = '4';
      evaluation0.num2ShortID(39, charArray0, 3);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("measureNumRules");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      Float float0 = new Float((double) (-1));
      testInstances0.setNumInstances(45);
      REPTree rEPTree0 = new REPTree();
      double double0 = evaluation0.m_MinTarget;
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) null, instances1, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomialText0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@WZU` 9H_jaCs");
      Instances instances0 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double1, 0.01);
      
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure((-2607));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      mockRandom0.nextInt();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.matthewsCorrelationCoefficient(497);
      evaluation0.weightedTruePositiveRate();
      double double2 = evaluation0.unweightedMacroFmeasure();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5888083670994821
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFMeasure();
      evaluation1.toClassDetailsString("-r\n");
      evaluation0.KBRelativeInformation();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      evaluation0.m_ClassNames = testInstances0.DEFAULT_WORDS;
      Capabilities capabilities0 = hierarchicalClusterer0.getCapabilities();
      RandomTree randomTree0 = new RandomTree();
      evaluation1.equals(capabilities0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      evaluation1.recall(4);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      try { 
        evaluation0.updateStatsForPredictor((-2.0), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.areaUnderROC(2003);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2014516162));
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Instances instances0 = textDirectoryLoader0.getStructure();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      HierarchicalClusterer hierarchicalClusterer1 = new HierarchicalClusterer();
      hierarchicalClusterer1.getCapabilities();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-999.9421725947842);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, (-999.9421725947842));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.correct();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Instances instances0 = textDirectoryLoader0.getStructure();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      HierarchicalClusterer hierarchicalClusterer1 = new HierarchicalClusterer();
      hierarchicalClusterer1.getCapabilities();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-999.9421725947842);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(0, 1696.4);
      evaluation0.priorEntropy();
      MultiScheme multiScheme0 = new MultiScheme();
      // Undeclared exception!
      try { 
        multiScheme0.getClassifier(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.meta.MultiScheme", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-52.0), (-52.0));
      assertEquals(0.0, evaluation0.incorrect(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      evaluation0.weightedFalsePositiveRate();
      evaluation0.totalCost();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSONLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      HierarchicalClusterer hierarchicalClusterer0 = new HierarchicalClusterer();
      Capabilities capabilities0 = hierarchicalClusterer0.getCapabilities();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextInt();
      Float float0 = new Float(240.94844368291606);
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumInstances(45);
      // Undeclared exception!
      try { 
        evaluation0.precision(1394);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1394
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      evaluation0.unweightedMacroFmeasure();
      Enumeration enumeration0 = new NGramTokenizer();
      double double1 = evaluation0.m_TotalSizeOfRegions;
      try { 
        evaluation0.updateStatsForPredictor(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      double double1 = evaluation0.falseNegativeRate(26);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numTrueNegatives((-291));
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      
      double double3 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double3, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("z&xy}Exh#*");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-1));
      System.setCurrentTimeMillis((-3268L));
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate(" ");
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumKBInfo;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3268L);
      doubleArray0[1] = (double) (-3268L);
      doubleArray0[2] = 0.0;
      evaluation0.addNumericTrainClass((-3268L), 0.0);
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2014516162));
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 458.0;
      doubleArray0[1] = 1.0E-5;
      Version.REVISION = 116;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 116;
      doubleArray0[5] = Double.NaN;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 3);
      double double1 = evaluation0.recall(11);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      NumericPrediction numericPrediction0 = new NumericPrediction(458.0, 5);
      boolean boolean0 = evaluation1.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      
      double double2 = evaluation0.m_MinTarget;
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      double double1 = evaluation0.m_TotalSizeOfRegions;
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.precision(1);
      assertEquals(double3, double0, 0.01);
      
      evaluation0.falsePositiveRate(1);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-5209.61803946);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-5209.61803946), doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.VERSION = ".arff";
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-5209.61803946));
      double double0 = evaluation0.recall(1881);
      double double1 = evaluation0.numInstances();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.listOptions();
      double double0 = evaluation0.m_SumErr;
      Instance instance0 = BallNode.calcCentroidPivot(3876, 3784, (int[]) null, instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate("PgAkfs+`Prg_%L!h");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(1715);
      System.setCurrentTimeMillis((-3397L));
      evaluation0.KBMeanInformation();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(1715);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1715
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      // Undeclared exception!
      try { 
        evaluation0.recall(1881);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1881
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.precision(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      evaluation0.numFalseNegatives(478);
      BayesNet bayesNet0 = new BayesNet();
      C45Loader c45Loader0 = new C45Loader();
      try { 
        ConverterUtils.DataSource.read((Loader) c45Loader0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // File not found : /home/ubuntu/termite/projects/107_weka.names
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      try { 
        Evaluation.evaluateModel("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double1, 0.01);
      
      testInstances0.setNumInstances(2);
      double double2 = evaluation0.m_TotalCost;
      NumericPrediction numericPrediction0 = new NumericPrediction(0.95, (-1965.899294391231));
      ZeroR zeroR0 = new ZeroR();
      boolean boolean0 = evaluation0.equals(zeroR0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertFalse(boolean0);
      
      double double3 = evaluation0.m_SumSqrClass;
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(69);
      REPTree rEPTree0 = new REPTree();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      sparseInstance0.toStringNoWeight();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 69;
      doubleArray1[3] = (double) 6;
      doubleArray1[4] = (double) 69;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = (double) 69;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 69.0);
      double double0 = evaluation0.recall((-1682));
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      NumericPrediction numericPrediction0 = new NumericPrediction(688.2538839486, 1.0E-8);
      double double1 = evaluation0.m_MinTarget;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation.handleCostOption((String) null, (-2));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      C45Loader c45Loader0 = new C45Loader();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) randomSubSpace0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.areaUnderPRC(69);
      REPTree rEPTree0 = new REPTree();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      sparseInstance0.toStringNoWeight();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) rEPTree0, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2014516162));
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) simpleLinearRegression0);
      instances0.removeIf(predicate0);
      double double0 = evaluation0.numFalsePositives((-2014516162));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.avgCost();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      int int0 = 16;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = Double.NaN;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-27);
      doubleArray0[2] = (double) 16;
      doubleArray0[3] = (double) 16;
      doubleArray0[2] = (double) 16;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 16.0);
      evaluation0.toMatrixString(".bsi");
      System.setCurrentTimeMillis((-834));
      Instances instances1 = null;
      try {
        instances1 = new Instances(instances0, (-1326), (-1326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("z&xy}Exh#*");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 0.693147181);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Capabilities.forInstances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) textDirectoryLoader0;
      objectArray0[1] = (Object) textDirectoryLoader0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.converters.TextDirectoryLoader cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      double double0 = evaluation0.m_WithClass;
      double double1 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double1, 0.01);
      
      double double2 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double2, 0.01);
      
      String string0 = evaluation0.toSummaryString(".arff", false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumInstances(2);
      double double0 = evaluation0.m_SumSchemeEntropy;
      double double1 = evaluation0.m_MinTarget;
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      evaluation0.trueNegativeRate(1);
      double double3 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances0.sort(comparator0);
      double double2 = evaluation0.trueNegativeRate(486);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.toSummaryString();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString("@data", true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      AllFilter allFilter0 = new AllFilter();
      Capabilities capabilities0 = allFilter0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      REPTree rEPTree0 = new REPTree();
      double[] doubleArray0 = new double[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.enumerateAttributes();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      REPTree rEPTree0 = new REPTree();
      double[] doubleArray0 = new double[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      String string0 = evaluation0.toClassDetailsString("getLNorm");
      assertEquals("getLNorm\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-414);
      doubleArray0[1] = (double) (-414);
      SparseInstance sparseInstance0 = new SparseInstance((-414), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      double double1 = evaluation0.m_MinTarget;
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-808));
      evaluation0.toMatrixString("xV.UC2|3%he");
      int int0 = 36;
      MockRandom mockRandom0 = new MockRandom(2L);
      // Undeclared exception!
      try { 
        instances0.testCV(1910, 1910);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("@WZU` 9H_jaCs");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1016.0);
      doubleArray0[1] = (-5209.6180394587);
      doubleArray0[2] = (-1016.0);
      doubleArray0[3] = (-1016.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1016.0), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}y40");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "#:9T");
      try { 
        Evaluation.handleCostOption("}y40", (-50));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#:9T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "D@XQoM";
      stringArray0[1] = "Repeat xval if stdev of mean exceeds this value.";
      stringArray0[2] = "globalInfo";
      stringArray0[3] = "  Inverse:\n";
      stringArray0[4] = "D@XQoM";
      stringArray0[5] = "5DEhP]W";
      try { 
        Evaluation.evaluateModel((Classifier) zeroR0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      RandomTree randomTree0 = new RandomTree();
      String string0 = Evaluation.makeOptionString(randomTree0, false);
      Instances instances0 = null;
      try { 
        CostMatrix.parseMatlab(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Classifier classifier0 = AbstractClassifier.makeCopy(gaussianProcesses0);
      Evaluation.getGlobalInfo(classifier0);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      boolean boolean0 = false;
      Classifier classifier0 = null;
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "setNumExecutionSlots";
      try { 
        Evaluation.evaluateModel((Classifier) naiveBayesUpdateable0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.NaiveBayesUpdateable:
         // 
         // -K
         // \tUse kernel density estimator rather than normal
         // \tdistribution for numeric attributes
         // -D
         // \tUse supervised discretization to process numeric attributes
         // 
         // -O
         // \tDisplay model in old format (good when there are many classes)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      String string0 = Evaluation.makeOptionString(naiveBayesUpdateable0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SGD sGD0 = new SGD();
      String[] stringArray0 = new String[5];
      try { 
        Evaluation.evaluateModel((Classifier) sGD0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NormalEstimator normalEstimator0 = new NormalEstimator((-1));
      Capabilities capabilities0 = normalEstimator0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
