/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 02:53:12 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Socket;
import java.net.SocketOption;
import java.net.UnknownHostException;
import java.nio.channels.SocketChannel;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.util.xmlreader.QuickServerConfig;
import org.quickserver.util.xmlreader.Secure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.setTrusted(false);
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler0.closingConnection(blockingClientHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getMaxAuthTry();
      QuickServer quickServer0 = new QuickServer("");
      Secure secure0 = new Secure();
      secure0.setLoad(false);
      secure0.setLoad(false);
      quickServer0.setSecure(secure0);
      quickServer0.setServiceState(0);
      theClient0.setServer(quickServer0);
      theClient0.getTimeout();
      theClient0.setMaxAuthTry(1128);
      theClient0.getTimeout();
      theClient0.getServer();
      theClient0.getTimeout();
      theClient0.toString();
      assertEquals(1128, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("G`)g];C~'.fNN");
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.setCommunicationLogging(true);
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientEventHandler();
      theClient0.setCommunicationLogging(false);
      theClient0.setTrusted(false);
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      // Undeclared exception!
      try { 
        blockingClientHandler0.registerForRead();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't register in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setTimeoutMsg("");
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setTimeout(101);
      theClient0.getClientObjectHandler();
      theClient0.getTimeoutMsg();
      assertEquals(101, theClient0.getTimeout());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setCommunicationLogging(true);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setMaxConnectionMsg("Loading QuickServer v");
      theClient0.setSocket((Socket) null);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getSocket();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getSocketChannel();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      theClient0.setMaxAuthTry((-1));
      theClient0.getMaxAuthTry();
      theClient0.getClientObjectHandler();
      assertEquals((-1), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      data0.setUsername("qqP^54xg&B~=Z8%;V]");
      theClient0.setClientData(data0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.quickserver.net.server.TheClient", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.setTimeoutMsg("qqP^54xg&B~=Z8%;V]");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.getTimeoutMsg();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      theClient0.getSocket();
      theClient0.getSocketChannel();
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.toString();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient1.getServer();
      assertTrue(theClient1.getCommunicationLogging());
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.setTimeoutMsg("</client-authentication-handler>\n");
      theClient0.getTimeout();
      theClient0.getTrusted();
      theClient0.getClientEventHandler();
      theClient0.getClientEventHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getAuthenticator();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setTimeoutMsg("F'S1e5*zkD");
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      QuickServer quickServer0 = new QuickServer("tYKO,*vXt", 0);
      theClient0.setServer(quickServer0);
      theClient0.getClientEventHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1217);
      blockingClientHandler0.getServer();
      assertEquals("<ClientHandler-Pool#1217-ID:1>", blockingClientHandler0.getName());
      
      QuickServer quickServer1 = theClient0.getServer();
      theClient0.setServer(quickServer1);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          TheClient theClient0 = new TheClient();
          MockSocket mockSocket0 = new MockSocket();
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("", 0);
          mockInetSocketAddress0.getHostName();
          mockSocket0.bind(mockInetSocketAddress0);
          theClient0.setSocket(mockSocket0);
          theClient0.setMaxAuthTryMsg("");
          theClient0.getServer();
          theClient0.getClientObjectHandler();
          theClient0.getClientExtendedEventHandler();
          NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ".XhuBME");
          theClient0.getTimeoutMsg();
          String string0 = theClient0.toString();
          assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
          
          theClient0.getSocket();
          assertFalse(theClient0.getTrusted());
          assertTrue(theClient0.getCommunicationLogging());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTimeout(125);
      theClient0.getTimeout();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-108);
      try { 
        MockInetAddress.getByAddress("Qm};|]", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [0, -108]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("@w/&>T>;9");
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTryMsg("\t<client-command-handler>");
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      QuickServer quickServer0 = new QuickServer("", 0);
      theClient0.setServer(quickServer0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg(", Event: ");
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getTimeout();
      try { 
        QuickServer.load(", Event: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.getMaxConnectionMsg();
      data0.setLastAsked("Starting GhostSocketReaper thread - ");
      theClient0.setClientData(data0);
      theClient0.getClientData();
      theClient0.getTimeoutMsg();
      theClient0.getMaxAuthTryMsg();
      theClient0.getMaxConnectionMsg();
      Object object0 = new Object();
      SocketOption<Object> socketOption0 = (SocketOption<Object>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getClientObjectHandler();
      theClient0.getCommunicationLogging();
      theClient0.getServer();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTry(697);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry(697);
      theClient0.setMaxAuthTryMsg("dkFD`Y");
      theClient0.getMaxAuthTry();
      byte[] byteArray0 = new byte[0];
      try { 
        MockInetAddress.getByAddress("{TheClient ", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: []
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setMaxAuthTryMsg("F'S1e5*zkD");
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientObjectHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientCommandHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      ClientEvent clientEvent1 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent1);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      theClient0.setTimeout((-3664));
      int int0 = theClient0.getTimeout();
      assertEquals((-3664), int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getCommunicationLogging();
      byte byte0 = (byte)87;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      try { 
        MockInetAddress.getByAddress("", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [27, 87, -114, 0, 0, 0, 0]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }
}
