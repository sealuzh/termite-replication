/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 12:20:43 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.493859614377961
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(126L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 126 .. 125 ]/0B", string0);
      
      range0.split(126L);
      List<Range> list0 = range0.split(126L);
      Range range1 = Range.ofLength(65535L);
      List<Range> list1 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.060187452699633
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(9223372036854775394L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372036854775394 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(9223372036854774706L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 673L, 9223372036854774706L);
      range0.equals((Object) null);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-665L), 9223372036854774034L);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775805L));
      Range range1 = Range.of((-9223372036854775805L));
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7987091240017974
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(1360L);
      Range.of(65535L);
      range0.getEnd();
      long long0 = range0.getEnd();
      assertEquals(1360L, long0);
      
      Long.sum(65535L, (-128L));
      Long.sum(65535L, 1360L);
      Long long1 = new Long((-941L));
      Long long2 = new Long(9223372036854774448L);
      Range range1 = Range.of(10608L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4414449671903924
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(10604L);
      range0.equals(range1);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.of((-2055L));
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4432569460695137
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(9223372036854774706L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 673L, 9223372036854774706L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range0.equals((Object)range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3294539455599756
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-800L));
      Range range1 = Range.of((-32768L), (-800L));
      Range range2 = Range.ofLength(1790L);
      range0.startsBefore(range2);
      range1.isSubRangeOf(range0);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4921351512518326
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      Range range2 = Range.ofLength(127L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range0.iterator();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3287088395517115
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(9223372036854775395L, 9223372036854775395L);
      Range range1 = Range.of((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775395 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 109L, 109L);
      Long.sum(109L, 109L);
      Object object0 = new Object();
      Long long0 = new Long(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      Object object1 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.of((-3147L), (-238L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      range0.getEnd();
      Long.sum((-429L), 696L);
      Long long0 = new Long(9223372036854775022L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.676768483304244
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775395L);
      Range range1 = Range.of(4294967295L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("m#rV4Wx", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse m#rV4Wx into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4388210016383502
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3292763361822004
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(3933L);
      Range.of((-471L), (-471L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1166L, 2168L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.134384432418997
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854774128L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1459L), 7L);
      range1.intersects(range0);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.328262849006711
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(1360L);
      range0.getEnd();
      Range range1 = Range.of(1360L, 4294967295L);
      Long.toUnsignedString((-658L));
      Long long0 = new Long(1360L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range1.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(9223372036854710274L);
      Long.toUnsignedString(9223372036854710274L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.268163943478719
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775395L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(9223372036854775395L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3438L), 0L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775394 ]/0B", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2670942167452757
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(1360L);
      long long0 = range0.getEnd();
      assertEquals(1359L, long0);
      
      Long.sum(1360L, 1710L);
      Object object0 = new Object();
      Long long1 = new Long(1359L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1359L, 1359L);
      range1.complement(range0);
      range1.intersection(range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(1360L);
      long long0 = range0.getEnd();
      assertEquals(1359L, long0);
      
      Long.sum(1360L, 1710L);
      Object object0 = new Object();
      Long long1 = new Long(1359L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1359L, 1359L);
      Object object1 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(2147483646L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2039179696972515
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(126L, 126L);
      Range range1 = Range.of(126L);
      Range range2 = Range.ofLength(126L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      range1.equals(range0);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.443210477937939
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775395L);
      Range range1 = Range.of(9223372036854773850L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.892012919857194
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 9223372036854774706L;
      Range range0 = Range.of(9223372036854774706L);
      Range range1 = Range.of(9223372036854774706L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.633533431615424
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483600L);
      long long1 = 255L;
      Range range1 = Range.of(255L, 2147483600L);
      range0.complement(range1);
      long long2 = new Long(255L);
      Long long3 = new Long((-6724L));
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.204453078800052
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 109L, 109L);
      List<Range> list0 = range0.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(108L, long0);
      
      Range range1 = Range.of(1L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3846246314593835
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.iterator();
      Range range1 = Range.ofLength(4483L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("E8tI'}]oK2", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse E8tI'}]oK2 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(2147483647L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775395L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775395L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -827 would make range [9223372036854775395 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-3057L));
      Range range1 = Range.of((-3057L), 2964L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-471L));
      Range range1 = Range.of((-3057L), (-471L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.4413333891043285
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 109L;
      Range range0 = Range.of(109L, 109L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 110 .. 110 ]/RB", range_CoordinateSystem1);
      Range range2 = range0.intersection(range1);
      // Undeclared exception!
      try { 
        range2.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-471L));
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -471 .. -471 ]/0B", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-9223372036854775808L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3049L, 2147483648L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-3057L));
      boolean boolean0 = range0.equals("must be >=0");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3284514392943114
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      Long.min((-184L), (-184L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 110L, 1465L);
      range0.equals(range1);
      List<Range> list0 = range0.split(110L);
      range0.complement(range1);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(1360L);
      range0.getEnd();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(5547L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Long.sum(9223372036854775395L, 9223372036854771875L);
      Long long0 = new Long(3823L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.328262849006711
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 109L, 109L);
      Range range0 = Range.ofLength(402L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 109L, 109L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(402L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(402L, 9223372036854775807L);
      Object object0 = new Object();
      Long.toUnsignedString(0L);
      Long.sum(87L, 402L);
      Object object1 = new Object();
      range0.equals("0");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      Range range0 = range_Builder1.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(65535L);
      range0.equals("org.jcvi.jillion.internal.core.util.Caches");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(64362L);
      Long.toUnsignedString(64362L);
      Long.sum(64362L, (-1L));
      Object object0 = new Object();
      range0.equals((Object) null);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5678136347030915
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775805L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.4405019712924245
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(2765L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ %d .. %d ]/%s", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ %d .. %d ]/%s into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.9848941644582636
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(2147483646L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5407056438302917
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-951L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-951L), (-951L));
      long long0 = (-2147483671L);
      Range range2 = Range.of((-2147483671L), (-2147483671L));
      range0.getEnd();
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.of((-4713L), 9223372036854710766L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(4294968319L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      
      range0.getBegin(range_CoordinateSystem0);
      range0.asRange();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.5696376201112083
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483648L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.2713721772276156
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854774706L);
      Range range1 = Range.of(9223372036854774706L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4418211781193198
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(109L, 109L);
      range0.toString(range_CoordinateSystem0);
      Range.of((-486L), 255L);
      Range range1 = Range.of((-1242L));
      Range range2 = Range.parseRange("[ 110 .. 110 ]/RB");
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.1346325508541963
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = new Range.Builder(255L);
      range_Builder1.expandEnd(0L);
      range_Builder0.expandEnd((-128L));
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2588L), 2452L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      Long long0 = new Long(255L);
      Long.getLong("", (Long) null);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1);
      
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      Long.sum(1360L, 255L);
      Long long0 = new Long(1710L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-6798L), 32767L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.388129605429797
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L), (-128L));
      List<Range> list0 = range1.complement(range0);
      assertSame(range1, range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.20551213003622
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(9223372036854775395L);
      Range range1 = Range.of(9223372036854775395L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 65535L, 9223372036854710779L);
      // Undeclared exception!
      try { 
        Range.parseRange("r", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse r into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-84L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775395L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.892518928712349
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(1360L);
      Range range1 = Range.of(3678L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.of(1360L, (-2349L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-2147483667L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 574L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.979856144737496
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(2147483647L);
      range1.getEnd();
      Object object0 = new Object();
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.6774289151718054
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(65535L);
      range_Builder0.contractEnd((-1090L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2210L), 0L);
      range_Builder1.contractBegin(2165L);
      range0.getEnd();
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Space Based", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.715731170780148
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L), 2147483647L);
      range2.getEnd(range_CoordinateSystem0);
      range2.iterator();
      long long0 = new Long(2147483647L);
      range1.getLength();
      range2.startsBefore(range1);
      range0.intersects(range1);
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(1360L);
      long long0 = range0.getEnd();
      assertEquals(1359L, long0);
      
      long long1 = new Long(1710L);
      Object object0 = new Object();
      Long long2 = new Long(1359L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1359L, 1359L);
      Object object1 = new Object();
      boolean boolean0 = range1.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-2532L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("invalid startOffset %d: file is only %d bytes");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.invalid startOffset %d: file is only %d bytes
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775395L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.0615010815994688
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775424L);
      Range range1 = Range.ofLength(9223372036854775424L);
      range1.getBegin();
      // Undeclared exception!
      try { 
        range0.split(9223372036854774706L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2205 would make range [9223372036854774706 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.0598988524110324
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(3561L);
      range0.split(3561L);
      long long0 = 3855L;
      // Undeclared exception!
      try { 
        Range.of(3855L, 1848L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(4544L);
      range0.split(9223372036854775674L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(238L);
      long long0 = range0.getEnd();
      assertEquals(237L, long0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(255L);
      Long long0 = new Long((-1L));
      Long long1 = new Long(1L);
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775395L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775395L, long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-869L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.976709928476526
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1923L), 2256L);
      range_Builder0.contractEnd((-1923L));
      Range range0 = Range.of((-3568L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 2623L);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-471L), 37061L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-32785L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 255L, 255L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.134384432418997
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2147483647L, 4294967294L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, (-2555L), 0L);
      range1.intersects(range0);
      Long long0 = new Long((-2555L));
      range1.equals(long0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(555L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(555L);
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-471L));
      range0.getBegin();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(")0[2!,8z`p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.)0[2!,8z`p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(402L);
      Range range1 = Range.of(255L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("A^%Hgc:_s\"_0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse A^%Hgc:_s\"_0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range range1 = Range.ofLength(3745L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.716528407027823
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      range1.getBegin();
      Long.getLong("P.l~o >", (Long) null);
      range1.endsBefore(range0);
      Long long1 = new Long(0L);
      Long.getLong("", long1);
      boolean boolean1 = range1.intersects(range0);
      assertTrue(boolean1 == boolean0);
      
      Long.toUnsignedString(0L);
      Long.sum(2147483647L, 500L);
      range1.equals((Object) null);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 2147484147L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      long long2 = range1.getLength();
      assertEquals(1L, long2);
      
      range1.complement(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(2147483646L);
      boolean boolean0 = range0.equals("must be >=0");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.269042622949001
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(1360L);
      long long0 = range0.getEnd();
      assertEquals(1360L, long0);
      
      Long.sum(1360L, 1710L);
      Object object0 = new Object();
      Long long1 = new Long(1360L);
      Range range1 = Range.of(1710L);
      Object object1 = new Object();
      range1.equals(range0);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = 1227L;
      Range range0 = Range.of((-9223372036854775808L));
      Long long1 = new Long((-1564L));
      Long.getLong("}", long1);
      Long.getLong("start offset can not be less than 0", long1);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.3870604996180194
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1059L), (-1059L));
      range0.toString();
      Range range1 = Range.of((-1059L), (-1059L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.2662596083157305
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(9223372036854773850L);
      range1.complement(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.136466656040129
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L));
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 555L, 555L);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(555L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854774582L);
      range_Builder0.build();
      range_Builder0.shift(9223372036854774582L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2453 would make range [9223372036854774582 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(60L);
      long long0 = range0.getBegin();
      assertEquals(60L, long0);
      
      long long1 = range0.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getBegin();
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      
      Long long0 = new Long(573L);
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = new Range.Builder(255L);
      Range.Builder range_Builder2 = new Range.Builder((-274L), 127L);
      range_Builder0.contractEnd((-2147483648L));
      // Undeclared exception!
      try { 
        Range.of(0L, (-274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1923L), (-1923L));
      range_Builder0.contractEnd((-1923L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775394L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long long0 = 1609L;
      long long1 = 255L;
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = new Range.Builder(316L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(316L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd(255L);
      range_Builder0.expandEnd((-4706L));
      range_Builder1.expandEnd(4294967295L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.0894379124341005
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-483L));
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("U3/J#p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.U3/J#p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2428L), (-2428L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.796702740052869
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(3933L);
      Range range1 = Range.of(2168L);
      range1.isSubRangeOf(range0);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.8943987693018673
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2098L, 2098L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 414L, 1959L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1959L, 1959L);
      Range range2 = range_Builder0.build();
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of((-58L), (-58L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 0 ]/SB", range_CoordinateSystem1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775395L);
      Long.toUnsignedString(9223372036854773850L);
      Long.sum(9223372036854775395L, 500L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("9223372036854773850", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 9223372036854773850 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.5672464197286162
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.894493912254153
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(1767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 1767 ]/RB", string0);
      
      Range range1 = Range.ofLength(846L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 126L, 126L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.798881389290342
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32768L), long0);
      
      Range range1 = Range.of((-32768L));
      Long.toUnsignedString(1852L);
      Long.sum(2334L, 9223372036854773850L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L));
      Object object1 = new Object();
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("%:pdjP?#@C%7/Nz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.%:pdjP?#@C%7/Nz
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.058282690794871
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1160L), (-25L));
      Range range0 = Range.of((-1160L), 0L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1159 .. 1 ]/RB", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(109L, 109L);
      long long0 = 402L;
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(31364L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967295L);
      range_Builder1.contractBegin(31364L);
      // Undeclared exception!
      try { 
        Range.of(1181L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775562L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775562L, 9223372036854775562L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1005L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-2512L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-9223372036854774029L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774029 would make range [4294967295 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-4L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(9223372036854775807L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("t['Pd1GZ<Im");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.t['Pd1GZ<Im
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3050L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 3049L;
      long long1 = 9223372036854773234L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854773234L, (-35341L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -35342 would make range [9223372036854773234 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1609L);
      range_Builder0.expandEnd((-2113L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 1227L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long long0 = 2147483647L;
      long long1 = (-1923L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483647L, (-1923L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-912L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1457L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
