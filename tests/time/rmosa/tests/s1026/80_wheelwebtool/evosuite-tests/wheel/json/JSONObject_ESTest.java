/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 12:32:15 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("#]BcXa", (Collection) linkedList0);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      jSONObject1.getJSONArray("#]BcXa");
      jSONObject1.put("-S", (Object) hashMap1);
      try { 
        jSONObject0.getBoolean("-S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-S\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("#]BcXa", (Collection) linkedList0);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      jSONObject1.put("-S", (Object) hashMap1);
      Integer integer0 = new Integer(38);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-S";
      stringArray0[1] = "-S";
      stringArray0[2] = "#]BcXa";
      stringArray0[3] = "#]BcXa";
      stringArray0[4] = "#]BcXa";
      stringArray0[5] = "#]BcXa";
      stringArray0[6] = "-S";
      stringArray0[7] = "#]BcXa";
      stringArray0[8] = "#]BcXa";
      JSONObject jSONObject2 = new JSONObject(hashMap0, stringArray0);
      jSONObject1.opt("#]BcXa");
      String string0 = JSONObject.valueToString("NWP", 38, 38);
      assertNotNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject1.put("getmax", 45);
      double double0 = jSONObject2.optDouble("getmax");
      assertEquals(45.0, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Collection) linkedList0);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      int int0 = 12;
      hashMap1.put((Double) null, "hejo1");
      String string0 = " mF==;L";
      linkedList0.spliterator();
      JSONObject jSONObject2 = jSONObject0.put("-S", (Object) hashMap1);
      jSONObject1.toString();
      Integer integer0 = new Integer(12);
      // Undeclared exception!
      try { 
        jSONObject2.toString((-700), (-700));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.232716582315242
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("s+.!", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("s+.!", 1L);
      jSONObject1.optLong("s+.!");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8783578531833827
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject0.put("+@suP8sV", (-256L));
      JSONObject jSONObject1 = new JSONObject((Object) "+@suP8sV");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 1096, 46);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8821621297149318
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000060", true);
      JSONObject jSONObject2 = jSONObject0.append("t.*D<`6R]G9yFhcWa", (Object) null);
      jSONObject0.keys();
      StringWriter stringWriter0 = new StringWriter(59);
      JSONObject jSONObject3 = jSONObject1.accumulate(":nF;qo4Q+'Vv94-{^", stringWriter0);
      JSONObject.getNames(jSONObject2);
      stringWriter0.close();
      jSONObject0.write(stringWriter0);
      jSONObject2.optJSONArray("t.*D<`6R]G9yFhcWa");
      jSONObject1.toString(59);
      jSONObject2.optDouble("t.*D<`6R]G9yFhcWa");
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(true, true);
      JSONObject.valueToString(boolean0);
      jSONObject1.toString(59);
      jSONObject1.optJSONArray(":nF;qo4Q+'Vv94-{^");
      Object object0 = jSONObject3.opt("in");
      assertNull(object0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Kdyu8/wmeyb=.FYhS");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("Kdyu8/wmeyb=.FYhS", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("MA{%Kp8", (Object) hashMap0);
      Integer integer0 = new Integer(213);
      jSONObject0.toString(213, 9);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(hashMap0, (-1268), (-1268));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("get", (-42724917));
      Float float0 = new Float((-2702.0916));
      JSONObject jSONObject1 = new JSONObject(float0);
      String string0 = JSONObject.valueToString(float0, (-42724917), 160);
      assertNotNull(string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1592);
      JSONObject.getNames((Object) integer0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject1.put("+@suP8sV", 1L);
      JSONObject jSONObject2 = jSONObject0.put("+@suP8sV", 1592);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate("is", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put("+@suP8sV", (-256L));
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      jSONObject0.put("+@suP8sV", (Map) hashMap0);
      Boolean.valueOf(false);
      jSONObject0.put("=", 0);
      jSONObject0.getJSONObject("+@suP8sV");
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      assertTrue(hashMap1.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      hashMap0.put((Object) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("\"\"");
      jSONObject0.names();
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      // Undeclared exception!
      try { 
        jSONObject0.toString((-29));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("X", (Object) "X");
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.isNull("X");
      JSONTokener jSONTokener0 = new JSONTokener(".");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt(",\n", object0);
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.43973730954914
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optDouble(":im mG:w1\"3U(45j%i", 0.0);
      double double0 = jSONObject0.optDouble("\f", (-3619.8084493));
      assertEquals((-3619.8084493), double0, 0.01);
      
      jSONObject0.names();
      JSONObject.valueToString("2zi@p9cxrDn1e|", (-916), (-916));
      int int0 = jSONObject0.optInt(stringArray0[0]);
      assertEquals(0, int0);
      
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      Float float0 = new Float((double) 0);
      hashMap0.put(float0, (Boolean) null);
      JSONObject jSONObject1 = jSONObject0.put("2zi@p9cxrDn1e|", (-916));
      JSONObject jSONObject2 = jSONObject0.put("2zi@p9cxrDn1e|", (Map) hashMap0);
      int int1 = jSONObject0.optInt("9\"Lu!1z.3g |h0#1D", (-916));
      assertEquals((-916), int1);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string0 = JSONObject.quote("7<h4O");
      assertEquals("\"7<h4O\"", string0);
      
      jSONObject2.put(":im mG:w1\"3U(45j%i", 0);
      int int2 = jSONObject1.optInt("XXgS (p cr!?%3", 0);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m}?/", (-256L));
      jSONObject1.put("m}?/", 71);
      jSONObject0.getDouble("m}?/");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m}?/", (-256L));
      jSONObject1.put("{", 71);
      jSONObject0.getDouble("m}?/");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "spl";
      try { 
        jSONObject0.put("spl", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(0.0F);
      hashMap0.put("c", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("c", (double) 0.0F);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1762762192815894
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.doubleToString(517.1);
      assertEquals("517.1", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "517.1");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.282325506963904
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("+@suP8sV", (-256L));
      JSONObject jSONObject2 = jSONObject1.put("{", 1096);
      jSONObject2.remove("+@suP8sV");
      jSONObject1.toString();
      Object object1 = new Object();
      Float float0 = new Float(1753.43F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      jSONObject0.toString(67, (-1689));
      String[] stringArray1 = JSONObject.getNames(jSONObject1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4377134277438377
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("+@suP8sV", (-256L));
      JSONObject jSONObject2 = jSONObject1.put("{", 1096);
      JSONObject.quote("+@suP8sV");
      Object object1 = new Object();
      Float float0 = new Float(1753.0F);
      jSONObject0.toString(67, 1);
      Object object2 = JSONObject.NULL;
      Integer integer0 = new Integer(1);
      jSONObject1.length();
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject3 = new JSONObject("{\n                                                                    \"java.lang.String@0000000002\": java.lang.Long@0000000003,\n                                                                    \"java.lang.String@0000000004\": java.lang.Integer@0000000005\n }");
      JSONObject.testValidity(jSONObject3);
      boolean boolean0 = jSONObject2.has("{");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("!l,pvb}o#u7]tft'0i\"", (Object) null);
      try { 
        Short.valueOf("\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)1360);
      linkedList0.offerLast(short0);
      JSONObject.valueToString(linkedList0);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] is not a Boolean.";
      Integer integer0 = new Integer((-3111));
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", true);
      jSONObject1.getString("] is not a Boolean.");
      try { 
        jSONObject0.getBoolean("@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(722);
      JSONObject jSONObject1 = jSONObject0.append("m}?/", "m}?/");
      StringWriter stringWriter0 = new StringWriter(722);
      StringWriter stringWriter1 = new StringWriter(722);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m}?/";
      stringArray0[1] = "m}?/";
      stringArray0[2] = "m}?/";
      stringArray0[3] = "m}?/";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      JSONObject jSONObject3 = jSONObject1.append("m}?/", jSONObject2);
      assertFalse(jSONObject3.equals((Object)jSONObject2));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "m}?/";
      jSONObject0.put("m}?/", (Object) "m}?/");
      try { 
        jSONObject0.append("m}?/", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[m}?/] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      Float float0 = new Float(0.0F);
      Integer integer0 = new Integer(31);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("vX]q(hP9fHF&<OT5[", (-2361L));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("null", 12);
      jSONObject1.getLong("null");
      try { 
        Short.valueOf("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "E+nVrzds9+C ";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string1 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2829875394034933
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!bboOQE3hG@gr^1TY", 658L);
      jSONObject0.put("{", 778);
      JSONObject.quote("q<-n-DuQSt*mR7&/OsO");
      Object object0 = new Object();
      Float float0 = new Float(0.0F);
      jSONObject0.toString(67, (-15));
      Object object1 = JSONObject.NULL;
      Integer integer0 = new Integer((-15));
      int int0 = jSONObject0.length();
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject1 = new JSONObject("{\n                                                    \"java.lang.String@0000000002\": java.lang.Long@0000000003,\n                                                    \"java.lang.String@0000000004\": java.lang.Integer@0000000005\n}");
      JSONObject.testValidity(integer0);
      assertFalse(integer0.equals((Object)int0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject1 = jSONObject0.put(" at character ", 1L);
      JSONObject.valueToString(object0, 1096, 1096);
      jSONObject1.toString((-1445), 1);
      Integer integer0 = new Integer(1);
      jSONObject1.length();
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4394166425618065
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("+@suP8sV", (-246L));
      jSONObject1.put("{", 1096);
      jSONObject1.toString();
      Object object1 = new Object();
      Float float0 = new Float(1753.43F);
      Float.isFinite(784.0F);
      JSONObject.getNames((Object) float0);
      jSONObject0.toString(67, (-1689));
      JSONObject.getNames(jSONObject1);
      int int0 = jSONObject0.optInt("{");
      assertEquals(1096, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Float float0 = new Float((-1598.18));
      jSONObject1.putOpt("wheel.json.JSONObject", float0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(722);
      jSONObject0.append("m}?/", "m}?/");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.accumulate("m}?/", "m}?/");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("NR1r=)x");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String string0 = "d\":v";
      JSONObject jSONObject1 = jSONObject0.putOpt("d\":v", "d\":v");
      try { 
        jSONObject1.getJSONObject("d\":v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d\\\":v\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int int0 = 14;
      JSONObject.valueToString(linkedList0, 14, 14);
      Object object0 = new Object();
      Float float0 = new Float(1754.0803F);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[]";
      stringArray0[1] = "[]";
      stringArray0[2] = "[]";
      stringArray0[3] = "[]";
      stringArray0[4] = "[]";
      stringArray0[5] = "[]";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-698));
      hashMap0.put(integer0, "NG;MU\"w'V'niBav7@p");
      jSONObject0.optString((String) null, (String) null);
      Integer integer1 = new Integer((-698));
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optLong("c;k");
      JSONObject.quote("@+sb!/;1pON");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(542.7F);
      JSONObject.getNames((Object) float0);
      JSONObject jSONObject1 = jSONObject0.put("+@suP8sV", 0L);
      JSONObject jSONObject2 = jSONObject0.put("{", 88);
      Float float1 = new Float((-1.0F));
      JSONObject.getNames((Object) float0);
      jSONObject2.getInt("+@suP8sV");
      JSONObject jSONObject3 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/9S";
      JSONObject jSONObject4 = new JSONObject(jSONObject1, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("+@suP8sV");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of +@suP8sV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(",\n", (-2469.0));
      assertEquals((-2469.0), double0, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)768);
      linkedList0.add(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)92);
      Byte.toUnsignedLong((byte)92);
      double double0 = jSONObject0.optDouble("<", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      linkedList0.add((Short) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      JSONObject jSONObject1 = jSONObject0.put("+@suP8sV", (-295L));
      jSONObject1.put("+@suP8sV", 1096);
      int int0 = jSONObject1.getInt("+@suP8sV");
      assertEquals(1096, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.put("+@suP8sV", (-256L));
      JSONObject.valueToString("not", 1096, (-1275));
      int int0 = jSONObject1.getInt("+@suP8sV");
      assertEquals((-256), int0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double((-1.0));
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("xKitU0L[");
      Float float0 = new Float(2021.7755F);
      hashMap0.put(boolean0, float0);
      JSONObject jSONObject1 = jSONObject0.put("\t", (Object) double0);
      jSONObject0.names();
      String string0 = jSONObject1.optString("\t");
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Long long0 = new Long(10L);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Long@00000000080";
      stringArray0[1] = "isvalueOf";
      stringArray0[2] = "isvalueOf";
      stringArray0[3] = "isvalueOf";
      stringArray0[5] = "isvalueOf";
      stringArray0[6] = "false";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      hashMap0.put("isvalueOf", jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optJSONObject("MZp?O)GF2vsn-7S_");
      jSONObject1.optString("isvalueOf", "N");
      try { 
        jSONObject1.getDouble("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.put("kchx", (Object) boolean0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kchx";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean1 = jSONObject1.optBoolean("kchx");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("t~=HS`D@lxahlY", object0);
      Object object1 = jSONObject0.get("t~=HS`D@lxahlY");
      assertSame(object1, object0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("m}?/", (Object) null);
      StringWriter stringWriter0 = new StringWriter(2934);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "m}?/");
      Writer writer0 = jSONObject1.write(stringWriter1);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("Opoe7WTPBQJ$m[k", "Opoe7WTPBQJ$m[k");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]s";
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(17);
      Integer integer0 = new Integer(17);
      hashMap0.put((Object) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONArray0.optInt(128);
      StringWriter stringWriter0 = new StringWriter(491);
      Writer writer0 = jSONArray0.write(stringWriter0);
      // Undeclared exception!
      try { 
        jSONObject0.write(writer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(1.0F);
      hashMap0.put((String) null, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      jSONObject0.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      HashMap<Boolean, Object> hashMap1 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", (Map) hashMap1);
      jSONObject1.accumulate("Expected a ',' or ']'", "Expected a ',' or ']'");
      jSONObject0.get("Expected a ',' or ']'");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      int int0 = 1997;
      JSONObject.valueToString(object0, 1997, (-75));
      Object object1 = new Object();
      Float float0 = new Float((float) 1997);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject((-75));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-75] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~(w@W-QD=Dc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~(w@W-QD=Dc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("fal~se", false);
      try { 
        jSONObject0.getInt("fal~se");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fal~se\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = ")k0{(m*=yp-s-7Wpb";
      JSONObject.valueToString(jSONObject0, 67, (-3256));
      try { 
        jSONObject0.getDouble("SM%4wB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SM%4wB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(":", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("toH", (Object) linkedList0);
      Integer integer0 = new Integer((-671));
      jSONObject2.toString((-594), 12);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = "lGYr=";
      JSONObject jSONObject1 = jSONObject0.putOpt("lGYr=", "lGYr=");
      try { 
        jSONObject1.getLong("lGYr=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lGYr=\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("#]BcXa", (Collection) linkedList0);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      JSONObject jSONObject2 = jSONObject1.put("-S", (Object) hashMap1);
      try { 
        jSONObject2.getDouble("#]BcXa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#]BcXa\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("0", 737.076974);
      assertEquals(737.076974, double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = new Integer(34);
      Double double0 = new Double(2636.17068124);
      hashMap0.put(integer0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject(",\n");
      double double1 = jSONObject0.optDouble("kHNR>%r");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      hashMap0.put("getnotifyAll", float0);
      long long0 = jSONObject0.optLong("g\"oT[mb", 1L);
      assertEquals(1L, long0);
      
      JSONObject jSONObject1 = jSONObject0.put("g\"oT[mb", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject.doubleToString((-1.0));
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("~z|D9q ]$v$tXx~*H", (-1.0));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.accumulate("000", float0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8801215216137177
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.optBoolean("getvalueOf");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ">e$2^@~Brm";
      stringArray0[2] = ">e$2^@~Brm";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = ">e$2^@~Brm";
      stringArray0[6] = "";
      stringArray0[7] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      jSONObject1.put(")f`HXLx?VK_!l6q|m?}", (Map) hashMap0);
      boolean boolean0 = jSONObject1.optBoolean(">e$2^@~Brm");
      assertFalse(boolean0);
      
      jSONObject0.optJSONObject("");
      String string0 = jSONObject0.optString("Null pointer", "");
      assertEquals("", string0);
      
      String string1 = JSONObject.doubleToString(1.0);
      assertEquals("1", string1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt("d\"h", object0);
      try { 
        jSONObject0.getBoolean("d\"h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d\\\"h\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "";
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("GC>TYGqCCm4: w");
      JSONObject.getNames((Object) "");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("d\":v", "d\":v");
      try { 
        jSONObject0.getBoolean("d\":v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d\\\":v\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      jSONObject0.putOpt("nM@", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("nM@");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("X", (Object) "X");
      try { 
        jSONObject1.getJSONArray("X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String string0 = "dY:=";
      JSONObject jSONObject1 = jSONObject0.putOpt("dY:=", "dY:=");
      long long0 = 0L;
      jSONObject1.optLong("dY:=", 0L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, (-521), (-521));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject.quote("Kdyu8/wmeyb=.FYhS");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(48);
      linkedList0.add(integer0);
      jSONObject0.put("\"Kdyu8/wmeyb=.FYhS\"", (Collection) linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-81));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "]s";
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(17);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(17);
      Integer integer0 = new Integer(807);
      Integer integer1 = new Integer(17);
      hashMap0.put(jSONArray0, integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      String string0 = "X[7]xW";
      Object object0 = new Object();
      Object object1 = new Object();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1.0);
      hashMap0.put(double0, jSONObject0);
      try { 
        jSONObject0.put((String) null, 663);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Expected '", 123);
      assertEquals(123, int0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Byte.compare((byte)98, (byte)98);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("false", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] is not a Boolean.";
      String string1 = ",\n";
      try { 
        jSONObject0.put((String) null, 875L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(4364);
      hashMap0.put(integer0, "NG;MU\"w'V'niBav7@p");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("NG;MU\"w'V'niBav7@p", "NG;MU\"w'V'niBav7@p");
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      assertTrue(hashMap1.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String[] stringArray0 = JSONObject.getNames((Object) "=!KpwfAOs<>^`y");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("=g9E8WJt*2b[");
      assertEquals("", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("Substring bounds error");
      JSONTokener jSONTokener0 = new JSONTokener("MSS#LBWxO`i%y*_(YG");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      String string0 = "Unclosed comment";
      hashMap0.put("Unclosed comment", jSONObject0);
      String string1 = "Missing value";
      BiFunction<String, JSONObject, JSONObject> biFunction0 = (BiFunction<String, JSONObject, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string2 = "oF@D";
      try { 
        jSONObject0.get("oF@D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oF@D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("getwait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getwait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("8=E[m]", (-1226L));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalOr(false, false);
      JSONObject.valueToString(boolean0);
      Boolean.logicalAnd(false, false);
      Boolean.compare(true, false);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      jSONObject0.keys();
      jSONObject0.remove("");
      JSONObject.valueToString((Object) null);
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(2500);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5888083670994821
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject.doubleToString((-689.891837));
      int int0 = 2;
      JSONObject.valueToString("-689.891837", 2, 2);
      JSONObject jSONObject0 = new JSONObject((Object) "-689.891837");
      int int1 = 1030;
      int int2 = 891;
      // Undeclared exception!
      jSONObject0.toString(1030, 891);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1890.727553);
      JSONTokener jSONTokener0 = new JSONTokener("1890.727553");
      String string1 = JSONObject.valueToString("1890.727553", (byte)11, (byte)11);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("#]BcXa", (Collection) linkedList0);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      jSONObject0.put("", (Object) linkedList0);
      String string0 = jSONObject1.toString(1959, 1959);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-2132));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("toH");
      Integer integer0 = new Integer(45);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-1616.1256F));
      hashMap0.put("isiterator", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(1);
      hashMap0.put(integer0, "3");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("dou", 1976.394445483809);
      jSONObject0.optInt("dou", (-1215));
      JSONTokener jSONTokener0 = new JSONTokener("\"\"");
      Byte byte0 = new Byte((byte)32);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of $
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.0218020909681602
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.quote("waE-uIfD+/[W");
      assertEquals("\"waE-uIfD+/[W\"", string0);
      
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      String string1 = JSONObject.doubleToString(1.0);
      assertEquals("1", string1);
      
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0376491662493996
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(">[9FOGP~4UQSu5gL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\">[9FOGP~4UQSu5gL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean((String) null);
      String string0 = JSONObject.valueToString(boolean0, 39, (-364));
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1161, 1161);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      jSONObject0.put("-S", (Object) "-S");
      jSONObject0.toString((-2112), (-1128));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-8335702), (-8335702));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float(32.126877087);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("qkpS5");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of qkpS5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Byte byte0 = new Byte((byte)46);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("flo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of flo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("8Ja", false);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("MZp?O)GF2v/n-7S_");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = Boolean.valueOf(true);
      Boolean.logicalAnd(true, false);
      hashMap0.put(boolean0, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "] is not a JSONObject.";
      jSONObject0.optBoolean("] is not a JSONObject.", true);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("E+nVrzds9+C ");
      assertEquals("\"E+nVrzds9+C \"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "lGYr=");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "HGmPF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONObject0.opt("c)|1Uo");
      assertNull(object0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 16;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONObject$1";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
