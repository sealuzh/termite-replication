/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 12:10:29 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.lib.HsqlByteArrayOutputStream;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("LoF*+B(HJ-8");
      SQLUtil.mutatesDataOrStructure("select into");
      String string0 = "Mc]";
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-559016537));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("POlcQ)vQwEUyE wvz", (DBTable) null, (DBDataType) null, integer0, integer0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(7, "alter table/&#");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("an)YSR*oc", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("an)YSR*oc ALTER TABLE/&# NULL", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "inner";
      stringArray0[1] = "an)YSR*oc";
      stringArray0[2] = "alter table";
      stringArray0[3] = "an)YSR*oc";
      stringArray0[4] = "an)YSR*oc ALTER TABLE/&# NULL";
      stringArray0[5] = "alter table/&#";
      stringArray0[6] = "an)YSR*oc";
      stringArray0[7] = "an)YSR*oc ALTER TABLE/&# NULL";
      String string1 = SQLUtil.join("alter table", "inner", stringArray0, "create materialized view", "alter table", stringArray0);
      assertEquals("alter table join create materialized view as alter table on inner.inner = alter table.inner and inner.an)YSR*oc = alter table.an)YSR*oc and inner.alter table = alter table.alter table and inner.an)YSR*oc = alter table.an)YSR*oc and inner.an)YSR*oc ALTER TABLE/&# NULL = alter table.an)YSR*oc ALTER TABLE/&# NULL and inner.alter table/&# = alter table.alter table/&# and inner.an)YSR*oc = alter table.an)YSR*oc and inner.an)YSR*oc ALTER TABLE/&# NULL = alter table.an)YSR*oc ALTER TABLE/&# NULL", string1);
      
      String string2 = SQLUtil.join("inner", "an)YSR*oc", stringArray0, "drop tablelof*+b(hj-8", "UAVUz}YaRBcaLEJ$tuM", stringArray0);
      assertEquals("drop tablelof*+b(hj-8 as UAVUz}YaRBcaLEJ$tuM on an)YSR*oc.inner = UAVUz}YaRBcaLEJ$tuM.inner and an)YSR*oc.an)YSR*oc = UAVUz}YaRBcaLEJ$tuM.an)YSR*oc and an)YSR*oc.alter table = UAVUz}YaRBcaLEJ$tuM.alter table and an)YSR*oc.an)YSR*oc = UAVUz}YaRBcaLEJ$tuM.an)YSR*oc and an)YSR*oc.an)YSR*oc ALTER TABLE/&# NULL = UAVUz}YaRBcaLEJ$tuM.an)YSR*oc ALTER TABLE/&# NULL and an)YSR*oc.alter table/&# = UAVUz}YaRBcaLEJ$tuM.alter table/&# and an)YSR*oc.an)YSR*oc = UAVUz}YaRBcaLEJ$tuM.an)YSR*oc and an)YSR*oc.an)YSR*oc ALTER TABLE/&# NULL = UAVUz}YaRBcaLEJ$tuM.an)YSR*oc ALTER TABLE/&# NULL", string2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "/dCo";
      stringArray0[1] = "/dCo";
      stringArray0[2] = "";
      stringArray0[3] = "create materialized view";
      stringArray0[4] = "/dCo";
      stringArray0[5] = "/dCo";
      stringArray0[6] = "";
      stringArray0[7] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("/dCo", stringArray0);
      assertEquals("/dCo./dCo, /dCo./dCo, /dCo., /dCo.create materialized view, /dCo./dCo, /dCo./dCo, /dCo., /dCo.", string0);
      
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2. #", (DBTable) null, (-987), "");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LoF*+B(HJ-8";
      stringArray0[1] = "create table";
      stringArray0[2] = "LoF*+B(HJ-8";
      stringArray0[3] = "CONSTRAINT ";
      SQLUtil.renderColumnListWithTableName("create table", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "MSk'e", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("$cp8(*$,T5Xl7q:xvL$", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("create table.LoF*+B(HJ-8, create table.create table, create table.LoF*+B(HJ-8, create table.CONSTRAINT ", "CONSTRAINT ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertSame(dBTable0, defaultDBTable0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isProcedureCall("Cannot find parameter with the specified position.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~.,sbAL]m");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Cannot find parameter with the specified position.";
      stringArray0[1] = "~.,sbAL]m";
      stringArray0[2] = "Cannot find parameter with the specified position.";
      stringArray0[3] = "Cannot find parameter with the specified position.";
      stringArray0[4] = "Cannot find parameter with the specified position.";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "~.,sbAL]m", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Cannot find parameter with the specified position.", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")loO)hu&bQftCrc");
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("f7zv7e_Y@]I.e-$WFxE", stringBuilder0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) "alter tablepolcq)vqweuye wvz");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance((-1726475513), "org.databene.jdbacl.SQLUtil");
      DBCatalog dBCatalog0 = new DBCatalog("aoq_(+Y_C%3+L#");
      dBCatalog0.getTable("alter index", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index", (DBTable) null, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("alter index", string0);
      
      String string1 = SQLUtil.substituteMarkers("", "org.databene.jdbacl.SQLUtil", dBColumnArray0[0]);
      assertEquals("", string1);
      
      Random.setNextRandom((-1161));
      boolean boolean0 = SQLUtil.isDDL("alter index");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("wM<crP!P{6G(m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: wM<crP!P{6G(m
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[3] = " NULL";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", false, defaultDBTable0, " NULL");
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(false);
      DBDataType dBDataType0 = DBDataType.getInstance(122, " NULL");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("READS SQL DATA", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setDefaultValue("exec");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("READS SQL DATA  NULL(1,1) DEFAULT exec NULL", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectexecuteampw@ctowtos5q)tz>", (DBTable) null, (-2703), "DATE");
      Integer integer0 = RawTransaction.ABORT;
      defaultDBColumn0.setSize(integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DATE";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("%DDBY", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((-2703));
      HsqlByteArrayOutputStream hsqlByteArrayOutputStream0 = rowOutputBinary0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(hsqlByteArrayOutputStream0, true);
      mockPrintWriter0.println(true);
      PrintWriter printWriter0 = mockPrintWriter0.printf("DATE", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = new Integer((-1086065152));
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("rD(@[)\"61B(=j~t$Po");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance((-732), "");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance((-1726475513), "org.databene.jdbacl.SQLUtil");
      DBCatalog dBCatalog0 = new DBCatalog("aoq_(+Y_C%3+L#");
      dBCatalog0.getTable("alter index", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter index", (DBTable) null, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "aoq_(+Y_C%3+L#";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable1, stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", false, " NULL", " NULL");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("selectpolcq)vqweuye wvz");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(stringArray0[3], false, defaultDBTable0, " NULL");
      StringBuilder stringBuilder0 = new StringBuilder("8{V6vVi`JER;8@9");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string0 = SQLUtil.renderQuery(defaultDBTable1, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object object0 = new Object();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "select into";
      stringArray0[1] = "create table";
      stringArray0[2] = "select";
      stringArray0[3] = "select into";
      stringArray0[4] = "select into";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      StringBuilder stringBuilder1 = new StringBuilder();
      Character character0 = new Character('E');
      SQLUtil.renderValue(character0);
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" WHERE ", 65);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PlcQ)vQwEUyEwvz", (DBTable) null, (DBDataType) null, integer0, integer0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("PlcQ)vQwEUyEwvz, PlcQ)vQwEUyEwvz", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, " NULL", "v$P");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "pxeh$";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1M");
      DBDataType dBDataType0 = DBDataType.getInstance((-1431), "ROWS");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[1], defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(stringArray0[1], false, defaultDBTable0, "pxeh$");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK pxeh$", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("B/");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("B/");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      Locale locale0 = Locale.JAPAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, " and ", (Object[]) null);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-740), "rD(@[)\"61B(=j~t$Po");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      TableContainer tableContainer0 = new TableContainer("rD(@[)\"61B(=j~t$Po");
      tableContainer0.getSchema();
      defaultDBTable0.setSchema((DBSchema) null);
      Boolean boolean0 = Boolean.FALSE;
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer.sum((-740), 34);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      defaultDBColumn0.setSize((Integer) (-4));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = null;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      stringArray0[2] = "alPs`=";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "QQ?DQSwDm\"", true, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DBTable dBTable0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("? ", (DBTable) null, (-617), "(j cp&@M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (j cp&@M
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3Z$1=L}7OF";
      stringArray0[2] = "&BD1.ki";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.databene.jdbacl.SQLUtil", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (3Z$1=L}7OF, , &BD1.ki)", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("ZXxL");
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ZXxL";
      stringArray0[1] = "ZXxL";
      stringArray0[2] = "ZXxL";
      stringArray0[3] = "C!V.lK^]SM&";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("VKGAwXC", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updateupdate");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("b^2/FfbCa");
      dBCatalog0.getTable("7znL5(Nv\"(-c{^xp7", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aoq_(+Y_C%3+L#", (DBTable) null, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("aoq_(+Y_C%3+L#, aoq_(+Y_C%3+L#, aoq_(+Y_C%3+L#", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "executecannot find parameter with the specified position.";
      stringArray0[1] = "BACKUP.HISTORY";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("executecannot find parameter with the specified position.", stringArray0, "BACKUP.HISTORY", "inner", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("create materialized viewchvck", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object object0 = new Object();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "LoF*+B(HJ-8", false, (String[]) null);
      defaultDBTable1.addUniqueConstraint(dBUniqueConstraint0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = SQLUtil.renderValue(defaultDBTable1);
      assertNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec9g3$sfml!>ek]grq");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      boolean boolean0 = SQLUtil.isQuery("execcannt find paramet");
      Boolean boolean1 = SQLUtil.mutatesStructure("execcannt find paramet");
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = " NULL";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.join("STORE", (String) null, stringArray0, "/*", "call", stringArray0);
      SQLUtil.isQuery("(, , ,  NULL)");
      SQLUtil.removeComments(",cMZA4\tsc8>I 0}");
      StringBuilder stringBuilder0 = new StringBuilder("1(Ig^Z9");
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Gm7Q*2w!\"d", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      SQLUtil.renderColumnListWithTableName(" NULL", stringArray0);
      StringBuilder stringBuilder1 = stringBuilder0.append((long) 90005);
      stringBuilder0.insert(8, 2199023255554L);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 4456, "drop materialized view");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("1(Ig^Z9921990232555540005DROP MATERIALIZED VIEW", stringBuilder1.toString());
      assertEquals("1(Ig^Z9921990232555540005DROP MATERIALIZED VIEW", stringBuilder0.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCatalog dBCatalog0 = new DBCatalog("3Q/}4?y6Dp");
      DBSchema dBSchema0 = new DBSchema("3Q/}4?y6Dp", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop Undexs=Oet", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("3Q/}4?y6Dp.drop Undexs=Oet", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-740), "rD(@[)\"61B(=j~t$Po");
      String string0 = "create tables2<3rco4>k";
      String string1 = "/*";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "/*";
      stringArray0[3] = "create tables2<3rco4>k";
      stringArray0[4] = "/*";
      stringArray0[5] = "/*";
      stringArray0[6] = "rD(@[)\"61B(=j~t$Po";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      stringArray0[7] = "rD(@[)\"61B(=j~t$Po";
      SQLUtil.join("rD(@[)\"61B(=j~t$Po", "/*", stringArray0, "inne", "update", stringArray0);
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "/*");
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "z0#b6&RGBr ";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "z0#b6&RGBr ";
      stringArray0[1] = "z0#b6&RGBr ";
      stringArray0[2] = "z0#b6&RGBr ";
      stringArray0[3] = "z0#b6&RGBr ";
      stringArray0[4] = "z0#b6&RGBr ";
      stringArray0[5] = "z0#b6&RGBr ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "z0#b6&RGBr ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append('S');
      String string1 = "org.apache.derby.impl.store.raw.data.RecordId";
      StringBuilder stringBuilder2 = new StringBuilder("org.apache.derby.impl.store.raw.data.RecordId");
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) stringBuilder2, (-804), (-804));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -804, end -804, s.length() 45
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", true, " NULL", " NULL");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append("KE9I6)z-c");
      SQLUtil.addRequiredCondition(" NULL", stringBuilder2);
      assertEquals("CONSTRAINT \" NULL\" KE9I6)z-c and  NULL", stringBuilder2.toString());
      assertEquals("CONSTRAINT \" NULL\" KE9I6)z-c and  NULL", stringBuilder0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = SQLUtil.normalize("I74(2(KJ/k7/QKD1Wd", true);
      assertEquals("I74 (2 (KJ / k7 / QKD1Wd", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u0001w");
      SQLUtil.addOptionalCondition("\u0001w", stringBuilder0);
      assertEquals("\u0001w or \u0001w", stringBuilder0.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("deletecreate materialized viewcheck");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      String string0 = "bJETEp^}Q;+(";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("bJETEp^}Q;+(", (DBTable) null, 222, "bJETEp^}Q;+(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: bJETEp^}Q;+(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "deletecreate materialized viewcheck";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("deletecreate materialized viewcheck", defaultDBTable0, 1051, "s[tNull(St6ing,int)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"St6ing\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = SQLUtil.normalize("Cannot find parameter with the specified position.", true);
      assertEquals("Cannot find parameter with the specified position.", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CONSTRAINT ", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(65, "CONSTRAINT ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CONSTRAINT ", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CONSTRAINT ", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "k_*(d");
      String string0 = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.normalize("alter table", true);
      assertEquals("alter table", string0);
      
      Boolean boolean0 = new Boolean("42Z54.U");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(" or ");
      DBSchema dBSchema0 = new DBSchema(" or ");
      DBSchema dBSchema1 = new DBSchema("alter table");
      dBSchema1.getTriggers();
      defaultDBTable0.setSchema(dBSchema1);
      dBSchema0.getTable("*60:@m:(AG<");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("No function outputs were registered.", (DBTable) null, (DBDataType) null);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, (-1279), "alter table");
      defaultDBColumn0.getNotNullConstraint();
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string1);
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string2 = SQLUtil.leftJoin("Ez|nCQ3fZ]LUT'O", stringArray0, "hP,Vm/", " or ", stringArray0);
      assertEquals("left join hP,Vm/ as  or  on Ez|nCQ3fZ]LUT'O.null =  or .null", string2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1, "inserte#go*nu/%f'ov7| -kw");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inserte#go*nu/%f'ov7| -kw", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setSize(integer0);
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("INSERTE#GO*NU/%F'OV7| -KW(2,2)", stringBuilder0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "2JAsF~!(E";
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = stringArray0[0];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("derby", stringArray0, " NOT NULL", " NOT NULL", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = SQLUtil.normalize("~;`8?2O1,&/B\"", false);
      assertEquals("~ ; ` 8 ? 2O1, & / B \"\"", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create materialized viewselect into", "H98k~Ooo,I}G", versionNumber0);
      String string0 = SQLUtil.typeAndName(defaultDatabase0);
      assertEquals("database create materialized viewselect into", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter table");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter table";
      stringArray0[1] = "alter table";
      stringArray0[2] = "alter table";
      stringArray0[4] = "alter table";
      stringArray0[5] = "alter table";
      stringArray0[8] = "alter table";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter table", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (alter table, alter table, alter table, , alter table, alter table, , , alter table)", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[11];
      String[] stringArray1 = new String[7];
      stringArray1[1] = "STORE";
      stringArray1[2] = "STORE";
      stringArray1[3] = "STORE";
      stringArray1[4] = "STORE";
      stringArray1[5] = "STORE";
      stringArray1[6] = "STORE";
      // Undeclared exception!
      try { 
        SQLUtil.join("STORE", "STORE", stringArray0, "STORE", "STORE", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nG+Zo$";
      String[] stringArray1 = new String[2];
      stringArray1[1] = "nG+Zo$";
      SQLUtil.join("nG+Zo$", "nG+Zo$", stringArray0, "nG+Zo$", "nG+Zo$", stringArray1);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertEquals(0, simpleResultSet0.getRow());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&K&Q");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1#=\"P>;Q\"E s", false, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = SQLUtil.normalize("pmst[]g})", false);
      assertEquals("pmst [ ] g })", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.h2.table.FunctionTable", true);
      assertEquals("org.h2.table.FunctionTable", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = SQLUtil.normalize("`.,E<Sik4$NlX", false);
      assertEquals("`., E < Sik4 $ NlX", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.8120939218445867
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLUtil.normalize("/#", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[10];
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[5];
      stringArray0[3] = "o^K";
      stringArray0[4] = "3e7+$ca+&QBJ=apAZ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "o^K", false, stringArray0);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("org.postgresql.jdbc4.Jdbc4PreparedStatement");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "rD(@[)\"61B(=j~t$Po";
      stringArray0[2] = "rD(@[)\"61B(=j~t$Po";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., .rD(@[)\"61B(=j~t$Po, .rD(@[)\"61B(=j~t$Po, ., .", string0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("., .rD(@[)\"61B(=j~t$Po, .rD(@[)\"61B(=j~t$Po, ., .", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, rD(@[)\"61B(=j~t$Po, rD(@[)\"61B(=j~t$Po, , ) REFERENCES (, rD(@[)\"61B(=j~t$Po, rD(@[)\"61B(=j~t$Po, , )", string1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "/Fn/M";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ecz,4j;Z", false, "ecz,4j;Z", "update");
      StringBuilder stringBuilder0 = new StringBuilder(1268);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer("/Fn/M");
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(1268, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1268
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.9129104280821568
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = SQLUtil.normalize("LoF*+B(HJ-8", false);
      assertEquals("Lo  F * + B (HJ - 8", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "LoF*+B(HJ-8";
      stringArray0[1] = "^HPej{#e#`*nS";
      stringArray0[2] = "Lo  F * + B (HJ - 8";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (LoF*+B(HJ-8, ^HPej{#e#`*nS, Lo  F * + B (HJ - 8) REFERENCES null(LoF*+B(HJ-8, ^HPej{#e#`*nS, Lo  F * + B (HJ - 8)", string1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("getBlob(String)", ".", ".");
      assertEquals("getBlob(String)", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("yVlV7;_<nA@");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML(" as ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("bbRKF*|_sV`/x#C=X");
      assertNull(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectselectpolcq)vqweuye wvz");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop indexsetcharactestream(long)");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter session", (String[]) null, "E", "E", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("drop indexcionstraint");
      SQLUtil.addRequiredCondition("drop indexcionstraint", stringBuilder0);
      assertEquals("drop indexcionstraint and drop indexcionstraint", stringBuilder0.toString());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("HfyM.{!pqrZh", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("wA=$<AfxFqh!TPmhF", stringBuilder0);
      assertEquals("wA=$<AfxFqh!TPmhF", stringBuilder0.toString());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[11];
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("create unique index", "create unique index", "create unique index");
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("create unique index", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(";", (String[]) null, (String) null, "I", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = " NULL";
      Boolean boolean0 = new Boolean(" NULL");
      TableContainer tableContainer0 = new TableContainer(" NULL");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, (boolean) boolean0, "STORE", " NULL");
      TableContainer tableContainer1 = new TableContainer(" NULL");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.replace(335544346, (-2), (String) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("B|cPNxnm", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("STORE", "STORE", (String[]) null, "drop Undexs=Oet", "STORE", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.join((String) null, (String) null, stringArray0, ".RGqhpBhmv7", ".RGqhpBhmv7", stringArray0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertEquals(0, simpleResultSet0.getRow());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderValue(stringBuilder0);
      Random.setNextRandom(41);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-227), "\"?h!UM7_s.n&bj;]OE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"?h!UM7_s.n&bj;]OE", (DBTable) null, dBDataType0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PlcQ)vQwEUyEwvz", (DBTable) null, (DBDataType) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("^f:h~@nL1/+");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("selectpolcq)vqweuye wvz");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "f7zv7e_Y@]I.e-$WFxE";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f7zv7e_Y@]I.e-$WFxE";
      stringArray0[1] = "f7zv7e_Y@]I.e-$WFxE";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "DatazileCache.closef) : flags", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "f7zv7e_Y@]I.e-$WFxE");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append(0L);
      int int0 = (-288);
      int int1 = 3289;
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-288), (CharSequence) "f7zv7e_Y@]I.e-$WFxE", (-288), 3289);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset -288
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[11];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "C006", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT C006 ", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULL");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", false, " NULL", " NULL");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \" NULL\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[3] = " NULL";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", false, defaultDBTable0, " NULL");
      StringBuilder stringBuilder0 = new StringBuilder("8{V6vVi`JER;8@9");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("CHECK ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("callsetcharactestream(long)", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.937566794583933
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.normalize("DATE", false);
      assertEquals("DATE", string0);
      
      String string1 = SQLUtil.normalize("mn=/'C{v|7", false);
      assertEquals("mn = / 'C{v|7'", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("mn=/'C{v|7");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "DATE";
      stringArray0[1] = "Ih";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "inner", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT inner UNIQUE (DATE, Ih)", string2);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.9290023821051452
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SQLUtil.normalize("LoF*+B(HJ-8", false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LoF*+B(HJ-8";
      stringArray0[1] = "LoF*+B(HJ-8";
      stringArray0[2] = "Lo  F * + B (HJ - 8";
      stringArray0[3] = "Lo  F * + B (HJ - 8";
      stringArray0[4] = "Lo  F * + B (HJ - 8";
      stringArray0[5] = "LoF*+B(HJ-8";
      stringArray0[6] = "Lo  F * + B (HJ - 8";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.innerJoin("Lo  F * + B (HJ - 8", stringArray0, "@", "org.h2.table.RangeTable", stringArray0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("Lo  F * + B (HJ - 8", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Lo  F * + B (HJ - 8", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("KEY_SEQ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("q>");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[12];
      Boolean boolean0 = SQLUtil.mutatesStructure("renametekm'*a");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LoF*+B(HJ-8");
      Object object0 = new Object();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = SQLUtil.renderValue("LoF*+B(HJ-8");
      assertEquals("'LoF*+B(HJ-8'", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
