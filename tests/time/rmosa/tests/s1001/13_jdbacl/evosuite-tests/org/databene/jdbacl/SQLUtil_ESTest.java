/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 17:31:17 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = " join ";
      stringArray0[3] = "truncateexecutesefect'' i?to";
      stringArray0[4] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(" join ");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) dBUniqueConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("UNIQUE (, ,  join , truncateexecutesefect'' i?to, )", stringBuilder0.toString());
      
      SQLUtil.renderColumnNames(stringArray0);
      Boolean boolean0 = SQLUtil.mutatesStructure("(, ,  join , truncateexecutesefect'' i?to, )");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S-_e\"?V`J&");
      SQLUtil.isQuery("S-_e\"?V`J&");
      SQLUtil.leftJoin("S-_e\"?V`J&", stringArray0, "S-_e\"?V`J&", "callu", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DBDataType dBDataType0 = DBDataType.getInstance((-342), "[+cW");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("callu", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(".or\"F82Z", defaultDBTable0, 1302, ".or\"F82Z");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("cWwja^{36Hs?O", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("truncate", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("S-_e\"?V`J&", defaultDBTable0, 2584, "delete5,{tizp)oauhkcx");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("callu");
      dBColumnArray0[5] = dBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".or\"F82Z");
      Locale locale0 = Locale.forLanguageTag("L.0}U_qx5O");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "S-_e\"?V`J&";
      objectArray0[1] = (Object) "[+cW";
      objectArray0[2] = (Object) defaultDBColumn0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = objectArray0[0];
      objectArray0[5] = (Object) "delete5,{tizp)oauhkcx";
      objectArray0[6] = (Object) defaultDBColumn3;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "[+cW", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals("S-_e\"?V`J&", defaultDBTable0.getName());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Object object0 = new Object();
      Object object1 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("%(&L^pb/jpO_b_UO4", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      FileMonitor fileMonitor0 = new FileMonitor();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2, "Im_s ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("UA,^KQPjNK7", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      fileMonitor0.getLocale((Object) null);
      PrintWriter printWriter0 = mockPrintWriter0.format((Locale) null, "UA,^KQPjNK7", (Object[]) stringArray0);
      mockFileOutputStream0.write(2);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-590369143));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{uB?g.FS-hN`@&l8o~";
      stringArray0[1] = "{uB?g.FS-hN`@&l8o~";
      stringArray0[2] = "{uB?g.FS-hN`@&l8o~";
      stringArray0[3] = "{uB?g.FS-hN`@&l8o~";
      stringArray0[4] = "/*";
      stringArray0[5] = "{uB?g.FS-hN`@&l8o~";
      stringArray0[6] = "{uB?g.FS-hN`@&l8o~";
      stringArray0[7] = "{uB?g.FS-hN`@&l8o~";
      stringArray0[8] = "{uB?g.FS-hN`@&l8o~";
      SQLUtil.innerJoin("{uB?g.FS-hN`@&l8o~", stringArray0, "{uB?g.FS-hN`@&l8o~", "{uB?g.FS-hN`@&l8o~", stringArray0);
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLUtil.normalize("*/", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*/";
      stringArray0[1] = "create u";
      stringArray0[2] = "execute";
      stringArray0[3] = "create u";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " as ", true, stringArray0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(" as ");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "execute");
      StringBuilder stringBuilder1 = stringBuilder0.append(" as ");
      assertEquals("execute as ", stringBuilder1.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1, "Cannot load pPB mapping.");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Cannot load pPB mapping.", (DBTable) null, dBDataType0);
      defaultDBColumn0.setDefaultValue("QL \"D#");
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("+ph80I8%nI", (DBTable) null, dBDataType0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("KE!Pvjsm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3, "crAate table");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X-{wiZ,CFId", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      columnDescriptorList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
      assertEquals("X-{wiZ,CFId", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("~#fq)TXKid<]/*0n");
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SQLUtil.normalize("LS/*%Ed", false);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      // Undeclared exception!
      SQLUtil.isProcedureCall("LS /* % Ed");
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      SQLUtil.removeComments("");
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance((-17), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "//";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(//, , , , , )", string0);
      
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("  NULL", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("*/", stringBuilder0);
      DBDataType dBDataType0 = DBDataType.getInstance(854, "l!");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", (DBTable) null, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("*/L!", stringBuilder0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("select ", stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intodefault");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("t>ae Rpl%Ysq++");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "t>ae Rpl%Ysq++");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "t>ae Rpl%Ysq++";
      stringArray0[1] = "t>ae Rpl%Ysq++";
      stringArray0[2] = "t>ae Rpl%Ysq++";
      stringArray0[3] = "t>ae Rpl%Ysq++";
      stringArray0[4] = "t>ae Rpl%Ysq++";
      stringArray0[5] = "U";
      stringArray0[6] = "t>ae Rpl%Ysq++";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("U", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "U");
      stringBuilder0.append(true);
      // Undeclared exception!
      try { 
        stringBuilder0.delete(1583, (-506));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraints(false);
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "The maximum field size must be a value greater than or equal to 0.", false, stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "The maximum field size must be a value greater than or equal to 0.";
      stringArray1[1] = "The maximum field size must be a value greater than or equal to 0.";
      stringArray1[2] = "The maximum field size must be a value greater than or equal to 0.";
      stringArray1[3] = "The maximum field size must be a value greater than or equal to 0.";
      stringArray1[4] = "The maximum field size must be a value greater than or equal to 0.";
      stringArray1[5] = "The maximum field size must be a value greater than or equal to 0.";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("The maximum field size must be a value greater than or equal to 0.", stringArray1, "updateByte(", (String) null, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join("alte^ table", "alte^ table", stringArray0, "alte^ table", "alte^ table", stringArray0);
      assertEquals("alte^ table join alte^ table as alte^ table on alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alte^ table join alte^ table as alte^ table on alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null and alte^ table.null = alte^ table.null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "MODE_TABLE";
      String string1 = null;
      boolean boolean0 = false;
      String string2 = null;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "MODE_TABLE");
      StringBuilder stringBuilder0 = new StringBuilder("D009");
      StringBuilder stringBuilder1 = stringBuilder0.append('i');
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition((String) null, stringBuilder1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2, nameSpec0);
      stringBuilder3.append("MismatchedTokenException(");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = SQLUtil.mutatesStructure("execannot lad ppb maping.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLUtil.isProcedureCall("ORGANIZATION");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ORGANIZATION";
      stringArray0[1] = "ORGANIZATION";
      stringArray0[2] = " NOT NULL";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "ORGANIZATION";
      stringArray0[4] = "ORGANIZATION";
      stringArray0[5] = "ORGANIZATION";
      stringArray0[6] = "ORGANIZATION";
      stringArray0[7] = "ORGANIZATION";
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ConstraintDescriptorList constraintDescriptorList1 = dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      constraintDescriptorList1.add((Object) "ORGANIZATION");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "Y{(MBm*o1";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Y{(MBm*o1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Y{(MBm*o1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DN~F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop materialized view08<j-i8l6>nry");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VARCHAR2", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("drop materialized view08<j-i8l6>nry.VARCHAR2", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "-m$,j.-X/+\"$");
      SQLUtil.addRequiredCondition("-m$,j.-X/+\"$", stringBuilder0);
      assertEquals("-m$,j.-X/+\"$ and -m$,j.-X/+\"$", stringBuilder0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter materialized viewl(c]/vng";
      stringArray0[1] = "alter materialized viewl(c]/vng";
      stringArray0[2] = "alter materialized viewl(c]/vng";
      stringArray0[5] = "alter materialized viewl(c]/vng";
      stringArray0[6] = "alter materialized viewl(c]/vng";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter materialized viewl(c]/vng", true, stringArray0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("alter materialized viewl(c]/vng");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "alter materialized viewl(c]/vng");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("alter materialized viewl(c]/vngCONSTRAINT \"alter materialized viewl(c]/vng\" ", stringBuilder1.toString());
      assertEquals("alter materialized viewl(c]/vngCONSTRAINT \"alter materialized viewl(c]/vng\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Object object0 = new Object();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("#{(.&> A|kDg {H\"o#");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " <=BE AuthenticationReqPassword", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("create materialized viewcannot load ppb mapping.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = " DEFAULT ";
      stringArray0[2] = " DEFAULT ";
      stringArray0[3] = " DEFAULT ";
      stringArray0[4] = " DEFAULT ";
      stringArray0[5] = " DEFAULT ";
      stringArray0[6] = " DEFAULT ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " DEFAULT ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ( DEFAULT ,  DEFAULT ,  DEFAULT ,  DEFAULT ,  DEFAULT ,  DEFAULT ,  DEFAULT )", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "9`i(M%gg4+*xvD){l-";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("9`i(M%gg4+*xvD){l-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"M%gg4+*xvD\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int int0 = 65;
      DBTable dBTable0 = null;
      int int1 = (-1068);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (-1068), "create table()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLUtil.normalize("\"]>=H", true);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      assertEquals(0, vector0.size());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F$|:6uk=zeM m");
      String[] stringArray0 = null;
      String[] stringArray1 = new String[6];
      stringArray1[2] = "create unique index";
      stringArray1[3] = "F$|:6uk=zeM m";
      stringArray1[4] = "F$|:6uk=zeM m";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("create unique index", stringArray1, "create unique index", "F$|:6uk=zeM m", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "08<J-I8l6>nry";
      stringArray0[2] = "08<J-I8l6>nry";
      stringArray0[3] = null;
      String[] stringArray1 = new String[9];
      stringArray1[0] = null;
      stringArray1[1] = "drop table";
      stringArray1[2] = null;
      stringArray1[3] = null;
      stringArray1[4] = "08<J-I8l6>nry";
      stringArray1[5] = "";
      stringArray1[6] = "";
      stringArray1[7] = "";
      stringArray1[8] = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, stringArray1, "drop table", stringArray1[3], stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter materialized viewvqfdi,gxcvze-xyh);%", true);
      assertEquals("alter materialized viewvqfdi, gxcvze - xyh) ; %", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("F|~6k=zeM m");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.append((CharSequence) "F|~6k=zeM m");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert18>%f");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "create u";
      stringArray0[1] = "insert18>%f";
      stringArray0[2] = "create u";
      stringArray0[3] = "create u";
      stringArray0[4] = "create u";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create u", true, stringArray0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("]?Lb,qzU!JhCUz");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2539, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "", 2539);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread0, 2539, 2539, timeUnit0);
      stringBuilder0.append((Object) scheduledFuture0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      String string0 = SQLUtil.substituteMarkers("", "create u", scheduledThreadPoolExecutor0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("callorg.apache.derby.impl.sql.genericstorablepreparedstatement");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = " ADD ";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(" ADD ", (String[]) null, " ADD ", " ADD ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("selectsefect'' i?to", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDDL("91Y#Rq'R");
      DBDataType.getInstance(4176, "y#ko");
      SQLUtil.isProcedureCall("91Y#Rq'R");
      Character character0 = new Character('y');
      Character character1 = new Character('y');
      SQLUtil.renderValue("TYPE_NAME");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.isProcedureCall("ALTER TABLE ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "TN`g,K;Hv<";
      stringArray0[2] = "z$";
      stringArray0[3] = "ALTER TABLE ";
      stringArray0[4] = "'TYPE_NAME'";
      stringArray0[5] = "ALTER TABLE ";
      SQLUtil.renderValue(defaultDBTable0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String string0 = SQLUtil.removeComments("select into9jddd.xr&uungov");
      assertEquals("select into9jddd.xr&uungov", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execute", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      boolean boolean0 = false;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("MfHE_q mriJ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.setDoc("&^m+1k");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("FOREIGN KEY () REFERENCES null()");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      boolean boolean0 = SQLUtil.isDML("");
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("", string0);
      
      boolean boolean1 = SQLUtil.isDDL("SEQUENCE ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("selectinto", "selectinto", (String[]) null, "selectinto", "selectinto", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("^r]+>U&,Q&flMpp ", true);
      assertEquals("^ r ] + > U &, Q & flMpp", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("select", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = SQLUtil.substituteMarkers("k", "k", "qxz9Z2yfr>hF]z(x}8");
      assertEquals("'qxz9Z2yfr>hF]z(x}8'", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "select into";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = (-1823);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      stringArray0[2] = "hG3lh<";
      stringArray0[3] = "select into";
      stringArray0[4] = "select into";
      stringArray0[5] = "select into";
      stringArray0[6] = "select into";
      stringArray0[7] = "select into";
      stringArray0[8] = "select into";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select into", false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1823), (CharSequence) "select into");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1823
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLUtil.normalize("-(|JlS(<Pv<W", false);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      assertEquals(0, dataDictionaryImpl0.getCollationTypeOfSystemSchemas());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ZERO;
      DBDataType dBDataType0 = DBDataType.getInstance(34, "alter table");
      DBSchema dBSchema0 = new DBSchema("");
      dBSchema0.getTable("alter table");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("G;X%rM|y#B", (DBTable) null, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.removeComments("alter table");
      SQLUtil.isDDL("rename");
      dBDataType0.isAlpha();
      Character character0 = new Character('x');
      SQLUtil.renderValue(dBSequence0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, ", AR ~", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O\"v");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "insert";
      stringArray0[1] = "insert";
      stringArray0[2] = "O\"v";
      stringArray0[3] = "o77$mj!X*6)";
      stringArray0[4] = "O\"v";
      stringArray0[5] = "YUH[uM,HOcAr1K0[";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "o77$mj!X*6)", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("insert", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(3110);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", dBTable0.getObjectType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      Character.lowSurrogate(39);
      SQLUtil.renderValue("calltn`gr,k;hv<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("08<J-I8l6>nry");
      tableContainer0.setDoc("08<J-I8l6>nry");
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("08<J-I8l6>nry", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("MfHEhq mriJ");
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("0C~Q9}7'Ek@");
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("B#M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'B#M' not found in table '0C~Q9}7'Ek@'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Canotload pPB mapping.");
      assertNull(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectsefect'' i?to");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter indexikmsh");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select into");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S-_e\"?V`J&");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = "The maximum field size must be a value greater than or equal to 0.";
      String[] stringArray1 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.join("The maximum field size must be a value greater than or equal to 0.", "The maximum field size must be a value greater than or equal to 0.", stringArray0, "The maximum field size must be a value greater than or equal to 0.", "The maximum field size must be a value greater than or equal to 0.", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.join("create table ", "alte^ table", stringArray1, "create table ", "alte^ table", stringArray0);
      assertEquals("create table  join create table  as alte^ table on ", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Kr#";
      stringArray0[1] = "Kr#";
      stringArray0[2] = "Kr#";
      stringArray0[3] = "Kr#";
      stringArray0[4] = "Kr#";
      stringArray0[5] = "Kr#";
      String string0 = SQLUtil.leftJoin("fillResultSet", stringArray0, "@6wvc", "alter tableu@\"vytb\b*ug", stringArray0);
      assertEquals("left join @6wvc as alter tableu@\"vytb\b*ug on fillResultSet.Kr# = alter tableu@\"vytb\b*ug.Kr# and fillResultSet.Kr# = alter tableu@\"vytb\b*ug.Kr# and fillResultSet.Kr# = alter tableu@\"vytb\b*ug.Kr# and fillResultSet.Kr# = alter tableu@\"vytb\b*ug.Kr# and fillResultSet.Kr# = alter tableu@\"vytb\b*ug.Kr# and fillResultSet.Kr# = alter tableu@\"vytb\b*ug.Kr# and fillResultSet.null = alter tableu@\"vytb\b*ug.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string1 = dBPrimaryKeyConstraint0.toString();
      assertEquals("PRIMARY KEY (Kr#, Kr#, Kr#, Kr#, Kr#, Kr#, )", string1);
      
      String string2 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string2);
      
      SQLUtil.typeAndName(defaultDBTable0);
      String string3 = SQLUtil.join("table null", "wrong schema", stringArray0, "Kr#", ".", stringArray0);
      assertEquals("table null join Kr# as . on wrong schema.Kr# = ..Kr# and wrong schema.Kr# = ..Kr# and wrong schema.Kr# = ..Kr# and wrong schema.Kr# = ..Kr# and wrong schema.Kr# = ..Kr# and wrong schema.Kr# = ..Kr# and wrong schema.null = ..null", string3);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.databene.jdbacl.sql.parser.SQLParser$primary_return", false);
      assertEquals("org.databene.jdbacl.sql.parser.SQLParser $ primary_return", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.7786655906578275
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SQLUtil.normalize("Wsh**bgu", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3033095367464425
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize(" -5|_PmRbuX", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" -5|_PmRbuX");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "- 5 | _PmRbu  X";
      stringArray0[2] = "create u";
      stringArray0[3] = "create u";
      stringArray0[4] = "- 5 | _PmRbu  X";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create u", true, stringArray0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("- 5 | _PmRbu  X");
      stringBuilder0.append((Object) jMXPrincipal0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("JMXPrincipal:  - 5 | _PmRbu  XCONSTRAINT \"create u\" ", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, - 5 | _PmRbu  X, create u, create u, - 5 | _PmRbu  X)", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName(":R@G^a5=.!P8/", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      System.setCurrentTimeMillis(2158L);
      DBSchema dBSchema0 = new DBSchema("24PK[g37V2;Pt>KUU");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("24PK[g37V2;Pt>KUU", dBSchema0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.4642567260559776
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("Impsh", "UA^KQPjNK7", stringArray0, "Impsh", "The maximum field size must be a value greater than or equal to 0.", stringArray0);
      assertEquals("Impsh join Impsh as The maximum field size must be a value greater than or equal to 0. on UA^KQPjNK7.null = The maximum field size must be a value greater than or equal to 0..null and UA^KQPjNK7.null = The maximum field size must be a value greater than or equal to 0..null and UA^KQPjNK7.null = The maximum field size must be a value greater than or equal to 0..null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Impsh join Impsh as The maximum field size must be a value greater than or equal to 0. on UA^KQPjNK7.null = The maximum field size must be a value greater than or equal to 0..null and UA^KQPjNK7.null = The maximum field size must be a value greater than or equal to 0..null and UA^KQPjNK7.null = The maximum field size must be a value greater than or equal to 0..null");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create materialized vi", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create materialized vi\" UNIQUE (, , )", string1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = SQLUtil.normalize("v~IwN45|9l'wpmv", true);
      assertEquals("v ~ IwN45 | 9l 'wpmv'", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("W:H;x9", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      String string0 = "&^m+k";
      dBForeignKeyConstraint1.setDoc("&^m+k");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBTable dBTable0 = null;
      String string0 = "a}e";
      DBDataType.getInstance(1424, "a}e");
      String string1 = "alter tablecx])cuo[w=^y+}l";
      DBDataType dBDataType0 = DBDataType.getInstance(1424, "a}e");
      Integer integer0 = new Integer(2252);
      Integer.compareUnsigned(90, 339);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablecx])cuo[w=^y+}l", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn0.toString();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("alter tablecx])cuo[w=^y+}l");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(2537, "drop tablecraate table");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop tablecraate table", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DROP TABLECRAATE TABLE(1)", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "(,el1h", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getActiveConstraintDescriptors((ConstraintDescriptorList) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sefect'' i?to");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "sefect'' i?to", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"sefect'' i?to\" ", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = "Cannot load pPB mapping.";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6mZp");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6mZp";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(264);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 264
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S-_e\"?V`J&");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "S-_e\"?V`J&", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT S-_e\"?V`J& ", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnListWithTableName(":R@G^a5=.!P8/", stringArray0);
      assertEquals(":R@G^a5=.!P8/.null, :R@G^a5=.!P8/.null, :R@G^a5=.!P8/.null", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("W:H;x9", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.setDoc("&^m+1k");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("&^m+1k", "&^m+1k");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // &^m+1k
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F$|:6uk=zeM m");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F$|:6uk=zeM m", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      SQLUtil.typeAndName(dBSequence0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("sequence ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("Max Clob input character length exceeded: ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("*/");
      SQLUtil.addOptionalCondition("*/", stringBuilder0);
      assertEquals("*/ or */", stringBuilder0.toString());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("prepare(");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-(|JlS(<Pv<W";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("-(|JlS(<Pv<W = '-(|JlS(<Pv<W'", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLUtil.normalize("LS/%Ed", false);
      try { 
        Integer.decode("LS/%Ed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"LS/%Ed\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition(" ADD ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "08<J-I8l6>nry";
      stringArray0[2] = "08<J-I8l6>nry";
      String string0 = SQLUtil.innerJoin(stringArray0[0], stringArray0, "", (String) null, stringArray0);
      assertEquals(" as null on null.null = null.null and null.08<J-I8l6>nry = null.08<J-I8l6>nry and null.08<J-I8l6>nry = null.08<J-I8l6>nry", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\u0001\u01A0";
      stringArray0[1] = "v<Bq*8y;Re@;tJx";
      stringArray0[2] = "\u0001\u01A0";
      String string0 = SQLUtil.innerJoin("\u0001\u01A0", stringArray0, "\u0001\u01A0", "left joi", stringArray0);
      assertEquals("\u0001\u01A0 as left joi on \u0001\u01A0.\u0001\u01A0 = left joi.\u0001\u01A0 and \u0001\u01A0.v<Bq*8y;Re@;tJx = left joi.v<Bq*8y;Re@;tJx and \u0001\u01A0.\u0001\u01A0 = left joi.\u0001\u01A0", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Cannot load pPB mapping.";
      stringArray0[1] = "alte^ table";
      stringArray0[2] = "inner";
      String string0 = SQLUtil.join("inner", "Cannot load pPB mapping.", stringArray0, "BLOB", "inner", stringArray0);
      assertEquals("BLOB as inner on Cannot load pPB mapping..Cannot load pPB mapping. = inner.Cannot load pPB mapping. and Cannot load pPB mapping..alte^ table = inner.alte^ table and Cannot load pPB mapping..inner = inner.inner", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("*/", stringBuilder0);
      assertEquals("*/", stringBuilder0.toString());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("alter materialized view", "alter materialized view", (String[]) null, "alter materialized view", "Premature end of input stream, expected {0} bytes, but only read {1}.", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.normalize("08<J-I8l6>nry", false);
      assertEquals("08 < J - I8l6 > nry", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y#kO;eY;Er!C";
      stringArray0[1] = "y#kO;eY;Er!C";
      stringArray0[2] = "y#kO;eY;Er!C";
      stringArray0[3] = "y#kO;eY;Er!C";
      stringArray0[4] = "y#kO;eY;Er!C";
      stringArray0[5] = "y#kO;eY;Er!C";
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      Character character0 = new Character('f');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'f'", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S-_e\"?V`J&");
      DBDataType dBDataType0 = DBDataType.getInstance(10000000, "S-_e\"?V`J&");
      Integer integer0 = new Integer(10000000);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncate", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.toString();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("truncate");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Kr#";
      stringArray0[1] = "Kr#";
      stringArray0[2] = "Kr#";
      stringArray0[3] = "Kr#";
      stringArray0[4] = "Kr#";
      stringArray0[5] = "Kr#";
      stringArray0[6] = "Kr#";
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.normalize("call", false);
      SQLUtil.join("Kr#", "call", stringArray0, "call", "Kr#", stringArray0);
      SQLUtil.isDML("Kr#");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(linkedList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Kr# join call as Kr# on call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr#", "Kr#", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("renamemdhr/vu|f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'Kr# join call as Kr# on call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr# and call.Kr# = Kr#.Kr#'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("&^m+1k");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("create unique indexv@m");
      dBCatalog0.getTable("create unique indexv@m", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("'vTyu-?{");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create materialized view");
      assertFalse(boolean0);
  }
}
