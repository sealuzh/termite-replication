/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 17:17:03 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(1054);
      JSONObject jSONObject1 = new JSONObject(integer0);
      Long long0 = new Long(1L);
      Long.compare(709L, 1L);
      JSONObject jSONObject2 = jSONObject0.putOpt("getdoubleToString", long0);
      jSONObject2.getLong("getdoubleToString");
      JSONObject.valueToString("getdoubleToString", 1054, (-1648));
      JSONTokener jSONTokener0 = new JSONTokener("7;15Q!kDUyDd;c6E3");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 7;15Q!kDUyDd;c6E3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 62, 25);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.099633990865473
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double(4889.1277888956);
      Double.isFinite(4889.1277888956);
      Double.isFinite((-2385.2));
      Double.isFinite((-2385.2));
      JSONObject.valueToString(double0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Double@0000000001", (Map) null);
      jSONObject0.put("_|o&Y7l*#I4m,;", 0L);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)61);
      linkedList0.addLast(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.getNames(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put((Integer) null, boolean0);
      Integer integer0 = new Integer((short)26);
      hashMap0.put(integer0, (Boolean) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      StringWriter stringWriter0 = new StringWriter(65);
      stringWriter0.flush();
      // Undeclared exception!
      try { 
        jSONObject0.toString(1007);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("getdecode", (Collection) null);
      try { 
        jSONObject1.put((String) null, 88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0983268013229894
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      String string1 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string1);
      
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (-871));
      JSONObject jSONObject2 = jSONObject1.put("to", true);
      jSONObject2.put("isparseByte", (Object) "");
      int int0 = jSONObject0.optInt("uO8");
      assertEquals(0, int0);
      
      long long0 = jSONObject0.optLong("\"\"");
      assertEquals((-871L), long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject.valueToString(linkedList0);
      UnaryOperator.identity();
      jSONObject0.optBoolean("[]");
      JSONObject jSONObject1 = jSONObject0.put("[]", 2587L);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("]gSS3&jb;?&", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("]gSS3&jb;?&", 46);
      jSONObject1.remove("] is not a JSONArray.");
      long long0 = jSONObject0.optLong("]gSS3&jb;?&");
      assertEquals(46L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Byte byte0 = new Byte((byte) (-16));
      hashMap0.put(byte0, "iscompare");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("gethashCode");
      UnaryOperator.identity();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Byte byte0 = new Byte((byte)17);
      Byte byte1 = new Byte((byte)17);
      Byte byte2 = new Byte((byte)17);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("YA17TyVBSFQ688X", byte0);
      String string0 = jSONObject1.toString((int) (byte)45, (int) (byte)17);
      String string1 = jSONObject0.optString("YA17TyVBSFQ688X");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte.toUnsignedInt((byte)63);
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.putOpt("false", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends Integer>) function3);
      hashMap0.computeIfAbsent((Object) null, function2);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.doubleToString(1497.7931081694742);
      assertEquals("1497.7931081694742", string0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.optJSONArray((String) null);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.put("hQ{{A*^lm", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2859.843F);
      JSONObject jSONObject1 = jSONObject0.putOpt("getsignum", float0);
      try { 
        jSONObject1.getJSONArray("getsignum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsignum\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Jp");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("Jp", stringArray0);
      jSONObject0.optJSONObject("Jp");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Byte byte0 = new Byte((byte)17);
      byte byte1 = (byte) (-104);
      Byte byte2 = new Byte((byte) (-104));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("j6v~%SEH%p7P9 5E_", byte0);
      Integer integer0 = new Integer((byte) (-4));
      jSONObject0.getInt("j6v~%SEH%p7P9 5E_");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Byte byte0 = new Byte((byte)12);
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)61);
      Byte byte2 = new Byte((byte)12);
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((double) 61);
      JSONObject jSONObject1 = jSONObject0.putOpt("j6v~%SEH%p7P9 5E_", float0);
      Integer integer0 = new Integer(61);
      jSONObject0.getInt("j6v~%SEH%p7P9 5E_");
      jSONObject0.optInt("j6v~%SEH%p7P9 5E_");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((-1996L));
      Float float0 = new Float((float) (-1996L));
      JSONObject.valueToString(linkedList0, (-3338), 47);
      JSONTokener jSONTokener0 = new JSONTokener(".T!iLzjOh5pK");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .T!iLzjOh5pK
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Integer integer0 = new Integer(948);
      JSONObject jSONObject1 = jSONObject0.putOpt("", integer0);
      jSONObject1.getString("");
      Float float0 = new Float(1116.0F);
      JSONTokener jSONTokener0 = new JSONTokener("Z6H te1scBjxS<l2CD");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Z6H te1scBjxS<l2CD
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("in", (-1456.84987821));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject2.put("ER=1zV3UKdH1Z.D,-I", (Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      Object object0 = jSONObject3.get("in");
      assertEquals((-1456.84987821), object0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      Byte byte1 = new Byte((byte)13);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("YA17TyVBSFQ688X", byte1);
      jSONObject0.toString();
      boolean boolean0 = jSONObject1.has("YA17TyVBSFQ688X");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Byte byte0 = new Byte((byte)17);
      Byte byte1 = new Byte((byte) (-46));
      Byte byte2 = new Byte((byte)17);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "YA17TyVBSFQ688X";
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 10, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(36);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)18);
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) (byte)0);
      jSONObject0.putOpt("YA17TyVBSFQ688X", byte1);
      jSONObject0.names();
      Double double0 = new Double((byte)18);
      Integer integer0 = new Integer((-2122));
      try { 
        jSONObject0.append("YA17TyVBSFQ688X", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[YA17TyVBSFQ688X] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Byte byte0 = new Byte((byte)45);
      Byte byte1 = new Byte((byte)45);
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.putOpt("YA17TyVBSFQ688X", float0);
      jSONObject0.names();
      Double double0 = new Double((-4880.0));
      try { 
        jSONObject0.append("YA17TyVBSFQ688X", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[YA17TyVBSFQ688X] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5962199441705018
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte) (-4));
      Byte byte2 = new Byte((byte) (-4));
      Byte byte3 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject((Object) ">}+oqj6)ae");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("", jSONArray0);
      jSONObject1.toString(252, (int) (byte)0);
      Short short0 = new Short((short) (-384));
      JSONObject jSONObject2 = new JSONObject(short0);
      jSONObject1.keys();
      StringWriter stringWriter0 = new StringWriter(9);
      jSONObject0.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte) (-4));
      Byte byte1 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("YA17TyVBSFQ688X", byte0);
      jSONObject1.put("B+Ilm2a)&ef7{@{\n9", (int) (byte)0);
      Byte.compare((byte) (-4), (byte)101);
      jSONObject0.optInt("YA17TyVBSFQ688X");
      Short short0 = new Short((short)414);
      Short short1 = new Short((byte)101);
      jSONObject1.opt("YA17TyVBSFQ688X");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Byte.toUnsignedInt((byte)44);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("YA17TyVBSFQ688X", (Object) null);
      Float float0 = new Float((-3015.6113F));
      jSONObject1.toString((-3011), (int) (byte)44);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("|jNz>OH%=][m3!tHy@");
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function2);
      hashMap0.computeIfAbsent(hashMap0, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("l>`([B>I=BO;H~I", false);
      jSONObject1.accumulate("l>`([B>I=BO;H~I", unaryOperator1);
      Long long0 = new Long(6L);
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject.valueToString(hashMap0, 743, (-1925));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1925));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("getequals");
      JSONObject jSONObject1 = jSONObject0.append("getequals", boolean0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)5);
      Byte.toUnsignedInt((byte)43);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put("Expected '", true);
      jSONObject1.remove("Expected '");
      assertEquals(1, jSONObject1.length());
      
      Long long0 = new Long((byte)5);
      String[] stringArray0 = JSONObject.getNames((Object) "Expected '");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getString("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1886426760554407
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject.quote("]gSS3&jb;?&");
      JSONObject jSONObject0 = new JSONObject((Object) "]gSS3&jb;?&");
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("NIctZ5GgG4N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NIctZ5GgG4N\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("YA17TyVBSFQ688X", "YA17TyVBSFQ688X");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.getJSONObject("YA17TyVBSFQ688X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"YA17TyVBSFQ688X\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      hashMap0.keySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject("acc");
      String string0 = jSONObject0.optString("acc");
      assertEquals("", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      Float.min(3373.7324F, (-821.927F));
      JSONObject.testValidity(float0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      hashMap0.put((Float) null, "id:C\"/e");
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Bs`/k|g^I", float0);
      jSONObject1.length();
      String string0 = jSONObject1.toString();
      assertNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1843752507353837
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Boolean boolean0 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(2465);
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (long) (byte)0);
      jSONObject1.optDouble((String) null, (-1.0));
      StringWriter stringWriter0 = new StringWriter((byte)5);
      stringWriter0.flush();
      stringWriter0.close();
      jSONObject1.write(stringWriter0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject0.toString();
      jSONObject0.getDouble("<,Bv+~f{+BQ:FPK0\"7");
      String string0 = jSONObject1.optString("{\"java.lang.Integer@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Long@0000000005}", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Integer integer0 = new Integer((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.putOpt("YA17iyVBSFQ688X", "YA17iyVBSFQ688X");
      Float float0 = new Float(0.0F);
      JSONObject.getNames((Object) null);
      jSONObject0.optString("YA17iyVBSFQ688X", "YA17iyVBSFQ688X");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Integer.compare((-588), 92);
      String string0 = "getmerge";
      JSONObject jSONObject0 = new JSONObject((Object) "getmerge");
      // Undeclared exception!
      jSONObject0.toString(400, 3088);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", (-1.0));
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float((-821.927F));
      Float.min(3373.7324F, (-821.927F));
      JSONObject.testValidity(float0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.accumulate("vJbu{b4F(<I~6", hashMap1);
      int int0 = jSONObject0.optInt("#vVtOL@Gj&Z5_|", 0);
      assertEquals(0, int0);
      
      String string0 = jSONObject0.optString("id:C\"/e", "Unclosed comment");
      assertEquals("Unclosed comment", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(1473);
      Integer integer2 = new Integer(1473);
      JSONObject.valueToString(integer2, 123, 48);
      Short short0 = new Short((short) (-1534));
      Double double0 = new Double(48);
      JSONObject.valueToString(double0, 2718, 2718);
      Integer integer3 = new Integer((short) (-1534));
      Integer integer4 = Integer.valueOf(1473);
      JSONObject.valueToString(integer4, (-50364773), 2718);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte) (-75));
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Integer@0000000001", integer1);
      boolean boolean0 = jSONObject1.optBoolean("java.lang.Integer@0000000001", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = function2.andThen((Function<? super String, ? extends Integer>) function3);
      hashMap0.computeIfAbsent(function4, function2);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("rep", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 2249;
      StringWriter stringWriter0 = new StringWriter(2249);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(jSONObject0, 47, 47);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      String string0 = "{Gt$I`@Nd`jz#O";
      JSONTokener jSONTokener0 = new JSONTokener("{Gt$I`@Nd`jz#O");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {Gt$I`@Nd`jz#O
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("/").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte byte0 = new Byte((byte)124);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(function2, "JSO does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function2);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function5 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      function3.andThen((Function<? super String, ? extends Integer>) function5);
      function2.compose((Function<? super Integer, ?>) function3);
      Function<Object, String> function6 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      Function.identity();
      hashMap0.computeIfAbsent(function1, function6);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("JSO does not allow non-finite numbers.", (Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.toString();
      jSONObject0.toString((int) (byte)124, (int) (byte)124);
      Object object0 = jSONObject0.opt("JSO does not allow non-finite numbers.");
      assertNull(object0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((String) null, "dl8Dj>");
      hashMap0.put("'$J&qk xZsjXB", "'$J&qk xZsjXB");
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 48, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.587973990795769
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      Integer integer0 = new Integer((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.putOpt("YA17iyVBSFQ688X", "YA17iyVBSFQ688X");
      JSONObject.valueToString(jSONObject1, (byte)124, (byte)34);
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                                                                                              \"java.lang.String@0000000004\": \"java.lang.String@0000000004\",\n                                                                                                                                                              \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n                                  }");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject.valueToString(jSONObject0, 4, 2040);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{fs(hx");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {fs(hx
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Short short0 = new Short((short) (-1307));
      Short short1 = new Short((short) (-1307));
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double((short) (-1307));
      JSONObject.quote(",\n");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double((-2449.5541675823));
      Function<Double, Object> function0 = (Function<Double, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyDouble());
      hashMap0.computeIfAbsent(double0, function0);
      Float float0 = new Float((-1910.0F));
      hashMap0.put(double0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("to");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>(linkedList0);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Short short0 = new Short((short)32);
      Double double0 = new Double(1175.302840550041);
      Short short1 = new Short((short)32);
      JSONObject jSONObject0 = new JSONObject(short1);
      jSONObject0.optString((String) null, (String) null);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("", 47);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      hashMap0.keySet();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "IJyMd\"6(5{^\\u";
      String string1 = jSONObject0.optString(",\n", string0);
      assertEquals("IJyMd\"6(5{^\\u", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2249);
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      hashMap0.put((Float) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.48837209302325585
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer((-62164681));
      Integer integer1 = new Integer(2734);
      JSONObject.valueToString(integer1, 123, (-409));
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short) (-2058));
      JSONObject.valueToString(short0, 10, 92);
      Integer integer2 = new Integer(123);
      JSONObject.valueToString(integer0, 12, 92);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Byte byte0 = new Byte((byte)70);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Integer@0000000001", byte0);
      jSONObject1.getDouble("java.lang.Integer@0000000001");
      JSONObject jSONObject2 = new JSONObject((Map) null);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("lpq");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "\\u";
      Integer integer0 = new Integer(13);
      jSONObject0.putOpt(string0, integer0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double(1223.7395925);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Byte byte0 = new Byte((byte)81);
      hashMap0.put((Double) null, byte0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer((-2723));
      int int0 = 1501;
      JSONObject.valueToString(integer0, (-4895), 1501);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-2723), 92);
      JSONObject.valueToString(integer0, 953, 1501);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("Unclosed comment", "Unclosed comment");
      try { 
        jSONObject0.getDouble("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("/4-r", "j6v~%SEH%p7P9 5E_");
      Integer integer0 = new Integer((-3018));
      try { 
        jSONObject0.getInt("/4-r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/4-r\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "7;15Q!kDByDd;c6E3";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("7;15Q!kDByDd;c6E3", object0);
      try { 
        jSONObject1.getLong("7;15Q!kDByDd;c6E3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7;15Q!kDByDd;c6E3\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Byte byte0 = new Byte((byte)12);
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)12);
      Byte byte2 = new Byte((byte)0);
      Byte byte3 = new Byte((byte)70);
      Byte byte4 = new Byte((byte)32);
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((byte)0);
      Byte byte5 = new Byte((byte)0);
      jSONObject0.putOpt("YA17TyVBSFQ688X", byte5);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      long long1 = jSONObject0.getLong("YA17TyVBSFQ688X");
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+f2,H", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getsignum";
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("getremainderUnsigned", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer((-2723));
      Integer.max((-2723), (-4895));
      JSONObject.valueToString(integer0, (-4895), 1501);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-2723), 92);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("Null key.", "Null key.");
      jSONObject0.optBoolean("Null key.", true);
      jSONObject0.optJSONArray("null");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Byte byte0 = new Byte((byte)12);
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)12);
      Byte byte2 = new Byte((byte)70);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "j6v~%SEH%p7P9 5E_";
      jSONObject0.putOpt("j6v~%SEH%p7P9 5E_", byte1);
      Integer integer0 = new Integer(12);
      jSONObject0.getInt("j6v~%SEH%p7P9 5E_");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "jo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Short short0 = new Short((short)9);
      Double double0 = new Double((-1.0));
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Null key.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.valueToString(jSONObject0, (-1373), 10);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1925));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, (-1853), (-1853));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer(38);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalAnd(true, false);
      Boolean.logicalOr(true, true);
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      String string0 = JSONObject.valueToString(boolean0, 38, 1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = new Double(1952.56051);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Float float0 = new Float(528.8976F);
      Float.max(0.0F, 0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" F`|\u0005.mYL)Y", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("Null key.", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(3614.3738419242);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0, 107, (-411));
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)118);
      JSONObject.valueToString(short0, 8, 2444);
      Integer integer0 = new Integer((-893));
      int int0 = 1182;
      JSONObject.valueToString("java.lang.Short@0000000003", 1182, 91);
      jSONObject0.accumulate("java.lang.Short@0000000003", jSONArray0);
      int int1 = (-1306);
      try { 
        jSONArray0.getJSONObject((-1306));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1306] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float((-2971.677F));
      Float.isFinite((-2971.677F));
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Byte.valueOf((byte)124);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put(function2, "JSON does not allow non-finite numbers.");
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function2);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function5 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      function3.andThen((Function<? super String, ? extends Integer>) function5);
      function2.compose((Function<? super Integer, ?>) function3);
      Function<Object, String> function6 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      hashMap0.computeIfAbsent(function1, function6);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("~)#d{p_o-", "FM1").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator2.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Byte.valueOf((byte)77);
      Byte byte0 = new Byte((byte)124);
      hashMap1.put((Object) null, "~)#d{p_o-");
      UnaryOperator<Integer> unaryOperator3 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Integer, ? extends String>) function1);
      unaryOperator3.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = function3.andThen((Function<? super String, ? extends Integer>) function4);
      Function<Object, Integer> function6 = function2.andThen((Function<? super String, ? extends Integer>) function5);
      function1.compose((Function<? super Integer, ?>) unaryOperator4);
      function1.compose((Function<? super Integer, ?>) function6);
      hashMap1.computeIfAbsent(hashMap0, function2);
      Byte byte1 = new Byte((byte) (-83));
      hashMap1.computeIfAbsent(byte1, function3);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      long long0 = jSONObject0.optLong("dvi", (-328L));
      assertEquals((-328L), long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(57);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1L));
      jSONObject0.optInt("A6SiJlh,Bb-rW;/", (-2910));
      jSONObject1.isNull("<,Bv+~f{+BQ:FPK0\"7");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("A6SiJlh,Bb-rW;/");
      assertEquals("\"A6SiJlh,Bb-rW;/\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("7;15Q!kDUyDd;c6E3", object0);
      jSONObject1.optBoolean("7;15Q!kDUyDd;c6E3");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>(2084, 1.0F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (long) 2084);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = new Double(1952.56051);
      Double.sum(1.0, 1.0);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.put("] is not a number.", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator.identity();
      Float.min(0.0F, 0.0F);
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      String string0 = "id:C\"\\/e";
      Float float0 = new Float(0.0F);
      hashMap1.put(float0, (String) null);
      BiFunction<Float, String, String> biFunction0 = (BiFunction<Float, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyFloat() , anyString());
      hashMap1.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.putOpt("3{8-IXCdecU\"l.=^", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Float float0 = new Float(0.0F);
      hashMap0.put(float0, "+8RRv9");
      JSONObject.valueToString(hashMap0, 743, (-1925));
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1925));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, "] is not a Boolean.");
      int int0 = (-1925);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 743, (-1925));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("7;15Q!kDUyDd;c6E3", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double double0 = new Double((short) (-14));
      String string0 = JSONObject.valueToString(double0, (short) (-14), (-2258));
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer((-3011));
      Float float0 = new Float((-448.4F));
      hashMap0.put(integer0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-3011), (-3011));
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      hashMap0.put((Integer) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-3011), (-3011));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, object0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = new Integer(8);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator.identity();
      Short short0 = new Short((short) (-4097));
      Float float0 = new Float(3247.56F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject.getNames((Object) ".");
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-125), (-769));
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "y^:*-pRDa{J\\$~9h";
      jSONObject0.optJSONArray("y^:*-pRDa{J$~9h");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = null;
      // Undeclared exception!
      try { 
        unaryOperator0.compose((Function<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("9^gm5H#Fq");
      assertNull(object0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("jz[#~\"");
      assertEquals("\"jz[#~\\\"\"", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.quote(" F`|\u0005.mYL)Y");
      assertEquals("\" F`|\\u0005.mYL)Y\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("Null key.", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("PW)NaWpU`}s2h#b3:[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("getshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getshortValue\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = (-3011);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("AYvX3OZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AYvX3OZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator3.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function5 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator4.compose((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function6 = unaryOperator4.compose((Function<? super Object, ? extends String>) function4);
      hashMap1.put(unaryOperator2, "oz@T8RHeF");
      Float float0 = new Float(1970.77);
      hashMap0.put(float0, "CUKP2cx\"[HgMn");
      Object object0 = new Object();
      Object object1 = new Object();
      hashMap1.put(function1, "wheel.json.JSONArray");
      hashMap2.put("FM1", "FM1");
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator6 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator7 = UnaryOperator.identity();
      Function<Integer, String> function7 = unaryOperator6.andThen((Function<? super Integer, ? extends String>) function2);
      unaryOperator6.andThen((Function<? super Integer, ? extends String>) function7);
      UnaryOperator<Integer> unaryOperator8 = UnaryOperator.identity();
      Function<Integer, String> function8 = unaryOperator8.andThen((Function<? super Integer, ? extends String>) function6);
      unaryOperator5.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function10 = unaryOperator7.compose((Function<? super String, ? extends Integer>) function9);
      Function<Object, Integer> function11 = function3.andThen((Function<? super String, ? extends Integer>) function10);
      Function<Object, Integer> function12 = function6.andThen((Function<? super String, ? extends Integer>) function11);
      Function<Object, Integer> function13 = function4.andThen((Function<? super String, ? extends Integer>) function12);
      Function<Object, String> function14 = unaryOperator4.compose((Function<? super Object, ? extends String>) function6);
      function14.andThen((Function<? super String, ? extends Integer>) function10);
      function3.compose((Function<? super Integer, ?>) function13);
      function5.compose((Function<? super Integer, ?>) function8);
      function4.compose((Function<? super Integer, ?>) unaryOperator6);
      Function<Integer, String> function15 = function5.compose((Function<? super Integer, ?>) unaryOperator6);
      hashMap3.computeIfAbsent(function15, function2);
      Short short0 = new Short((short)41);
      hashMap3.computeIfAbsent(short0, function1);
      Byte byte0 = new Byte((byte)91);
      Byte byte1 = new Byte((byte) (-83));
      Object object2 = JSONObject.NULL;
      hashMap3.computeIfAbsent(object2, function6);
      HashMap<Object, String> hashMap4 = new HashMap<Object, String>();
      hashMap4.computeIfAbsent(byte1, function14);
      HashMap<Object, String> hashMap5 = new HashMap<Object, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap5.replaceAll(biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      hashMap2.replaceAll(biFunction1);
      BiFunction<Object, String, String> biFunction2 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(any() , anyString());
      hashMap2.replaceAll(biFunction2);
      HashMap<Object, String> hashMap6 = new HashMap<Object, String>();
      BiFunction<Object, Object, String> biFunction3 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap6.replaceAll(biFunction3);
      HashMap<Double, Boolean> hashMap7 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap7);
      long long0 = jSONObject0.optLong("CUKP2cx\"[HgMn", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.quote("MjlD.l`%Bl7GM/Tm");
      assertEquals("\"MjlD.l`%Bl7GM/Tm\"", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)5);
      Byte.toUnsignedInt((byte)43);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Integer, Double> function2 = (Function<Integer, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.compose((Function<? super Integer, ?>) function2);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Short short0 = new Short((byte)0);
      hashMap0.computeIfAbsent(short0, function1);
      Byte byte1 = new Byte((byte)70);
      Object object0 = new Object();
      hashMap0.computeIfAbsent(object0, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      BiFunction<Object, Object, String> biFunction1 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("isreplace", 1462L);
      assertEquals(1462L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean("{Fw>EU{tPK7T^");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("va", 3060.0);
      assertEquals(3060.0, double0, 0.01);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7E";
      stringArray0[1] = "-L 0,dO_";
      stringArray0[2] = "G.!^qcgM*n=3(:I\"pZ";
      stringArray0[3] = "false";
      stringArray0[4] = "VVNj.K/_G;U#{)X7Gdz";
      stringArray0[5] = "getvalueOf";
      stringArray0[6] = "6`Vt9^uW";
      double double0 = jSONObject0.optDouble("Y0eVt(MZCs#T$h");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("v0F%BdE(Tbs9");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        unaryOperator0.compose((Function<? super Object, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("YA17TyVBSFQ688X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"YA17TyVBSFQ688X\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ".";
      try { 
        jSONObject0.getInt(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("AYvX3OZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AYvX3OZ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      hashMap0.keySet();
      hashMap0.keySet();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("getvalueOf");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("rot");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of rot
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      String[] stringArray0 = new String[11];
      stringArray0[0] = "K2Zb#C";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
