/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 28 13:07:42 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-1122L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 671L, 671L);
      Long long0 = new Long(671L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertTrue(range1.isEmpty());
      
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483648L, long1);
      
      range0.asRange();
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7612001156935655
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(151L, 2147483651L);
      Range range0 = Range.of(range_CoordinateSystem0, (-361L), 760L);
      Long long0 = new Long(3903L);
      Range range1 = Range.ofLength(127L);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
      assertSame(range1, range2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(2147483651L);
      Range range1 = Range.ofLength(2147483651L);
      range1.getEnd();
      Object object0 = new Object();
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483651L, 2147483651L);
      range0.equals(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long(65562L);
      Long long1 = new Long(65562L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65562L, 65562L);
      Object object0 = new Object();
      range0.equals(object0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 3864L);
      Range range0 = Range.of(range_CoordinateSystem0, 3864L, 3864L);
      long long0 = range0.getBegin();
      assertEquals(3863L, long0);
      
      Long long1 = new Long(0L);
      Range range1 = Range.of(3864L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775806L), (-9223372036854775806L));
      range0.equals((Object) null);
      range0.equals((Object) null);
      Long long0 = new Long((-9223372036854775806L));
      Long.compare((-9223372036854775806L), (-1454L));
      range0.equals(long0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Integer integer0 = new Integer(2);
      range0.equals(integer0);
      Object object0 = new Object();
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-1546L), (-1546L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 9223372032559808513L);
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-1546L), (-1546L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3943L), (-1546L));
      Long long0 = new Long((-1546L));
      range0.equals(long0);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1527L), (-1581L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775806L), (-9223372036854775806L));
      Range range1 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775806 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Integer integer0 = new Integer((-1509));
      range0.equals(integer0);
      Object object0 = null;
      range0.equals((Object) null);
      Long long0 = new Long(227L);
      Long.compare(231L, (-2147483648L));
      // Undeclared exception!
      try { 
        Range.parseRange("max cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse max cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 210L, 210L);
      Long long0 = new Long((-9223372036854775808L));
      Long long1 = new Long(210L);
      boolean boolean0 = range0.equals(long1);
      String string0 = range0.toString();
      assertEquals("[ 210 .. 209 ]/0B", string0);
      
      Range range1 = Range.of(210L);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range0.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5150033838663313
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range range0 = Range.of((-2774L), 210L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(4399L);
      Range range2 = Range.ofLength(1055L);
      range1.intersects(range2);
      range0.split(119L);
      Range.ofLength(3040L);
      Long long0 = new Long(14L);
      Range range3 = Range.of(210L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range3.iterator();
      range1.equals(range3);
      range0.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("aIGO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.aIGO
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(4399L);
      Range range1 = Range.ofLength(1055L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.ofLength(3040L);
      Long long0 = new Long(4294967303L);
      boolean boolean1 = range2.equals(range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.077537443905717
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-1546L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1546L), 65535L);
      range0.equals(range_CoordinateSystem0);
      range1.toString(range_CoordinateSystem0);
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ -1545 .. -1545 ]/RB", string0);
      
      List<Range> list0 = range1.split(1055L);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertEquals(1, list2.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      range1.toString();
      range1.iterator();
      boolean boolean0 = range1.endsBefore(range0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775806L), (-9223372036854775806L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775806L), (-9223372036854775806L));
      Long long0 = new Long((-9223372036854775806L));
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long1 = new Long(9223372036854775807L);
      Long long2 = new Long(9223372036854775807L);
      range0.equals(range0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1465L));
      range_Builder1.contractEnd((-32768L));
      Range.Builder range_Builder2 = range_Builder0.expandEnd(1502L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder((-252L), 4294967295L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      range_Builder5.build();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertSame(range0, range1);
      assertEquals("[ 4294967296 .. 4294967296 ]/RB", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7612001156935655
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.of(4294967295L);
      Range range0 = Range.ofLength(4294967295L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967294L);
      Range.Builder range_Builder1 = new Range.Builder(4294967294L, 4294967295L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      range_Builder2.build();
      // Undeclared exception!
      range0.split(209L);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range range0 = Range.of((-2774L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(9223372036854775803L);
      Range range2 = Range.ofLength(255L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range2.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775598L);
      Integer integer0 = new Integer((-1509));
      range0.equals(integer0);
      range0.equals(integer0);
      Long long0 = new Long(9223372036854775598L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("fI1bC}6\"P\"z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse fI1bC}6\"P\"z into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(9223372036854775789L, 9223372036854775789L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775789L, 9223372036854775789L);
      Long long0 = new Long(9223372036854775789L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8619548240089956
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 210L, 210L);
      long long0 = (-9223372036854775808L);
      Long long1 = new Long((-9223372036854775808L));
      Long long2 = new Long(210L);
      range0.equals(long2);
      String string0 = "fI1bC}6\"P\"z";
      // Undeclared exception!
      try { 
        Range.parseRange("fI1bC}6\"P\"z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse fI1bC}6\"P\"z into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3041L);
      range_Builder0.expandEnd(3041L);
      Range range0 = Range.of(3041L);
      range0.getEnd();
      Object object0 = new Object();
      Range.of(3041L);
      range0.equals((Object) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 2147483647L);
      long long0 = range0.getBegin();
      assertEquals(65534L, long0);
      
      long long1 = range0.getLength();
      assertEquals(2147418113L, long1);
      
      Long long2 = new Long(2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 4294967294 ]/0B", string0);
      
      range1.getEnd();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(1907L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-123L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("/&-R1IuDh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse /&-R1IuDh into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Long long0 = new Long((-2483L));
      Range range0 = Range.ofLength(28L);
      boolean boolean0 = range0.equals("+o6%zg0iZoO^h'eCe");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-1546L), (-1546L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-3943L), (-1546L));
      range0.equals(range1);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-1547L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, (-1527L), (-1547L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-3615L), (-2661L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.equals(range_Builder0);
      range_Builder0.build();
      range_Builder0.expandEnd((-1021L));
      range_Builder0.expandEnd((-1021L));
      range_Builder0.shift((-1021L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-9223372036854773172L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object0 = new Object();
      range0.equals("u`$\"'KnY");
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split((-3224L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775806L), (-9223372036854775806L));
      Long long0 = new Long((-9223372036854775806L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.toString();
      range0.getEnd();
      Object object0 = new Object();
      Range range1 = Range.of((-128L));
      range0.equals(range1);
      String string0 = "";
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("i%?(a5l<bba3ak");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.i%?(a5l<bba3ak
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 9223366955908468552L, 9223372036854772768L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.864894387740363
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775598L);
      Integer integer0 = new Integer((-1509));
      range0.equals(integer0);
      range0.equals(integer0);
      Long long0 = new Long(9223372036854775598L);
      Long.compare(231L, 9223372036854775806L);
      range0.equals(long0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0993067559577656
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = (-1546L);
      Range range0 = Range.of((-1546L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1546L), (-1546L));
      Long long1 = new Long(2355L);
      range1.equals(range0);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.split((-2888L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483647L;
      Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775607L);
      Long long1 = new Long(1534L);
      Range.ofLength(241L);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals((Object) null);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0562195663672114
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(9223372036854775807L);
      Long long1 = new Long(9223372036854775807L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = 813L;
      Range range0 = Range.of(813L);
      range0.toString();
      range0.getEnd();
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(813L);
      range0.isSubRangeOf(range1);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775656L, (-1546L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1546 would make range [9223372036854775656 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("mvQEw.QCt?rz.8il");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.mvQEw.QCt?rz.8il
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9490123306617946
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775598L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long((-2483L));
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.equals("+o6%zg0iZoO^h'eCe");
      Object object0 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.toString();
      Range range1 = Range.ofLength(4294967295L);
      range1.iterator();
      List<Range> list0 = range0.split(2141L);
      Range range2 = Range.of((-1925L));
      // Undeclared exception!
      try { 
        range2.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1925 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-744L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3828L), (-13L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      long long0 = new Long((-744L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ -743 .. -743 ]/RB", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-123L));
      range0.iterator();
      range0.toString();
      Range range1 = range0.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals("_P0~I'G44%dnv>v7");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = 3041L;
      Range.Builder range_Builder0 = new Range.Builder(3041L);
      range_Builder0.build();
      range_Builder0.contractBegin((-383L));
      range_Builder0.contractEnd(3041L);
      // Undeclared exception!
      try { 
        Range.of(3041L, (-383L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.9512437185814298
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(210L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder3.build();
      Range range2 = Range.ofLength(1055L);
      Range range3 = Range.ofLength(4277L);
      range2.intersects(range3);
      range2.intersects(range0);
      List<Range> list0 = range0.split(1055L);
      List<Range> list1 = range1.split(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-54L), 210L);
      range2.complementFrom(list0);
      range4.iterator();
      // Undeclared exception!
      range0.complementFrom(list1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.spliterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      Object object0 = new Object();
      String string0 = "";
      Object object1 = new Object();
      range0.equals(object1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = 1745L;
      long long1 = 64743L;
      Range range0 = Range.of(1745L);
      range0.getEnd();
      Object object0 = new Object();
      String string0 = "";
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long(9223372036854775786L);
      Range range0 = Range.of((-3694L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = (-1546L);
      long long1 = 64743L;
      Range range0 = Range.of((-1546L));
      range0.getEnd();
      Object object0 = new Object();
      String string0 = "";
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = (-1546L);
      long long1 = 64743L;
      Range range0 = Range.ofLength(64743L);
      range0.getEnd();
      Object object0 = new Object();
      String string0 = "";
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.538569284088132
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(210L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder3.build();
      List<Range> list0 = range0.split(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      List<Range> list1 = range1.complementFrom(list0);
      range0.complementFrom(list1);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
      assertTrue(list1.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 209 ]/0B", string0);
      
      range1.iterator();
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.split(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      linkedList0.add(range0);
      List<Range> list1 = range0.complementFrom(linkedList0);
      range0.complementFrom(list1);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 9223372036854775807 .. 9223372036854775807 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 9223372036854775807 .. 9223372036854775807 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.getEnd();
      Object object0 = new Object();
      range0.equals("");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.ofLength((-1620L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = 32767L;
      Range.of((-32755L), 32767L);
      long long1 = (-2774L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-2774L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(0L);
      range0.equals(range_CoordinateSystem0);
      String string0 = "";
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range range0 = Range.ofLength(210L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9785439348439597
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(2147483651L);
      Integer integer0 = new Integer(0);
      range0.equals(integer0);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 5106L, 4294967295L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.8635991844539275
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854775597L);
      range0.getBegin();
      range0.getLength();
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(109L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 135L, 585L);
      range0.isSubRangeOf(range1);
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 109 .. 109 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 109 .. 109 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(44L, 44L);
      long long0 = (-2888L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      List<Range> list0 = range0.split(65535L);
      range0.complementFrom(list0);
      range0.complementFrom(list0);
      range0.toString();
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.of(2147483646L, (-2888L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2562985869762766
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775806L), (-9223372036854775806L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775806L), (-9223372036854775806L));
      range1.complement(range0);
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      String string0 = range1.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertEquals("[ -9223372036854775806 .. -9223372036854775806 ]/RB", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808513L);
      Range range1 = Range.of(9223372032559808513L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1546L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Range range1 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertSame(range1, range0);
      assertEquals(9223372036854775807L, long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 5504L, 5504L);
      Range range0 = range_Builder2.build();
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.ofLength(255L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.endsBefore(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.871649625135927
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(597L);
      Range range1 = Range.ofLength(597L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range range1 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range1.split((-1346L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(81L);
      long long0 = range0.getLength();
      assertEquals(81L, long0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-3703L));
      Range range1 = Range.of((-593L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ -593 .. -592 ]/SB", string0);
      
      Range range2 = Range.of((-3703L));
      range1.intersects(range0);
      boolean boolean0 = range2.endsBefore(range0);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-287L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(16L);
      Range range1 = Range.of(127L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-3902L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(250L);
      Range range1 = Range.ofLength(250L);
      range1.intersects(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.ofLength(632L);
      Range range0 = Range.ofLength(632L);
      range0.startsBefore(range0);
      long long0 = new Long(632L);
      assertEquals(632L, long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range1.isEmpty());
      assertTrue(range0.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Long long0 = new Long((-2483L));
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      range0.equals("+o6%zg0iZoO^h'eCe");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range range0 = Range.ofLength(210L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      long long1 = range0.getEnd();
      assertEquals(209L, long1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2254L);
      range_Builder0.build();
      Range range0 = Range.ofLength(2254L);
      // Undeclared exception!
      try { 
        range0.split((-3529L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = new Long((-26L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.getLength();
      range0.equals(long0);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32768L), (-26L));
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 266L;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 266L, (-26L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.242888792572212
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long long0 = 44L;
      Range.Builder range_Builder0 = new Range.Builder(44L, 44L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range0.isSubRangeOf(range1);
      range_Builder0.build();
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = (-32778L);
      Range.of((-32778L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1546L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.9564942071794795
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.asRange();
      Range range1 = range0.asRange();
      // Undeclared exception!
      try { 
        range1.split((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = 127L;
      // Undeclared exception!
      try { 
        Range.of(127L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Integer integer0 = new Integer(32);
      boolean boolean0 = range0.equals(integer0);
      assertFalse(boolean0);
      
      range0.split(9223372036854771945L);
      Range range1 = Range.ofLength(32);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.of(4294967295L);
      Range range0 = Range.ofLength(4294967295L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-606L), (-3943L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(65570L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = new Long((-2483L));
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range0.forEach(consumer0);
      range0.isEmpty();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 210L, 210L);
      Long long0 = new Long((-9223372036854775808L));
      range0.equals(long0);
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("9SYW:/4B=wG7JjRIDD", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 9SYW:/4B=wG7JjRIDD into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.884863440796897
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.8337387456310323
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of(4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange("[^Xu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [^Xu into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Long long0 = new Long(65566L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1715L);
      range0.iterator();
      Range range1 = Range.of(1020L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      range0.intersection(range1);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(813L);
      String string0 = range0.toString();
      assertEquals("[ 813 .. 813 ]/0B", string0);
      
      range0.getEnd();
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 813 .. 813 ]/0B", range_CoordinateSystem0);
      Object object2 = new Object();
      boolean boolean0 = range1.equals(object2);
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(16L);
      Range range0 = Range.ofLength(18L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.intersects(range1);
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. -1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. -1 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(2147483651L);
      int int0 = 0;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(597L);
      Range range1 = Range.ofLength(597L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertSame(range0, range1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(0L, (-2089L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(597L);
      Range range1 = Range.ofLength(597L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertSame(range0, range1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Long long0 = new Long((-2483L));
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.equals("+o6%zg0iZoO^h'eCe");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.contractEnd(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(797L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1830L);
      range_Builder0.contractBegin((-1830L));
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long((-1714L));
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 0L);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.8782885341845934
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(2147483651L);
      Integer integer0 = new Integer(0);
      range0.equals(integer0);
      Object object0 = new Object();
      Long long0 = new Long((-782L));
      range0.equals(long0);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3864L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.811419498301341
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Long long0 = new Long((-26L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1340L), 9223372036854775754L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = 255L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(4294967341L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-283L), (-283L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 302L;
      range_Builder0.shift(302L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(302L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1404L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(210L);
      range_Builder0.expandEnd((-1750L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = 210L;
      Range.Builder range_Builder0 = new Range.Builder(210L);
      Range.Builder range_Builder1 = new Range.Builder(210L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(354L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 807L, 807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.getLength();
      String string0 = range0.toString();
      assertEquals("[ 807 .. 807 ]/0B", string0);
      
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(3913L, 65535L);
      List<Range> list0 = range0.split(255L);
      assertEquals(242, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(32767L);
      List<Range> list0 = range0.split(32767L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3041L);
      range_Builder0.expandBegin(4159L);
      Integer integer0 = new Integer(32);
      // Undeclared exception!
      try { 
        Range.of(248L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.7097029932964114
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = 205L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 205L, 205L);
      Long long1 = new Long((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Long.compare(205L, 205L);
      try { 
        Long.parseUnsignedLong("7eVDS9%(aM8;{:;99");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7eVDS9%(aM8;{:;99\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1825L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1825L, (-9223372036854774727L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774728 would make range [1824 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(597L);
      Range range1 = Range.ofLength(597L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = 1615L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 0L, (-9223372036854775808L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = 9223372032559808513L;
      Range range0 = Range.ofLength(9223372032559808513L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3041L);
      Range range0 = range_Builder0.build();
      range0.getEnd();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("wM95{ &`*/0PPs[pw2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.wM95{ &`*_/0PPs[pw2
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
