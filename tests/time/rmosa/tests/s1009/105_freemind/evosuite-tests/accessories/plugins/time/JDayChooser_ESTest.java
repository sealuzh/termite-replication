/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 23:31:46 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.main.FreeMindMain;
import freemind.modes.ModeController;
import freemind.modes.schememode.SchemeMapModel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.ImageProducer;
import java.awt.image.IndexColorModel;
import java.awt.image.MemoryImageSource;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Time;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import javax.help.BackAction;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JToolBar;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.basic.BasicOptionPaneUI;
import javax.swing.plaf.metal.MetalSliderUI;
import javax.swing.text.StringContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.ImageNode;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.xalan.templates.ElemNumber;
import org.apache.xml.serializer.ToTextSAXHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.696355012118828
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getColor();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 20, 35, 40, '%');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.drawDays();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getColor();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 35, 35, '');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ElemNumber elemNumber0 = new ElemNumber();
      jDayChooser0.getAlignmentY();
      jDayChooser0.setDay(669);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 1721L, 5, 669, '3');
      InputEvent.getMaskForButton(6);
      KeyEvent.getKeyModifiersText(63711);
      jDayChooser0.keyPressed(keyEvent0);
      ImageHandlerJPEGEncoder imageHandlerJPEGEncoder0 = null;
      try {
        imageHandlerJPEGEncoder0 = new ImageHandlerJPEGEncoder("Meta+Ctrl+Alt+Shift+Button1", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.GRAY;
      JButton[] jButtonArray0 = new JButton[1];
      JButton jButton0 = jDayChooser0.selectedDay;
      jButtonArray0[0] = null;
      jDayChooser0.days = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setDecorationBackgroundColor(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StringContent stringContent0 = new StringContent();
      StyleContext styleContext0 = new StyleContext();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 13, 8939, 39, 'X');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.800923963425939
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 365L, 8939, 34, '=');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.695595912841106
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.updateUI();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      ParsePosition parsePosition0 = new ParsePosition(32);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setFocus();
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getColor();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 38, 2806, 38, 'p');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6955852330739245
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      AffineTransform affineTransform0 = new AffineTransform();
      graphicContext0.getColor();
      Result.newReleaseSavepointRequest((String) null);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setYear(18);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponents();
      jDayChooser0.getLocale();
      MouseEvent mouseEvent0 = null;
      try {
        mouseEvent0 = new MouseEvent(jDayChooser0, 5, 1216L, 34, 5, 5, (-2685), 91, 39, false, 3441);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      jDayChooser0.setFocus();
      ElemNumber elemNumber0 = new ElemNumber();
      jDayChooser0.setDay((-2577));
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        unmarshallingContext0.parseElementDate("\"m>3:]gq7xz[tk", "d*Q&u}@l<@1y@#`IZO<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5776494269844954
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = jDayChooser0.locale;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(10);
      assertEquals(10, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5785307948674494
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      jDayChooser0.setDay(147);
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      Integer.getInteger("day", integer0);
      Locale locale0 = Locale.CHINA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(3, 3, 147, 147, 1623);
      mockGregorianCalendar0.before(mockGregorianCalendar1);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser1.addListeners(3);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Color color0 = Color.GRAY;
      System.setCurrentTimeMillis(3155695200000L);
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.yearChooser = jYearChooser0;
      jDayChooser0.initDecorations();
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ImageNode imageNode0 = new ImageNode();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2123), 0L, 1327, 'q', 'q');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 3043, "day", 3043, 3043);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 852, 3043, 10038, 26, '\"');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8019760795957507
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getTransferHandler();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.setMaxDayCharacters((-45));
      jDayChooser1.setDecorationBordersVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, color0.getGreen());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ImageNode imageNode0 = new ImageNode();
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(143);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.578534100663502
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date2 = jDayChooser1.minSelectableDate;
      jDayChooser1.setMaxSelectableDate(date1);
      jDayChooser1.setWeekOfYearVisible(false);
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.801690638611219
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setName("#F~'P");
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setFocus();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("accessories.plugins.time.JDayChooser$1");
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jRadioButtonMenuItem0, (-7777), (-1894L), (-1), (-1979), 'e', (MenuElement[]) null, (MenuSelectionManager) null);
      menuKeyEvent0.consume();
      menuKeyEvent0.setSource("accessories.plugins.time.JDayChooser$1");
      jDayChooser0.keyTyped(menuKeyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMonth(90);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMaxDayCharacters(38);
      Color color0 = jDayChooser0.weekdayForeground;
      jDayChooser0.setForeground(color0);
      assertEquals(90, color0.getGreen());
      
      jDayChooser0.isDayBordersVisible();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTransferHandler();
      jDayChooser0.setYear(38);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setMaxDayCharacters(4);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 1255, "&w(n8!k}R+T^9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getColor();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setForeground(color0);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(10);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(10, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6963003629184747
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isWeekOfYearVisible();
      boolean boolean0 = true;
      String string0 = "NBi~gp*UrL>5e";
      JDayChooser jDayChooser1 = new JDayChooser(false);
      FreeMindMain freeMindMain0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SchemeMapModel schemeMapModel0 = null;
      try {
        schemeMapModel0 = new SchemeMapModel((FreeMindMain) null, (ModeController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.MapAdapter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      jDayChooser0.setFocus();
      Date date0 = jDayChooser0.minSelectableDate;
      MetalSliderUI metalSliderUI0 = new MetalSliderUI();
      // Undeclared exception!
      try { 
        metalSliderUI0.getTickLength();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.metal.MetalSliderUI", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getTransform();
      Color color0 = graphicContext0.getColor();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1216.3976F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 806.7455F;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.setSundayForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.578540640778935
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
      
      jDayChooser0.getDaysInMonth();
      Color color0 = Color.yellow;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 28;
      floatArray0[1] = (float) 28;
      floatArray0[2] = (float) 28;
      floatArray0[3] = (float) 28;
      floatArray0[4] = (float) 28;
      floatArray0[5] = (float) 28;
      floatArray0[6] = (float) 28;
      floatArray0[7] = (float) 28;
      floatArray0[8] = (float) 28;
      color0.getColorComponents(floatArray0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekOfYearVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      ToTextSAXHandler toTextSAXHandler0 = new ToTextSAXHandler((ContentHandler) null, "day");
      toTextSAXHandler0.getOutputFormat();
      HsqlProperties hsqlProperties0 = new HsqlProperties((Properties) null);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 8192, 0, '!');
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      Color color0 = Color.yellow;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 28;
      floatArray0[1] = (float) 28;
      // Undeclared exception!
      try { 
        color0.getColorComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isContentAreaFilled();
      BackAction backAction0 = new BackAction(jDayChooser0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      // Undeclared exception!
      try { 
        RowSorterEvent.Type.valueOf("+X}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant javax.swing.event.RowSorterEvent.Type.+X}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Time time0 = new Time(52);
      jDayChooser0.setSelectableDateRange(time0, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      Color color0 = Color.gray;
      int int0 = 48;
      int[] intArray0 = new int[0];
      int int1 = (-2575);
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(48, 48, intArray0, 48, false, 48, (-2575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.57852073136676
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis(3155695199975L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(31, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getInitialValue();
      basicOptionPaneUI0.selectInitialValue(jOptionPane0);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      jDayChooser0.getBackground();
      jDayChooser0.init();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, (-1547), "day", 569L, (-1547));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getInitialValue();
      basicOptionPaneUI0.selectInitialValue(jOptionPane0);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ImageNode imageNode0 = new ImageNode();
      Locale.lookup(imageNode0, imageNode0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      Color color0 = Color.GRAY;
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jDayChooser0);
      jToolBar_Separator0.removeHierarchyListener((HierarchyListener) null);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jToolBar_Separator0, 65488, 0L, 3404, 65488, '|', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.consume();
      menuKeyEvent0.setSource(jToolBar_Separator0);
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.800934927977544
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.setAlwaysFireDayProperty(false);
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getColor();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.getSelectedDay();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMonth(1);
      jDayChooser0.getMaxSelectableDate();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(28, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-4123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(147);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.GRAY;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ImageNode imageNode0 = new ImageNode();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 49, true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      int[] intArray0 = new int[9];
      intArray0[0] = 49;
      intArray0[1] = 530;
      intArray0[2] = 49;
      intArray0[3] = 530;
      intArray0[4] = 105;
      intArray0[5] = 2781;
      intArray0[6] = 530;
      intArray0[7] = 530;
      intArray0[8] = 530;
      int int0 = (-542);
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(1510, 105, intArray0, (-542), 530);
      jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      jDayChooser0.firePropertyChange("HK35L]js YM tH#", (long) 105, (long) 530);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("z4)", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1, "#KMO05cK'h");
      actionEvent0.paramString();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.577662182249231
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(230);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getColor();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 3043, "day", 3043, 3043);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
