/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 23:00:15 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.nio.channels.NotYetConnectedException;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3805678363275375
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getAuthenticator();
      theClient0.setTrusted(true);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientEvent();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setCommunicationLogging(false);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.toString();
      theClient0.getClientCommandHandler();
      theClient0.setMaxAuthTry((-948));
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getTimeout();
      theClient0.toString();
      System.setCurrentTimeMillis(1118L);
      theClient0.getMaxConnectionMsg();
      theClient0.toString();
      assertEquals((-948), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-90);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientEvent();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)3;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getMaxConnectionMsg();
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 125);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.getAuthenticator();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setMaxAuthTryMsg("[decoded] ");
      theClient0.getClientObjectHandler();
      theClient0.getTimeoutMsg();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientEventHandler();
      theClient0.getClientEvent();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxConnectionMsg("Y:/YKsF)kW^M:");
      theClient0.setMaxConnectionMsg("Y:/YKsF)kW^M:");
      theClient0.getTimeoutMsg();
      theClient0.getAuthenticator();
      theClient0.getMaxConnectionMsg();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getServer();
      theClient0.getMaxConnectionMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setMaxAuthTry(0);
      theClient0.setTrusted(true);
      theClient0.getClientCommandHandler();
      theClient0.setMaxAuthTryMsg(":TSI+qBboW,Pg");
      theClient0.getClientObjectHandler();
      theClient0.setTrusted(true);
      theClient0.getMaxAuthTryMsg();
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      SocketChannel socketChannel0 = SocketChannel.open();
      // Undeclared exception!
      try { 
        socketChannel0.shutdownInput();
        fail("Expecting exception: NotYetConnectedException");
      
      } catch(NotYetConnectedException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(125);
      theClient0.setTimeout(125);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(125);
      blockingClientHandler0.getServer();
      theClient0.setServer((QuickServer) null);
      theClient0.getClientWriteHandler();
      theClient0.getMaxAuthTry();
      theClient0.setCommunicationLogging(false);
      assertEquals(125, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      QuickServer quickServer0 = new QuickServer("y");
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler((-2511));
      assertEquals("<ClientHandler-Pool#-2511-ID:1>", nonBlockingClientHandler0.getName());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)5;
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getCommunicationLogging();
      theClient0.getMaxAuthTryMsg();
      TheClient theClient1 = new TheClient();
      theClient1.setClientEventHandler(commandHandler0);
      theClient0.getClientObjectHandler();
      theClient0.setTrusted(true);
      assertTrue(theClient0.getTrusted());
      
      theClient1.getTimeoutMsg();
      theClient1.toString();
      theClient1.getClientEventHandler();
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(125);
      theClient0.setTimeout((-1393));
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setMaxConnectionMsg("xdkJm['wy3.MWvZ");
      theClient0.getTimeout();
      theClient0.getMaxAuthTryMsg();
      assertEquals(125, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxAuthTry(0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      ClientEvent clientEvent1 = theClient0.getClientEvent();
      blockingClientHandler0.removeEvent(clientEvent1);
      blockingClientHandler0.getClientData();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:13>", blockingClientHandler0.getName());
      
      theClient0.setClientData((ClientData) null);
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxAuthTry(0);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientData((ClientData) null);
      theClient0.getSocket();
      //  // Unstable assertion: assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-2217));
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-1393));
      TheClient theClient1 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.setCommunicationLogging(true);
      assertEquals((-2217), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("h],'4jsekP:Mmtdz0LD");
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTimeoutMsg();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      int int0 = 58;
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("Vx)Lfg9G4&1DqS", 58, inetAddress0, (-1914));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1914
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer((String) null);
      quickServer0.setConsoleLoggingToMini();
      theClient0.setServer(quickServer0);
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.getServer();
      theClient0.getSocket();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(true);
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.toString();
      try { 
        QuickServer.load("rq=*HmQcA>R");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxAuthTry(9876);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientExtendedEventHandler();
      ClientData clientData0 = theClient0.getClientData();
      theClient0.setClientData(clientData0);
      assertEquals(9876, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "6TheClint");
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("+OK INIT");
      theClient0.setTimeout(2158);
      theClient0.getClientData();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getTimeout();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientWriteHandler();
      assertEquals(2158, theClient0.getTimeout());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      TheClient theClient0 = new TheClient();
      theClient0.setSocketChannel((SocketChannel) null);
      try { 
        QuickServer.load("\t<max-active>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTrusted(true);
      theClient0.getTrusted();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      // Undeclared exception!
      try { 
        authenticator0.askAuthentication((ClientHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.Authenticator", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTrusted();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      // Undeclared exception!
      try { 
        authenticator0.askAuthentication((ClientHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.Authenticator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.getAuthenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientAuthenticationHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
