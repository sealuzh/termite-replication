/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 23:28:42 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = Double.NaN;
      Float float0 = new Float(Double.NaN);
      int int0 = 719;
      try { 
        JSONObject.valueToString(float0, (-1940), 719);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8775224312953291
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(Double.NaN);
      hashMap0.put(jSONObject0, double0);
      JSONObject jSONObject1 = jSONObject0.put("toU", (Map) hashMap0);
      jSONObject0.putOpt("toU", hashMap0);
      try { 
        jSONObject1.toString((-74023248), (-74023248));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1042077732852964
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(0L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "J!g4zVpye";
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      JSONObject jSONObject1 = new JSONObject(linkedList0);
      jSONObject0.put("J!g4zVpye", (Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray0);
      assertEquals(2, jSONObject1.length());
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONObject0.optJSONArray("J!g4zVpye");
      assertNotNull(jSONArray3);
      
      jSONObject0.put("J!g4zVpye", (double) 0L);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5919456220014427
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Double double0 = new Double(1L);
      JSONObject.valueToString(double0, 67, 125);
      Long.sum(1L, 1L);
      Boolean boolean0 = new Boolean("qr2");
      Boolean.getBoolean("qr2");
      JSONObject jSONObject1 = jSONObject0.putOpt("qr2", boolean0);
      jSONObject0.getBoolean("qr2");
      JSONObject jSONObject2 = jSONObject0.put("{", true);
      jSONObject2.optLong("qr2");
      Boolean.logicalXor(true, false);
      JSONObject.valueToString("{", 11, 11);
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject3 = jSONObject1.accumulate("getequals", boolean0);
      try { 
        jSONObject3.getDouble("getequals");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getequals\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8772034520289815
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double((-2649.509408844));
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte0 = new Byte((byte)73);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString((int) (byte)73, (-2316));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.87565606324755
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double((-2649.509408844));
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte0 = new Byte((byte)73);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(byte0);
      jSONObject1.toString((-2316), (-4035));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000010\": \"java.lang.Class@0000000011\"}");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Unterminated string";
      Float float0 = new Float((-1.0F));
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short) (-3589));
      JSONObject jSONObject1 = jSONObject0.accumulate("Unterminated string", short0);
      jSONObject0.optDouble("Unterminated string", 968.065855);
      Short.toUnsignedLong((short) (-3589));
      String string0 = JSONObject.valueToString(jSONObject0);
      jSONObject1.opt("Unterminated string");
      String string1 = jSONObject0.optString("Unterminated string");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>(28);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(hashMap0, 28, (-122));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(38, true);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 1609, 102);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("re", (Object) null);
      try { 
        jSONObject1.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.878602053427583
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short short0 = (short)19;
      Short short1 = new Short((short)19);
      JSONObject.testValidity(short1);
      JSONObject jSONObject0 = new JSONObject(short1);
      Short.toUnsignedLong((short) (-15557));
      JSONObject jSONObject1 = jSONObject0.accumulate("4@:.@23 u9SM'dm", short1);
      StringWriter stringWriter0 = new StringWriter((short)19);
      stringWriter0.flush();
      stringWriter0.flush();
      jSONObject1.write(stringWriter0);
      String string0 = "Z(?";
      jSONObject1.put("Z(?", 88);
      Short.toUnsignedInt((short)19);
      jSONObject0.getLong("Z(?");
      jSONObject1.optDouble("4@:.@23 u9SM'dm");
      try { 
        jSONObject0.getJSONArray("lon");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lon\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{T");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {T
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject("{}");
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = new Double((-1987.3066738233836));
      Long long0 = new Long(2182L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.accumulate("mi", double0);
      jSONObject1.optBoolean("+J|zl", false);
      jSONObject1.optInt("mi");
      int int0 = jSONObject1.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put((Long) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1864805138932786
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      jSONObject0.optBoolean("true", true);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "true";
      stringArray0[1] = "true";
      stringArray0[2] = "true";
      stringArray0[3] = "true";
      stringArray0[4] = "true";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1893877820637047
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "elgz-r67jybRz");
      jSONObject0.names();
      jSONObject0.optJSONArray("elgz-r67jybRz");
      JSONObject.valueToString("elgz-r67jybRz");
      StringWriter stringWriter0 = new StringWriter(103);
      char[] charArray0 = new char[3];
      charArray0[0] = ';';
      charArray0[1] = '9';
      charArray0[2] = 'q';
      stringWriter0.write(charArray0);
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getBoolean("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      Float float0 = new Float(Double.NaN);
      Float.isFinite(1.0F);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Short short0 = new Short((short) (-3027));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", ",\n");
      jSONObject1.keys();
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate(",\n", ",\n");
      JSONArray jSONArray0 = jSONObject2.getJSONArray(",\n");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)93);
      JSONObject jSONObject1 = jSONObject0.accumulate("p3E2yhGK", short0);
      hashMap0.put(jSONObject0, jSONObject1);
      jSONObject0.names();
      int int0 = jSONObject1.optInt("p3E2yhGK");
      assertEquals(1, jSONObject0.length());
      assertEquals(93, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Short short0 = new Short((short) (-3027));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(",\n", ",\n");
      Object object0 = new Object();
      jSONObject0.accumulate(",\n", "dec");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8778197848487042
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Object) "max");
      jSONObject0.accumulate("max", "max");
      jSONObject0.optBoolean("max", true);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      // Undeclared exception!
      jSONObject0.toString(4061, (-2659));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.put("ioCVS:i'6 :%3", (Object) byte0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.isNull("ioCVS:i'6 :%3");
      try { 
        jSONObject0.getLong("mi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", ",\n");
      try { 
        jSONObject1.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8775224312953291
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "d-ty81{97C sp|";
      jSONObject0.keys();
      Short short0 = new Short((short)3491);
      Short.toUnsignedInt((short)3491);
      Short.toUnsignedInt((short)3491);
      Short.compare((short)1711, (short) (-1164));
      jSONObject0.optInt("d-ty81{97C sp|");
      JSONObject jSONObject1 = jSONObject0.append("d-ty81{97C sp|", short0);
      JSONObject.quote("&L");
      JSONObject jSONObject2 = jSONObject0.append("d-ty81{97C sp|", (Object) null);
      jSONObject1.putOpt("&L", "d-ty81{97C sp|");
      jSONObject1.optDouble("L", (double) (short)1711);
      try { 
        jSONObject2.getDouble("d-ty81{97C sp|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d-ty81{97C sp|\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, (Map) hashMap0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONTokener jSONTokener0 = new JSONTokener("false");
      jSONObject1.put("has", (Object) "has");
      StringWriter stringWriter0 = new StringWriter((byte)0);
      StringWriter stringWriter1 = stringWriter0.append('V');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "false", (int) (byte)0, (int) (byte)0);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "false");
      jSONObject0.write(stringWriter3);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      Double double1 = new Double(0.0);
      hashMap0.put("\"CHf_wrqg-UP)&", double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("5(/rW");
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(3337.082);
      JSONObject jSONObject1 = jSONObject0.put("it#N4", (Object) float0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject1.put("it#N4", (Collection) linkedList0);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optJSONArray("5(/rW");
      try { 
        jSONObject0.getLong("it#N4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"it#N4\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put(32, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("sh", 2468.52);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      long long0 = jSONObject1.getLong("sh");
      assertEquals(2468L, long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-1230L));
      JSONObject jSONObject1 = jSONObject0.accumulate(".", long0);
      Object object0 = new Object();
      jSONObject1.accumulate("dec", hashMap0);
      jSONObject0.optString("dec", "dec");
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("Qx0Sb5y%mfA");
      assertEquals("\"Qx0Sb5y%mfA\"", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((-1L));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optString("iscompareTo", "");
      jSONObject1.putOpt("<a9kTDGB$u", jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(",\n", ",\n");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5919456220014427
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      HashMap<Double, Boolean> hashMap1 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8D";
      stringArray0[1] = "7*";
      stringArray0[2] = ":7d$";
      stringArray0[3] = "\"\"";
      stringArray0[4] = "isintValue";
      stringArray0[5] = "Expected '";
      stringArray0[6] = "java.lang.Long@0000000003.";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.length();
      Integer integer0 = new Integer(0);
      Double double0 = new Double((-583.23019));
      Double double1 = new Double((double) integer0);
      Double.sum(0.0, (-1.0));
      Double.sum(1.0, 1211.70598482);
      Float float0 = new Float(1.0);
      Boolean.valueOf(true);
      Double double2 = new Double((-1180.3));
      Boolean boolean0 = new Boolean(":7d$");
      hashMap0.put(double2, boolean0);
      Boolean boolean1 = Boolean.valueOf("Expected a ',' or ']'");
      hashMap0.put(double2, boolean1);
      Byte byte0 = new Byte((byte)42);
      JSONObject jSONObject3 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject4 = jSONObject3.append("Expected a ',' or ']'", "\"\"");
      Boolean boolean2 = Boolean.FALSE;
      Boolean.compare(false, false);
      Double double3 = new Double(3621.5220634554657);
      Boolean boolean3 = Boolean.valueOf("7*");
      Boolean boolean4 = Boolean.TRUE;
      hashMap1.replace(double3, boolean3, boolean4);
      jSONObject4.keys();
      Long long0 = new Long(0);
      jSONObject1.putOpt("isintValue", long0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = new JSONArray();
      Writer writer1 = jSONArray0.write(writer0);
      Writer writer2 = jSONObject3.write(writer1);
      assertSame(writer2, stringWriter0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "max";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("max", "max");
      try { 
        jSONObject1.getJSONArray("max");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"max\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("toH", (-3262L));
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Qx");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Byte byte0 = new Byte((byte)12);
      jSONObject0.toString(1348, (-1300));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("gPu+WGUiJ:JO[*9F7k", "gPu+WGUiJ:JO[*9F7k");
      jSONObject0.optLong("gPu+WGUiJ:JO[*9F7k", 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Short short0 = new Short((short) (-544));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Ov-ZKQk0J";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      Short short1 = new Short((short) (-544));
      JSONObject jSONObject1 = jSONObject0.accumulate("Ov-ZKQk0J", short1);
      jSONObject1.getLong("Ov-ZKQk0J");
      jSONObject0.accumulate("Ov-ZKQk0J", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "Ov-ZKQk0J", (int) (short) (-544), 2418);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      Long long0 = new Long(1L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.688750001065033
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$Null", 3200.617938190639);
      JSONObject jSONObject2 = jSONObject1.put("{}", 2940);
      boolean boolean0 = jSONObject2.optBoolean("{}");
      assertFalse(boolean0);
      
      int int0 = jSONObject1.getInt("wheel.json.JSONObject$Null");
      assertEquals(3200, int0);
      
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      
      Object object0 = jSONObject2.remove("{}");
      assertEquals(2940, object0);
      
      jSONObject1.put("wheel.json.JSONArray", 3200);
      Boolean boolean1 = new Boolean(false);
      String[] stringArray0 = JSONObject.getNames((Object) boolean1);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      jSONObject0.put("{}", true);
      Object object0 = jSONObject0.get("{}");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      HashMap<Byte, JSONArray> hashMap1 = new HashMap<Byte, JSONArray>();
      BiFunction<Object, Object, JSONArray> biFunction0 = (BiFunction<Object, Object, JSONArray>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      hashMap1.entrySet();
      jSONObject0.optLong("N}/Y.p#9w$", 1011L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5911496021009452
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = jSONObject0.put("wai", (Map) hashMap0);
      String[] stringArray0 = new String[8];
      Double double0 = new Double((-3190.6));
      hashMap0.put(jSONObject1, double0);
      stringArray0[5] = "wai";
      stringArray0[1] = "re2v";
      stringArray0[2] = "re2v";
      stringArray0[3] = "wai";
      stringArray0[4] = "+w.?7Pf0&|$";
      stringArray0[5] = "wai";
      stringArray0[6] = "wai";
      stringArray0[7] = ",#u";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject0.remove("wai");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(stringArray0[0], stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = jSONObject0.put("wai", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("wai");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Unterminated string";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = jSONObject1.opt("Unterminated string");
      assertNull(object0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.keys();
      jSONObject0.keys();
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONTokener", true);
      Integer integer0 = new Integer((-64089270));
      jSONObject1.append("", integer0);
      boolean boolean0 = jSONObject2.optBoolean("wheel.json.JSONTokener");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("4(]:Dp$%&$!j(", true);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      Integer integer0 = new Integer((byte)0);
      Integer integer1 = new Integer(46);
      Integer integer2 = new Integer(46);
      Integer integer3 = new Integer((byte)0);
      hashMap0.put(jSONObject1, integer3);
      boolean boolean0 = jSONObject1.getBoolean("4(]:Dp$%&$!j(");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(4);
      hashMap0.put(integer0, "_:<0#]T^U_");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("j:/x4#PC0ApsKE");
      assertEquals(0, int0);
      
      int int1 = jSONObject0.optInt("#2(y", 0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double((-2649.509408844));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.accumulate("+J|zl", "+J|zl");
      jSONObject1.toJSONArray((JSONArray) null);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("su", jSONArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(object0, 70, 3688);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "null", 3688, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer(21);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = "isfloatValue";
      Object object0 = new Object();
      short short0 = (short)8;
      Short short1 = new Short((short)8);
      Short.compare((short)8, (short)8);
      Short.toUnsignedLong((short)8);
      JSONObject jSONObject1 = jSONObject0.put("isfloatValue", (Object) short1);
      Float float0 = new Float((float) 8L);
      jSONObject1.append("' and instead saw '", float0);
      try { 
        jSONObject0.append("isfloatValue", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isfloatValue] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, (Map) hashMap0);
      jSONObject0.toString((int) (byte)0, 6);
      jSONObject1.has(string0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(835);
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      jSONObject0.put("' and instead saw '", (Map) hashMap0);
      try { 
        jSONObject0.getBoolean("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5560957732108656
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null, true);
      jSONObject0.put("@", 18);
      JSONObject.quote("~dBor~XU2,");
      jSONObject0.getDouble("@");
      JSONTokener jSONTokener0 = new JSONTokener("~dBor~XU2,");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("*c'KBs@T+#hEWM%", (Object) null);
      JSONObject jSONObject2 = jSONObject1.put("*c'KBs@T+#hEWM%", false);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      Double double0 = new Double((-583.23019));
      Double.sum((-583.23019), 1.0);
      Float float0 = new Float(1.0);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(double0, boolean0);
      Integer.getInteger("\r");
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      jSONObject0.optJSONArray("8Onf~5`}H__RXp");
      String string0 = "XwWXUB(qtgVg%7";
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("maq");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("]", "]");
      try { 
        jSONObject1.getDouble("]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(hashMap0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(875.69345559);
      hashMap0.put("S|P-6W=;3Yz c<B.6", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(1003);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(120);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put((String) null, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{xcp;<E$t0aq");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {xcp;<E$t0aq
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{R5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {R5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put(",'Z3D", (Object) ",'Z3D");
      JSONObject.quote("uU%");
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-815.246F));
      JSONObject jSONObject1 = jSONObject0.accumulate("gPu+WGUiJ:JO[*9F7k", float0);
      jSONObject1.getInt("gPu+WGUiJ:JO[*9F7k");
      jSONObject0.toString();
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "qxD`:";
      JSONObject jSONObject0 = new JSONObject((Object) "qxD`:");
      JSONObject jSONObject1 = jSONObject0.accumulate("qxD`:", "qxD`:");
      try { 
        jSONObject1.getInt("qxD`:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qxD`:\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(0.0F);
      hashMap0.put("Y($G?`?~a", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      int int0 = jSONObject0.getInt("Y($G?`?~a");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("gPu+WGUiJ:JO[*9F7k", object0);
      Float float1 = new Float(0.0F);
      try { 
        jSONObject0.getInt("gPu+WGUiJ:JO[*9F7k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gPu+WGUiJ:JO[*9F7k\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.compare(true, true);
      JSONObject jSONObject1 = jSONObject0.put(",", (-2921.02805));
      Boolean.getBoolean((String) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.keys();
      jSONObject0.put("Missing value", (Map) null);
      jSONObject1.optJSONArray("'cLZ:\"JX5YicaInybv");
      double double0 = jSONObject1.optDouble(",");
      assertEquals(3, jSONObject1.length());
      assertEquals((-2921.02805), double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      Byte byte1 = new Byte((byte)14);
      JSONObject jSONObject0 = new JSONObject((Object) "Expected a ',' or '}'");
      double double0 = jSONObject0.optDouble("iscompare", (-1.0));
      assertEquals(3, jSONObject0.length());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      StringWriter stringWriter0 = new StringWriter(6);
      Float float0 = new Float((float) 6);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      HashMap<JSONArray, JSONObject> hashMap1 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("Vl_(Rqf>+uz1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Vl_(Rqf>+uz1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.doubleToString((short)2525);
      assertEquals("2525", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("~XhfK<`kX 7LI", (-4576));
      JSONTokener jSONTokener0 = new JSONTokener("has");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of has
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("getvalues");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalues\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      jSONArray0.join("$*LK~e`(z/SF>]G=W");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-143));
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute(short0, biFunction0);
      jSONObject0.optBoolean("");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject.quote("j:/x4#PC0ApsKE");
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double((-2649.509408844));
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte0 = new Byte((byte)73);
      jSONObject0.toString(543, (-2316));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 1, 3356);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("Z(`");
      String string0 = JSONObject.valueToString(boolean0, (-2949), (-2949));
      String string1 = JSONObject.valueToString(boolean0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float(0.0);
      hashMap0.put("girvT", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject.valueToString(jSONObject0, 3102, 32);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = new Double((-2649.509408844));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(1215, (int) (byte)73);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "5(/G";
      JSONObject.doubleToString(3337.082);
      JSONTokener jSONTokener0 = new JSONTokener("5(/G");
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      Float float0 = new Float((double) 636.88F);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((JSONArray) null, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.toString();
      // Undeclared exception!
      try { 
        jSONObject1.toString(107, 107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getlongValue", (Object) "getlongValue");
      jSONObject1.getString("getlongValue");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(69);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("aEgU&!Fq/\\T9:dlIc", "aEgU&!Fq/\\T9:dlIc");
      try { 
        jSONObject1.getJSONObject("aEgU&!Fq/\\T9:dlIc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"aEgU&!Fq/\\\\T9:dlIc\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(121.661);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONObject, Short> hashMap0 = new HashMap<JSONObject, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("x||X:~Gc]H499.", 490);
      StringWriter stringWriter0 = new StringWriter(490);
      StringWriter stringWriter1 = stringWriter0.append('O');
      JSONObject.valueToString(stringWriter1, 490, 490);
      stringWriter1.append((CharSequence) "\"java.io.StringWriter@0000000003\"");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "x||X:~Gc]H499.", (-2830), 490);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("getgetChars");
      assertEquals(0, int0);
      
      String string0 = JSONObject.doubleToString(685.6352616);
      assertEquals("685.6352616", string0);
      
      String string1 = JSONObject.quote((String) null);
      assertEquals("\"\"", string1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("JSONArray[");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.has(",\n");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Integer integer0 = new Integer(977);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Ald[>IR3/wD4w*4X`");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Float float0 = new Float(646.6619F);
      hashMap0.putIfAbsent(float0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Z#Y#", 92);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(2089);
      String string0 = JSONObject.valueToString(integer0, 7, 2089);
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 38, 102);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 21, 108);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Float float0 = new Float((-427.0265228838));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 0.0);
      jSONObject1.optDouble((String) null, 0.0);
      assertEquals(1, jSONObject0.length());
      
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject.doubleToString(3337.082);
      JSONTokener jSONTokener0 = new JSONTokener("5(/G");
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(3337.082);
      JSONObject jSONObject1 = jSONObject0.put("it#N4", (Object) float0);
      jSONObject1.toString();
      Short short0 = new Short((short) (-3376));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(2359.2);
      hashMap0.put((Object) null, double0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-4));
      hashMap0.put(byte0, byte0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("Syu?E(:`I|]jUMzY", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("sb/*-yM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sb/*-yM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)10);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, byte0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("fQa}=$$0~M]H=", (-1L));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1708L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      try { 
        jSONObject0.getString("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|lK4*<?cT`-\"atkL`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |lK4*<?cT`-\"atkL`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("isreverseBytes");
      JSONTokener jSONTokener0 = new JSONTokener("\b");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \b
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short)93);
      jSONObject0.accumulate("p3E2yhGK", (Object) null);
      try { 
        jSONObject0.getJSONArray("?7_v==oEP{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?7_v==oEP{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Short short0 = new Short((short)956);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".ZEMco^Loxs}uu";
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isparseByte", 236.729213995);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "y9N5,$dL_i$zCN\"6Ep";
      jSONObject0.optLong("y9N5,$dL_i$zCN\"6Ep", 0L);
      String string1 = "rR<";
      try { 
        jSONObject0.getBoolean("rR<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rR<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      HashMap<Object, Double> hashMap1 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("A~A|K");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("islongBitsToDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islongBitsToDouble\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("get", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString((-1200), 2211);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("get", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("[YO;Y0,u^uR0S<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[YO;Y0,u^uR0S<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("issubstring");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issubstring\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("2MlK$%C5Wm\"(g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2MlK$%C5Wm\\\"(g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("j*h ~8!", "!^L^Wh<3#w\"sYR");
      assertEquals("!^L^Wh<3#w\"sYR", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double((byte)123);
      try { 
        jSONObject0.put((String) null, (Object) double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("l8K4");
      assertEquals("", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("j*h ~8!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of j*h ~8!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
