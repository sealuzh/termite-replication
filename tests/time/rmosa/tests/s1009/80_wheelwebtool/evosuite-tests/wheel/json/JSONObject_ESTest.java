/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 28 20:31:55 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8075238747002111
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getaddFirst", 0L);
      String string0 = jSONObject0.toString(5509, 5509);
      assertNotNull(string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("s#c");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of s#c
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4368286689630319
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      Float float0 = new Float((double) 0L);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", (long) 1812);
      Object object0 = jSONObject1.remove(".");
      assertEquals(1812L, object0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iswrite", 12.086468050532096);
      String string0 = jSONObject1.optString("iswrite");
      assertNotNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iswrite", 12.451489434);
      long long0 = jSONObject0.optLong("iswrite");
      assertEquals(12L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1535324566542537
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("d", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("d", 1.0);
      int int0 = jSONObject1.optInt("d");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-16));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("pOJ@&tEbl", (Object) byte0);
      int int0 = jSONObject0.optInt("pOJ@&tEbl");
      assertEquals((-16), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("rEtB", "\"rEtB\"");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.opt("rEtB");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("rEtB", "\"rEtB\"");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("l$j{txdCq)P#kdPIov", jSONObject0);
      boolean boolean0 = jSONObject1.isNull("l$j{txdCq)P#kdPIov");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("~z2*YYz", 1L);
      boolean boolean0 = jSONObject0.has("~z2*YYz");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("AQ=", (Object) "AQ=");
      String string0 = jSONObject0.getString("AQ=");
      assertNotNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("si", 0L);
      jSONObject1.getLong("si");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("119.390272387710", (Object) "119.390272387710");
      long long0 = jSONObject1.getLong("119.390272387710");
      assertEquals(119L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("000", (-1L));
      long long0 = jSONObject1.getLong("000");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put(")z&0b~c4B", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray(")z&0b~c4B");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Qyd", 0.0);
      int int0 = jSONObject1.getInt("Qyd");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      Long long0 = new Long(1L);
      JSONObject jSONObject1 = jSONObject0.put("isdoubleToString", (Object) long0);
      jSONObject1.getInt("isdoubleToString");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("DZHX:NXs~M", (-4113.259195326411));
      double double0 = jSONObject1.getDouble("DZHX:NXs~M");
      assertEquals((-4113.259195326411), double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (Object) "Unterminated string");
      Object object0 = jSONObject1.get("Unterminated string");
      assertEquals("Unterminated string", object0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 128, (-2452));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String string0 = JSONObject.valueToString(boolean0, (-1164), 1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.78489484807327
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-372), (-372));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("getintern");
      assertNull(object0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(";lra>[<", stringArray0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("get", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("7", "7");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 92);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("de", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, "do");
      assertEquals("do", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("6$WGbl,CN.!", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("`n", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Unterminated string", 2201L);
      assertEquals(2201L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", 1229L);
      assertEquals(1229L, long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("aQ0-@WOC!!", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("d", stringArray0);
      int int0 = jSONObject0.optInt("d", 1484);
      assertEquals(1484, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("pOJ@&tEbl", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", (double) (byte) (-16));
      assertEquals((-16.0), double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      double double0 = jSONObject0.optDouble("C'+{{/@e%_**^;R", (double) (byte)48);
      assertEquals(1, jSONObject0.length());
      assertEquals(48.0, double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(";lra>[<", stringArray0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Byte, Integer> hashMap0 = new HashMap<Byte, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 30, 30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1786549963416462
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Byte byte0 = new Byte((byte)4);
      hashMap0.put((Double) null, byte0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 282, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8435847019646396
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("gethashCode", (Object) jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(32);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0280940565630374
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Long long0 = new Long((-183L));
      try { 
        jSONObject0.put((String) null, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(879.6);
      Long long0 = new Long((-2298L));
      hashMap0.put(double0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0.7572232031938879");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0.7572232031938879
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"] is not a number.\"", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("}F;", "}F;");
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8884699676219987
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "0.7572232031938879");
      // Undeclared exception!
      jSONObject0.toString(740, (-461));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.8452126759766825
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("si", (Object) linkedList0);
      jSONObject0.toString(32);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0317671113505356
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      jSONArray0.put(128, (Map) hashMap0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 25, 338);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (byte)0, 34);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6707549559936354
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("IlOk&7B#T)sp}5J</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"IlOk&7B#T)sp}5J<\\/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.quote("'$;/PZ7YzWI!r{vODy");
      assertEquals("\"'$;/PZ7YzWI!r{vODy\"", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.quote("}2*!\t*H$3.");
      assertEquals("\"}2*!\\t*H$3.\"", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      long long0 = jSONObject0.optLong((String) null, (-2138L));
      assertEquals((-2138L), long0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5621389048534704
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.8891591637540217
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("Substring bounds error", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate(",\n", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Zlr~Q-", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("", (-432L));
      jSONObject1.optString("", "FbRVLpYTPW");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("d", stringArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("d");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("wheel.json.JSONObject@0000000001");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("si", (-2104L));
      double double0 = jSONObject1.optDouble("si");
      assertEquals(2, jSONObject0.length());
      assertEquals((-2104.0), double0, 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.340713939115434
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Double double0 = new Double((-372));
      String string0 = JSONObject.numberToString(double0);
      Float float0 = new Float((float) (-372));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.9031790347002462
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Byte byte0 = new Byte((byte)1);
      jSONObject0.put("wheel.json.JSONTokener", (Object) byte0);
      jSONObject0.toString(13, (int) (byte)1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.9232469945307769
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("000", (-1L));
      StringWriter stringWriter0 = new StringWriter(42);
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Boolean boolean0 = new Boolean("=bu^J!2!~);j7`Jf_");
      hashMap0.put("WuY", boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7851038147158325
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("si", (-2104L));
      long long0 = jSONObject0.optLong("si");
      assertEquals(2, jSONObject0.length());
      assertEquals((-2104L), long0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.7664123555634643
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unterminated string", (Map) null);
      long long0 = jSONObject0.optLong("Unterminated string");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("{}", "{}");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("{}");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("AQ=", (Object) "AQ=");
      try { 
        jSONObject1.getJSONArray("AQ=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AQ=\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.put("000", (-1L));
      int int0 = jSONObject0.getInt("000");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getaddFirst", 0L);
      double double0 = jSONObject0.getDouble("getaddFirst");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.580649125069464
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nAQ=", (Object) "nAQ=");
      int int0 = jSONObject1.optInt("nAQ=");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unterminated string", (Object) "Unterminated string");
      boolean boolean0 = jSONObject0.optBoolean("Unterminated string", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.7321329200411653
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("d", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("d", 1.0);
      boolean boolean0 = jSONObject1.optBoolean("d", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.put("xVic,x-Z&%23RA=", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("xVic,x-Z&%23RA=");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.7572232031938879);
      assertEquals("0.7572232031938879", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.doubleToString(201);
      assertEquals("201", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.append("wheel.json.JSONObject@0000000001", jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.4598012994628564
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("si", 0L);
      try { 
        jSONObject1.append("si", "si");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[si] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("Unterminated string", object0);
      Byte byte0 = new Byte((byte)10);
      JSONObject jSONObject2 = jSONObject0.accumulate("Unterminated string", byte0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("a)FHD7{Z!=?[I:49x{", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("119.39027238771", "&D2p}+O");
      jSONObject1.accumulate("119.39027238771", "119.39027238771");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (Map) null);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("Unterminated string");
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{W68i'c3Zu]D9K");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {W68i'c3Zu]D9K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{k=u<mgZu/m_@|\"8kL");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {k=u<mgZu/m_@|\"8kL
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.7260509192674385
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(13, (int) (byte)1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("nAQ=", (-197));
      int int0 = jSONObject0.optInt("nAQ=", 3760);
      assertEquals(1, jSONObject0.length());
      assertEquals((-197), int0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("getfloatToIntBits");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("eDH\",", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.remove((String) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("000", (-1L));
      try { 
        jSONObject1.getJSONObject("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.has("");
      assertEquals(3, jSONObject0.length());
  }
}
