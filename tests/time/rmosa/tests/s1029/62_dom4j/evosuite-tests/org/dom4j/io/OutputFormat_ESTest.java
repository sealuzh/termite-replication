/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 14:44:15 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration");
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-trimTxaMXt";
      stringArray0[2] = "-trimTxaMXt";
      stringArray0[3] = "-trimTxaMXt";
      stringArray0[4] = "-suppressDeclaration";
      stringArray0[5] = "-suppressDeclaration";
      stringArray0[6] = "-trimTxaMXt";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.isExpandEmptyElements();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('~');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (~)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-indep*ntSize";
      outputFormat0.parseOptions(stringArray0, 0);
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText");
      assertFalse(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "-trimTxaMXt";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags((-1225));
      String[] stringArray0 = new String[5];
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-1225), int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("~zpL5", true);
      outputFormat0.setEncoding("");
      outputFormat0.setXHTML(true);
      outputFormat0.getEncoding();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('p');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (p)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setTrimText(true);
      outputFormat0.setNewlines(true);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("");
      outputFormat0.getEncoding();
      outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7156338174862886
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1Cuh$mn!-:CR1QlE~!9(";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setAttributeQuoteCharacter('\'');
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1016
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-expandEmpty";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines");
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-newlines";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-padText");
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-padText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isOmitEncoding());
      
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize((-1988));
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true, (String) null);
      outputFormat0.setNewLineAfterNTags(7784);
      outputFormat0.setTrimText(true);
      outputFormat0.setIndent(true);
      outputFormat0.setNewlines(true);
      outputFormat0.getEncoding();
      outputFormat0.getAttributeQuoteCharacter();
      assertEquals(7784, outputFormat0.getNewLineAfterNTags());
      
      OutputFormat outputFormat1 = new OutputFormat((String) null);
      outputFormat1.setPadText(true);
      char char0 = outputFormat1.getAttributeQuoteCharacter();
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-AneSeparator";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(2, int0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("-AneSeparator", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setTrimText(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(1135);
      outputFormat0.setTrimText(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.dom4j.io.OutputFormat";
      stringArray0[1] = "org.dom4j.io.OutputFormat";
      stringArray0[2] = "org.dom4j.io.OutputFormat";
      stringArray0[3] = "c%1J8JD'N";
      outputFormat0.parseOptions(stringArray0, 1135);
      outputFormat0.setIndent("org.dom4j.io.OutputFormat");
      OutputFormat outputFormat1 = new OutputFormat("-lineSeparator");
      outputFormat0.setPadText(true);
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertEquals("org.dom4j.io.OutputFormat", outputFormat0.getIndent());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indep*ntSize", false, "-indep*ntSize");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-indep*ntSize";
      stringArray0[2] = "-indep*ntSize";
      stringArray0[3] = "-indep*ntSize";
      stringArray0[4] = "-indep*ntSize";
      stringArray0[6] = "-indep*ntSize";
      stringArray0[7] = "-indep*ntSize";
      stringArray0[8] = "-indep*ntSize";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(2, int0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("-indep*ntSize", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-indep*ntSize", outputFormat0.getIndent());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.setEncoding((String) null);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent((String) null);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "trmText";
      OutputFormat outputFormat0 = new OutputFormat("trmText");
      outputFormat0.parseOptions(stringArray0, 0);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("trmText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", false, "p(=8(oKT,N U");
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertFalse(outputFormat0.isNewlines());
      assertEquals("p(=8(oKT,N U", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("-expandEmpty", outputFormat0.getIndent());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlOwK*n(s");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "E84WBvKTX\u0007";
      stringArray0[1] = "-xhtmlOwK*n(s";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      boolean boolean0 = outputFormat0.isTrimText();
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("  ", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(boolean0);
      assertTrue(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.getIndent();
      outputFormat0.isNewlines();
      outputFormat0.setPadText(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent("o.;*\"W2BZ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "o.;*\"W2BZ";
      outputFormat0.setXHTML(false);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("D2(XTs|~K");
      outputFormat0.setIndentSize(741);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setPadText(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setEncoding("C");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.getIndent();
      outputFormat0.getIndent();
      outputFormat0.isNewlines();
      outputFormat0.setPadText(false);
      outputFormat0.setOmitEncoding(true);
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setXHTML(true);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isXHTML();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2045));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2045
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize(2363);
      String[] stringArray0 = new String[14];
      outputFormat0.setNewLineAfterNTags(2363);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(2363, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimTqxaMt");
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-trimTqxaMt";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`", false);
      outputFormat0.setNewlines(false);
      outputFormat0.isNewlines();
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isXHTML());
      assertEquals("`", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", string0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`", true);
      outputFormat0.setNewLineAfterDeclaration(true);
      boolean boolean0 = outputFormat0.isNewlines();
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("`", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertTrue(boolean0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      OutputFormat outputFormat1 = new OutputFormat("", false);
      outputFormat0.getIndent();
      OutputFormat outputFormat2 = new OutputFormat("", false);
      outputFormat2.setOmitEncoding(false);
      OutputFormat outputFormat3 = new OutputFormat("a^ E", true);
      OutputFormat outputFormat4 = new OutputFormat("", true);
      outputFormat4.getNewLineAfterNTags();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('j');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (j)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(false);
      outputFormat1.setSuppressDeclaration(false);
      outputFormat1.setIndentSize((-1598));
      outputFormat1.setNewLineAfterNTags(2);
      outputFormat1.setTrimText(false);
      outputFormat1.isPadText();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setEncoding("-expandEmpty");
      outputFormat0.setIndent("-expandEmpty");
      outputFormat1.isPadText();
      outputFormat2.setOmitEncoding(true);
      outputFormat2.setPadText(false);
      outputFormat1.setExpandEmptyElements(true);
      outputFormat1.setLineSeparator("-expandEmpty");
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions((String[]) null, (-1861));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("l>adkl7*\"*");
      outputFormat0.setIndent("l>adkl7*\"*");
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("l>adkl7*\"*", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(" ", true);
      String string0 = outputFormat0.getIndent();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(" ", string0);
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      boolean boolean0 = outputFormat0.isTrimText();
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(boolean0);
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-indep*ntSize";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      assertEquals("", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(boolean0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimTqxaMt");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-trimTqxaMt";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("Invalid attribute quote character (");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("Invalid attribute quote character (", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.549749826558804
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertFalse(outputFormat1.isXHTML());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertTrue(outputFormat1.isTrimText());
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isNewlines());
      assertEquals("\n", outputFormat1.getLineSeparator());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('Z');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (Z)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(")rmText");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")rmText";
      outputFormat0.parseOptions(stringArray0, 0);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', char0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(")rmText", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimTqxaMt");
      assertFalse(outputFormat0.isPadText());
      
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-trimTqxaMt";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isTrimText());
      
      outputFormat0.setTrimText(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-indep*ntSize";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[41];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3755754015654476
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "1Cuth$mn!-:CR1QE~!9(";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isTrimText());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isPadText());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "zyRI]~$)}&z";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 421);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      outputFormat0.setNewLineAfterNTags((-3369));
      stringArray0[0] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals((-3369), outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isXHTML());
      
      outputFormat0.setXHTML(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1Cuh$mn!-:CR1QlE~!9(";
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.isXHTML();
      outputFormat0.setXHTML(false);
      assertFalse(outputFormat0.isXHTML());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("  ", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("h*k3V8aud|b,ePUka,}", true, "  ");
      outputFormat0.isPadText();
      OutputFormat outputFormat1 = new OutputFormat("h*k3V8aud|b,ePUka,}");
      outputFormat1.setEncoding("Invalid attr");
      outputFormat0.isPadText();
      outputFormat0.setPadText(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat1.setLineSeparator("Invalid attr");
      OutputFormat outputFormat2 = new OutputFormat("h*k3V8aud|b,ePUka,}", false, "h*k3V8aud|b,ePUka,}");
      outputFormat2.setSuppressDeclaration(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "h*k3V8aud|b,ePUka,}";
      int int0 = 1755;
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('A');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (A)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "E84WBvKTX\u0007";
      stringArray0[2] = "-xhtmlzyRI]~$)}&z";
      stringArray0[3] = "E84WBvKTX\u0007";
      stringArray0[4] = "E84WBvKTX\u0007";
      stringArray0[5] = "-trimText";
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlzyRI]~$)}&z", false, "E84WBvKTX\u0007");
      outputFormat0.setIndentSize((-1994091956));
      assertFalse(outputFormat0.isTrimText());
      
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isTrimText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty");
      outputFormat0.setEncoding("-expandEmpty");
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertEquals("-expandEmpty", outputFormat0.getEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimTxaMXt");
      String[] stringArray0 = new String[2];
      outputFormat0.setOmitEncoding(false);
      stringArray0[0] = "-trimTxaMXt";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("-trimTxaMXt", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimTxaMXt");
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "-trimTxaMXt";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("-trimTxaMXt", outputFormat0.getIndent());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9377087726541156
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("1Cth$mn!-:CR1QE~!9(", false, "}psmlc*q+}b");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1Cth$mn!-:CR1QE~!9(";
      stringArray0[1] = ")rmText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
      
      String string0 = outputFormat0.getLineSeparator();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", string0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("1Cth$mn!-:CR1QE~!9(", outputFormat0.getIndent());
      assertEquals("}psmlc*q+}b", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }
}
