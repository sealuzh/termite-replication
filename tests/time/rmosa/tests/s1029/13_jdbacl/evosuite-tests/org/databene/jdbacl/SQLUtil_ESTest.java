/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 15:07:36 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("BLO");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8,xri!";
      stringArray0[1] = "8,xri!";
      stringArray0[2] = "BLO";
      stringArray0[3] = "BLO";
      String string0 = SQLUtil.leftJoin("8,xri!", stringArray0, "8,xri!", "8,xri!", stringArray0);
      assertEquals("left join 8,xri! as 8,xri! on 8,xri!.8,xri! = 8,xri!.8,xri! and 8,xri!.8,xri! = 8,xri!.8,xri! and 8,xri!.BLO = 8,xri!.BLO and 8,xri!.BLO = 8,xri!.BLO", string0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      
      String string1 = SQLUtil.substituteMarkers("BLO", "DROP SEQUENCE IF EXISTS ", (Object) null);
      assertEquals("BLO", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-79859754), "H$7x<DAJG&/ S^TlMj");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("H$7x<DAJG&/ S^TlMj", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setNullable(false);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("H$7x<DAJG&/ S^TlMj H$7X<DAJG&/ S^TLMJ(1,1) NOT NULL", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iq-");
      DBDataType.getInstance((-12), "BLO");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "/[A@E)6s-F+09mwu$N";
      stringArray0[1] = "iq-";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/[A@E)6s-F+09mwu$N", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT /[A@E)6s-F+09mwu$N FOREIGN KEY (/[A@E)6s-F+09mwu$N, iq-) REFERENCES iq-(/[A@E)6s-F+09mwu$N, iq-)", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "createSSruct(8tring,hObject[])";
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) "createSSruct(8tring,hObject[])");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLUtil.mutatesStructure("AEQMLrhm<-3#Q5");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("aNe <w=y9>h-ks");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "aNe <w=y9>h-ks";
      stringArray0[1] = "drop indexcallse";
      stringArray0[2] = "AEQMLrhm<-3#Q5";
      stringArray0[3] = "AEQMLrhm<-3#Q5";
      stringArray0[4] = "aNe <w=y9>h-ks";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("aNe <w=y9>h-ks", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6en=%-kHxM0iPW.");
      PrintWriter printWriter0 = mockPrintWriter0.printf("AEQMLrhm<-3#Q5", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g(");
      Boolean.valueOf("g(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-104699356), "BLO");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deletecallselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("updatecallselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'");
      defaultDBColumn0.isUnique();
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("deletecallselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' BLO(3) DEFAULT updatecallselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' NULL", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.deletecallselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
      
      System.setCurrentTimeMillis((-1L));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "--";
      stringArray0[1] = "--";
      stringArray0[2] = "drop table";
      stringArray0[3] = "--";
      stringArray0[4] = "--";
      stringArray0[5] = "--";
      stringArray0[6] = "--";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(--, --, drop table, --, --, --, --)", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("truncate");
      HsqlProperties hsqlProperties0 = new HsqlProperties("truncate");
      hsqlProperties0.isEmpty();
      StringBuilder stringBuilder0 = new StringBuilder(333);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance(1674, "\u0001\u0196");
      SQLUtil.normalize("2wBE*&K$$'`'5+eEx`", false);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "S|Wd!/_lbQ4W5", true, (String[]) null);
      DBSchema dBSchema0 = new DBSchema((String) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("\u0001\u0196", dBPackage0);
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      SQLUtil.isQuery("org.h2.engine.Database");
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|3L`!-?D:W>cnQ4vR");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer0 = new Integer(1280);
      Integer integer1 = RawTransaction.COMMIT;
      Character character0 = Character.valueOf('M');
      SQLUtil.renderValue(character0);
      SQLUtil.parseColumnTypeAndSize("org.firebirdsql.jca");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      assertEquals("table", defaultDBTable2.getObjectType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("~d(.e<&eo\"#2A)M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".e<&eo\"#2A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLUtil.isProcedureCall("PAGE");
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = SQLUtil.isProcedureCall("PAGE");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("ua", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ua", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ua";
      stringArray0[1] = "ua";
      stringArray0[2] = "m7";
      stringArray0[3] = "ua";
      stringArray0[4] = "m7";
      stringArray0[5] = "ua";
      stringArray0[6] = "ua";
      stringArray0[7] = "m7";
      stringArray0[8] = "m7";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("m7", false, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (ua, ua, m7, ua, m7, ua, ua, m7, m7) REFERENCES ua()", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Character character0 = Character.valueOf('j');
      Character.isBmpCodePoint((-2986));
      Character.isIdeographic(41);
      SQLUtil.substituteMarkers("", "d+577t:<-jo(/(h", character0);
      SQLUtil.isDDL("d+577t:<-jo(/(h");
      SQLUtil.isDML("");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("update]kk}", compositeDBObject0);
      tableContainer0.getTable("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "update]kk}";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(39, " INDEX ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("yH~oi=~eUby0D", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setOwner((CompositeDBObject<?>) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(" INDEX (1)", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer(4298);
      DBDataType dBDataType0 = DBDataType.getInstance(4298, "Y\"P");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eE5{n?e^RBtUl@|", (DBTable) null, dBDataType0, integer1, (Integer) null);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "@]fwH(h._i<E_DG]");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("@]fwH(h._i<E_DG]Y\"P(3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.751273597885415
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("+@.*(R", true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4EhsQ8D[g`<", (DBTable) null, (DBDataType) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.stream();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("4EhsQ8D[g`<, 4EhsQ8D[g`<", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "ROWNUM()";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ROWNUM()";
      stringArray0[1] = "ROWNUM()";
      stringArray0[2] = "ROWNUM()";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("ROWNUM()", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("BIGGER ", true, "BIGGER ", "BIGGER ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK BIGGER ", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(#D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (#D
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertFalse(simpleResultSet0.wasNull());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".cO&$S;&;,YJn=7";
      stringArray0[1] = "callselect * from |3l`!-?d:}>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      String[] stringArray1 = new String[1];
      stringArray1[0] = ".cO&$S;&;,YJn=7";
      // Undeclared exception!
      try { 
        SQLUtil.join(".cO&$S;&;,YJn=7", "callselect * from |3l`!-?d:}>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'", stringArray0, ".cO&$S;&;,YJn=7", ".cO&$S;&;,YJn=7", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "crpate unique indexcreateFmateri1lized view8>zyb";
      stringArray0[1] = "crpate unique indexcreateFmateri1lized view8>zyb";
      stringArray0[2] = "select intou";
      stringArray0[3] = "crpate unique indexcreateFmateri1lized view8>zyb";
      stringArray0[4] = "5%(]O?07Z(^";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "crpate unique indexcreateFmateri1lized view8>zyb", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (crpate unique indexcreateFmateri1lized view8>zyb, crpate unique indexcreateFmateri1lized view8>zyb, select intou, crpate unique indexcreateFmateri1lized view8>zyb, 5%(]O?07Z(^)", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("oeuq}l");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("oeuq}l", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("e;D1dp@*Jf1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e;D1dp@*Jf1", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("e;D1dp@*Jf1", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DBDataType.getInstance(344, "ROWNUM()");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "N";
      stringArray0[1] = "IVh";
      stringArray0[2] = ":A";
      stringArray0[3] = "ROWNUM()";
      stringArray0[4] = ":A";
      stringArray0[5] = "IVh";
      stringArray0[6] = "IVh";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "IVh";
      stringArray1[1] = "N";
      stringArray1[2] = "N";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("CHECK ", stringArray0, "IVh", "A'8z", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("J4H?&2");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf("J4H?&2", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{b@G:(JW@a");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      boolean boolean0 = SQLUtil.isQuery("PostgreSQL DataSource unable to load PostgreSQL JDBC Driver");
      JdbcConnectionPool.create("", "E[", "~Q/v]uM7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PostgreSQL DataSource unable to load PostgreSQL JDBC Driver");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("E[", defaultDBTable0, (-3968), "FOREIGN KEY ");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      boolean boolean1 = SQLUtil.isDML("insertp,arqekq.f)x7x,");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TableContainer tableContainer0 = new TableContainer(" ESCAPE ");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewcrpate unique indexcreatefmateri1lized view8>zyb", defaultDBTable0, 348, " ESCAPE ");
      defaultDBColumn0.getForeignKeyConstraint();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "LJ-:+B$n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.append((CharSequence) " ESCAPE ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("LJ-:+B$n ESCAPE create table null (\n\tdrop materialized viewcrpate unique indexcreatefmateri1lized view8>zyb  ESCAPE  NULL\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(9);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("7SP*%7yK*rNC] lC*@[", false, "exec6oq,", "ua");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"7SP*%7yK*rNC] lC*@[\" ", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertFalse(simpleResultSet0.isClosed());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "ua");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("~Q/v]uM7", stringArray0);
      TableContainer tableContainer0 = new TableContainer("2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.removeComments("~Q/v]uM7");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      StringBuilder stringBuilder1 = null;
      try {
        stringBuilder1 = new StringBuilder((-329887688));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = SQLUtil.normalize("$X?MlJiImd`iRS?'3J", true);
      assertEquals("$ X ? MlJiImd ` iRS ? '3J'", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "cally";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cally");
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      DBDataType dBDataType0 = DBDataType.getInstance(1, "cally");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ALT", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("cally");
      // Undeclared exception!
      try { 
        defaultDBTable1.getColumn("SELECT * FROM cally WHERE ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'SELECT * FROM cally WHERE ' not found in table 'cally'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("executeescape");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execescap/");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("e;D1dp@*Jf1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e;D1dp@*Jf1", defaultDBTable0, (DBDataType) null);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, (String) null, true, "e;D1dp@*Jf1");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("e;D1dp@*Jf1 NOT NULL", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Ynu96NO";
      stringArray0[1] = "Ynu96NO";
      stringArray0[2] = "Ynu96NO";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Ynu96NO", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (Ynu96NO, Ynu96NO, Ynu96NO)", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("@]fwH(h._i<E_DG]", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("@]fwH(h._i<E_DG]", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":Uj# xsT8n4v+u)k2k";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " AND ", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (:Uj# xsT8n4v+u)k2k)", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLUtil.isQuery("updatecall");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "updatecall";
      String string0 = "drop index";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("updatecall", "updatecall", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog(" not set and ", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("drop index", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updatecall", dBSchema0);
      String string1 = "W_SA";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "W_SA", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b%G:(W@a");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LV5n?#rF1nkKl\"/WCa");
      StringBuilder stringBuilder0 = new StringBuilder("LV5n?#rF1nkKl\"/WCa");
      SQLUtil.normalize("b%G:(W@a", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LV5n?#rF1nkKl\"/WCa";
      stringArray0[1] = " b % G : (W @ a";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "b%G:(W@a", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{b@G:(JW@a");
      String string0 = "BfUr<,Y'tr2";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BfUr<,Y'tr2";
      stringArray0[1] = "?zT`T0N+xb";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "BfUr<,Y'tr2", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("M8~]/g _[OAA");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.deleteCharAt(610);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 610
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "Tb";
      DBSchema dBSchema0 = new DBSchema("Tb");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Tb", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Tb", false, defaultDBTable0, "Tb");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-425863975), (Object) dBSchema0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -425863975
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = SQLUtil.normalize("_-0 [7,}`o%I", true);
      assertEquals("_ - 0 [ 7, } ` o % I", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("gN/)Yak8&V/!l9Zn", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("n(#D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: n(#D
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("createSSruct(8tring,hObject[])");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"8tring\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = new Integer(335544559);
      DBDataType dBDataType0 = DBDataType.getInstance((-329880415), "Y\"P");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y\"P", (DBTable) null, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("Y\"P", stringBuilder0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = new Integer(335544559);
      DBDataType dBDataType0 = DBDataType.getInstance((-329880415), "Y\"P");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y\"P", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("Y\"P(335544559,335544559)", stringBuilder0.toString());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('x');
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("createSSruct(8tring,hObject[])");
      DBDataType dBDataType0 = DBDataType.getInstance((-12), "createSSruct(8tring,hObject[])");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("createSSruct(8tring,hObject[])", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("createSSruct(8tring,hObject[]) CREATESSRUCT(8TRING,HOBJECT[])(3) NULL", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("createSSruct(8tring,hObject[])", (DBTable) null, (DBDataType) null, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, "", "updategetlgnimeout");
      dBCheckConstraint0.setDoc("");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT  ", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBCheckConstraint0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" on ", true, " on ", "ua");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \" on \" ", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{b@G:(JW@a");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("{b@G:(JW@a", false, defaultDBTable0, "ISINDEX");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      stringBuilder1.insert(2, false);
      StringBuilder stringBuilder2 = new StringBuilder(2045);
      assertEquals("", stringBuilder2.toString());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.join("org.h2.engine.FunctionAlias$JavaMethod", "F", stringArray0, "org.h2.engine.FunctionAlias$JavaMethod", "F", stringArray0);
      assertEquals("org.h2.engine.FunctionAlias$JavaMethod join org.h2.engine.FunctionAlias$JavaMethod as F on F.null = F.null and F.null = F.null", string0);
      
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.h2.engine.FunctionAlias$JavaMethod join org.h2.engine.FunctionAlias$JavaMethod as F on F.null = F.null and F.null = F.null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, )", string1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.7689528313755152
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLUtil.normalize("gN/)Yak8&V/!l9Zn", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gN /) Yak8 & V / ! l9Zn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[@ubO/3+l)$Vt(6e");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+GNb7:QlmKA6}Xe;-1");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table +GNb7:QlmKA6}Xe;-1", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(13);
      StringBuilder stringBuilder1 = stringBuilder0.append("org.h2.store.WriterThread");
      stringBuilder1.insert(13, 5);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[21];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[1] = "org.h2.store.WriterThread";
      stringArray0[3] = "org.h2.store.WriterThread";
      stringArray0[4] = "org.h2.store.WriterThread";
      stringArray0[5] = "org.h2.store.WriterThread";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.removeComments("org.h2.store.WriterThread");
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("TIMING_ID");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'TIMING_ID' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Qq/R|dq[ks\"p' ?m3");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "DAYOFMONTH", false, stringArray0);
      StringBuilder stringBuilder1 = new StringBuilder();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)45;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.removeComments("deleteexec:3yz|vge6<p3+pi>[");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deleteexec:3yz|vge6<p3+pi>[", defaultDBTable0, (DBDataType) null, integer0);
      Integer.min((byte)4, 57);
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{b@G:(JW@a");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("{b@G:(JW@a", false, defaultDBTable0, "ISINDEX");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(2, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      stringArray0[1] = "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      stringArray0[2] = "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      stringArray0[3] = "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      stringArray0[4] = "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      stringArray0[5] = "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      stringArray0[6] = "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      stringArray0[7] = "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      String string0 = SQLUtil.renderColumnListWithTableName("callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'", stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'";
      stringArray1[1] = " 77BU<'@\"KvRa0n$~";
      stringArray1[2] = "drop table|,[mi+rn_5?v:fb";
      stringArray1[3] = "drop table|,[mi+rn_5?v:fb";
      stringArray1[4] = "drop table|,[mi+rn_5?v:fb";
      stringArray1[5] = string0;
      stringArray1[6] = " 77BU<'@\"KvRa0n$~";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop table|,[mi+rn_5?v:fb", stringArray0, "callselect * from |3l`!-?d:w>cnq4vr where join = ' join ' and |3l`!-?d:w>cnq4vr = '|3l`!-d:w>cnq4vr' and |3l`!-?d:w>cnq4vr ='|3l`!-?d:w>cnq4vr' and null = null and |3l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr' and |\"l`!-?d:w>cnq4vr  '|3l`!-?d:w>cnq4vr' and |.l`!-?d:w>cnq4vr = '|3l`!-?d:w>cnq4vr'", " 77BU<'@\"KvRa0n$~", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "/LTOXfz`sEZx]w\"b", stringArray0, "/LTOXfz`sEZx]w\"b", " WHERE ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "renameeb@d";
      stringArray0[1] = "FOREIGN KEY ";
      stringArray0[2] = "renameeb@d";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("renameeb@d", (String[]) null, "renameeb@d", "FOREIGN KEY ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UPDATERULE";
      String string0 = SQLUtil.innerJoin("4,,CC>?MW.j", stringArray0, (String) null, "xtU'm1f_=>J", stringArray0);
      assertEquals("null as xtU'm1f_=>J on 4,,CC>?MW.j.UPDATERULE = xtU'm1f_=>J.UPDATERULE", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("rename");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema("_&`Y))s{!]");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("_&`Y))s{!]", (String[]) null, "_&`Y))s{!]", "_&`Y))s{!]", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "info.VERSION";
      String string0 = SQLUtil.join("info.VERSION", "C", stringArray0, (String) null, "N@G$: ?\f", stringArray1);
      assertEquals("info.VERSION join null as N@G$: ?\f on ", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ";u9Zf%;.m";
      stringArray0[1] = "R~o=[<Ch{o";
      stringArray0[3] = "drop table'";
      stringArray0[4] = "R~o=[<Ch{o";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "R~o=[<Ch{o";
      stringArray1[2] = "R~o=[<Ch{o";
      stringArray1[3] = "drop table'";
      stringArray1[5] = "L1wWXR9";
      stringArray1[6] = "R~o=[<Ch{o";
      String string0 = SQLUtil.leftJoin("R~o=[<Ch{o", stringArray0, "L1wWXR9", "R~o=[<Ch{o", stringArray1);
      assertEquals("left join L1wWXR9 as R~o=[<Ch{o on R~o=[<Ch{o.;u9Zf%;.m = R~o=[<Ch{o.R~o=[<Ch{o and R~o=[<Ch{o.R~o=[<Ch{o = R~o=[<Ch{o.null and R~o=[<Ch{o.null = R~o=[<Ch{o.R~o=[<Ch{o and R~o=[<Ch{o.drop table' = R~o=[<Ch{o.drop table' and R~o=[<Ch{o.R~o=[<Ch{o = R~o=[<Ch{o.null", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("SELECT 1  FROM pg_catalog.xg.attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'");
      defaultDBTable0.setSchema(dBSchema0);
      SQLUtil.mutatesDataOrStructure("SELECT 1  FROM pg_catalog.xg.attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'");
      HsqlProperties hsqlProperties0 = new HsqlProperties("SELECT 1  FROM pg_catalog.xg.attrdef  WHERE adrelid = ? AND adnum = ?   AND pg_catalog.pg_get_expr(adbin, adrelid)       LIKE '%nextval(%'");
      hsqlProperties0.isEmpty();
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = SQLUtil.normalize("\"8oEJ@Dn5|O}^ym", false);
      assertEquals("\"8oEJ@Dn5|O}^ym\"", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "N";
      SQLUtil.leftJoin("", stringArray0, "N", "Ih", stringArray0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-433));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.join("", "", stringArray0, "sPelect", ",", stringArray0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertEquals(0, simpleResultSet0.getFetchSize());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("drop index|3l`!-?d:w>cnq4vr");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("crpate unique indexcreateFmateri1lized view8>zyb");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("rename");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "renamecrpate unique indexcreatefmateri1lized view8>zyb";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" NOT NULL");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_L&_");
      defaultDBTable0.setSchema(dBSchema0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!Ayi^S(?.lt%Lr<'";
      stringArray0[1] = "!Ayi^S(?.lt%Lr<'";
      stringArray0[2] = "!Ayi^S(?.lt%Lr<'";
      stringArray0[3] = "!Ayi^S(?.lt%Lr<'";
      stringArray0[4] = "1";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "1";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer(97);
      SQLUtil.renderValue(integer0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertEquals("table", defaultDBTable1.getObjectType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "FIELD_POSITION", "FIELD_POSITION");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("]kK}", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("'");
      SQLUtil.addRequiredCondition("'", stringBuilder0);
      assertEquals("' and '", stringBuilder0.toString());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SQLASCII";
      String string0 = SQLUtil.join("update", "SQLASCII", stringArray0, "nT|fuv/O9{~c/", "update", stringArray0);
      assertEquals("update join nT|fuv/O9{~c/ as update on SQLASCII.SQLASCII = update.SQLASCII and SQLASCII.null = update.null", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("create unique indexescape", "create unique indexescape", stringArray0, "create unique indexescape", "org.databene.jdbacl.SQLUtil", stringArray0);
      assertEquals("create unique indexescape join create unique indexescape as org.databene.jdbacl.SQLUtil on create unique indexescape.null = org.databene.jdbacl.SQLUtil.null and create unique indexescape.null = org.databene.jdbacl.SQLUtil.null and create unique indexescape.null = org.databene.jdbacl.SQLUtil.null", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("[xkl8;B/", "[xkl8;B/", (String[]) null, "18eKspi.", "[xkl8;B/", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("deleteselect 1 from pg_catalog.xg.attrdef where drelid = ? and dnum = ? and pg_catalog.pg_get_expr(adbin, adrelid) like '%n<xtval(%'", ">0", (String[]) null, ">0", ">0", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("deleteexec:3yz|vge6<p3+pi>[", stringBuilder0);
      assertEquals("deleteexec:3yz|vge6<p3+pi>[", stringBuilder0.toString());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("|ci/L_*~");
      SQLUtil.addOptionalCondition("|ci/L_*~", stringBuilder0);
      assertEquals("|ci/L_*~ or |ci/L_*~", stringBuilder0.toString());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("UNIQUE ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
