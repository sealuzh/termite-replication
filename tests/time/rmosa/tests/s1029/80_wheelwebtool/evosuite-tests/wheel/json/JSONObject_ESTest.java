/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 13:16:33 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.920159363620493
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", 0L);
      jSONObject0.put("L7n\"}D~g.4yUIK&JX~", (Object) hashMap0);
      String string0 = jSONObject0.toString((-1337), (-1337));
      assertNotNull(string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.78489484807327
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = new Double((-24.201823968649926));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString(jSONObject0, (-1500), (-1500));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9536870968261045
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("l/#\"fd.Qr& }xVU<M");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{$ZMQ,c>HrEsp9A:");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {$ZMQ,c>HrEsp9A:
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("~");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", 32);
      jSONObject1.remove("Expected a ',' or ']'");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)10719);
      jSONObject0.put("L7n\"}D~g.4yUIK&JX~", (Object) short0);
      long long0 = jSONObject0.optLong("L7n\"}D~g.4yUIK&JX~");
      assertEquals(10719L, long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9722469794234418
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-844L));
      JSONObject jSONObject1 = jSONObject0.put("L7n\"}D~g.4yUIK&JX~", (Object) long0);
      long long1 = jSONObject1.optLong("L7n\"}D~g.4yUIK&JX~");
      assertEquals((-844L), long1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(",", jSONObject0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray(",");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.741920904006395
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Long long0 = Long.valueOf((long) 2345);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("'", (-1.0));
      int int0 = jSONObject0.optInt("'");
      assertEquals(2, jSONObject0.length());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9251211907908186
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Long long0 = new Long((-1262L));
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("co", (double) (-1262L));
      double double0 = jSONObject0.optDouble("co");
      assertEquals((-1262.0), double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = new Double(4093.40129744);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("L7n\"}D~g.4yUIH&J~", (Object) double0);
      Object object0 = jSONObject1.opt("L7n\"}D~g.4yUIH&J~");
      assertEquals(4093.40129744, object0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Double double0 = new Double((-24.201823968649926));
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Q;jx", (Collection) null);
      boolean boolean0 = jSONObject0.has("Q;jx");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", 32);
      jSONObject1.getString("Expected a ',' or ']'");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", 32);
      long long0 = jSONObject1.getLong("Expected a ',' or ']'");
      assertEquals(32L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isdoubleToString", (Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("isdoubleToString");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("6K'M{5*}LT1A", 0L);
      jSONObject0.getInt("6K'M{5*}LT1A");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", 32);
      int int0 = jSONObject1.getInt("Expected a ',' or ']'");
      assertEquals(3, jSONObject0.length());
      assertEquals(32, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9251211907908186
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Long long0 = new Long((-1262L));
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("co", (double) (-1262L));
      int int0 = jSONObject1.getInt("co");
      assertEquals((-1262), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("+^L'D|_(", 0.0);
      double double0 = jSONObject1.getDouble("+^L'D|_(");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9251211907908186
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = new Long((-1262L));
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("co", (double) (-1262L));
      double double0 = jSONObject1.getDouble("co");
      assertEquals((-1262.0), double0, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("L#{z0$~", true);
      boolean boolean0 = jSONObject1.getBoolean("L#{z0$~");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, (-3759), 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = JSONObject.valueToString("\"] is not a JSONArray.\"", 0, (-399));
      assertNotNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(123, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.844240223877993
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = new Double((-24.201823968649926));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-570));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.testValidity(jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("|Y|G47,lT2g-0DIzWv", 0.0);
      long long0 = jSONObject1.getLong("|Y|G47,lT2g-0DIzWv");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5808185358593017
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.put("", (-1337.203042));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("&l&Hvyic", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("' and instead saw '", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, "] is not a JSONObject.");
      assertEquals("] is not a JSONObject.", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 4333L);
      assertEquals(4333L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", (-1948L));
      assertEquals((-1948L), long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("SmeKU", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("~", (-983));
      assertEquals((-983), int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 8448);
      assertEquals(8448, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 754);
      assertEquals(754, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("isjoin", 3806.486520153512);
      assertEquals(3806.486520153512, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("gettoArray", (-4023.0));
      assertEquals((-4023.0), double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("4>:X`XyRA#A", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("|Y|G47,lT2g-0DIzWv", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("Unclosed comment");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double((-24.201823968649926));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-436.0));
      assertEquals("-436", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("-APj.,b,=", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.782131158430108
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      // Undeclared exception!
      jSONObject0.toString(8192, (-3304));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      hashMap0.put((String) null, jSONObject0);
      jSONObject0.put("null", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-1337), (-1337));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.add((Long) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("nuxl", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 4634L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (-156));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      Boolean boolean0 = Boolean.FALSE;
      Short short0 = new Short((short)34);
      hashMap0.put(boolean0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.4375503412075572
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double((-24.201823968649926));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = new Double((-24.201823968649926));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getDouble("getgetNames");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetNames\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, "1091.33253281");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of key
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-0.247240011", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.787860905368237
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject0.put("\u0007Q6RXyu=[<\"|", (Collection) linkedList1);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.2450431669074418
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("L7n\"}D~g.4yUIH&J~", (Object) jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0, 1060, 1060);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-44), (-263));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.782131158430108
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1219, 5206);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1670, (-44));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 132, 132);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.7545804912284984
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("\u0007Q6RXyu=[<\"|", (Collection) linkedList1);
      jSONObject1.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1091.33253281");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Short short0 = new Short((short)1803);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString(4194);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(11, 11);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float(4329.25150916782);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.301348304734199
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double((-24.201823968649926));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(")N[b rDS</9jU>Y3)k|");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.quote("L7n\"}D~g.4yUIH&J~");
      assertEquals("\"L7n\\\"}D~g.4yUIH&J~\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.quote("(T89/v~JXW=@}\"");
      assertEquals("\"(T89/v~JXW=@}\\\"\"", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.5149029225891493
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long long0 = Long.valueOf((long) 2345);
      JSONObject jSONObject0 = new JSONObject(long0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.9989315046035592
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float((-2649.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer(32);
      try { 
        jSONObject0.put((String) null, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = linkedList0.clone();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Expected a ',' or ']'", 58);
      jSONObject0.optString("Expected a ',' or ']'", "Expected a ',' or ']'");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put("L7n\"}D~g.4yUIH&J~", jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("L7n\"}D~g.4yUIH&J~");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5228146795137598
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", 28);
      double double0 = jSONObject1.optDouble("Expected a ',' or ']'");
      assertEquals(3, jSONObject0.length());
      assertEquals(28.0, double0, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float((-2649.0));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(137.7998156);
      Long long0 = new Long(0L);
      hashMap0.putIfAbsent(double0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.195510093068952
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("L7n\"}DJg.4yUIK&J~", (Object) "L7n\"}DJg.4yUIK&J~");
      try { 
        jSONObject0.getJSONObject("L7n\"}DJg.4yUIK&J~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L7n\\\"}DJg.4yUIK&J~\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("rBi?9iEFE^", (Collection) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("rBi?9iEFE^");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isdoubleToString", (Object) "isdoubleToString");
      try { 
        jSONObject0.getJSONArray("isdoubleToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdoubleToString\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.7405117043237692
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = linkedList0.clone();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", 58);
      int int0 = jSONObject1.optInt("Expected a ',' or ']'");
      assertEquals(3, jSONObject0.length());
      assertEquals(58, int0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ishashCode", (Object) "ishashCode");
      try { 
        jSONObject0.getInt("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("Expected a ',' or ']'", 32);
      double double0 = jSONObject0.getDouble("Expected a ',' or ']'");
      assertEquals(3, jSONObject0.length());
      assertEquals(32.0, double0, 0.01);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.580649125069464
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("AL%=m6W8?3Q(", "18446744073709551615");
      long long0 = jSONObject1.optLong("AL%=m6W8?3Q(", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.1873223188492537
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("get", true);
      boolean boolean0 = jSONObject1.optBoolean("get");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("quo", (Object) "quo");
      boolean boolean0 = jSONObject1.optBoolean("quo");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.6548499197556181
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("Expected a ',' or ']'", 32);
      try { 
        jSONObject0.getBoolean("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000004.", false);
      boolean boolean0 = jSONObject1.getBoolean("java.lang.Float@0000000004.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (-84));
      long long0 = jSONObject1.getLong(",\n");
      assertEquals((-84L), long0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0F);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1091.33253281);
      assertEquals("1091.33253281", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("i59_meOm(", "i59_meOm(");
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject0.append("i59_meOm(", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[i59_meOm(] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("?n", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("?n", "Unclosed comment");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.append("", long0);
      JSONObject jSONObject2 = jSONObject0.accumulate("", jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONArray initial value should be a string or collection or array.", jSONArray0);
      JSONArray jSONArray1 = (JSONArray)jSONObject1.get("JSONArray initial value should be a string or collection or array.");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.7375471543741023
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Float float0 = new Float(1625.75F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      Double double0 = new Double(1625.75F);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.optInt("Unterminated string", 427);
      assertEquals(8, jSONObject0.length());
      assertEquals(427, int0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("quo", (Map) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" {d$^{BD");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of  {d$^{BD
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("for", object0);
      boolean boolean0 = jSONObject1.isNull("for");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Integer integer0 = Integer.getInteger(">", 2345);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(">", integer0);
      boolean boolean0 = jSONObject0.isNull(">");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.9430096637858085
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "istoHexString");
      // Undeclared exception!
      jSONObject0.toString(1739);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.7911994487881284
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(32, 32);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.7422208751274784
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Double double0 = new Double((-24.201823968649926));
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.4598012994628564
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", 32);
      jSONObject1.accumulate("Expected a ',' or ']'", linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("gettoString");
      assertEquals("", string0);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("0");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 176
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoString", 1251.457);
      jSONObject1.optString("gettoString");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 177
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("L7n\"}D~g.4yUIH&J~", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 178
  /*Coverage entropy=1.4311119194329758
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Float float0 = new Float((-2649.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put(" wa7L8N0Q!", (-632L));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 179
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      jSONObject0.put("\u0007Q6RXyu=[<\"|", (Collection) linkedList1);
      jSONObject0.optJSONArray("\u0007Q6RXyu=[<\"|");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 180
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Double double0 = new Double((-24.201823968649926));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.has((String) null);
      assertEquals(3, jSONObject0.length());
  }
}
