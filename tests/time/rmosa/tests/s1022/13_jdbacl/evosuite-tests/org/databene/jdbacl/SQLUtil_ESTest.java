/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 09:28:13 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTableComponent;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      String string0 = SQLUtil.renderValue(stringBuilder1);
      assertEquals("", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("9d{4lht>B2");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9d{4lht>B2", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "9d{4lht>B2";
      stringArray0[4] = "execdeletesetcharacterst?eam(int, reader)";
      stringArray0[5] = "9d{4lht>B2";
      stringArray0[6] = " x2&nT";
      stringArray0[7] = "9d{4lht>B2";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execdeletesetcharacterst?eam(int, reader)", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("9d{4lht>B2", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1787), "SP");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" x2&nT", dBTable0, dBDataType0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("5yAlD}D_WY^");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      assertEquals(147L, mockFile0.length());
      
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(" x2&nT,  x2&nT,  x2&nT,  x2&nT,  x2&nT,  x2&nT,  x2&nT,  x2&nT", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select int");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Ag=7x");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" and ", defaultDBTable0, 4, " and ");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-335), "'FOREIGN'");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = Integer.getInteger("'FOREIGN'", integer0);
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("MR]ys7 #_=&b5Q#", defaultDBTable0, dBDataType0, integer1, integer2);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("BTREE", defaultDBTable0, dBDataType0, integer2);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("M5shFo", defaultDBTable0, dBDataType0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      SQLUtil.renderColumnNames(dBColumnArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("M5shFo", "'FOREIGN'");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      mockPrintWriter0.append('6');
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(128L, mockFile0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("create table ");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Y<", true, defaultDBTable0, "MAXIMUM_SCALE");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      assertEquals("create table CONSTRAINT Y< ", stringBuilder1.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lwWkl");
      DBDataType dBDataType0 = DBDataType.getInstance(3844, "*/");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updatea + - (l");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "renameexec&dl_|}e7", false, (String[]) null);
      SQLUtil.renderColumnNames((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&dl_|}e7");
      PrintWriter printWriter0 = mockPrintWriter0.append('/');
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "Wo@HBl,W";
      stringArray0[2] = "Wo@HBl,W";
      stringArray0[3] = "Wo@HBl,W";
      stringArray0[4] = "Wo@HBl,W";
      stringArray0[5] = "Wo@HBl,W";
      stringArray0[6] = "Wo@HBl,W";
      stringArray0[7] = "Wo@HBl,W";
      String[] stringArray1 = new String[5];
      stringArray1[0] = ",channel=";
      stringArray1[1] = "Wo@HBl,W";
      stringArray1[2] = ",channel=";
      stringArray1[3] = "Wo@HBl,W";
      stringArray1[4] = "Q&IU;c._,6)'V";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Wo@HBl,W", stringArray0, ",channel=", ",channel=", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("7o/-X");
      String string0 = SQLUtil.normalize("7o/-X", true);
      assertEquals("7o / - X", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SQLPROCEDURES", true, "7o / - X", "select");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK select", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = SQLUtil.isDML("INTERSECT");
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "inner";
      stringArray0[3] = "inner";
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      stringArray0[4] = "INTERSECT";
      stringArray0[5] = "INTERSECT";
      stringArray0[6] = "INTERSECT";
      String string0 = SQLUtil.join("inner", "CLOB", stringArray0, "CLOB", "inner", stringArray0);
      assertEquals("CLOB as inner on CLOB.CLOB = inner.CLOB and CLOB.CLOB = inner.CLOB and CLOB.inner = inner.inner and CLOB.inner = inner.inner and CLOB.INTERSECT = inner.INTERSECT and CLOB.INTERSECT = inner.INTERSECT and CLOB.INTERSECT = inner.INTERSECT", string0);
      
      boolean boolean1 = SQLUtil.isQuery("DATE");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      TableContainer tableContainer1 = new TableContainer("7o/F-X");
      String[] stringArray0 = new String[10];
      stringArray0[1] = "alter table";
      SQLUtil.ownerDotComponent(tableContainer0);
      SQLUtil.removeComments("4");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("L%");
      Boolean boolean0 = new Boolean("K2nkJ:'xnF<OVem[");
      TableContainer tableContainer0 = new TableContainer("org.apache.derby.impl.sql.compile.FromSubquery");
      tableContainer0.getTable("L%");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "X\"";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.FromSubquery";
      stringArray0[2] = "L%";
      stringArray0[3] = "L%";
      stringArray0[5] = "K2nkJ:'xnF<OVem[";
      stringArray0[6] = "gstIrrayx";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "gstIrrayx", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (X\", org.apache.derby.impl.sql.compile.FromSubquery, L%, L%, , K2nkJ:'xnF<OVem[, gstIrrayx)", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = " ADD ";
      String[] stringArray0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      SQLUtil.renderValue(defaultDBTable0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "*KA";
      stringArray1[1] = "Jg=";
      stringArray1[2] = "Jg=";
      stringArray1[3] = " ADD ";
      stringArray1[4] = ")rc,cj|QUvX";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Jg=", (String[]) null, "org.apachefderby.iapi.", ")rc,cj|QUvX", stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ZiR*Z`X&W;Ko%8g";
      stringArray0[1] = "TYPE_NAME";
      stringArray0[2] = "9_H60]{P/tQfM{7O";
      stringArray0[3] = "One-row database query returned multiple rows: ";
      stringArray0[4] = ">~ 3`#j%p35Sp+\"m";
      stringArray0[5] = "_HEAP";
      stringArray0[6] = "create tablerename";
      stringArray0[7] = "create unique indexkjybk";
      stringArray0[8] = "org.databene.jdbacl.model.DBIndex";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "";
      String string1 = "2147483647";
      SQLUtil.substituteMarkers("", "2147483647", "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-4395));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Character character0 = new Character('M');
      Character.getName(693);
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'M'", string0);
      
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string1 = SQLUtil.substituteMarkers("", "call-|}$g", integer0);
      assertEquals("", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Character character0 = Character.valueOf('w');
      String string0 = SQLUtil.substituteMarkers("execute", "k<", character0);
      assertEquals("execute", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("@N!Iv[r_(", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "SINH(double)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("SINH(double)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"double\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = new Boolean("6<kC5");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6<kC5");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6<kC5", defaultDBTable0, (DBDataType) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("UNIQUE ", 48);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("6<kC5, 6<kC5", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.h2.index.PageBtree");
      DBSchema dBSchema0 = new DBSchema("LENGTH");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.index.PageBtree", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LENGTH";
      stringArray0[1] = "LENGTH";
      stringArray0[2] = "org.h2.index.PageBtree";
      stringArray0[3] = "org.h2.index.PageBtree";
      stringArray0[4] = "LENGTH";
      stringArray0[5] = "org.h2.index.PageBtree";
      stringArray0[6] = "(4KGA^ON>";
      stringArray0[7] = "LENGTH";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.h2.index.PageBtree", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (LENGTH, LENGTH, org.h2.index.PageBtree, org.h2.index.PageBtree, LENGTH, org.h2.index.PageBtree, (4KGA^ON>, LENGTH) REFERENCES org.h2.index.PageBtree(LENGTH, LENGTH, org.h2.index.PageBtree, org.h2.index.PageBtree, LENGTH, org.h2.index.PageBtree, (4KGA^ON>, LENGTH)", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("+-({lp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: +-({lp
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setCharacterStream(int, Reader)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1758, "K2nkJ:'xnF<OVem[");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(1758);
      TableContainer tableContainer0 = new TableContainer("K2nkJ:'xnF<OVem[");
      tableContainer0.getTable("K2nkJ:'xnF<OVem[");
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("K2nkJ:'xnF<OVem[", (DBTable) null, dBDataType0, integer2, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("K2NKJ:'XNF<OVEM[(3,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lwWkl");
      DBDataType dBDataType0 = DBDataType.getInstance(3844, "truncate7o / - x");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lwWkl", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[11];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "J";
      defaultDBTable0.getIndex("drop indextruncate");
      String string0 = SQLUtil.join("c^[8n", "J", stringArray0, "c^[8n", "J", stringArray0);
      assertEquals("c^[8n join c^[8n as J on J.J = J.J and J.null = J.null", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "c^[8n join c^[8n as J on J.J = J.J and J.null = J.null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (J, )", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = new Boolean("");
      TableContainer tableContainer0 = new TableContainer("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBColumn dBColumn0 = defaultDBTable0.getColumn("");
      vector0.add(dBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("SJ'os:5&Y~Iv+YR:02B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'SJ'os:5&Y~Iv+YR:02B' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B-=Ur/0=u2.A%Sl", (DBTable) null, 47, " NULL");
      SQLUtil.normalize("", true);
      SQLUtil.parseColumnTypeAndSize("");
      defaultDBColumn0.setDefaultValue("]gQ`;B");
      boolean boolean0 = SQLUtil.isDDL("d|(:'gt7pN ;WU");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("B-=Ur/0=u2.A%Sl  NULL DEFAULT ]gQ`;B NULL", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " NULL";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("( NULL)", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = SQLUtil.normalize("setCharacterStream(int, Reader)", false);
      assertEquals("setCharacterStream (int, Reader)", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select into");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = SQLUtil.normalize("\"v+WQCMdzU", true);
      assertEquals("\"v+WQCMdzU\"", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(41, "select into");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.toUnsignedString(41);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select into", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("select into SELECT INTO(0) NULL", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("create unique index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into7o/-x");
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "=&B<V1(Xm";
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "=&B<V1(Xm", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3862, "drop indextruncate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop indextruncate", defaultDBTable0, dBDataType0);
      MockFile mockFile0 = new MockFile("drop indextruncate");
      MockFileWriter mockFileWriter0 = new MockFileWriter("drop indextruncate", true);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "}9_1]#hPD\nv<EPoKR", true, "drop indextruncate");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec1);
      assertEquals("drop indextruncate NOT NULL", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+-({LP");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "+-({LP", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = SQLUtil.normalize("K2nkJ:'xnF<OVem[", true);
      assertEquals("K2nkJ : 'xnF<OVem['", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = SQLUtil.normalize("+-({LP", true);
      assertEquals("+ - ({ LP", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      List<DBTableComponent> list0 = new GenericDescriptorList();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = " +";
      stringArray0[1] = " +";
      stringArray0[2] = " +";
      stringArray0[3] = " +";
      stringArray0[4] = "7}vJ`/>bKJ9cn`E89";
      stringArray0[5] = " +";
      stringArray0[6] = " +";
      String[] stringArray1 = new String[4];
      stringArray1[0] = " +";
      stringArray1[1] = "7}vJ`/>bKJ9cn`E89";
      stringArray1[2] = " +";
      stringArray1[3] = "7}vJ`/>bKJ9cn`E89";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(" +", stringArray0, " +", " +", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("rename", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$b70MLp53?D)aNWB4y";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "m3";
      String string0 = SQLUtil.leftJoin("$b70MLp53?D)aNWB4y", stringArray0, "$b70MLp53?D)aNWB4y", "m3", stringArray1);
      assertEquals("left join $b70MLp53?D)aNWB4y as m3 on $b70MLp53?D)aNWB4y.$b70MLp53?D)aNWB4y = m3.m3", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("'");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lwWkl");
      DBDataType dBDataType0 = DBDataType.getInstance(3844, "truncate7o / - x");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("lwWkl", defaultDBTable0, dBDataType0);
      defaultDBColumn0.toString();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("lwWkl : TRUNCATE7O / - X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'lwWkl : TRUNCATE7O / - X' not found in table 'lwWkl'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1758, "K2nkJ:'xnF<OVem[");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(1758);
      TableContainer tableContainer0 = new TableContainer("K2nkJ:'xnF<OVem[");
      tableContainer0.getTable("K2nkJ:'xnF<OVem[");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("K2nkJ:'xnF<OVem[", (DBTable) null, dBDataType0, integer1);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("K2NKJ:'XNF<OVEM[(1758)", stringBuilder0.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("LOCAL ");
      StringBuilder stringBuilder0 = new StringBuilder(3332);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(122, "");
      Integer integer0 = new Integer(122);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w}G(e00O78$^h~s5", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("(122)", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "execute";
      SQLUtil.isProcedureCall("execute");
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execute", true, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Boolean boolean0 = SQLUtil.mutatesStructure("execorg.apache.derby.iapi.sql.dictionary.sequencedescriptor");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "]9`[-";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]9`[-";
      String string1 = "2L\"s<]-*";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "]9`[-";
      SQLUtil.innerJoin("]9`[-", stringArray0, "2L\"s<]-*", "alter index(", stringArray1);
      VersionNumber versionNumber0 = VersionNumber.valueOf("2L\"s<]-*");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("2L\"s<]-* as alter index( on ]9`[-.]9`[- = alter index(.]9`[-", "2L\"s<]-* as alter index( on ]9`[-.]9`[- = alter index(.]9`[-", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("alter materialized view(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '2L\"s<]-* as alter index( on ]9`[-.]9`[- = alter index(.]9`[-'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "jnC--( %8ly!0PG]4[");
      StringBuilder stringBuilder1 = stringBuilder0.append("jnC--( %8ly!0PG]4[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "jnC--( %8ly!0PG]4[", false, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("jnC--( %8ly!0PG]4[jnC--( %8ly!0PG]4[CONSTRAINT \"jnC--( %8ly!0PG]4[\" ", stringBuilder1.toString());
      assertEquals("jnC--( %8ly!0PG]4[jnC--( %8ly!0PG]4[CONSTRAINT \"jnC--( %8ly!0PG]4[\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" ADD ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " ADD ", false, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.7598407318671061
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLUtil.normalize("7o/-X", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "3u'MIc";
      // Undeclared exception!
      try { 
        SQLUtil.join("3u'MIc", "3u'MIc", stringArray1, (String) null, ".", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join("create materialized viewsetcharacterstream(int, reader)", "A7ng=hx", stringArray0, "alter session", "O]g,GlVd^", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join("select into", "$b70MLp53?D)aNWB4y", (String[]) null, "$b70MLp53?D)aNWB4y", "select into", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = SQLUtil.normalize("XBCXJ.S", false);
      assertEquals("XBCXJ.S", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      jdbcClob jdbcClob0 = new jdbcClob("delete1fh`fi`peaxr(+?");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "Requested memory: ", (String[]) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "G6";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "G6", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "G6", (-1239913961), 221);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -1239913961, end 221, s.length() 2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "7o/-X");
      SQLUtil.addOptionalCondition("7o/-X", stringBuilder0);
      assertEquals("7o/-X or 7o/-X", stringBuilder0.toString());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("LOCKS", (String[]) null, "^2saieac", "getTableScanResultSet", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("create table", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLUtil.isProcedureCall("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5owrz-I", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = "rename";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rename");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("rename", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(" AS ");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container  AS ", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue("+-({lp");
      assertEquals("'+-({lp'", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "create table";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ", ", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(6);
      stringBuilder0.append((double) 6);
      stringBuilder0.reverse();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ', ' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.937566794583933
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = SQLUtil.normalize("*(@l0+ W>O", false);
      assertEquals("* (@ l0 + W > O", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*(@l0+ W>O");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*(@l0+ W>O";
      stringArray0[1] = "*(@l0+ W>O";
      stringArray0[2] = "f>T6}seY9<{+";
      stringArray0[3] = "* (@ l0 + W > O";
      stringArray0[4] = "*(@l0+ W>O";
      stringArray0[5] = "*(@l0+ W>O";
      stringArray0[6] = "* (@ l0 + W > O";
      stringArray0[7] = "*(@l0+ W>O";
      stringArray0[8] = "* (@ l0 + W > O";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "*(@l0+ W>O", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("* (@ l0 + W > O", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("*(@l0+ W>O", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"*(@l0+ W>O\" FOREIGN KEY (*(@l0+ W>O, *(@l0+ W>O, f>T6}seY9<{+, * (@ l0 + W > O, *(@l0+ W>O, *(@l0+ W>O, * (@ l0 + W > O, *(@l0+ W>O, * (@ l0 + W > O) REFERENCES *(@l0+ W>O(*(@l0+ W>O, *(@l0+ W>O, f>T6}seY9<{+, * (@ l0 + W > O, *(@l0+ W>O, *(@l0+ W>O, * (@ l0 + W > O, *(@l0+ W>O, * (@ l0 + W > O)", string1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.7598407318671061
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = false;
      SQLUtil.normalize("7o/-X", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "INTERSECT");
      SQLUtil.addRequiredCondition("INTERSECT", stringBuilder0);
      assertEquals("INTERSECT and INTERSECT", stringBuilder0.toString());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = SQLUtil.substituteMarkers("alter session", "aKter ses_ion", "aKter ses_ion");
      assertEquals("alter session", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderColumnListWithTableName("A|?<<`I/#7}_{_", stringArray0);
      assertEquals("A|?<<`I/#7}_{_.null, A|?<<`I/#7}_{_.null", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("42Y44");
      String string0 = SQLUtil.renderValue(jMXPrincipal0);
      assertEquals("JMXPrincipal:  42Y44", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("CHECK ");
      dBSchema0.getTriggers();
      DBPackage dBPackage0 = new DBPackage("Osi-Nu9(5ehDS6;o", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("CHECK .Osi-Nu9(5ehDS6;o", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join(" NOT", " NOT", stringArray0, " NOT", "DATE", stringArray0);
      assertEquals(" NOT join  NOT as DATE on  NOT.null = DATE.null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("", "\u0001\u01D8", stringArray0, "\u0001\u01D8", "", stringArray0);
      assertEquals("\u0001\u01D8 as  on \u0001\u01D8.null = .null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join(", #(", ", #(", stringArray0, stringArray0[0], stringArray0[0], stringArray0);
      assertEquals(", #( join null as null on , #(.null = null.null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter indexd");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("Ag=7x", "Ag=7x", (String[]) null, "Ag=7x", "Ag=7x", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("RandomUils warning: ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("9mfow+jLFK4l84;7z[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop indexloal");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("selectz^mvsi:;{j~~u//");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("catalog ");
      assertNull(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select int");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop indexw\"g~)/5p?");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DROP TABLE IF EXISTS SYSTEM_LOB_STREAM");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = "UNIQUE ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "UNIQUE ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+-({LP");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "+-({LP", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT +-({LP ", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = " ADD ";
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" ADD ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(" ADD ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = 47;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringBuilder1.insert(47, object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 47
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "r74Z$0FG=Gv%Ed?Hk";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select int", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(1746);
      stringBuilder0.append((double) 1746);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("select int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'select int' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[9qC^FN_v|pq-goab", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("43X50.U", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
