/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 09:20:59 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9L), (-9L));
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Object object0 = new Object();
      range1.equals(object0);
      Long long0 = new Long(4294967295L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.of((-9L), (-46L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.79709058749954
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 2147483650L);
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2452L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-103L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1056L, 1056L);
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967295 .. 9223372036854775807 ]/RB", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.891228606131704
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9L), (-9L));
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-9L));
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4499L, 2147483650L);
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483650L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4499L, 2147483650L);
      Range range1 = Range.of(range_CoordinateSystem0, 4499L, 2147483650L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967310L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9L), (-9L));
      List<Range> list0 = range0.split(9223372036854772807L);
      assertTrue(list0.contains(range0));
      
      range0.equals((Object) null);
      Range range1 = Range.ofLength(2204L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.329213344056216
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967280L, 9223372036854775807L);
      Object object0 = new Object();
      Range range2 = Range.of(4294967280L, 9223372036854775807L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1229L), (-1229L));
      range0.getLength();
      Object object0 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, (-1229L), (-1229L));
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 32766L, (-1229L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(9223372036854775782L, 9223372036854775782L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.of(9223372036854775781L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775781L, (-609L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -610 would make range [9223372036854775780 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = range0.getLength();
      assertEquals(9223372036854775807L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-1776L));
      Range range1 = Range.of((-32768L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 2147483650L);
      range0.equals(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8904325862312064
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-933L), 9223372032559808513L);
      range0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(594L, (-1271L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-1757L));
      Range range1 = Range.of((-1757L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4399344746619356
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.equals(range_CoordinateSystem1);
      Range range1 = Range.of(4294967295L, 4294967295L);
      range1.split(4294967295L);
      range1.intersection(range0);
      range0.split(4294967295L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 24L, (-125L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 405L, (-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 673L, 9223372032559808528L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3032L, 2147483647L);
      Long long0 = new Long(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(267L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-1776L));
      Range range1 = Range.of((-32768L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9L), (-9L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.388109314457251
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getLength();
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775806 ]/0B", string0);
      
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals((Object) null);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775781L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2L, 2L);
      range0.spliterator();
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9L), (-9L));
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-9L), (-9L));
      range1.isEmpty();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.849528435713972
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1757L);
      Range range0 = Range.of((-1757L));
      Range range1 = Range.of(9223372036854775798L);
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1757 would make range [9223372036854775798 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.toString();
      Range range1 = Range.of(612L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0613522351593794
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 5699L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(range_CoordinateSystem1, 3353L, 5700L);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 2136L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(2147485305L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147485305 .. 2147485306 ]/SB", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-609L), 32767L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-4708L));
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-4707L), long0);
      
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9796434918932646
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-1776L));
      Range range1 = Range.of((-32780L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-32780L), long0);
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.5883969507128115
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = (-2147483677L);
      Range range0 = Range.of((-2147483677L));
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(157L, 157L);
      range1.complement(range0);
      range1.intersection(range0);
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 9223372036854775368L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3853212528456598
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift(4294967295L);
      Range.of(4294967295L);
      range_Builder1.contractBegin((-2147483648L));
      range_Builder1.contractBegin((-277L));
      Range.of(1531L);
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Space Based", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8928447677478655
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1353L);
      range0.endsBefore(range0);
      Range.of(range_CoordinateSystem0, 0L, 1353L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 2696L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.892518928712349
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483647L, 4294967295L);
      range0.equals(range1);
      long long0 = 1517L;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 2147483647L, 3586L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8922772952702807
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 2147483650L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483650L, 4294967295L);
      boolean boolean0 = range0.equals(range1);
      Long long0 = new Long(0L);
      Object object0 = new Object();
      boolean boolean1 = range1.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-94L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1886L, 2147483647L);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6892880693997117
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(1L);
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.33002863068042
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-3264L));
      Range range1 = Range.of(103L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      range0.isSubRangeOf(range1);
      range0.startsBefore(range1);
      Range range2 = Range.of(103L, 1621L);
      range0.intersects(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("F8`?I4Si5w##");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.F8`?I4Si5w##
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5409253154212634
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 30L, 65535L);
      range0.equals("]^EwhjDQVb33Bmk");
      Range range1 = Range.of(65535L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 2147483650L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-654L), 9223372034707292161L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(5708L);
      range0.getEnd();
      Long long0 = new Long(5708L);
      String string0 = "";
      // Undeclared exception!
      try { 
        Long.remainderUnsigned(648L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9848588988568583
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(2605L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.204453078800052
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      List<Range> list0 = range0.split(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(1L);
      Range range1 = Range.ofLength(1L);
      List<Range> list1 = range1.split(4294967295L);
      assertFalse(range1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.0608843168111313
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(706L);
      Long long0 = new Long(706L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854774703L, (-1692L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1692 would make range [9223372036854774703 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      List<Range> list0 = new LinkedList<Range>();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange("[ 0 .. 9223372036854775807 ]/SB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 350L, 350L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.parseRange("RP'7,3@", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.980481871026939
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 2147483650L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483650L, 2147483650L);
      long long0 = range0.getBegin();
      assertEquals(2147483649L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Long long1 = new Long(2147483650L);
      boolean boolean1 = range1.equals(range0);
      boolean boolean2 = range0.intersects(range1);
      assertTrue(boolean2 == boolean1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.329213344056216
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range range1 = Range.of((-765L));
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2688850185360776
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(127L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of(1L);
      range0.complement(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Long long0 = new Long((-128L));
      Long.getLong("number of entries must be >=0", long0);
      boolean boolean0 = range0.equals(long0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      boolean boolean1 = range0.intersects(range1);
      assertTrue(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.892740633623113
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 2147483650L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483650L, 2147483650L);
      boolean boolean0 = range0.endsBefore(range1);
      Long long0 = new Long(2147483650L);
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(267L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.134783825341754
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      long long1 = range0.getEnd();
      assertEquals((-1L), long1);
      
      Range range1 = Range.ofLength(178L);
      Range range2 = Range.ofLength(255L);
      List<Range> list0 = range2.complement(range0);
      assertTrue(list0.contains(range2));
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range1.equals(object1);
      assertNotSame(range1, range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483631L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(267L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(215L);
      range_Builder1.contractEnd((-4760L));
      Range.Builder range_Builder2 = range_Builder0.expandBegin((-758L));
      range_Builder2.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = range_Builder1.expandEnd((-2064L));
      range_Builder4.expandEnd(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-758L), (-4760L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 0L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 365L, 365L);
      range_Builder0.build();
      range_Builder0.expandBegin((-1268L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(16L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1580L), 0L);
      Range range0 = Range.ofLength(0L);
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 2476L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.0574866708943733
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 509L, 509L);
      List<Range> list0 = range0.split(509L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      assertTrue(list1.contains(range0));
      
      Long long0 = new Long(509L);
      range0.equals(long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-1303L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1303L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(32768L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(5L);
      long long0 = range0.getBegin();
      assertEquals(5L, long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.getLength();
      range0.getLength();
      Range range1 = Range.of(255L);
      range1.isSubRangeOf(range0);
      Long.min((-162L), 2147483646L);
      // Undeclared exception!
      try { 
        range1.split((-1278L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.9804021452834966
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 2147483650L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483650L, 2147483650L);
      range1.split(2147483650L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse UTF-8 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-1152L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(1173L);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967280L, 4294967280L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.061012349587522
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-149L), 0L);
      range1.toString(range_CoordinateSystem0);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(3599L);
      List<Range> list0 = range0.split(3599L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(1947L);
      range0.split(2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 776L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 776L, 776L);
      range_Builder0.expandEnd(776L);
      range_Builder0.contractEnd(776L);
      range_Builder0.expandEnd(776L);
      range_Builder0.contractBegin(776L);
      String string0 = "given length %d would make range [%d - ? ] beyond max allowed end offset";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("given length %d would make range [%d - ? ] beyond max allowed end offset");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.given length %d would make range [%d - ? ] beyond max allowed end offset
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandBegin(215L);
      range_Builder0.contractEnd(215L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.565928028166322
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1333L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(1333L, long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.6903752622677266
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Long long0 = new Long(4123L);
      Long.getLong("", long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294967295L, long1);
      
      Long long2 = new Long((-2867L));
      Long.getLong("JmQz$t4ura).8", long2);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 4294967294 ]/0B", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-2408L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-249L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-249L), long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(1063L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      range0.equals("$0>{&_.T6i{4)q1(i/");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long.valueOf(0L);
      Long long0 = new Long((-2147483648L));
      long long1 = new Long(2L);
      Object object0 = new Object();
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-2147480063L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.203625422341148
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2240L, 4294967295L);
      Range range1 = range0.intersection(range0);
      range1.iterator();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-9L), 5699L);
      long long0 = new Long((-9L));
      assertEquals((-9L), long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.388540256064663
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(267L, 267L);
      String string0 = range0.toString();
      assertEquals("[ 267 .. 267 ]/0B", string0);
      
      Range range1 = Range.of(267L, 267L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3032L, 3032L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.iterator();
      Long long0 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("]])V(je+z O", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ]])V(je+z O into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.1376488789110333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9L), (-9L));
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-46L), (-9L));
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.9815509450900146
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(2L);
      Range range1 = Range.of(2L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      range0.equals((Object) null);
      Range.Comparators.values();
      Range range2 = range0.asRange();
      Range range3 = range1.intersection(range2);
      assertSame(range3, range0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(0L, long0);
      
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775790L));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(2776L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.contractBegin(0L);
      long long1 = 2001L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2001L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long0 = (-2380L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1021L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-531L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-3167L), (-3167L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483650L, (-9223372036854774528L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774529 would make range [2147483649 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.891722433292198
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(848L);
      Long long0 = new Long(177L);
      Object object0 = new Object();
      Range range1 = Range.of(177L);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("(d+)s*..s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.(d+)s*..s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = new Long(9223372036854775807L);
      long long1 = range0.getLength();
      assertEquals(9223372036854775807L, long1);
      
      long long2 = new Long(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.startsBefore(range0);
      boolean boolean1 = range0.equals(consumer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Long long1 = new Long(0L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(1354L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2021L), (-2021L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2046L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-1L));
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-758L));
      range_Builder0.expandBegin(215L);
      range_Builder0.contractEnd(215L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-758L));
      long long0 = (-375L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-375L));
      range_Builder2.contractEnd((-758L));
      range_Builder0.expandBegin((-758L));
      // Undeclared exception!
      try { 
        range_Builder1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-47L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin(197L);
      long long0 = (-4760L);
      range_Builder2.contractEnd((-4760L));
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-47L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-11L);
      range_Builder0.contractEnd((-11L));
      // Undeclared exception!
      try { 
        Range.ofLength((-11L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2046L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = (-114L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-114L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-18L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = 211L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 211L, 211L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.5651558273941215
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = 3685L;
      Range.Builder range_Builder0 = new Range.Builder(3685L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-193L));
      assertFalse(range0.isEmpty());
  }
}
