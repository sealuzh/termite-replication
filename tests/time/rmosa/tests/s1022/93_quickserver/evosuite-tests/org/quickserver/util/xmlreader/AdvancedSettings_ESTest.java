/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 09:44:58 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass(",xdmKSm<}}}");
      advancedSettings0.setPerformancePreferencesBandwidth((-1167));
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.setClientSocketSendBufferSize((-1167));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getCharset();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getMaxThreadsForNioWrite();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getCharset();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("&^=N-0dy1%LVu%v");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getCharset();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals("&^=N-0dy1%LVu%v", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(8);
      advancedSettings0.setSocketLinger(8);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(8, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(2529);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(false);
      assertEquals(2529, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1765));
      advancedSettings0.setCharset("");
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-1765), int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth((-2007));
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals((-2007), int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(2907);
      advancedSettings0.setClientSocketReceiveBufferSize((-2333));
      advancedSettings0.setClientSocketReceiveBufferSize((-2333));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setClientSocketTrafficClass("W^ ze\"aI");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setCharset("");
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(2907, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(3985);
      advancedSettings0.setPerformancePreferencesConnectionTime((-48));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(13);
      advancedSettings0.setMaxThreadsForNioWrite(13);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings1.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(949);
      advancedSettings0.setQSObjectPoolMaker("</client-socket-receive-buffer-size>\n");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("</client-socket-receive-buffer-size>\n");
      advancedSettings2.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings2.setCharset("");
      advancedSettings2.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings2.setPerformancePreferencesBandwidth((-4771));
      advancedSettings1.setSocketLinger((-48));
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setBacklog((-1));
      advancedSettings0.setClientSocketSendBufferSize(949);
      advancedSettings2.setCharset("");
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(13, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(15);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(15, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-2333));
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings2.setCharset("$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // $
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-152));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      assertEquals((-152), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(2033);
      boolean boolean0 = false;
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesBandwidth(2033);
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("2r+>.+8i/ha~5");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 2r+>.+8i/ha~5
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(2797);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime((-898));
      advancedSettings1.setByteBufferSize(2797);
      advancedSettings1.setPerformancePreferencesBandwidth(2797);
      advancedSettings1.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime(3405);
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setClientIdentifier("");
      // Undeclared exception!
      try { 
        advancedSettings3.setCharset("z(-w[H$`3");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // z(-w[H$`3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-597));
      advancedSettings0.setClientSocketSendBufferSize((-1204));
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-597), advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals((-1204), int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesBandwidth(2676);
      advancedSettings0.getDebugNonBlockingMode();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings2.setCharset("U");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // U
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(35);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime((-4280));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("ry[E,1sF<zKV)Ct");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ry[E,1sF<zKV)Ct
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.toXML("0T6MF<$,!");
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "@^}=GJD";
      advancedSettings0.setClientSocketTrafficClass("@^}=GJD");
      advancedSettings0.setClientSocketSendBufferSize(2907);
      String string1 = "";
      advancedSettings0.getClientSocketTrafficClass();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("</use-direct-byte-buffer>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </use-direct-byte-buffer>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.31931252327703
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("waM");
      advancedSettings0.toXML("waM");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("b");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // b
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("h");
      assertEquals("h", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, int0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(838);
      advancedSettings0.toXML("</client-socket-tcp-no-delay>\n");
      assertEquals(838, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("^(|j$");
      assertEquals("^(|j$<advanced-settings>\n^(|j$\t<charset>ISO-8859-1</charset>\n^(|j$\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n^(|j$\t<byte-buffer-size>65536</byte-buffer-size>\n^(|j$\t<backlog>0</backlog>\n^(|j$\t<socket-linger>-1</socket-linger>\n^(|j$\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n^(|j$\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n^(|j$\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n^(|j$\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n^(|j$\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n^(|j$\t<performance-preferences-latency>0</performance-preferences-latency>\n^(|j$\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n^(|j$\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n^(|j$</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getDebugNonBlockingMode();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getSocketLinger();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), int0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-801));
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(121);
      assertEquals(121, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings1.setBacklog(507);
      advancedSettings1.setBacklog((-7));
      advancedSettings1.getClientSocketTrafficClass();
      assertEquals(507, advancedSettings1.getBacklog());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(boolean0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(boolean0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getBacklog());
      
      advancedSettings0.setBacklog(1);
      assertEquals(1, advancedSettings0.getBacklog());
  }
}
