/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 09:12:26 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Locale;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("nu8lK");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "nu8lK";
      stringArray0[2] = "@data";
      stringArray0[3] = "integer";
      stringArray0[4] = "real";
      Instances.test(stringArray0);
      instances0.add((Instance) sparseInstance0);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      boolean boolean0 = discretize0.setInputFormat(instances1);
      assertFalse(boolean0);
      
      Instances instances2 = Filter.useFilter(instances0, discretize0);
      assertEquals(1, instances2.size());
      assertEquals("numeric-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances2.relationName());
      
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("nu8lK");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList1, 0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      Filter.useFilter(instances0, discretize0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2040109463));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2040109463
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 1);
      Predicate.isEqual((Object) 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.makeBinaryTipText();
      discretize0.setBins((-991));
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("nu8lOy K");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList1, 54);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((-2517.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(2);
      instances0.add((Instance) sparseInstance1);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      Instances instances2 = Filter.useFilter(instances1, discretize0);
      assertEquals(1, instances2.size());
      assertEquals("integer-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances2.relationName());
      
      discretize0.outputPeek();
      assertTrue(discretize0.isNewBatch());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("nu8lDK");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("integer", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      Instances instances2 = new Instances("@relation", arrayList1, 0);
      Attribute attribute1 = new Attribute(".bsi");
      arrayList1.add(attribute0);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-1));
      boolean boolean0 = discretize0.m_UseBinNumbers;
      SystemInUtil.addInputLine("!3y");
      discretize0.setMakeBinary(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.getBins();
      int int0 = (-2470);
      discretize0.useBinNumbersTipText();
      Discretize discretize1 = new Discretize();
      boolean boolean1 = discretize0.m_UseBinNumbers;
      SystemInUtil.addInputLine("!3y");
      Discretize discretize2 = new Discretize("!3y");
      String[] stringArray0 = new String[3];
      stringArray0[2] = "'B1of2'";
      try { 
        discretize2.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attribute attribute0 = new Attribute("Bu8+Dg");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Predicate.isEqual((Object) "integer");
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("!`FsQWh5_:");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Predicate.isEqual((Object) 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      Instances instances0 = new Instances("!`FsQWh5_:", arrayList0, 620);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals(1, instances1.numAttributes());
      assertEquals("!`FsQWh5_:-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      assertTrue(discretize0.isNewBatch());
      
      discretize0.setInputFormat(instances0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("nu8lDK");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("integer", arrayList2, 54);
      Instances instances1 = new Instances(instances0);
      instances0.equalHeadersMsg(instances1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 54;
      doubleArray0[1] = (double) 3;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(784.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      Discretize discretize0 = new Discretize();
      Instances instances2 = new Instances(instances0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      double[] doubleArray1 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray1);
      discretize0.input(binarySparseInstance0);
      discretize0.findNumBinsTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.isNewBatch());
      
      discretize0.batchFinished();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("nu8lDK");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("integer", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.setValue(attribute0, ".arff");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute neither nominal nor string!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("nu8lDK", arrayList0, (-1968526675));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances((String) null, arrayList1, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      Filter.useFilter(instances0, discretize0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-851.01), doubleArray0);
      discretize0.input(binarySparseInstance0);
      discretize0.findNumBinsTipText();
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("nu8lK");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      Filter.useFilter(instances0, discretize0);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.425910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[21][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[3] = (-1780.181);
      doubleArray0[3] = doubleArray1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-1780.181);
      doubleArray2[5] = 0.0;
      doubleArray0[4] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[1] = (-1780.181);
      doubleArray3[3] = (-1780.181);
      doubleArray0[5] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.toString();
      discretize0.getRevision();
      boolean boolean0 = discretize0.m_UseBinNumbers;
      int int0 = discretize0.m_NumBins;
      Locale.getISOLanguages();
      discretize0.setMakeBinary(true);
      Filter.makeCopies(discretize0, 10);
      discretize0.getBinRangesString(10);
      assertTrue(discretize0.getMakeBinary());
      
      Discretize discretize1 = new Discretize("d/l1dUbd6W;bkgYl");
      discretize1.m_DesiredWeightOfInstancesPerInterval = (double) 10;
      discretize1.getDesiredWeightOfInstancesPerInterval();
      discretize1.invertSelectionTipText();
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("nu8lK");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'nu8lK' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-54);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Attribute attribute0 = new Attribute("nu8lDK");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("string", arrayList1, 1);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)80;
      doubleArray0[1] = (-3822.314);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        Filter.useFilter(instances1, discretize0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)80;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("nu8lDK", arrayList0, (byte)80);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("date", arrayList1, 2);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int0 = discretize0.m_ClassIndex;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1555);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1555
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("nu8lDK", arrayList0, (byte)80);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("date", arrayList1, 2);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3822.314), doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2234);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2234
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attribute attribute0 = new Attribute("!`FsQWh5_:");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("relational", arrayList0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-340));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)80;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("nu8lDK", arrayList0, (byte)80);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("date", arrayList1, 2);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3822.314), doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("nu8lDK", arrayList0, (-1968526675));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances((String) null, arrayList1, 4);
      Discretize discretize0 = new Discretize();
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("I]=5g3`KXO", arrayList0, (-2040109463));
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("string", arrayList1, 3748);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      DenseInstance denseInstance0 = new DenseInstance(1);
      discretize0.calculateCutPoints();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("Bu8+Dg");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 4);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-929));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[21][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (-1273.0988192281848);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1780.18094);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1.0;
      doubleArray0[3] = doubleArray3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1780.18094);
      doubleArray4[3] = 1.0;
      doubleArray4[5] = (-1273.0988192281848);
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[1] = (-1273.0988192281848);
      doubleArray1[3] = 1.0;
      doubleArray5[3] = (-1780.18094);
      doubleArray0[5] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.toString();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      discretize0.getRevision();
      discretize0.getUseEqualFrequency();
      int int0 = discretize1.m_NumBins;
      Locale.getISOLanguages();
      discretize0.setMakeBinary(true);
      Filter.makeCopies(discretize1, 10);
      discretize0.getBinRangesString(10);
      discretize1.makeBinaryTipText();
      discretize0.getMakeBinary();
      discretize0.findNumBinsTipText();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.getFindNumBins();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[4];
      discretize0.setInvertSelection(true);
      discretize0.listOptions();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = new Attribute("Bu8+Dg");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Predicate.isEqual((Object) "integer");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.setOptions((String[]) null);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[1];
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.5;
      double[][] doubleArray0 = new double[5][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 5.5;
      doubleArray1[1] = 5.5;
      doubleArray1[2] = 5.5;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 5.5;
      doubleArray2[1] = 5.5;
      doubleArray2[2] = 5.5;
      doubleArray2[3] = 54.0;
      doubleArray2[4] = 5.5;
      doubleArray2[5] = 5.5;
      doubleArray2[6] = 5.5;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 5.5;
      doubleArray3[1] = 54.0;
      doubleArray3[2] = (-1481.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 1938.34722851;
      doubleArray4[1] = 2690.4082625762;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (-1481.0);
      doubleArray5[1] = 1938.34722851;
      doubleArray5[2] = 2690.4082625762;
      doubleArray5[3] = 5.5;
      doubleArray5[4] = (-1481.0);
      doubleArray5[5] = 5.5;
      doubleArray5[6] = 54.0;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_UseEqualFrequency = false;
      discretize0.listOptions();
      stringArray0[0] = "\tOutput binary attributes for discretized attributes.";
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize("\", atts, 0);\n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.m_UseBinNumbers = true;
      discretize0.setFindNumBins(true);
      discretize0.getAttributeIndices();
      discretize0.getOptions();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = true;
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[13];
      stringArray0[0] = "-";
      stringArray0[9] = "{85PpKxPbQ";
      stringArray0[2] = "Lif=)]d";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Input instance to filter";
      stringArray0[1] = "05\"Lb\"+;p6";
      stringArray0[2] = "'g0fp<tzpvfss337.@:";
      stringArray0[3] = "-R";
      stringArray0[4] = "40W9";
      stringArray0[5] = "-D";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getCapabilities();
      discretize0.getCapabilities();
      System.setCurrentTimeMillis((-2717L));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("ptimize number of equal-width bins using leave-one-out.<Doesn' work for equal-fequency binning", arrayList1, 1595);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList3.add(attribute0);
      Instances instances0 = new Instances("date", arrayList3, 4);
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "string");
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      discretize0.setDesiredWeightOfInstancesPerInterval((-1.0));
      discretize0.getInvertSelection();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.getRevision();
      int[] intArray0 = new int[12];
      discretize0.getAttributeIndices();
      intArray0[0] = (-2198);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getInvertSelection();
      discretize0.findNumBinsTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = new Attribute("Bu8+Dg");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Predicate.isEqual((Object) "integer");
      Discretize discretize0 = new Discretize("string");
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      Instances instances1 = new Instances(")", arrayList0, 44);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at string
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("-R <col1,col2-col4,...>");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Range range0 = new Range("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      discretize0.m_DiscretizeCols = range0;
      discretize0.m_DiscretizeCols = null;
      discretize0.getCutPoints(14);
      System.setCurrentTimeMillis(14);
      discretize0.useBinNumbersTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.getAttributeIndices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[2][2];
      discretize0.m_CutPoints = doubleArray0;
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "-R <col1,col2-col4,...>";
      Discretize discretize0 = new Discretize("-R <col1,col2-col4,...>");
      int int0 = 14;
      discretize0.setUseEqualFrequency(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Range range0 = new Range("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      discretize0.m_DiscretizeCols = range0;
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.m_UseEqualFrequency = true;
      discretize0.toString();
      Discretize discretize1 = new Discretize();
      discretize0.getRevision();
      discretize0.getUseEqualFrequency();
      int int0 = discretize0.m_NumBins;
      Locale.getISOLanguages();
      discretize0.setMakeBinary(true);
      discretize0.m_NumBins = 10;
      Filter.makeCopies(discretize0, 10);
      discretize0.getBinRangesString(10);
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("b-lw9p.a");
      discretize0.getCapabilities();
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1815.278707;
      doubleArray1[1] = 54.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 415.123031853;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1815.278707;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 54.0;
      doubleArray4[1] = 1.0;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 1815.278707;
      doubleArray4[4] = 1815.278707;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = 54.0;
      doubleArray5[2] = (-1790.9);
      doubleArray5[3] = 3.0;
      doubleArray5[4] = 415.123031853;
      doubleArray5[5] = (-4.57826535);
      doubleArray5[6] = 415.123031853;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 54.0;
      doubleArray6[1] = 1.0;
      doubleArray6[2] = (-1790.9);
      doubleArray6[3] = 1.0;
      doubleArray6[4] = 1.0;
      doubleArray6[5] = 54.0;
      doubleArray6[6] = 54.0;
      doubleArray6[7] = (-1790.9);
      doubleArray6[8] = 54.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 54.0;
      doubleArray7[1] = 1815.278707;
      doubleArray7[2] = 1.0;
      doubleArray7[3] = 1815.278707;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = (-1790.9);
      doubleArray8[1] = (-4.57826535);
      doubleArray8[2] = 1815.278707;
      doubleArray8[3] = 1.0;
      doubleArray8[4] = (-676.584806375);
      doubleArray8[5] = 54.0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[3];
      doubleArray9[0] = (-676.584806375);
      doubleArray9[1] = 1.0;
      doubleArray9[2] = (-1790.9);
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      double[] doubleArray10 = discretize0.getCutPoints(1);
      assertArrayEquals(new double[] {1815.278707}, doubleArray10, 0.01);
      
      discretize0.getAttributeIndices();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      discretize0.getFindNumBins();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      Range range0 = new Range("-R <col1,col2-col4,...>");
      discretize0.getOptions();
      discretize0.getCutPoints(86);
      System.setCurrentTimeMillis(0L);
      discretize0.useBinNumbersTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(14);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.relationalValue((-1435));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(869);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize("'B1of2'");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'B1of2'";
      stringArray0[1] = "'B1of2'";
      stringArray0[2] = "Numeric class";
      discretize0.getBinRangesString(419);
      stringArray0[4] = "'B1of2'";
      stringArray0[5] = "'B1of2'";
      stringArray0[6] = "'B1of2'";
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      discretize0.setInvertSelection(true);
      boolean boolean0 = discretize0.getInvertSelection();
      assertTrue(boolean0);
      
      String string1 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string1);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("_jo.Z/r*APw~", arrayList0, 4411);
      Instances instances1 = new Instances(instances0);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[21][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (-1273.0988192281848);
      doubleArray1[3] = (-1780.181);
      doubleArray0[2] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 1.0;
      doubleArray0[3] = doubleArray2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-1780.181);
      doubleArray3[3] = 1.0;
      doubleArray3[5] = (-1273.0988192281848);
      doubleArray0[4] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[1] = (-1780.181);
      doubleArray4[3] = (-1780.181);
      doubleArray0[5] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.toString();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      discretize0.getRevision();
      boolean boolean0 = discretize1.m_UseBinNumbers;
      int int0 = discretize1.m_NumBins;
      // Undeclared exception!
      try { 
        discretize1.getBinRangesString(2366);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2366
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      discretize0.getRevision();
      discretize0.isOutputFormatDefined();
      discretize0.getRevision();
      discretize0.getBins();
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "])V8A";
      stringArray0[1] = "!";
      stringArray0[2] = "a!z#GI8s<c2P=9D";
      stringArray0[3] = "-R";
      stringArray0[4] = "$Revision: 8964 $";
      stringArray0[5] = ".N#<6B?!>h%i(Mh";
      stringArray0[6] = "iR0`a4D";
      stringArray0[7] = "8964";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-B";
      stringArray0[1] = "Bin number optimization in conjunction with equal-frequency binning not implemented.";
      stringArray0[2] = "3*.";
      stringArray0[3] = "-V";
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 923.0;
      doubleArray1[1] = (-2158.35);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2.0;
      doubleArray2[1] = (-2158.35);
      doubleArray2[2] = 923.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 923.0;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = 923.0;
      doubleArray3[3] = (-2158.35);
      doubleArray3[4] = 2.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 923.0;
      doubleArray4[1] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 923.0;
      doubleArray5[1] = 923.0;
      doubleArray5[2] = 2.0;
      doubleArray5[3] = 2.0;
      doubleArray5[4] = (-2158.35);
      doubleArray5[5] = (-2158.35);
      doubleArray5[6] = (-2158.35);
      doubleArray5[7] = (-2158.35);
      doubleArray5[8] = 923.0;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      Filter.runFilter(discretize0, stringArray0);
      try { 
        Filter.useFilter((Instances) null, discretize0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.322575046183876
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.getBinRangesString(17);
      Filter.runFilter(discretize0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_FindNumBins = false;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1.0));
      discretize0.getInvertSelection();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.getRevision();
      discretize0.setBins((-837));
      int[] intArray0 = new int[1];
      discretize0.setInvertSelection(false);
      discretize0.getAttributeIndices();
      intArray0[0] = (-2198);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.m_FindNumBins = false;
      discretize0.getInvertSelection();
      discretize0.findNumBinsTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7818115379730086
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[21][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[1] = (-1273.0988192281848);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1780.18094);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray0[2] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 1.0;
      doubleArray0[3] = doubleArray3;
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-1780.18094);
      doubleArray4[3] = 1.0;
      doubleArray4[5] = (-1273.0988192281848);
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[1] = (-1273.0988192281848);
      doubleArray5[3] = 1.0;
      doubleArray5[3] = (-1780.18094);
      doubleArray0[5] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.toString();
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      discretize0.getRevision();
      discretize0.getUseEqualFrequency();
      int int0 = discretize1.m_NumBins;
      discretize0.getOptions();
      discretize0.setMakeBinary(true);
      Filter.makeCopies(discretize1, 10);
      discretize0.getBinRangesString(10);
      discretize1.makeBinaryTipText();
      assertFalse(discretize1.getMakeBinary());
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.2085716838811678
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize("-R <col1,col2-col4,...>");
      int int0 = 14;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Range range0 = new Range("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      discretize0.m_DiscretizeCols = range0;
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("Yrx\"+IE}L4.<dE");
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[3];
      Discretize.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "uo]}50^t8E$N-";
      stringArray0[1] = "'";
      stringArray0[2] = "+PK%pM3.r>\"KnCc!&v?";
      stringArray0[3] = "-M";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -M option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Discretize discretize0 = new Discretize("-R <col1,col2-col4,...>");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Range range0 = new Range("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      discretize0.m_DiscretizeCols = range0;
      discretize0.m_DiscretizeCols = null;
      try { 
        discretize0.setOptions((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }
}
