/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 06 09:05:50 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0033904095839703
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(8192);
      hashMap0.put(float0, integer0);
      JSONObject.getNames((Object) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Float float1 = new Float((-2915.64));
      jSONArray0.put(69, (Object) float1);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 1465, 1465);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4377134277438377
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Long long0 = new Long(4497L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gettoHexString";
      stringArray0[1] = "getcompare";
      stringArray0[2] = "G";
      Long.toUnsignedString(4497L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("G", 39);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optInt("G");
      jSONObject1.toString();
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject2 = jSONObject0.put("G", (double) 4497L);
      JSONObject.getNames((Object) "G");
      jSONObject2.optDouble("] is not a JSONObject.", (-1.0));
      try { 
        jSONObject2.getBoolean("O6!+!w\"H;%_L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O6!+!w\\\"H;%_L\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      jSONObject0.optInt("ZF9dZ3?Yoew.TJ4wYJ", 0);
      jSONObject0.put("getset", 1L);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getaddFirst");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.getNames((Object) "U[f#u]gSE<4HU1%V0Yx");
      JSONObject.testValidity("U[f#u]gSE<4HU1%V0Yx");
      JSONObject jSONObject0 = new JSONObject((Object) "U[f#u]gSE<4HU1%V0Yx");
      // Undeclared exception!
      jSONObject0.toString(1723);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("6m%b", 0L);
      int int0 = jSONObject1.getInt("6m%b");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", true);
      jSONObject1.toString(1152, (-784));
      jSONObject0.optBoolean("JSON does not allow non-finite numbers.");
      try { 
        jSONObject1.getJSONObject("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9594090592280062
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", true);
      jSONObject1.optBoolean("JSON does not allow non-finite numbers.", true);
      try { 
        jSONObject1.getJSONArray("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getreplaceAll", (-3920));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      long long0 = jSONObject1.getLong("getreplaceAll");
      assertEquals((-3920L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject0.put("' and instead saw '", 1051);
      JSONObject.getNames(jSONObject1);
      jSONObject2.put("$*Ar<r}&L;;P1a", 1051);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("gettoUpperCase", object0);
      JSONArray jSONArray1 = jSONObject2.optJSONArray("gettoUpperCase");
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put("~", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("~");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4918032786885246
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double double0 = new Double((-1.0));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.append("isremainderUnsigned", "isremainderUnsigned");
      assertEquals(9, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put(jSONObject0, "B#UV");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("B#UV", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(2455, 2455);
      Double double0 = new Double(2455);
      Double double1 = new Double(Double.NaN);
      hashMap0.put(double0, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject.quote("2`>");
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-2816L));
      JSONObject jSONObject1 = jSONObject0.put("2`>", (Object) long0);
      int int0 = jSONObject1.optInt("2`>");
      assertEquals((-2816), int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject.valueToString(linkedList0);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optLong("' and instead saw '", (-124L));
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", 1051);
      JSONObject.getNames(jSONObject1);
      jSONObject0.getString("' and instead saw '");
      jSONObject1.put("9:Q/10K6A@?^|vne", 12);
      String string0 = "9\\";
      Long long0 = new Long(1051);
      try { 
        Long.parseUnsignedLong("\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", true);
      try { 
        jSONObject1.append("JSON does not allow non-finite numbers.", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[JSON does not allow non-finite numbers.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(1868);
      JSONObject.doubleToString(1868);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      String string0 = JSONObject.valueToString(hashMap0, 904, 26);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 65);
      boolean boolean0 = jSONObject1.has("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "mi";
      int int0 = 795;
      JSONObject.valueToString("mi", 795, 795);
      JSONObject jSONObject0 = new JSONObject((Object) "mi");
      JSONObject jSONObject1 = jSONObject0.put("J;<_/=0k\"$:", false);
      jSONObject1.optBoolean("J;<_/=0k\"$:", false);
      String string1 = null;
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = Integer.getInteger(": ", 97);
      JSONObject.getNames((Object) integer0);
      JSONObject jSONObject1 = jSONObject0.putOpt("isput", (Object) null);
      JSONObject jSONObject2 = jSONObject1.put("isput", (long) 97);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1757458313337033
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("has", false);
      jSONObject1.put("has", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('\"');
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.572948035186329
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("z4Nx_tJmt}tT'");
      JSONObject.getNames(jSONObject0);
      String string0 = "QqPCm`Y\\8F0\\";
      JSONObject jSONObject1 = jSONObject0.put("QqPCm`Y8F0", 0.0);
      jSONObject1.opt((String) null);
      Integer integer0 = new Integer(46);
      jSONObject0.toString(0);
      StringWriter stringWriter0 = new StringWriter(52);
      jSONObject0.toString(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      jSONObject0.write(stringWriter1);
      jSONObject0.isNull("Rg");
      JSONTokener jSONTokener0 = new JSONTokener("Unclosed comment");
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Double double0 = Double.valueOf(0.0);
      hashMap0.putIfAbsent((Long) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONObject("I{~`T.NCg/R!!|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I{~`T.NCg/R!!|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put((Long) null, double0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8792521075987638
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      JSONObject jSONObject2 = jSONObject0.put("Expected '", true);
      StringWriter stringWriter0 = new StringWriter();
      Long long0 = new Long((-2225L));
      Integer integer0 = new Integer(6);
      JSONObject.valueToString(integer0);
      Double double0 = new Double(0.0);
      hashMap0.put(long0, double0);
      Integer integer1 = new Integer(52);
      Float float0 = new Float(0.0F);
      jSONObject2.putOpt("Expected '", float0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap1);
      jSONObject3.toString(52);
      Byte.compare((byte) (-121), (byte) (-121));
      jSONObject2.isNull("K_<`~k9E_");
      Byte byte0 = new Byte((byte)34);
      JSONObject.numberToString(integer1);
      JSONObject.quote((String) null);
      jSONObject0.getDouble("Expected '");
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject1.getDouble("K_<`~k9E_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K_<`~k9E_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("' and instead saw '", 1051);
      Long long0 = new Long((-1L));
      JSONObject jSONObject1 = new JSONObject(long0);
      assertEquals(1, jSONObject1.length());
      
      jSONObject0.keys();
      double double0 = jSONObject0.getDouble("' and instead saw '");
      assertEquals(1051.0, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.isFinite(0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("0", jSONArray0);
      JSONArray jSONArray1 = jSONObject1.names();
      assertNotNull(jSONArray1);
      
      Object object0 = new Object();
      jSONObject1.accumulate("0", object0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2324));
      hashMap0.put("Substring bounds error", integer0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optLong("Substring bounds error");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("Z:L%v@_%T/FFt`/F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Z:L%v@_%T/FFt`/F
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(2869.83349196144);
      Double.isFinite(0.0);
      jSONObject0.accumulate("0", double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("0", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      Short short0 = new Short((short) (-1415));
      Float float0 = new Float((-1756.9F));
      jSONObject0.put("", (Object) float0);
      String string1 = jSONObject0.optString("0", "");
      assertEquals("", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.accumulate(" at character ", " at character ");
      String string0 = jSONObject1.getString(" at character ");
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-210));
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      jSONArray0.optInt(1772, 1572);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.8610643581141094
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      JSONObject.quote(",\n");
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer((-26674136));
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.put((String) null, (-26674136));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("n75}K", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.101975225866936
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("isoptJSONArray", 255.27889);
      jSONObject0.toString(69);
      String string0 = "Null pointer";
      jSONObject0.optString("isoptJSONArray", "Null pointer");
      jSONObject0.opt("a2H;Fk;R703/.");
      Integer integer0 = new Integer(47);
      jSONObject1.toString(4);
      StringWriter stringWriter0 = new StringWriter((byte)67);
      stringWriter0.append((CharSequence) "{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      jSONObject0.write(stringWriter0);
      Byte.compare((byte) (-85), (byte)50);
      String string1 = "djztb\"`ultf\\3Z";
      JSONTokener jSONTokener0 = new JSONTokener("djztb\"`ultf\u0003Z");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of djztb\"`ultf\u0003Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5895213795772005
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "");
      String string0 = "getjoin";
      JSONObject jSONObject2 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject3 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject4 = jSONObject3.putOpt("", ";7T#>:zK]KG{f?u E/W");
      jSONObject0.has(";7T#>:zK]KG{f?u E/W");
      try { 
        jSONObject4.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("auET!\"X_{.F@P");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.put("1FE", 58);
      double double0 = jSONObject0.optDouble("1FE");
      assertEquals(58.0, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      Float float0 = new Float(0.0);
      JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{f%a8`K$,2'SM{PP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {f%a8`K$,2'SM{PP
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-4235), (-4235));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 128, 8);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      String string0 = "Expected '";
      Float float0 = new Float(0.0F);
      JSONObject.numberToString(float0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(1704);
      Long long0 = new Long(408L);
      hashMap0.put(integer0, long0);
      jSONObject0.optDouble("JSONArray[", 0.0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("getparseDouble");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" q((KX{zsWy8:C{", (Object) " q((KX{zsWy8:C{");
      JSONObject jSONObject2 = jSONObject1.put(" q((KX{zsWy8:C{", (Object) jSONObject0);
      String string0 = jSONObject2.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2789389564075417
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double(0.0);
      Byte byte0 = new Byte((byte)45);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject.doubleToString(0.0);
      jSONObject0.optInt("0");
      JSONObject jSONObject1 = jSONObject0.put("0", (long) (byte)45);
      long long0 = jSONObject1.optLong("0");
      assertEquals(2, jSONObject0.length());
      assertEquals(45L, long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("U<M6] 9;)y,bjODKAs%", 660);
      JSONObject.getNames(jSONObject2);
      jSONObject2.optDouble("U<M6] 9;)y,bjODKAs%", (-159.5));
      JSONObject jSONObject3 = jSONObject2.append("] is not a JSONArray.", jSONObject0);
      assertSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optDouble("wheel.json.JSONException", 3906.11553334453);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Expected '";
      JSONObject jSONObject1 = jSONObject0.put("Expected '", (-20.3579951387));
      jSONObject1.optDouble("Expected '");
      JSONObject jSONObject2 = new JSONObject();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 58, (short)1504);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-901));
      stringWriter0.append((CharSequence) "");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("uY6>]q");
      JSONObject jSONObject1 = jSONObject0.put("uY6>]q", (-1328.32532));
      jSONObject1.getInt("uY6>]q");
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("has", false);
      try { 
        jSONObject0.getLong("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Bl%@I;5.mp~ra?1V", 0L);
      long long0 = jSONObject1.getLong("Bl%@I;5.mp~ra?1V");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-fiJite numbers.", true);
      try { 
        jSONObject1.getDouble("JSON does not allow non-fiJite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-fiJite numbers.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optBoolean("iscopyValueOf", false);
      jSONArray0.optBoolean(470, false);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optInt("] is not a JSONObject.");
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (double) 0);
      jSONObject1.opt("] is not a JSONObject.");
      Integer integer0 = new Integer(69);
      jSONObject0.put("$J%k", false);
      try { 
        jSONObject1.getJSONObject("istoLowerCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoLowerCase\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer((-798));
      String string0 = "isformat";
      Integer.getInteger("isformat");
      Integer integer1 = new Integer(1);
      String string1 = "qmQ";
      Boolean boolean0 = new Boolean("isformat");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 2633, (-1309));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble(";ku<Eiulm>", (-1817.7518303));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-fiJite numbers.", true);
      jSONObject0.optString("JSON does not allow non-fiJite numbers.");
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      jSONObject1.put("] is not a JSONObject.", (Map) hashMap0);
      try { 
        jSONObject1.getJSONObject("JSON does not allow non-fiJite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-fiJite numbers.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong(" at character ", (-1106L));
      JSONObject.getNames((Object) null);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-1263), (-1263));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-4235), 1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      HashMap<Float, String> hashMap1 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("'B3{pk72IpPD", true);
      jSONObject0.optString(",\n");
      assertEquals(1, jSONObject0.length());
      
      Object object0 = jSONObject2.remove("'B3{pk72IpPD");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Integer) null, jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("(8=$z&e.1", false);
      try { 
        jSONObject0.getJSONObject("(8=$z&e.1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(8=$z&e.1\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("has", false);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(727.9063);
      hashMap0.put((JSONObject) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      Byte byte0 = new Byte((byte)43);
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      try { 
        jSONObject0.getInt("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{$]m|hRD![{W7'{@f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {$]m|hRD![{W7'{@f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(0.0);
      Integer integer0 = new Integer(12);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)1);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      int int0 = jSONObject0.optInt("'", (int) (short)1);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.9225371909604357
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject.quote("] is not a number.");
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      jSONObject0.toString();
      try { 
        jSONObject0.get("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(1382, 1382);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.571505033743328
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.optInt("] is not a JSONObject.");
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (double) 0);
      jSONObject1.opt("] is not a JSONObject.");
      Integer integer0 = new Integer(69);
      jSONObject0.toString(4);
      StringWriter stringWriter0 = new StringWriter(4);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "] is not a JSONObject.");
      jSONObject0.write(stringWriter1);
      jSONObject1.isNull("] is not a JSONObject.");
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\": java.lang.Double@0000000004}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.590919980975802
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Substring bounds error", object1);
      StringWriter stringWriter0 = new StringWriter(7);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Substring bounds error");
      stringWriter1.append((CharSequence) "Substring bounds error");
      jSONObject1.write(stringWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Substring bounds error";
      stringArray0[1] = "Substring bounds error";
      stringArray0[2] = "Substring bounds error";
      stringArray0[3] = "Substring bounds error";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.isNull("Substring bounds error");
      JSONTokener jSONTokener0 = new JSONTokener("for");
      Float float0 = new Float((double) 7);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject0.append((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.append("getget", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("(8=$z&e.1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(8=$z&e.1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("true");
      jSONObject0.putOpt("isoptLong", "\"true\"");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("LhtX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"LhtX\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1306.0);
      Double.sum(1306.0, 1306.0);
      Integer integer0 = new Integer(18);
      Integer.min(47, 47);
      int int0 = 46;
      Integer.min(18, 46);
      hashMap0.put(double0, integer0);
      Double double1 = new Double(1306.0);
      Double double2 = new Double(1.0);
      Double.sum(18, 18);
      Integer integer1 = Integer.getInteger("oxyAs;%i8PZ", 18);
      hashMap0.put(double2, integer1);
      Integer integer2 = new Integer((-2618));
      hashMap0.put(double1, integer2);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("issplit", 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float((-3344.7582317335764));
      Integer integer0 = new Integer(60);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote(":F8j(|Mxk");
      jSONObject0.put("#{R$r`xW#$", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "getsubstring";
      String string0 = " of ";
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float(4112.012F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("'");
      String string0 = jSONObject0.optString("'", "'");
      assertEquals("'", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(0.0);
      Integer.getInteger("p<b< WI(s^=3m2iK");
      hashMap0.put(float0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 904, 904);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ")9]`$l2L";
      jSONObject0.optLong(")9]`$l2L", 1L);
      String string1 = "w,Th*J,uBjbGE!#P ";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("w,Th*J,uBjbGE!#P ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of w,Th*J,uBjbGE!#P 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Short short0 = new Short((short) (-4068));
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(";7T#>:zK]KG{f?u E/W");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("");
      jSONObject0.toString();
      Integer.remainderUnsigned(25, 34);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "\"\"");
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter1);
      Byte.compare((byte)101, (byte)35);
      jSONObject0.isNull("{<OORBK#7B5Ab^q");
      Byte byte0 = new Byte((byte) (-7));
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONTokener jSONTokener1 = new JSONTokener("istoString");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of istoString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-3347.98727181));
      assertEquals("-3347.98727181", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("U8<$,j]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U8<$,j]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray(" q((KX{zsWy8:C{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" q((KX{zsWy8:C{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = JSONObject.quote("WD3l\"/k]t\"K");
      assertEquals("\"WD3l\\\"/k]t\\\"K\"", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("h-\"p/g=`wny~jJ");
      assertEquals("\"h-\\\"p/g=`wny~jJ\"", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("uCA#-/u", true);
      int int0 = 452;
      JSONTokener jSONTokener0 = new JSONTokener("B<");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of B<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      jSONObject0.optBoolean("");
      try { 
        jSONObject0.getJSONArray("}_BX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}_BX\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(69);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1, (-54582745));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = new Integer(1901);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of in
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-20.3579951387));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Null key.", 0.0);
      try { 
        jSONObject1.getBoolean("Null key.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null key.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>(hashMap1);
      Integer integer0 = new Integer(60);
      hashMap2.put("IAz9n2!gQ^C*7[a", integer0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      Object object0 = jSONObject1.get("IAz9n2!gQ^C*7[a");
      assertEquals(60, object0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}KdM5w@5#.qdJYD3N+*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }KdM5w@5#.qdJYD3N+*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.5946752807940938
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float float0 = new Float((-3.5212607F));
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000001");
      // Undeclared exception!
      jSONObject0.toString(277, 69);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put(boolean0, jSONObject0);
      jSONObject0.put("has", false);
      Boolean.valueOf("has");
      jSONObject0.toString((-3937), 2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-4235), (-4235));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0, 904, 2365);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer integer0 = new Integer(18);
      String string0 = JSONObject.valueToString(integer0, 18, 18);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0, 1694, 1694);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.190936459014349
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote("@XuCA#>/'");
      assertEquals("\"@XuCA#>/'\"", string0);
      
      Float float0 = new Float(130.5799F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-1378));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      hashMap0.put((JSONObject) null, "3i%6*]>d;KX");
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-831), (-831));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("uCA#>/'");
      jSONObject0.optInt("ax|9nQpj[d$", (-875));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "ax|9nQpj[d$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.09110890507758
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject.quote(";Dow>Key+W");
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(359L);
      jSONObject0.accumulate(";Dow>Key+W", long0);
      int int0 = jSONObject0.optInt("\";Dow>Key+W\"");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = new Long(264L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("7(GQQ!et]%\"bo+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7(GQQ!et]%\\\"bo+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-1260L));
      try { 
        jSONObject0.accumulate((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("-1338.64586575960", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      HashMap<JSONObject, JSONObject> hashMap1 = new HashMap<JSONObject, JSONObject>(hashMap0);
      hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Short short0 = new Short((short) (-4068));
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("#F; t^uJ6'?8ib{;X");
      assertNull(object0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("l`KJma~?kng|&2fd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"l`KJma~?kng|&2fd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
