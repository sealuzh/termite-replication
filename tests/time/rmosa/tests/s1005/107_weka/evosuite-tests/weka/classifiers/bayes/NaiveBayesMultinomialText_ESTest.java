/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 19:54:19 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.lazy.IBk;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.58379607654672
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7m*HRhH+mlav V:G?)";
      stringArray0[1] = "";
      stringArray0[2] = " ";
      stringArray0[3] = "-norm";
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      naiveBayesMultinomialText0.listOptions();
      stringArray0[4] = "";
      stringArray0[5] = "";
      naiveBayesMultinomialText0.m_lnorm = 0.0;
      stringArray0[6] = "Multi-interval discretization of continuousvalued attributes for classification learning";
      naiveBayesMultinomialText0.m_norm = (-1.0);
      stringArray0[7] = ";=F9cQF";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.stemmerTipText();
      assertEquals((-1.0), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.289967354532714
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.m_t = (-1924.067);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.enableAllAttributeDependencies();
      naiveBayesMultinomialText1.setLowercaseTokens(true);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = (-1);
      intArray0[2] = 7;
      intArray0[3] = 9;
      intArray0[4] = (-1);
      wrapperSubsetEval0.postProcess(intArray0);
      Instances instances0 = testInstances0.generate("Whether to convert all tokens to lowercase");
      naiveBayesMultinomialText1.buildClassifier(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1924.067);
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (-41.88962512115032);
      doubleArray0[5] = (-41.88962512115032);
      doubleArray0[6] = (double) (-1);
      int[] intArray1 = new int[4];
      intArray1[0] = (-1);
      intArray1[1] = 1;
      intArray1[2] = 4;
      intArray1[3] = 7;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-41.88962512115032), doubleArray0, intArray1, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8834372182627477
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      int[] intArray0 = new int[9];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      intArray0[2] = (-1);
      intArray0[3] = (-2);
      intArray0[4] = 351;
      intArray0[5] = (-2);
      intArray0[6] = (-2);
      intArray0[7] = (-1);
      intArray0[8] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, 65);
      instances0.add((Instance) binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5777466264255984
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      capabilities0.toString();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      SparseInstance sparseInstance0 = new SparseInstance(2711);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t9.0\nclass2\t4.0\nclass3\t7.0\nclass4\t4.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\nover\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nthe\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nThe\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nquick\t7.38905609893065\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\nlazy\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\njumps\t20.085536923187668\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nbrown\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\ndog\t7.38905609893065\t2.718281828459045\t7.38905609893065\t2.718281828459045\t\nfox\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\n", string0);
      
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getTokenizer();
      String string1 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("Use word frequencies rather than binary bag of words representation", string1);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8833357812382339
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = (-2);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8833357812382339
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.m_periodicP = 105;
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1945366875886965
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Random.setNextRandom(1776);
      System.setCurrentTimeMillis(1776);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--------------------------------------\n");
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.m_minWordP = 1475.8;
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.periodicPruningTipText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(1776);
      naiveBayesMultinomialText0.m_norm = 1475.8;
      System.setCurrentTimeMillis(0L);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      StringReader stringReader0 = new StringReader("If true, ignores all words that are on the stoplist.");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader0, (-452));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8978778257885298
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.m_t = (-1924.067);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.enableAllAttributeDependencies();
      Instances instances0 = testInstances0.generate("Whether to convert all tokens to lowercase");
      naiveBayesMultinomialText1.buildClassifier(instances0);
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      naiveBayesMultinomialText1.getUseWordFrequencies();
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.977660272976407
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getOptions();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(414);
      naiveBayesMultinomialText0.reset();
      MockFile mockFile0 = new MockFile("An annotatijn. It is not used by the standard bibliography styles, but may e used by others that prodSce an annotated bibliography.");
      mockFile0.createNewFile();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(127);
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(414, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.106547739023696
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("%mwr]-{;?i9[hplo)");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 491.132;
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t12.0\nclass2\t10.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\n", string0);
      
      naiveBayesMultinomialText0.listOptions();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("=nT:");
      mockFile0.createNewFile();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(25);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=nT:");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.106580769576958
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      Random.setNextRandom(569);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("J{S.Su|R*1xb/$05");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0L, file0.lastModified());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      capabilities0.toString();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("O`78qZw0'f~:U>HMy");
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = (-2055);
      DenseInstance denseInstance0 = new DenseInstance(3);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4441919359968938
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.enableAllAttributeDependencies();
      naiveBayesMultinomialText0.setNorm(0.0);
      Instances instances0 = testInstances0.generate(" ");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getUseWordFrequencies();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10000);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("-stopwords <file>");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-2);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0, intArray0, (-1));
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) 2;
      Instances instances1 = iBk0.pruneToK(instances0, doubleArray0, (-330));
      SparseInstance sparseInstance0 = new SparseInstance((-1924.5468669908914), doubleArray0);
      instances1.add((Instance) sparseInstance0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      naiveBayesMultinomialText0.getDebug();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(14, stringArray0.length);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0E-10;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      try { 
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-717);
      intArray0[1] = 1575;
      intArray0[2] = 1714;
      intArray0[3] = 0;
      intArray0[4] = (-1841);
      intArray0[5] = 2353;
      intArray0[6] = (-3310);
      intArray0[7] = 1;
      intArray0[8] = 170;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, 0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      mockFile0.createNewFile();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(84);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile(" vWH");
      mockFile0.createNewFile();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(142);
      MockFile mockFile1 = new MockFile(mockFile0, "\tSubset evaluation: MAE\n");
      naiveBayesMultinomialText0.setStopwords(mockFile1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(210);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(5076, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(42, doubleArray0);
      naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, false);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(607.6689353577);
      boolean boolean0 = true;
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getNorm();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 607.6689353577;
      doubleArray0[1] = 607.6689353577;
      doubleArray0[2] = 607.6689353577;
      doubleArray0[3] = 607.6689353577;
      doubleArray0[4] = 607.6689353577;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(607.6689353577, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.insertAttributeAt(1776);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't insert attribute: index out of range
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setDebug(false);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(84);
      DenseInstance denseInstance0 = new DenseInstance(84);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(68);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.m_lnorm = (-3383.3198964935);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getLNorm();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9122");
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.useStopListTipText();
      Random.setNextRandom(10);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = 3.0;
      doubleArray0[2] = 3.0;
      doubleArray0[3] = (-3383.3198964935);
      doubleArray0[4] = 1877.06419548;
      doubleArray0[5] = (-3383.3198964935);
      doubleArray0[6] = (-3383.3198964935);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-3383.3198964935);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 10;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = (-1258);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(718.3908786, doubleArray0, intArray0, (-5460));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "-M";
      stringArray0[2] = "";
      stringArray0[3] = "(-c6ZMmNQb&tgBS7S:";
      stringArray0[4] = "\tConvert all tokens to lowercase before adding to the dictionary.";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "Date attributes";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Random.setNextRandom(125);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "o?(0D'4\"_URX9C");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      int int0 = 3;
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      int int1 = (-1778);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1778));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5885690474364718
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[1];
      naiveBayesMultinomialText0.m_normalize = false;
      naiveBayesMultinomialText0.reset();
      doubleArray0[0] = 0.0;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.setLNorm((-1942.58));
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.m_useStopList = false;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Instances instances0 = naiveBayesMultinomial0.m_headerInfo;
      KDTree kDTree0 = new KDTree((Instances) null);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      try { 
        kDTree0.nearestNeighbour(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "weka.core.ClassDiscovery";
      stringArray1[1] = "-tokenizer";
      stringArray1[2] = "-tokenizer";
      try { 
        naiveBayesMultinomialText1.setOptions(stringArray1);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.m_norm = 0.0;
      naiveBayesMultinomialText0.setOptions(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10000);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, int0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setLNorm(2.0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getLowercaseTokens();
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 19;
      intArray0[3] = 0;
      intArray0[5] = 1674;
      intArray0[6] = 1856;
      intArray0[7] = 10000;
      intArray0[8] = 19;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, intArray0, 0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.getLowercaseTokens();
      String[] stringArray0 = new String[3];
      String string0 = "";
      stringArray0[0] = "";
      String string1 = "thanks";
      stringArray0[1] = "thanks";
      stringArray0[2] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10000);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5885690474364718
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-u5D[HFh_5\"/xTvo{fR";
      stringArray0[1] = "_0}([2g\"6xo/z8r";
      stringArray0[2] = "anyways";
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("The tokenizing algorithm to use on the strings.", string0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4671);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      wordTokenizer0.getRevision();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2567576795645348
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 10000;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-stemmer";
      stringArray0[1] = "jvf.d6qPOifl2";
      stringArray0[2] = "Jp%zxp K]9[eia4>";
      stringArray0[3] = "jvf.d6qPOifl2";
      stringArray0[4] = "-stemmer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-norm";
      stringArray0[1] = "-norm";
      stringArray0[2] = "-norm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-norm";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -norm option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-M";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "-M";
      stringArray0[2] = ">";
      stringArray0[3] = "-M";
      stringArray0[4] = ">";
      stringArray0[5] = "-M";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[1];
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setStemmer((Stemmer) null);
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText2.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText2.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText2.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText2.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText2.getNorm(), 0.01);
  }
}
