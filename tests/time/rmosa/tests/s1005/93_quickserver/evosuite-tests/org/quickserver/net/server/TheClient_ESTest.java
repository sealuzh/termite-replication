/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 20:00:20 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.net.Proxy;
import java.net.Socket;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.qsadmin.QSAdminServer;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1498);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientEvent();
      theClient0.getClientWriteHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.getSocketChannel();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", 1498);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@470383d2
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)42;
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      byteArray0[3] = (byte) (-1);
      data0.setUsername("no socket");
      data0.setPassword(byteArray0);
      data0.setUsername("no socket");
      data0.setUsername("U>I*HAn/sZz28g!|");
      data0.setLastAsked("U>I*HAn/sZz28g!|");
      theClient0.setClientData(data0);
      theClient0.getClientData();
      theClient0.getSocket();
      data0.setPassword(byteArray0);
      theClient0.getClientWriteHandler();
      theClient0.getServer();
      theClient0.setClientData(data0);
      System.setCurrentTimeMillis((-2422L));
      theClient0.getAuthenticator();
      System.setCurrentTimeMillis(2212L);
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.toString();
      theClient0.getSocket();
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      String string0 = "_;.Zv5`U>WW&3Z8h";
      int int0 = (-594);
      theClient0.setCommunicationLogging(false);
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setConsoleLoggingToMini();
      quickServer0.getBindAddr();
      theClient0.getCommunicationLogging();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      quickServer0.getQSAdminServer();
      // Undeclared exception!
      try { 
        quickServer0.loadSSLContext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Secure setting is not yet enabled for loading!
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.makeServerSocket();
      theClient0.setServer(quickServer0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getAuthenticator();
      TheClient theClient1 = new TheClient();
      theClient1.setAuthenticator((Authenticator) null);
      theClient1.getSocket();
      int int0 = theClient1.getTimeout();
      assertEquals(0, int0);
      
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getServer();
      TheClient theClient2 = new TheClient();
      theClient2.setSocket((Socket) null);
      TheClient theClient3 = new TheClient();
      theClient3.setMaxConnectionMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.getAuthenticator();
      theClient0.getSocketChannel();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3234094224875887
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setTimeoutMsg("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getClientAuthenticationHandler();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setTimeoutMsg((String) null);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getClientData();
      theClient0.getSocketChannel();
      theClient0.getClientEvent();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientEvent();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setTimeout((-2439));
      theClient0.toString();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getAuthenticator();
      theClient0.getTimeout();
      theClient0.getClientEvent();
      assertEquals((-2439), theClient0.getTimeout());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getMaxAuthTryMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.getClientAuthenticationHandler();
      theClient0.setMaxAuthTry((-1550));
      theClient0.toString();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setTimeout((-2891));
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-2891), theClient0.getTimeout());
      assertEquals((-1550), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.435005016902289
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setMaxAuthTry((-2063));
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setTimeoutMsg("fyyweJn0`911QuBW");
      theClient0.getClientBinaryHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setMaxAuthTry(3640);
      theClient0.getTrusted();
      theClient0.getClientEventHandler();
      theClient0.getMaxAuthTryMsg();
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTry(125);
      theClient0.getMaxConnectionMsg();
      theClient0.setTrusted(true);
      theClient0.setTimeoutMsg("AppError : ");
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      theClient0.setCommunicationLogging(true);
      theClient0.getTimeoutMsg();
      theClient0.getMaxAuthTry();
      SocketChannel.open();
      theClient0.getClientBinaryHandler();
      assertEquals(125, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      assertEquals("<ClientHandler-Pool#-1-ID:1>", nonBlockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      QuickServer quickServer0 = new QuickServer();
      TheClient theClient1 = new TheClient();
      theClient0.getClientEvent();
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      theClient0.getCommunicationLogging();
      theClient0.setMaxConnectionMsg("A");
      theClient0.setTrusted(true);
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-231));
      MockFile mockFile0 = new MockFile("m32nD%(4^|jNkQ0=4\"");
      File file0 = MockFile.createTempFile("m32nD%(4^|jNkQ0=4\"", "", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      // Undeclared exception!
      try { 
        blockingClientHandler0.setOutputStream(mockFileOutputStream0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unknown DataMode null
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getClientAuthenticationHandler();
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getClientCommandHandler();
      theClient0.getAuthenticator();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(1632);
      theClient0.setTimeoutMsg("8q_&>W\"B+f");
      theClient0.getMaxAuthTryMsg();
      theClient0.getAuthenticator();
      theClient0.getClientExtendedEventHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getTimeout();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(1632, theClient0.getTimeout());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1498);
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#1498-ID:4>", blockingClientHandler0.getName());
      
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientAuthenticationHandler();
      //  // Unstable assertion: assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setMaxConnectionMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientAuthenticationHandler();
      theClient0.getMaxConnectionMsg();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setSocketChannel((SocketChannel) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("]");
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getCommunicationLogging();
      theClient0.getClientAuthenticationHandler();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setConsoleLoggingToMini();
      quickServer0.getBindAddr();
      QSAdminServer qSAdminServer0 = new QSAdminServer(quickServer0);
      // Undeclared exception!
      try { 
        quickServer0.loadSSLContext();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Secure setting is not yet enabled for loading!
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("8CD");
      theClient0.getMaxAuthTryMsg();
      theClient0.getSocket();
      QuickServer quickServer0 = new QuickServer("8CD");
      assertTrue(quickServer0.getBlockingMode());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1498);
      // Undeclared exception!
      try { 
        blockingClientHandler0.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
