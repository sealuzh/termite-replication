/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 20:29:06 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("-SWzxg", "-SWzxg");
      String string0 = JSONObject.quote("KxI o[");
      assertEquals("\"KxI o[\"", string0);
      
      String string1 = jSONObject1.optString("f3yN~hU", "");
      assertEquals("", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6480950586435876
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0.0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "-:gf%L@jW\"Jy#7AO";
      jSONObject0.put("-:gf%L@jW\"Jy#7AO", (Object) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.put("-:gf%L@jW\"Jy#7AO", (-2662.138485452308));
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put((Byte) null, boolean0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-2383), (-2383));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("Unclosed comment", (Object) jSONArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("\t", (-2662.138485452308));
      jSONObject1.toString();
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(Double.NaN);
      JSONObject.getNames((Object) double0);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter0.append((CharSequence) null);
      jSONObject0.write(stringWriter1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(" $ @~~A");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("{}", 0L);
      jSONObject1.getDouble("{}");
      jSONObject0.optJSONArray("\b");
      try { 
        jSONObject0.getLong("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.27660795407654
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("\t", (-2662.138485452308));
      jSONObject1.optLong("\t");
      jSONObject1.toString((-1173), 108);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("l(8q'IVL ,", "l(8q'IVL ,");
      jSONObject1.put("l(8q'IVL ,", true);
      jSONObject1.optBoolean("l(8q'IVL ,");
      jSONObject1.isNull("l(8q'IVL ,");
      try { 
        jSONObject0.getLong("wTYa)~v+uz'6~~Vq&R-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wTYa)~v+uz'6~~Vq&R-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.576374057017259
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte)49);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optLong("K*k115l3VR1-F{Xew", 1L);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", object0);
      jSONObject1.toString((int) (byte)49);
      Long long0 = new Long((-4085L));
      JSONObject jSONObject2 = jSONObject1.append("{\n                                                 \"java.lang.String@0000000005\": \"java.lang.Object@0000000006\",\n                                                 \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}", long0);
      jSONObject2.optInt("true", (int) (byte)49);
      Byte.toUnsignedLong((byte)49);
      jSONObject0.optJSONArray("K*k115l3VR1-F{Xew");
      JSONObject.valueToString(long0);
      jSONObject0.optLong("K*k115l3VR1-F{Xew");
      jSONObject0.toString((int) (byte)49, (int) (byte)49);
      jSONObject1.toString();
      JSONObject jSONObject3 = jSONObject2.put("K*k115l3VR1-F{Xew", (double) 1L);
      jSONObject3.toJSONArray((JSONArray) null);
      jSONObject2.optJSONArray("istrim");
      jSONObject1.length();
      try { 
        jSONObject3.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = new Boolean("|=Ve#A$d");
      JSONObject jSONObject2 = jSONObject1.accumulate("|=Ve#A$d", jSONArray0);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8420446800160575
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject.quote("u12}037/A.Wn");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"u12}037/A.Wn\"";
      stringArray0[1] = "u12}037/A.Wn";
      stringArray0[2] = "\"u12}037/A.Wn\"";
      stringArray0[3] = "u12}037/A.Wn";
      JSONObject jSONObject0 = new JSONObject("\"u12}037/A.Wn\"", stringArray0);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)33);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject((-3386));
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected '", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}b89", 0.0);
      JSONObject.doubleToString(167.8584082);
      int int0 = jSONObject1.getInt("}b89");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-1173), (-1314));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.sum(Double.NaN, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "toS";
      String string1 = "wheel.json.JSONTokener";
      double double1 = 0.0;
      try { 
        JSONObject.valueToString(double0, (-1680), 8192);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "] is not a number.");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("] is not a number.", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(boolean0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) jSONArray0);
      jSONObject1.toJSONArray(jSONArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.append("Unclosed comment", jSONObject0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\b", "\b");
      jSONObject0.getString("\b");
      jSONObject0.optDouble("\b", 21.56442244742659);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("A JSONArray text must start with '['");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("l(8q'IVL ,", "l(8q'IVL ,");
      jSONObject1.isNull("l(8q'IVL ,");
      jSONObject1.optJSONArray("l(8q'IVL ,");
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", (Object) jSONArray0);
      jSONObject1.toJSONArray(jSONArray0);
      Object object0 = JSONObject.NULL;
      jSONObject1.append("Unclosed comment", object0);
      StringWriter stringWriter0 = new StringWriter(13);
      jSONObject1.write(stringWriter0);
      JSONArray jSONArray1 = jSONObject1.optJSONArray("Unclosed comment");
      assertSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(15);
      JSONObject jSONObject1 = jSONObject0.putOpt("Jr2p!Y!x", integer0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.getDouble("Jr2p!Y!x");
      Integer.getInteger("istoUnsignedLong");
      JSONArray jSONArray1 = jSONObject1.names();
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("4sWlg\"Q:t19Gu", 0L);
      String string0 = jSONObject0.toString((-12473307), (-1));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(1560L);
      linkedList0.add(long0);
      String string0 = JSONObject.valueToString(linkedList0, 2502, 5);
      assertNotNull(string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Boolean.valueOf("getvalueOf");
      Boolean boolean1 = new Boolean(true);
      hashMap0.put(byte0, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0);
      stringWriter0.append((CharSequence) "wheel.json.JSONArray@0000000002");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "wheel.json.JSONArray@0000000002", 1, 563);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.101745604741793
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.isFinite((-772.290641));
      JSONObject jSONObject1 = jSONObject0.put("", 1194);
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.append("2>k`F=%YX7-/", "{\"java.lang.String@0000000002\":java.lang.Integer@0000000003}");
      jSONObject2.optLong("2>k`F=%YX7-/", (long) 1194);
      jSONObject2.optBoolean("2>k`F=%YX7-/", false);
      jSONObject2.opt("2>k`F=%YX7-/");
      JSONArray jSONArray0 = jSONObject2.getJSONArray("2>k`F=%YX7-/");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2842967826608906
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.append("ismax", float0);
      jSONObject1.isNull("'~4jm*u@ ");
      jSONObject0.put("op", 0.7559664320977337);
      String string0 = "{}";
      Object object1 = JSONObject.NULL;
      int int0 = (-305);
      jSONObject0.toString((-305), 2736);
      jSONObject0.toJSONArray((JSONArray) null);
      // Undeclared exception!
      jSONObject1.toString(2736);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(hashMap0, stringArray0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optInt((String) null, 0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.87565606324755
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("su", 1943.86658735);
      Double double0 = new Double(0.0);
      JSONObject jSONObject2 = jSONObject1.accumulate("java.lang.Short@0000000001.", "su");
      jSONObject2.getLong("su");
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject1.toString((-2100), 951);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "}b89";
      double double0 = 0.0;
      JSONObject jSONObject1 = jSONObject0.put("}b89", 0.0);
      jSONObject1.getLong("}b89");
      try { 
        jSONObject1.getBoolean("}b89");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}b89\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject.getNames((Object) hashMap0);
      int int0 = 1737;
      JSONObject.valueToString(hashMap0, (-309), 1737);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getcompare", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = jSONObject0.optString("RrSYEj-$.Yd,K-*{?9", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)3);
      Boolean boolean0 = new Boolean((String) null);
      hashMap0.put(byte0, boolean0);
      JSONObject jSONObject1 = jSONObject0.append("l(8q'IVL ,", "l(8q'IVL ,");
      boolean boolean1 = jSONObject1.isNull("l(8q'IVL ,");
      assertFalse(boolean1);
      
      jSONObject1.accumulate("l(8q'IVL ,", boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 45;
      jSONObject0.toString(45, 45);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("1..");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("mM/gvh6SxNP", (Collection) linkedList0);
      try { 
        jSONObject0.getLong("mM/gvh6SxNP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mM/gvh6SxNP\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "u12}ulJn37/AjWI");
      // Undeclared exception!
      jSONObject0.toString(3719, 10);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("l(8q'IVL ,", "l(8q'IVL ,");
      JSONObject.quote("l(8q'IVL ,");
      try { 
        jSONObject0.getInt("l(8q'IVL ,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"l(8q'IVL ,\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("xWWcxK", false);
      jSONObject0.names();
      try { 
        jSONObject1.getDouble("xWWcxK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xWWcxK\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.put("Unclosed comment", (Object) jSONArray0);
      Object object0 = JSONObject.NULL;
      jSONObject0.toString((-1241), 4);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\": []}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("su");
      assertEquals(0L, long0);
      
      String string0 = JSONObject.quote("sjz27>IzmY");
      assertEquals("\"sjz27>IzmY\"", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.isFinite((-772.290641));
      JSONObject jSONObject1 = jSONObject0.put("(*yyQ+N?m9dpJ:7dO", 1618);
      jSONObject1.toString();
      Double double0 = new Double(902.9);
      JSONObject jSONObject2 = jSONObject0.append("toU", double0);
      jSONObject2.opt((String) null);
      Object object0 = JSONObject.NULL;
      jSONObject0.put("\b", object0);
      JSONObject.valueToString("(*yyQ+N?m9dpJ:7dO", 1618, 97);
      Object object1 = JSONObject.NULL;
      JSONObject.testValidity(object1);
      assertSame(object1, object0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("u12}037/<A.WWn", (-1785.06319559));
      assertEquals((-1785.06319559), double0, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("]ci", (-365));
      assertEquals((-365), int0);
      
      String string0 = JSONObject.quote("false");
      assertEquals("\"false\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("0$\"x@j(I", (long) (short)128);
      Short short0 = new Short((short)128);
      assertEquals((short)128, (short)short0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("getforEach", (-1L));
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)33);
      JSONObject jSONObject1 = jSONObject0.accumulate("r1*.4|]_%qJw|", byte0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.append((CharSequence) "r1*.4|]_%qJw|");
      JSONObject.getNames((Object) jSONObject1);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      linkedList0.offerFirst((Long) null);
      JSONObject.getNames((Object) linkedList0);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}j{fNSN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }j{fNSN
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double((-394.3026));
      Double.sum((-394.3026), 1.0);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      Double.isFinite((-2826.0047412801227));
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(281.401050535);
      JSONObject jSONObject2 = new JSONObject(float0);
      jSONObject2.keys();
      jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.optDouble("", Double.NaN);
      JSONObject.doubleToString(1.0);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Short short0 = new Short((short) (-1414));
      Short.toUnsignedLong((short) (-1414));
      Short.toUnsignedInt((short) (-1414));
      JSONObject.numberToString(short0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("] is not a Boolean.", false);
      Object object0 = jSONObject0.opt("W, lV^}.b\"?/J0Kr3$1");
      assertNull(object0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 2550L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte)92);
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Boolean boolean1 = Boolean.valueOf("getvalueOf");
      hashMap0.put(byte0, boolean1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.valueToString(boolean0);
      stringWriter0.append((CharSequence) "java.lang.Boolean@0000000003");
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Boolean boolean0 = new Boolean("");
      hashMap0.put((Byte) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('P');
      stringWriter2.write(673);
      JSONObject.valueToString(stringWriter1);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "\"java.io.StringWriter@0000000003\"");
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("*S");
      try { 
        jSONObject0.getLong("!Q'q&VD1v.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!Q'q&VD1v.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("l(8q'IVL ,", "l(8q'IVL ,");
      jSONObject0.remove("l(8q'IVL ,");
      String string0 = JSONObject.valueToString(hashMap0, 34, 34);
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject0.isNull("l(8q'IVL ,");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 8;
      StringWriter stringWriter0 = new StringWriter(8);
      JSONObject.valueToString(jSONArray0, (-551), 8);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "[]", (-551), (-459));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(15);
      jSONObject0.putOpt("3#uO|UpK8K", integer0);
      jSONObject0.getInt("3#uO|UpK8K");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Double double0 = new Double(0.0);
      Double.max(46.44075607, 0.0);
      jSONObject0.put("] is not a JSONObject.", (Object) double0);
      Float float0 = new Float(1242.7325F);
      jSONObject0.accumulate("] is not a JSONObject.", float0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong("isaddFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isaddFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-1314), 55);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString(796, (-1258));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(3798, 3798);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put(";", 3536);
      double double0 = jSONObject1.optDouble(";");
      assertEquals(3536.0, double0, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("true", 0L);
      jSONObject0.optDouble("true", (-1.0));
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.put("Xa)2d<OLg9/>L", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.026378750007062
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.quote("u12}037/<A.WWn");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("}]+!n~_");
      jSONObject0.put("getintValue", false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("getintValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of getintValue
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("/VD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/VD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      HashMap<Long, Boolean> hashMap0 = new HashMap<Long, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, (-1017), (-12473307));
      jSONObject0.put("{}", (Object) "{}");
      try { 
        jSONObject0.get("`E0]&2!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`E0]&2!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.587973990795769
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject.testValidity("\"`f~uBsq>mCMa[4");
      String string0 = JSONObject.valueToString((Object) null, (-1718), (-1718));
      assertEquals("null", string0);
      
      Float float0 = new Float((double) (-1718));
      String string1 = JSONObject.valueToString(float0, 523, 91);
      Double double0 = new Double(1360.37125);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("java.lang.Float@0000000001", (Object) "null");
      jSONObject0.optDouble("java.lang.Float@0000000001", 390.7);
      jSONObject0.optString("java.lang.Float@0000000001", "\"`f~uBsq>mCMa[4");
      String string2 = JSONObject.valueToString(float0);
      assertTrue(string2.equals((Object)string1));
      
      jSONObject0.keys();
      jSONObject0.has("su");
      double double1 = jSONObject0.optDouble("", 1.0);
      assertEquals(1.0, double1, 0.01);
      
      String string3 = JSONObject.doubleToString(1.0);
      assertEquals("1", string3);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "u12}wr0=7/A.";
      stringArray0[1] = "u12}wr0=7/A.";
      stringArray0[2] = "u12}wr0=7/A.";
      stringArray0[3] = "u12}wr0=7/A.";
      stringArray0[4] = "u12}wr0=7/A.";
      stringArray0[5] = "u12}wr0=7/A.";
      stringArray0[6] = "u12}wr0=7/A.";
      stringArray0[7] = "u12}wr0=7/A.";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.append("u12}wr0=7/A.", "u12}wr0=7/A.");
      String string0 = jSONObject0.optString("u12}wr0=7/A.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0218020909681602
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote("u12}ulJn37/AjWn");
      assertEquals("\"u12}ulJn37/AjWn\"", string0);
      
      JSONObject.quote("mer");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optBoolean("isoptLong", false);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("7C\"TL0CdMs;EQD+q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 7C\"TL0CdMs;EQD+q
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.quote("*tBGlP]E/*5A");
      assertEquals("\"*tBGlP]E/*5A\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1845L));
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("fo", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("0");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.quote("FNuJGO[i=vh#");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("pda]B", 3);
      try { 
        jSONObject0.getBoolean("2>&G Jcz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2>&G Jcz\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      int int0 = jSONObject0.optInt("isclear");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = JSONObject.quote("uSx7d0&t}-\"V6W4PNk\"");
      assertEquals("\"uSx7d0&t}-\\\"V6W4PNk\\\"\"", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = JSONObject.quote(" `5R:!Y!(Fy ");
      assertEquals("\" `5R:!Y!(Fy \"", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4QKW`'DNhpw{3CB";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("eez>&PIV+a|{FGoo", (Object) null);
      Object object0 = new Object();
      jSONObject0.append("ism:ax", object0);
      JSONObject.doubleToString((-1.0));
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("ism:ax");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      Float.isFinite(0.0F);
      try { 
        jSONObject0.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-18));
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      Byte byte0 = new Byte((byte)2);
      hashMap0.put(byte0, (Boolean) null);
      Byte byte1 = new Byte((byte)69);
      hashMap0.put(byte1, (Boolean) null);
      hashMap0.clone();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Integer integer0 = new Integer(3311);
      hashMap0.put((Boolean) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString();
      assertNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("JSON does not allow non-finite numbers.", 1850);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1850);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.entrySet();
      hashMap0.put(")t", (String) null);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "l(8q'IVL ,";
      jSONObject0.put("l(8q'IVL ,", (-73L));
      try { 
        jSONObject0.append("l(8q'IVL ,", "l(8q'IVL ,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[l(8q'IVL ,] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.append((String) null, hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.append("Unclosed comment", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double double0 = new Double((-2069.7177877791));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte)1);
      Byte.compare((byte)1, (byte)1);
      String string0 = JSONObject.valueToString(byte0, (byte)1, (byte)1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{aLG#{9>e");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {aLG#{9>e
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONArray0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((float) 796);
      try { 
        jSONObject0.getString("`t/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`t/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-23));
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",:]}/\"[{;=#";
      stringArray0[1] = "WDSJ'?6*";
      stringArray0[2] = "Bad value from toJSONString: ";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "";
      stringArray0[5] = "[=";
      stringArray0[6] = "has";
      stringArray0[7] = "Z|+0/g4bk9";
      stringArray0[8] = "e~t^";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("}[.;nP9! h]~o", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(false, true);
      String string0 = JSONObject.valueToString(boolean0, 759, 759);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float(534.2436639232218);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(22);
      hashMap0.put("ekmb", integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      jSONObject0.toString(22, 42);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.009656341980306
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote("u12}037/A.Wn");
      assertEquals("\"u12}037/A.Wn\"", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"u12}037/A.Wn\"";
      JSONObject jSONObject0 = new JSONObject("u12}037/A.Wn", stringArray0);
      String string1 = jSONObject0.toString(44);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      HashMap<JSONObject, Long> hashMap0 = new HashMap<JSONObject, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1589.1419);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, double0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.put((String) null, (Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      hashMap0.keySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null, "A JSONObject text must end with '}'");
      assertEquals("A JSONObject text must end with '}'", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames((Object) "Expected a ':' after a key");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = jSONObject0.optString("true");
      assertEquals("", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("com", true);
      JSONTokener jSONTokener0 = new JSONTokener("com");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of com
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("cUI", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("cUI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cUI\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("ism:ax", object0);
      jSONObject1.getJSONArray("ism:ax");
      try { 
        jSONObject0.getJSONObject("ism:ax");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ism:ax\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("isvalueOf");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("isvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isvalueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("sjz27>IzmY", (-2498.7060879337223));
      try { 
        jSONObject0.getBoolean("sjz27>IzmY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sjz27>IzmY\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("'~r=hZ)OYE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'~r=hZ)OYE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
