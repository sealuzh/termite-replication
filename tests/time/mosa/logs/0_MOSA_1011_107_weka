* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5949
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 22:28:22.618 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:28:22.633 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:28:22.634 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:28:24.016 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 22:28:24.563 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 22:28:24.572 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2767
* Using seed 1011
* Starting evolution
[MASTER] 22:28:44.073 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.setSeed(J)V: Line 527
[MASTER] 22:28:44.081 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.setSeed(J)V: Line 528
[MASTER] 22:28:44.083 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip.setSeed(J)V: root-Branch
[MASTER] 22:28:44.084 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 198: weka.classifiers.rules.JRip.setSeed(J)V:527 - ReplaceVariable s -> serialVersionUID
[MASTER] 22:28:44.084 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 199: weka.classifiers.rules.JRip.setSeed(J)V:527 - InsertUnaryOp Negation of s
[MASTER] 22:28:44.085 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.setSeed(J)V
[MASTER] 22:28:44.089 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.setSeed(J)V
[MASTER] 22:28:44.090 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.rules.JRip.setSeed(J)V: root-Branch in context: weka.classifiers.rules.JRip:setSeed(J)V
[MASTER] 22:28:47.475 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 22:29:01.183 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.NumericAntd.<init>(Lweka/classifiers/rules/JRip;Lweka/core/Attribute;)V
[MASTER] 22:30:04.901 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$Antd.getMaxInfoGain()D: Line 724
[MASTER] 22:30:04.904 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.rules.JRip$Antd.getMaxInfoGain()D: root-Branch
[MASTER] 22:30:04.907 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 670: weka.classifiers.rules.JRip$Antd.getMaxInfoGain()D:724 - ReplaceVariable maxInfoGain -> cover
[MASTER] 22:30:04.907 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 671: weka.classifiers.rules.JRip$Antd.getMaxInfoGain()D:724 - ReplaceVariable maxInfoGain -> accu
[MASTER] 22:30:04.907 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 672: weka.classifiers.rules.JRip$Antd.getMaxInfoGain()D:724 - ReplaceVariable maxInfoGain -> value
[MASTER] 22:30:04.907 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 673: weka.classifiers.rules.JRip$Antd.getMaxInfoGain()D:724 - ReplaceVariable maxInfoGain -> accuRate
[MASTER] 22:30:04.907 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 674: weka.classifiers.rules.JRip$Antd.getMaxInfoGain()D:724 - InsertUnaryOp Negation
[MASTER] 22:30:04.909 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.Antd.getMaxInfoGain()D
[MASTER] 22:30:04.910 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.Antd.getMaxInfoGain()D
[MASTER] 22:30:04.911 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.rules.JRip$Antd.getMaxInfoGain()D: root-Branch in context: weka.classifiers.rules.JRip$Antd:getMaxInfoGain()D
* Search finished after 124s and 137 generations, 66072 statements, best individual has fitness: 12464.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 36%
* Total number of goals: 705
* Number of covered goals: 254
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 27%
* Total number of goals: 416
* Number of covered goals: 112
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 56%
* Total number of goals: 993
* Number of covered goals: 558
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 28%
* Total number of goals: 93
* Number of covered goals: 26
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 72
* Number of covered goals: 71
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 99%
* Total number of goals: 72
* Number of covered goals: 71
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 27%
* Total number of goals: 416
* Number of covered goals: 112
* Generated 77 tests with total length 546
* Resulting test suite's coverage: 44% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 22%
* Compiling and checking tests
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/mosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5942
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1367
* Using seed 1011
* Starting evolution
* Search finished after 123s and 147 generations, 68883 statements, best individual has fitness: 2776.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 217
* Number of covered goals: 188
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 66%
* Total number of goals: 428
* Number of covered goals: 284
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 260
* Number of covered goals: 240
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 66%
* Total number of goals: 428
* Number of covered goals: 284
* Generated 67 tests with total length 227
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 78%
* Compiling and checking tests
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/mosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5946
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 22:44:55.508 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:44:55.510 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:44:55.510 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:44:55.598 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2699
* Using seed 1011
* Starting evolution
* Search finished after 138s and 27 generations, 24979 statements, best individual has fitness: 2680.0
[MASTER] 22:47:16.804 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 19 seconds more than allowed.
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 96%
* Total number of goals: 647
* Number of covered goals: 619
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 441
* Number of covered goals: 404
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 678
* Number of covered goals: 608
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 41%
* Total number of goals: 244
* Number of covered goals: 101
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 98%
* Total number of goals: 124
* Number of covered goals: 121
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 124
* Number of covered goals: 121
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 441
* Number of covered goals: 392
* Generated 188 tests with total length 2675
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:53:01.618 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6931041666666666% of time used, but only 65/188 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
[MASTER] 22:54:34.111 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/mosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5941
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 22:55:32.878 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 22:55:32.880 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 22:55:32.881 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 22:55:33.376 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 22:55:33.821 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 22:55:33.822 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 22:55:35.186 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 22:55:35.206 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 22:55:35.207 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 22:55:35.207 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 22:55:35.207 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 22:55:35.207 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 22:55:35.208 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 22:55:35.208 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 22:55:35.209 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 22:55:35.260 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 22:55:35.267 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 3904
* Using seed 1011
* Starting evolution
[MASTER] 22:55:38.197 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 22:55:50.445 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 22:56:12.333 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.Evaluation.fMeasure(I)D
[MASTER] 22:56:12.333 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.wekaStaticWrapper(Lweka/classifiers/Sourcable;Ljava/lang/String;)Ljava/lang/String;
[MASTER] 22:56:12.335 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.Evaluation.fMeasure(I)D
* Search finished after 126s and 76 generations, 46964 statements, best individual has fitness: 14376.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 61%
* Total number of goals: 1378
* Number of covered goals: 840
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 47%
* Total number of goals: 809
* Number of covered goals: 382
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 62
* Number of covered goals: 62
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 65%
* Total number of goals: 424
* Number of covered goals: 277
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 21%
* Total number of goals: 278
* Number of covered goals: 58
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 103
* Number of covered goals: 102
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 103
* Number of covered goals: 101
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 45%
* Total number of goals: 809
* Number of covered goals: 362
* Generated 156 tests with total length 1906
* Resulting test suite's coverage: 55% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 9%
[MASTER] 23:05:50.123 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Compiling and checking tests
[MASTER] 23:05:54.587 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_111_1575500754569/weka/classifiers/Evaluation_111_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_111_1575500754569/weka/classifiers/Evaluation_111_tmp__ESTest_scaffolding.java]]
[MASTER] 23:05:54.587 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 23:05:54.587 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 23:05:54.589 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   variable double1
  location: class weka.classifiers.Evaluation_111_tmp__ESTest: 44
[MASTER] 23:05:54.590 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_111_1575500754569/weka/classifiers/Evaluation_111_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 23:05:54 GMT 2019
4:  */
5: 
6: package weka.classifiers;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import org.evosuite.runtime.EvoRunner;
11: import org.evosuite.runtime.EvoRunnerParameters;
12: import org.evosuite.runtime.testdata.FileSystemHandling;
13: import org.junit.runner.RunWith;
14: import weka.classifiers.Evaluation;
15: import weka.classifiers.functions.LinearRegression;
16: import weka.classifiers.meta.ClassificationViaRegression;
17: import weka.core.Instances;
18: import weka.core.TestInstances;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class Evaluation_111_tmp__ESTest extends Evaluation_111_tmp__ESTest_scaffolding {
22: 
23:   /**
24:   //Test case number: 0
25:   /*Coverage entropy=2.6059089303685448
26:   */
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       TestInstances testInstances0 = new TestInstances();
30:       Instances instances0 = testInstances0.generate();
31:       Evaluation evaluation0 = new Evaluation(instances0);
32:       LinearRegression linearRegression0 = new LinearRegression();
33:       Evaluation.makeOptionString(linearRegression0, true);
34:       ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
35:       Evaluation.getGlobalInfo(linearRegression0);
36:       ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
37:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
38:       evaluation0.toSummaryString("%K_lt3I26itU", false);
39:       evaluation0.precision(0);
40:       Evaluation evaluation1 = new Evaluation(instances0);
41:       evaluation0.meanPriorAbsoluteError();
42:       evaluation0.SFEntropyGain();
43:       double double0 = evaluation0.m_MaxTarget;
44:       assertNotEquals(double0, double1, 0.01);
45:   }
46: }
RegularFileObject[/tmp/EvoSuite_111_1575500754569/weka/classifiers/Evaluation_111_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 23:05:54 GMT 2019
5:  */
6: 
7: package weka.classifiers;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Evaluation_111_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.Evaluation"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Evaluation_111_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.filters.unsupervised.attribute.NominalToBinary",
90:       "weka.clusterers.AbstractClusterer",
91:       "weka.core.converters.TextDirectoryLoader",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.core.xml.XMLBasicSerialization",
94:       "weka.filters.UnsupervisedFilter",
95:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
96:       "weka.core.DenseInstance",
97:       "weka.core.converters.DatabaseConverter",
98:       "weka.classifiers.trees.J48",
99:       "weka.classifiers.functions.SimpleLinearRegression",
100:       "weka.classifiers.trees.m5.Rule",
101:       "org.pentaho.packageManagement.DefaultPackageManager",
102:       "weka.estimators.UnivariateIntervalEstimator",
103:       "org.bounce.net.DefaultAuthenticator",
104:       "weka.clusterers.NumberOfClustersRequestable",
105:       "weka.classifiers.meta.AdaBoostM1",
106:       "weka.core.CustomDisplayStringProvider",
107:       "weka.core.NormalizableDistance",
108:       "weka.clusterers.SimpleKMeans",
109:       "weka.core.TechnicalInformation$Type",
110:       "weka.core.Copyable",
111:       "weka.filters.supervised.attribute.NominalToBinary",
112:       "weka.core.BinarySparseInstance",
113:       "weka.core.SerializedObject",
114:       "weka.core.Matrix",
115:       "weka.clusterers.UpdateableClusterer",
116:       "weka.core.AdditionalMeasureProducer",
117:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
118:       "weka.classifiers.meta.MultiClassClassifier",
119:       "weka.core.Optimization",
120:       "weka.classifiers.lazy.kstar.KStarConstants",
121:       "weka.classifiers.meta.FilteredClassifier",
122:       "weka.classifiers.misc.InputMappedClassifier",
123:       "weka.classifiers.trees.m5.Values",
124:       "weka.experiment.ResultProducer",
125:       "weka.core.Version",
126:       "weka.classifiers.meta.MultiClassClassifier$Code",
127:       "weka.classifiers.functions.supportVector.Puk",
128:       "weka.classifiers.AbstractClassifier",
129:       "weka.core.converters.ArffLoader",
130:       "weka.core.FindWithCapabilities",
131:       "weka.classifiers.meta.Stacking",
132:       "weka.core.WekaException",
133:       "weka.classifiers.trees.RandomForest",
134:       "weka.filters.StreamableFilter",
135:       "weka.core.Attribute$1",
136:       "weka.core.PartitionGenerator",
137:       "weka.core.SparseInstance",
138:       "weka.classifiers.misc.SerializedClassifier",
139:       "weka.classifiers.trees.j48.ClassifierTree",
140:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
141:       "weka.classifiers.trees.j48.PruneableClassifierTree",
142:       "weka.classifiers.Evaluation",
143:       "weka.classifiers.functions.supportVector.Kernel",
144:       "weka.core.converters.CSVLoader",
145:       "weka.gui.CustomPanelSupplier",
146:       "weka.classifiers.functions.SMO",
147:       "weka.classifiers.evaluation.ThresholdCurve",
148:       "weka.core.converters.FileSourcedConverter",
149:       "weka.core.converters.URLSourcedLoader",
150:       "weka.core.neighboursearch.LinearNNSearch",
151:       "weka.clusterers.Clusterer",
152:       "weka.estimators.UnivariateKernelEstimator",
153:       "weka.core.tokenizers.NGramTokenizer",
154:       "weka.core.UnassignedDatasetException",
155:       "weka.core.Queue$QueueNode",
156:       "weka.core.RevisionUtils",
157:       "weka.classifiers.meta.RandomCommittee",
158:       "weka.core.converters.Loader",
159:       "weka.core.ProtectedProperties",
160:       "weka.core.StringLocator",
161:       "weka.classifiers.lazy.kstar.KStarCache",
162:       "weka.core.AttributeStats",
163:       "weka.core.GlobalInfoJavadoc",
164:       "weka.classifiers.trees.DecisionStump",
165:       "weka.estimators.UnivariateQuantileEstimator",
166:       "weka.filters.unsupervised.attribute.Remove",
167:       "weka.core.Randomizable",
168:       "weka.classifiers.trees.LMT",
169:       "weka.core.EuclideanDistance",
170:       "weka.core.Instances",
171:       "weka.core.converters.AbstractFileLoader",
172:       "weka.core.converters.ConverterUtils$DataSink",
173:       "weka.core.converters.DatabaseConnection",
174:       "weka.core.UnsupportedAttributeTypeException",
175:       "weka.core.TechnicalInformation",
176:       "weka.classifiers.functions.Logistic$OptEngCG",
177:       "weka.core.RevisionHandler",
178:       "weka.experiment.Stats",
179:       "weka.core.converters.ConverterUtils$DataSource",
180:       "weka.classifiers.xml.XMLClassifier",
181:       "weka.filters.Filter",
182:       "weka.filters.supervised.attribute.Discretize",
183:       "weka.core.TestInstances",
184:       "weka.core.converters.ConverterUtils",
185:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
186:       "weka.core.DistanceFunction",
187:       "weka.attributeSelection.AttributeEvaluator",
188:       "org.pentaho.packageManagement.Package",
189:       "weka.classifiers.trees.m5.M5Base",
190:       "weka.classifiers.CostMatrix",
191:       "weka.classifiers.evaluation.NumericPrediction",
192:       "weka.core.logging.Logger$Level",
193:       "weka.classifiers.trees.m5.Impurity",
194:       "weka.core.ConjugateGradientOptimization",
195:       "weka.classifiers.functions.LinearRegression",
196:       "weka.core.converters.IncrementalConverter",
197:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
198:       "weka.classifiers.meta.LogitBoost",
199:       "weka.classifiers.meta.MultiClassClassifier$RandomCode",
200:       "weka.core.EnvironmentHandler",
201:       "weka.classifiers.trees.j48.C45ModelSelection",
202:       "weka.classifiers.functions.Logistic",
203:       "weka.classifiers.trees.m5.RuleNode",
204:       "weka.core.RelationalLocator",
205:       "weka.core.Utils",
206:       "weka.classifiers.trees.m5.PreConstructedLinearModel",
207:       "weka.core.tokenizers.Tokenizer",
208:       "weka.filters.unsupervised.instance.RemoveWithValues",
209:       "weka.core.NoSupportForMissingValuesException",
210:       "weka.classifiers.UpdateableClassifier",
211:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
212:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
213:       "weka.core.MultiInstanceCapabilitiesHandler",
214:       "weka.classifiers.meta.MultiClassClassifier$ExhaustiveCode",
215:       "weka.core.Capabilities",
216:       "weka.core.AttributeLocator",
217:       "weka.gui.beans.FileEnvironmentField",
218:       "weka.classifiers.functions.supportVector.CachedKernel",
219:       "weka.classifiers.meta.RegressionByDiscretization",
220:       "weka.core.Summarizable",
221:       "weka.classifiers.trees.j48.ModelSelection",
222:       "org.pentaho.packageManagement.PackageManager$1",
223:       "weka.core.Drawable",
224:       "weka.core.matrix.Matrix",
225:       "weka.classifiers.ConditionalDensityEstimator",
226:       "weka.core.SingleIndex",
227:       "weka.core.CapabilitiesHandler",
228:       "weka.attributeSelection.ASEvaluation",
229:       "weka.core.AbstractInstance",
230:       "weka.core.scripting.JythonObject",
231:       "weka.core.SelectedTag",
232:       "org.pentaho.packageManagement.DefaultPackage",
233:       "weka.core.matrix.LUDecomposition",
234:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
235:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
236:       "weka.classifiers.meta.AdditiveRegression",
237:       "weka.attributeSelection.CorrelationAttributeEval",
238:       "weka.core.Queue",
239:       "weka.clusterers.RandomizableClusterer",
240:       "weka.classifiers.evaluation.Prediction",
241:       "weka.core.converters.AbstractLoader",
242:       "weka.classifiers.trees.lmt.ResidualModelSelection",
243:       "weka.filters.AllFilter",
244:       "weka.filters.unsupervised.attribute.RemoveUseless",
245:       "weka.core.converters.BatchConverter",
246:       "weka.core.Tag",
247:       "weka.classifiers.IteratedSingleClassifierEnhancer",
248:       "weka.classifiers.trees.j48.BinC45ModelSelection",
249:       "weka.estimators.UnivariateDensityEstimator",
250:       "weka.core.OptionHandler",
251:       "weka.filters.supervised.attribute.AttributeSelection",
252:       "weka.core.Range",
253:       "weka.core.scripting.JythonSerializableObject",
254:       "weka.classifiers.Classifier",
255:       "weka.core.Capabilities$Capability",
256:       "org.pentaho.packageManagement.PackageManager",
257:       "weka.core.WekaEnumeration",
258:       "weka.classifiers.trees.M5P",
259:       "weka.core.WekaPackageManager",
260:       "weka.filters.SupervisedFilter",
261:       "weka.core.TechnicalInformationHandler",
262:       "weka.experiment.DatabaseUtils",
263:       "weka.classifiers.lazy.LWL",
264:       "weka.classifiers.meta.CostSensitiveClassifier",
265:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
266:       "weka.core.Option",
267:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
268:       "weka.filters.Sourcable",
269:       "weka.classifiers.meta.MultiClassClassifier$StandardCode",
270:       "weka.core.Attribute",
271:       "weka.core.matrix.LinearRegression",
272:       "weka.core.FastVector",
273:       "weka.classifiers.MultipleClassifiersCombiner",
274:       "weka.core.BatchPredictor",
275:       "weka.classifiers.trees.RandomTree",
276:       "weka.classifiers.SingleClassifierEnhancer",
277:       "weka.core.Instance",
278:       "weka.classifiers.functions.supportVector.PolyKernel",
279:       "weka.classifiers.lazy.KStar",
280:       "weka.classifiers.IntervalEstimator",
281:       "weka.gui.beans.EnvironmentField",
282:       "weka.core.Matchable",
283:       "weka.core.WeightedInstancesHandler",
284:       "weka.core.neighboursearch.NearestNeighbourSearch",
285:       "weka.classifiers.functions.GaussianProcesses",
286:       "weka.core.TechnicalInformation$Field",
287:       "weka.filters.unsupervised.attribute.Discretize",
288:       "weka.core.converters.DatabaseLoader",
289:       "weka.core.Javadoc",
290:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
291:       "weka.filters.unsupervised.attribute.Normalize",
292:       "weka.classifiers.trees.m5.YongSplitInfo",
293:       "weka.core.UnassignedClassException",
294:       "weka.classifiers.trees.m5.SplitEvaluate",
295:       "weka.classifiers.misc.InputMappedClassifierBeanInfo",
296:       "weka.classifiers.rules.ZeroR",
297:       "weka.filters.unsupervised.attribute.Standardize",
298:       "weka.classifiers.Sourcable",
299:       "weka.classifiers.functions.Logistic$OptEng",
300:       "weka.classifiers.evaluation.output.prediction.PlainText",
301:       "weka.core.xml.XMLSerialization",
302:       "weka.filters.unsupervised.attribute.MakeIndicator",
303:       "weka.classifiers.meta.ClassificationViaRegression",
304:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
305:       "weka.classifiers.lazy.IBk"
306:     );
307:   } 
308: 
309:   private static void resetClasses() {
310:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Evaluation_111_tmp__ESTest_scaffolding.class.getClassLoader()); 
311: 
312:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
313:       "weka.classifiers.Evaluation",
314:       "weka.core.pmml.PMMLFactory$ModelType",
315:       "weka.core.pmml.PMMLFactory$1",
316:       "weka.core.xml.KOML",
317:       "weka.core.Version",
318:       "weka.core.Utils",
319:       "weka.core.converters.ConverterUtils$DataSource",
320:       "weka.core.converters.AbstractLoader",
321:       "weka.core.converters.AbstractFileLoader",
322:       "weka.core.converters.ArffLoader",
323:       "org.pentaho.packageManagement.PackageManager",
324:       "org.pentaho.packageManagement.DefaultPackageManager",
325:       "weka.core.Environment",
326:       "weka.core.WekaPackageManager",
327:       "weka.gui.GenericPropertiesCreator",
328:       "weka.core.ClassDiscovery",
329:       "weka.core.ClassCache",
330:       "weka.gui.GenericObjectEditor",
331:       "weka.core.converters.ConverterUtils",
332:       "weka.core.Instances",
333:       "weka.core.TestInstances",
334:       "weka.core.Attribute",
335:       "weka.core.ProtectedProperties",
336:       "weka.core.AbstractInstance",
337:       "weka.core.DenseInstance",
338:       "weka.classifiers.CostMatrix",
339:       "weka.classifiers.AbstractClassifier",
340:       "weka.classifiers.SingleClassifierEnhancer",
341:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
342:       "weka.core.Tag",
343:       "weka.classifiers.meta.CostSensitiveClassifier",
344:       "weka.classifiers.rules.ZeroR",
345:       "weka.core.UnassignedClassException",
346:       "weka.classifiers.bayes.BayesNet",
347:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
348:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
349:       "weka.classifiers.bayes.net.search.local.K2",
350:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
351:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
352:       "weka.classifiers.lazy.IBk",
353:       "weka.core.neighboursearch.NearestNeighbourSearch",
354:       "weka.core.neighboursearch.LinearNNSearch",
355:       "weka.core.NormalizableDistance",
356:       "weka.core.EuclideanDistance",
357:       "weka.core.Range",
358:       "weka.core.SparseInstance",
359:       "weka.core.BinarySparseInstance",
360:       "weka.attributeSelection.ASEvaluation",
361:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
362:       "weka.attributeSelection.PrincipalComponents",
363:       "weka.core.converters.ArffLoader$ArffReader",
364:       "weka.core.converters.LibSVMLoader",
365:       "weka.core.converters.JSONLoader",
366:       "weka.core.converters.TextDirectoryLoader",
367:       "weka.filters.Filter",
368:       "weka.filters.AllFilter",
369:       "weka.core.converters.CSVLoader",
370:       "weka.core.converters.DatabaseLoader",
371:       "weka.experiment.DatabaseUtils",
372:       "weka.core.converters.DatabaseConnection",
373:       "weka.core.Option",
374:       "weka.core.converters.SerializedInstancesLoader",
375:       "weka.clusterers.AbstractClusterer",
376:       "weka.clusterers.RandomizableClusterer",
377:       "weka.clusterers.SimpleKMeans",
378:       "weka.core.neighboursearch.CoverTree",
379:       "weka.classifiers.IteratedSingleClassifierEnhancer",
380:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
381:       "weka.classifiers.meta.LogitBoost",
382:       "weka.classifiers.trees.DecisionStump",
383:       "weka.core.converters.SVMLightLoader",
384:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
385:       "weka.classifiers.evaluation.output.prediction.XML",
386:       "weka.core.UnassignedDatasetException",
387:       "weka.core.converters.MatlabLoader",
388:       "weka.core.RevisionUtils",
389:       "weka.estimators.Estimator",
390:       "weka.estimators.DiscreteEstimator",
391:       "weka.experiment.InstanceQuery",
392:       "weka.classifiers.rules.DecisionTable",
393:       "weka.attributeSelection.ASSearch",
394:       "weka.attributeSelection.BestFirst",
395:       "weka.core.SelectedTag",
396:       "weka.classifiers.trees.m5.M5Base",
397:       "weka.classifiers.rules.M5Rules",
398:       "weka.classifiers.functions.supportVector.Kernel",
399:       "weka.classifiers.functions.supportVector.CachedKernel",
400:       "weka.classifiers.functions.supportVector.Puk",
401:       "weka.core.Capabilities",
402:       "weka.core.Capabilities$Capability",
403:       "weka.classifiers.meta.AdditiveRegression",
404:       "weka.core.WekaEnumeration",
405:       "weka.core.Attribute$1",
406:       "weka.core.FindWithCapabilities",
407:       "weka.core.SingleIndex",
408:       "weka.core.tokenizers.Tokenizer",
409:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
410:       "weka.core.tokenizers.NGramTokenizer",
411:       "weka.classifiers.meta.ClassificationViaRegression",
412:       "weka.classifiers.trees.M5P",
413:       "weka.core.tokenizers.AlphabeticTokenizer",
414:       "weka.core.SerializedObject",
415:       "weka.core.neighboursearch.balltrees.BallNode",
416:       "weka.classifiers.functions.supportVector.PolyKernel",
417:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
418:       "weka.classifiers.trees.RandomForest",
419:       "weka.classifiers.trees.RandomTree",
420:       "weka.classifiers.functions.Logistic",
421:       "weka.classifiers.functions.SimpleLogistic",
422:       "weka.classifiers.RandomizableClassifier",
423:       "weka.classifiers.functions.SGD",
424:       "weka.filters.SimpleFilter",
425:       "weka.filters.SimpleStreamFilter",
426:       "weka.filters.MultiFilter",
427:       "weka.core.TechnicalInformation",
428:       "weka.core.TechnicalInformation$Type",
429:       "weka.core.TechnicalInformation$Field",
430:       "weka.classifiers.functions.GaussianProcesses",
431:       "weka.classifiers.misc.InputMappedClassifier",
432:       "weka.core.xml.XMLDocument",
433:       "weka.core.xml.XMLInstances",
434:       "weka.core.converters.XRFFLoader",
435:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
436:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
437:       "weka.classifiers.meta.RandomCommittee",
438:       "weka.core.converters.C45Loader",
439:       "weka.classifiers.trees.J48",
440:       "weka.classifiers.trees.j48.ClassifierTree",
441:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
442:       "weka.classifiers.meta.AdaBoostM1",
443:       "weka.classifiers.lazy.KStar",
444:       "weka.classifiers.meta.CVParameterSelection",
445:       "weka.core.FastVector",
446:       "weka.classifiers.misc.InputMappedClassifierBeanInfo",
447:       "weka.classifiers.functions.MultilayerPerceptron",
448:       "weka.filters.unsupervised.attribute.NominalToBinary",
449:       "weka.classifiers.functions.neural.SigmoidUnit",
450:       "weka.classifiers.functions.neural.LinearUnit",
451:       "weka.core.neighboursearch.KDTree",
452:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
453:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
454:       "weka.classifiers.trees.LMT",
455:       "weka.classifiers.MultipleClassifiersCombiner",
456:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
457:       "weka.classifiers.meta.MultiScheme",
458:       "weka.core.neighboursearch.BallTree",
459:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
460:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
461:       "weka.core.neighboursearch.balltrees.BallSplitter",
462:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
463:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
464:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
465:       "weka.classifiers.meta.Stacking",
466:       "weka.classifiers.pmml.consumer.PMMLClassifier",
467:       "weka.classifiers.pmml.consumer.NeuralNetwork",
468:       "weka.classifiers.pmml.consumer.NeuralNetwork$MiningFunction",
469:       "weka.classifiers.pmml.consumer.NeuralNetwork$ActivationFunction",
470:       "weka.classifiers.pmml.consumer.NeuralNetwork$Normalization",
471:       "weka.classifiers.functions.supportVector.RBFKernel",
472:       "weka.core.WekaException",
473:       "weka.core.UnsupportedAttributeTypeException",
474:       "weka.attributeSelection.CorrelationAttributeEval",
475:       "weka.estimators.KernelEstimator",
476:       "weka.classifiers.bayes.NaiveBayes",
477:       "weka.classifiers.bayes.NaiveBayesUpdateable",
478:       "weka.classifiers.meta.AttributeSelectedClassifier",
479:       "weka.attributeSelection.CfsSubsetEval",
480:       "weka.core.Queue",
481:       "weka.core.AttributeLocator",
482:       "weka.core.StringLocator",
483:       "weka.core.RelationalLocator",
484:       "weka.experiment.Stats",
485:       "weka.estimators.UnivariateKernelEstimator",
486:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
487:       "weka.core.tokenizers.WordTokenizer",
488:       "weka.core.stemmers.NullStemmer",
489:       "weka.classifiers.trees.REPTree",
490:       "weka.clusterers.HierarchicalClusterer",
491:       "weka.clusterers.SingleClustererEnhancer",
492:       "weka.clusterers.FilteredClusterer",
493:       "weka.classifiers.functions.LinearRegression",
494:       "weka.filters.unsupervised.attribute.MakeIndicator",
495:       "weka.core.Queue$QueueNode",
496:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
497:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
498:       "weka.filters.supervised.attribute.NominalToBinary",
499:       "weka.filters.unsupervised.attribute.RemoveUseless",
500:       "weka.core.AttributeStats",
501:       "weka.filters.unsupervised.attribute.Remove",
502:       "weka.classifiers.trees.m5.Rule",
503:       "weka.classifiers.trees.m5.RuleNode",
504:       "weka.classifiers.trees.m5.YongSplitInfo",
505:       "weka.classifiers.trees.m5.Impurity",
506:       "weka.classifiers.trees.m5.Values",
507:       "weka.classifiers.trees.m5.PreConstructedLinearModel",
508:       "weka.classifiers.evaluation.NumericPrediction",
509:       "weka.classifiers.evaluation.Prediction",
510:       "weka.core.Matrix",
511:       "weka.core.matrix.Matrix",
512:       "weka.core.matrix.LinearRegression",
513:       "weka.core.matrix.LUDecomposition",
514:       "weka.classifiers.lazy.LWL",
515:       "weka.clusterers.FarthestFirst",
516:       "weka.classifiers.meta.Vote",
517:       "weka.classifiers.functions.SimpleLinearRegression",
518:       "weka.classifiers.meta.RandomSubSpace",
519:       "weka.classifiers.meta.RegressionByDiscretization",
520:       "weka.filters.unsupervised.attribute.Discretize",
521:       "weka.estimators.PoissonEstimator",
522:       "weka.classifiers.functions.SMO",
523:       "weka.classifiers.bayes.NaiveBayesMultinomial",
524:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
525:       "weka.classifiers.meta.FilteredClassifier",
526:       "weka.filters.supervised.attribute.AttributeSelection",
527:       "weka.attributeSelection.AttributeSelection",
528:       "weka.attributeSelection.GreedyStepwise",
529:       "weka.filters.supervised.attribute.Discretize",
530:       "weka.classifiers.functions.SMOreg",
531:       "weka.classifiers.functions.supportVector.RegOptimizer",
532:       "weka.classifiers.functions.supportVector.RegSMO",
533:       "weka.classifiers.functions.supportVector.RegSMOImproved",
534:       "weka.clusterers.AbstractDensityBasedClusterer",
535:       "weka.clusterers.RandomizableDensityBasedClusterer",
536:       "weka.clusterers.EM",
537:       "weka.classifiers.rules.JRip",
538:       "weka.attributeSelection.InfoGainAttributeEval",
539:       "weka.classifiers.meta.MultiClassClassifier",
540:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
541:       "weka.attributeSelection.WrapperSubsetEval",
542:       "weka.classifiers.functions.supportVector.StringKernel",
543:       "weka.classifiers.rules.OneR",
544:       "weka.estimators.NormalEstimator",
545:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
546:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
547:       "weka.attributeSelection.ReliefFAttributeEval",
548:       "weka.classifiers.meta.Bagging",
549:       "weka.classifiers.evaluation.output.prediction.PlainText",
550:       "weka.clusterers.Cobweb",
551:       "weka.estimators.UnivariateEqualFrequencyHistogramEstimator",
552:       "weka.classifiers.pmml.consumer.GeneralRegression",
553:       "weka.classifiers.pmml.consumer.GeneralRegression$ModelType",
554:       "weka.classifiers.pmml.consumer.GeneralRegression$CumulativeLinkFunction",
555:       "weka.classifiers.pmml.consumer.GeneralRegression$LinkFunction",
556:       "weka.classifiers.pmml.consumer.GeneralRegression$Distribution",
557:       "weka.classifiers.rules.PART",
558:       "weka.classifiers.rules.part.MakeDecList",
559:       "weka.classifiers.evaluation.output.prediction.Null",
560:       "weka.core.Javadoc",
561:       "weka.core.OptionHandlerJavadoc",
562:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
563:       "weka.core.TechnicalInformationHandlerJavadoc",
564:       "weka.core.GlobalInfoJavadoc",
565:       "weka.classifiers.functions.VotedPerceptron",
566:       "weka.core.ChebyshevDistance",
567:       "weka.classifiers.evaluation.output.prediction.HTML",
568:       "weka.classifiers.misc.SerializedClassifier",
569:       "weka.classifiers.evaluation.output.prediction.CSV",
570:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
571:       "weka.core.MinkowskiDistance",
572:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
573:       "weka.core.AllJavadoc",
574:       "weka.classifiers.evaluation.ThresholdCurve"
575:     );
576:   }
577: }

[MASTER] 23:05:54.590 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
TestInstances testInstances0 = new TestInstances();
Instances instances0 = testInstances0.generate();
Evaluation evaluation0 = new Evaluation(instances0);
LinearRegression linearRegression0 = new LinearRegression();
Evaluation.makeOptionString(linearRegression0, true);
ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
Evaluation.getGlobalInfo(linearRegression0);
ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
evaluation0.toSummaryString("%K_lt3I26itU", false);
evaluation0.precision(0);
Evaluation evaluation1 = new Evaluation(instances0);
evaluation0.meanPriorAbsoluteError();
evaluation0.SFEntropyGain();
double double0 = evaluation0.m_MaxTarget;
assertNotEquals(double0, double1, 0.01);


[MASTER] 23:05:56.047 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 23:05:56.678 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 23:05:56.678 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 23:05:57.522 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 23:05:57.532 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.AllJavadoc: null
[MASTER] 23:05:57.857 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.AllJavadoc
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/mosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.Optimization
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 5944
* Connecting to master process on port 5943
* Connecting to master process on port 5941
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 23:06:58.543 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 23:06:58.586 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 23:06:58.587 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 23:06:58.858 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 23:06:58.888 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 23:06:58.894 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 23:06:59.123 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 23:06:59.123 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 23:06:59.124 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 23:06:59.194 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 23:06:59.196 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 23:06:59.196 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1729
* Using seed 1011
* Starting evolution
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1412
* Using seed 1011
* Starting evolution
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 23:07:05.920 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 23:07:05.927 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 23:07:05.928 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 23:07:05.949 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2499
* Using seed 1011
* Starting evolution
[MASTER] 23:07:07.799 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
[MASTER] 23:07:07.851 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V: Line 692
[MASTER] 23:07:07.851 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V: Line 693
[MASTER] 23:07:07.851 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V: root-Branch
[MASTER] 23:07:07.852 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 277: weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V:692 - ReplaceVariable minFreq -> m_norm
[MASTER] 23:07:07.852 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 278: weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V:692 - ReplaceVariable minFreq -> m_minWordP
[MASTER] 23:07:07.852 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 279: weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V:692 - ReplaceVariable minFreq -> m_t
[MASTER] 23:07:07.852 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 280: weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V:692 - ReplaceVariable minFreq -> m_leplace
[MASTER] 23:07:07.852 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 281: weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V:692 - ReplaceVariable minFreq -> m_lnorm
[MASTER] 23:07:07.852 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 282: weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V:692 - InsertUnaryOp Negation of minFreq
[MASTER] 23:07:07.853 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V
[MASTER] 23:07:07.853 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V
[MASTER] 23:07:07.855 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setMinWordFrequency(D)V: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setMinWordFrequency(D)V
[MASTER] 23:07:14.263 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 23:07:14.266 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 23:07:19.630 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.bayes.NaiveBayesMultinomialText.setUseWordFrequencies(Z)V
[MASTER] 23:07:19.631 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.bayes.NaiveBayesMultinomialText.setUseWordFrequencies(Z)V
[MASTER] 23:07:19.631 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setUseWordFrequencies(Z)V: root-Branch in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setUseWordFrequencies(Z)V
[MASTER] 23:07:39.655 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 23:08:49.228 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
* Search finished after 122s and 234 generations, 93332 statements, best individual has fitness: 5112.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 69%
* Total number of goals: 370
* Number of covered goals: 256
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 56%
* Total number of goals: 242
* Number of covered goals: 135
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 31
* Number of covered goals: 31
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 62%
* Total number of goals: 713
* Number of covered goals: 439
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 72
* Number of covered goals: 36
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 56%
* Total number of goals: 242
* Number of covered goals: 135
* Generated 85 tests with total length 536
* Resulting test suite's coverage: 64% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 123s and 209 generations, 78910 statements, best individual has fitness: 1504.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 338
* Number of covered goals: 304
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 194
* Number of covered goals: 162
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 93%
* Total number of goals: 476
* Number of covered goals: 441
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 55%
* Total number of goals: 112
* Number of covered goals: 62
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 194
* Number of covered goals: 159
* Generated 77 tests with total length 520
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 122s and 91 generations, 64462 statements, best individual has fitness: 16712.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 17 tests with total length 131
* Resulting test suite's coverage: 16% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/mosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
[MASTER] 23:10:51.750 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 23:10:51.771 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 23:10:51.874 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 23:10:51.874 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 23:11:10.199 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 23:11:10.199 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
Attribute attribute0 = new Attribute("@");
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
arrayList0.add(attribute0);
Instances instances0 = new Instances("@attribute", arrayList0, 1);
Attribute attribute1 = new Attribute("numeric", instances0, (-2324));
arrayList0.add(attribute1);
discretize0.m_NumBins = 1408;
discretize0.setInputFormat(instances0);

[MASTER] 23:11:11.411 [logback-1] WARN  ClassResetter - java.lang.reflect.InvocationTargetException, caused by: java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 23:11:11.411 [logback-1] WARN  ClassResetter - java.lang.reflect.InvocationTargetException, caused by: java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/mosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 59%
* Compiling and checking tests
[MASTER] 23:11:56.635 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_42_1575501116143/weka/classifiers/bayes/NaiveBayesMultinomialText_42_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_42_1575501116143/weka/classifiers/bayes/NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding.java]]
[MASTER] 23:11:56.635 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 23:11:56.636 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 23:11:56.638 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 39
[MASTER] 23:11:56.639 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_42_1575501116143/weka/classifiers/bayes/NaiveBayesMultinomialText_42_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 23:11:56 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.io.File;
12: import java.io.IOException;
13: import java.util.LinkedHashMap;
14: import java.util.Map;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.mock.java.io.MockFile;
18: import org.evosuite.runtime.testdata.FileSystemHandling;
19: import org.junit.runner.RunWith;
20: import weka.classifiers.AbstractClassifier;
21: import weka.classifiers.Classifier;
22: import weka.classifiers.bayes.NaiveBayesMultinomialText;
23: import weka.classifiers.meta.CostSensitiveClassifier;
24: import weka.core.neighboursearch.CoverTree;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
27: public class NaiveBayesMultinomialText_42_tmp__ESTest extends NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding {
28: 
29:   /**
30:   //Test case number: 0
31:   /*Coverage entropy=2.2584261358947213
32:   */
33:   @Test(timeout = 4000)
34:   public void test0()  throws Throwable  {
35:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
36:       FileSystemHandling.shouldAllThrowIOExceptions();
37:       Classifier classifier0 = AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
38:       naiveBayesMultinomialText0.m_useStopList = true;
39:       Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> map0 = naiveBayesMultinomialText0.m_probOfWordGivenClass;
40:       naiveBayesMultinomialText0.m_probOfWordGivenClass = null;
41:       naiveBayesMultinomialText0.m_lowercaseTokens = true;
42:       AbstractClassifier.makeCopies(classifier0, 10019);
43:       naiveBayesMultinomialText0.getLowercaseTokens();
44:       naiveBayesMultinomialText0.getMinWordFrequency();
45:       naiveBayesMultinomialText0.getMinWordFrequency();
46:       naiveBayesMultinomialText0.getRevision();
47:       naiveBayesMultinomialText0.minWordFrequencyTipText();
48:       naiveBayesMultinomialText0.stopwordsTipText();
49:       CoverTree coverTree0 = new CoverTree();
50:       CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
51:       File file0 = costSensitiveClassifier0.getOnDemandDirectory();
52:       try { 
53:         MockFile.createTempFile("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", file0);
54:         fail("Expecting exception: IOException");
55:       
56:       } catch(IOException e) {
57:          //
58:          // Simulated IOException
59:          //
60:          verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
61:       }
62:   }
63: }
RegularFileObject[/tmp/EvoSuite_42_1575501116143/weka/classifiers/bayes/NaiveBayesMultinomialText_42_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 23:11:56 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.core.DistanceFunction",
91:       "org.pentaho.packageManagement.PackageConstraint",
92:       "org.pentaho.packageManagement.Package",
93:       "weka.core.xml.XMLBasicSerialization",
94:       "weka.attributeSelection.SubsetEvaluator",
95:       "weka.classifiers.CostMatrix",
96:       "weka.classifiers.bayes.net.search.local.K2",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.logging.Logger$Level",
99:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
100:       "weka.attributeSelection.CfsSubsetEval",
101:       "weka.core.DenseInstance",
102:       "weka.core.stemmers.Stemmer",
103:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
104:       "org.pentaho.packageManagement.DefaultPackageManager",
105:       "org.bounce.net.DefaultAuthenticator",
106:       "weka.core.stemmers.NullStemmer",
107:       "weka.core.EnvironmentHandler",
108:       "weka.classifiers.functions.SGDText",
109:       "weka.core.Utils",
110:       "weka.core.CustomDisplayStringProvider",
111:       "weka.core.tokenizers.Tokenizer",
112:       "weka.core.NormalizableDistance",
113:       "weka.core.NoSupportForMissingValuesException",
114:       "weka.classifiers.UpdateableClassifier",
115:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
116:       "weka.core.MultiInstanceCapabilitiesHandler",
117:       "weka.core.Copyable",
118:       "weka.core.Capabilities",
119:       "weka.core.BinarySparseInstance",
120:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
121:       "weka.core.SerializedObject",
122:       "weka.clusterers.UpdateableClusterer",
123:       "weka.core.Summarizable",
124:       "weka.core.AdditionalMeasureProducer",
125:       "org.pentaho.packageManagement.PackageManager$1",
126:       "weka.attributeSelection.GreedyStepwise",
127:       "weka.core.Drawable",
128:       "weka.core.CapabilitiesHandler",
129:       "weka.attributeSelection.ASEvaluation",
130:       "weka.core.AbstractInstance",
131:       "weka.core.scripting.JythonObject",
132:       "weka.core.SelectedTag",
133:       "org.pentaho.packageManagement.DefaultPackage",
134:       "weka.classifiers.misc.InputMappedClassifier",
135:       "weka.classifiers.bayes.BayesNet",
136:       "weka.core.Version",
137:       "weka.attributeSelection.AttributeSelection",
138:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
139:       "weka.core.Tag",
140:       "weka.core.neighboursearch.CoverTree",
141:       "weka.classifiers.AbstractClassifier",
142:       "weka.core.OptionHandler",
143:       "weka.core.WekaException",
144:       "weka.filters.StreamableFilter",
145:       "weka.core.Range",
146:       "weka.classifiers.bayes.net.VaryNode",
147:       "weka.core.scripting.JythonSerializableObject",
148:       "weka.classifiers.Classifier",
149:       "weka.core.Capabilities$Capability",
150:       "weka.core.SparseInstance",
151:       "org.pentaho.packageManagement.PackageManager",
152:       "weka.core.tokenizers.WordTokenizer",
153:       "weka.classifiers.misc.SerializedClassifier",
154:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
155:       "weka.core.stemmers.SnowballStemmer",
156:       "weka.core.stemmers.LovinsStemmer",
157:       "weka.classifiers.Evaluation",
158:       "weka.core.WekaPackageManager",
159:       "weka.attributeSelection.ASSearch",
160:       "weka.filters.SupervisedFilter",
161:       "weka.core.TechnicalInformationHandler",
162:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
163:       "weka.core.neighboursearch.LinearNNSearch",
164:       "weka.attributeSelection.StartSetHandler",
165:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
166:       "weka.core.Option",
167:       "weka.classifiers.meta.CostSensitiveClassifier",
168:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
169:       "weka.core.neighboursearch.PerformanceStats",
170:       "weka.filters.Sourcable",
171:       "weka.core.Attribute",
172:       "weka.core.Stopwords",
173:       "weka.core.tokenizers.AlphabeticTokenizer",
174:       "weka.core.FastVector",
175:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
176:       "weka.core.UnassignedDatasetException",
177:       "weka.classifiers.RandomizableClassifier",
178:       "weka.attributeSelection.RankedOutputSearch",
179:       "weka.classifiers.SingleClassifierEnhancer",
180:       "weka.core.RevisionUtils",
181:       "weka.core.Instance",
182:       "weka.estimators.Estimator",
183:       "weka.core.ProtectedProperties",
184:       "weka.classifiers.bayes.net.ADNode",
185:       "weka.core.AttributeStats",
186:       "weka.core.WeightedInstancesHandler",
187:       "weka.core.neighboursearch.NearestNeighbourSearch",
188:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
189:       "weka.filters.unsupervised.attribute.Remove",
190:       "weka.core.Randomizable",
191:       "weka.core.EuclideanDistance",
192:       "weka.core.Instances",
193:       "weka.core.UnassignedClassException",
194:       "weka.classifiers.bayes.net.BIFReader",
195:       "weka.classifiers.bayes.net.ParentSet",
196:       "weka.classifiers.rules.ZeroR",
197:       "weka.core.TechnicalInformation",
198:       "weka.core.UnsupportedAttributeTypeException",
199:       "weka.classifiers.Sourcable",
200:       "weka.core.RevisionHandler",
201:       "weka.classifiers.evaluation.output.prediction.PlainText",
202:       "weka.core.neighboursearch.TreePerformanceStats",
203:       "weka.core.xml.XMLSerialization",
204:       "weka.classifiers.xml.XMLClassifier",
205:       "weka.filters.Filter",
206:       "weka.classifiers.lazy.IBk",
207:       "weka.filters.supervised.attribute.Discretize"
208:     );
209:   } 
210: 
211:   private static void resetClasses() {
212:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_42_tmp__ESTest_scaffolding.class.getClassLoader()); 
213: 
214:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
215:       "weka.classifiers.AbstractClassifier",
216:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
217:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
218:       "weka.core.Capabilities$Capability",
219:       "weka.core.tokenizers.Tokenizer",
220:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
221:       "weka.core.tokenizers.WordTokenizer",
222:       "weka.core.stemmers.NullStemmer",
223:       "weka.core.Utils",
224:       "weka.core.Capabilities",
225:       "org.pentaho.packageManagement.PackageManager",
226:       "org.pentaho.packageManagement.DefaultPackageManager",
227:       "weka.core.Version",
228:       "weka.core.Environment",
229:       "weka.core.WekaPackageManager",
230:       "weka.classifiers.Evaluation",
231:       "weka.core.Option",
232:       "weka.classifiers.RandomizableClassifier",
233:       "weka.core.Tag",
234:       "weka.classifiers.functions.SGDText",
235:       "weka.core.AbstractInstance",
236:       "weka.core.SparseInstance",
237:       "weka.core.BinarySparseInstance",
238:       "weka.core.neighboursearch.balltrees.BallNode",
239:       "weka.classifiers.bayes.NaiveBayesMultinomial",
240:       "weka.attributeSelection.ASEvaluation",
241:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
242:       "weka.attributeSelection.PrincipalComponents",
243:       "weka.core.UnassignedDatasetException",
244:       "weka.classifiers.trees.REPTree",
245:       "weka.core.neighboursearch.NearestNeighbourSearch",
246:       "weka.core.neighboursearch.KDTree",
247:       "weka.core.NormalizableDistance",
248:       "weka.core.EuclideanDistance",
249:       "weka.core.Range",
250:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
251:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
252:       "weka.classifiers.bayes.NaiveBayes",
253:       "weka.core.SerializedObject",
254:       "weka.core.stemmers.LovinsStemmer",
255:       "weka.core.stemmers.IteratedLovinsStemmer",
256:       "weka.core.neighboursearch.CoverTree",
257:       "weka.core.Instances",
258:       "weka.core.stemmers.SnowballStemmer",
259:       "weka.core.stemmers.Stemming",
260:       "weka.core.TestInstances",
261:       "weka.core.Attribute",
262:       "weka.core.ProtectedProperties",
263:       "weka.core.DenseInstance",
264:       "weka.core.neighboursearch.BallTree",
265:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
266:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
267:       "weka.core.neighboursearch.balltrees.BallSplitter",
268:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
269:       "weka.core.FindWithCapabilities",
270:       "weka.core.SingleIndex",
271:       "weka.core.ClassDiscovery",
272:       "weka.core.RevisionUtils",
273:       "weka.core.tokenizers.NGramTokenizer",
274:       "weka.filters.Filter",
275:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
276:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
277:       "weka.core.neighboursearch.LinearNNSearch",
278:       "weka.classifiers.misc.SerializedClassifier",
279:       "weka.classifiers.SingleClassifierEnhancer",
280:       "weka.classifiers.misc.InputMappedClassifier",
281:       "weka.classifiers.rules.ZeroR",
282:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
283:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
284:       "weka.core.tokenizers.AlphabeticTokenizer",
285:       "weka.core.Stopwords",
286:       "weka.core.converters.ArffLoader$ArffReader",
287:       "weka.attributeSelection.AttributeSelection",
288:       "weka.classifiers.functions.supportVector.Kernel",
289:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
290:       "weka.classifiers.bayes.BayesNet",
291:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
292:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
293:       "weka.classifiers.bayes.net.search.local.K2",
294:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
295:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
296:       "weka.classifiers.bayes.net.BIFReader",
297:       "weka.classifiers.functions.SimpleLinearRegression",
298:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
299:       "weka.filters.supervised.attribute.Discretize",
300:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
301:       "weka.classifiers.bayes.net.ADNode",
302:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
303:       "weka.classifiers.meta.CostSensitiveClassifier",
304:       "weka.classifiers.CostMatrix",
305:       "weka.attributeSelection.CfsSubsetEval",
306:       "weka.classifiers.rules.JRip",
307:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
308:       "weka.classifiers.IteratedSingleClassifierEnhancer",
309:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
310:       "weka.classifiers.meta.AdaBoostM1",
311:       "weka.classifiers.trees.DecisionStump",
312:       "weka.core.UnassignedClassException",
313:       "weka.attributeSelection.ReliefFAttributeEval",
314:       "weka.classifiers.lazy.IBk",
315:       "weka.classifiers.meta.CVParameterSelection",
316:       "weka.core.FastVector",
317:       "weka.core.WekaException",
318:       "weka.core.UnsupportedAttributeTypeException",
319:       "weka.classifiers.trees.J48",
320:       "weka.classifiers.trees.j48.ClassifierTree",
321:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
322:       "weka.core.TechnicalInformation",
323:       "weka.core.TechnicalInformation$Type",
324:       "weka.core.TechnicalInformation$Field",
325:       "weka.classifiers.rules.DecisionTable",
326:       "weka.attributeSelection.ASSearch",
327:       "weka.attributeSelection.BestFirst",
328:       "weka.classifiers.trees.RandomTree",
329:       "weka.classifiers.functions.LinearRegression",
330:       "weka.attributeSelection.OneRAttributeEval",
331:       "weka.estimators.Estimator",
332:       "weka.estimators.KernelEstimator",
333:       "weka.classifiers.trees.LMT",
334:       "weka.estimators.PoissonEstimator",
335:       "weka.classifiers.rules.OneR",
336:       "weka.filters.AllFilter",
337:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
338:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
339:       "weka.classifiers.meta.RandomCommittee",
340:       "weka.attributeSelection.CorrelationAttributeEval",
341:       "weka.classifiers.MultipleClassifiersCombiner",
342:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
343:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
344:       "weka.classifiers.meta.Stacking",
345:       "weka.estimators.NormalEstimator",
346:       "weka.classifiers.meta.RegressionByDiscretization",
347:       "weka.filters.unsupervised.attribute.Discretize",
348:       "weka.classifiers.trees.m5.M5Base",
349:       "weka.classifiers.rules.M5Rules",
350:       "weka.classifiers.functions.SMOreg",
351:       "weka.classifiers.functions.supportVector.RegOptimizer",
352:       "weka.classifiers.functions.supportVector.RegSMO",
353:       "weka.classifiers.functions.supportVector.RegSMOImproved",
354:       "weka.classifiers.functions.supportVector.CachedKernel",
355:       "weka.classifiers.functions.supportVector.PolyKernel",
356:       "weka.classifiers.meta.MultiClassClassifier",
357:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
358:       "weka.classifiers.functions.Logistic",
359:       "weka.core.WekaEnumeration",
360:       "weka.core.Attribute$1",
361:       "weka.classifiers.functions.SMO",
362:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
363:       "weka.classifiers.meta.Vote",
364:       "weka.classifiers.functions.SimpleLogistic",
365:       "weka.classifiers.functions.SGD",
366:       "weka.classifiers.functions.GaussianProcesses",
367:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
368:       "weka.classifiers.meta.AttributeSelectedClassifier",
369:       "weka.classifiers.functions.supportVector.StringKernel",
370:       "weka.classifiers.trees.RandomForest",
371:       "weka.attributeSelection.GainRatioAttributeEval",
372:       "weka.filters.SimpleFilter",
373:       "weka.filters.SimpleStreamFilter",
374:       "weka.filters.MultiFilter",
375:       "weka.classifiers.functions.VotedPerceptron",
376:       "weka.classifiers.functions.MultilayerPerceptron",
377:       "weka.filters.unsupervised.attribute.NominalToBinary",
378:       "weka.classifiers.functions.neural.SigmoidUnit",
379:       "weka.classifiers.functions.neural.LinearUnit",
380:       "weka.classifiers.functions.supportVector.Puk",
381:       "weka.attributeSelection.WrapperSubsetEval",
382:       "weka.classifiers.meta.ClassificationViaRegression",
383:       "weka.classifiers.trees.M5P",
384:       "weka.core.AttributeStats",
385:       "weka.estimators.DiscreteEstimator",
386:       "weka.classifiers.lazy.LWL",
387:       "weka.classifiers.meta.FilteredClassifier",
388:       "weka.filters.supervised.attribute.AttributeSelection",
389:       "weka.attributeSelection.GreedyStepwise",
390:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
391:       "weka.attributeSelection.InfoGainAttributeEval",
392:       "weka.core.SelectedTag",
393:       "weka.classifiers.meta.AdditiveRegression",
394:       "weka.classifiers.meta.MultiScheme",
395:       "weka.classifiers.rules.PART",
396:       "weka.classifiers.rules.part.MakeDecList",
397:       "weka.classifiers.meta.Bagging",
398:       "weka.classifiers.lazy.KStar",
399:       "weka.classifiers.meta.LogitBoost",
400:       "weka.core.neighboursearch.PerformanceStats",
401:       "weka.core.matrix.Matrix",
402:       "weka.classifiers.bayes.NaiveBayesUpdateable",
403:       "weka.classifiers.functions.supportVector.RBFKernel",
404:       "weka.experiment.Stats",
405:       "weka.core.converters.ConverterUtils$DataSource",
406:       "weka.core.converters.AbstractLoader",
407:       "weka.core.converters.AbstractFileLoader",
408:       "weka.core.converters.ArffLoader"
409:     );
410:   }
411: }

[MASTER] 23:11:56.639 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
FileSystemHandling.shouldAllThrowIOExceptions();
Classifier classifier0 = AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
naiveBayesMultinomialText0.m_useStopList = true;
Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> map0 = naiveBayesMultinomialText0.m_probOfWordGivenClass;
naiveBayesMultinomialText0.m_probOfWordGivenClass = null;
naiveBayesMultinomialText0.m_lowercaseTokens = true;
AbstractClassifier.makeCopies(classifier0, 10019);
naiveBayesMultinomialText0.getLowercaseTokens();
naiveBayesMultinomialText0.getMinWordFrequency();
naiveBayesMultinomialText0.getMinWordFrequency();
naiveBayesMultinomialText0.getRevision();
naiveBayesMultinomialText0.minWordFrequencyTipText();
naiveBayesMultinomialText0.stopwordsTipText();
CoverTree coverTree0 = new CoverTree();
CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
File file0 = costSensitiveClassifier0.getOnDemandDirectory();
MockFile.createTempFile("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", file0);

[MASTER] 23:11:57.324 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_68_1575501117307/weka/classifiers/bayes/NaiveBayesMultinomialText_68_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_68_1575501117307/weka/classifiers/bayes/NaiveBayesMultinomialText_68_tmp__ESTest_scaffolding.java]]
[MASTER] 23:11:57.324 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 23:11:57.324 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 23:11:57.325 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 38
[MASTER] 23:11:57.325 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 38
[MASTER] 23:11:57.325 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_68_1575501117307/weka/classifiers/bayes/NaiveBayesMultinomialText_68_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Wed Dec 04 23:11:57 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.util.LinkedHashMap;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.System;
15: import org.evosuite.runtime.mock.java.io.MockFile;
16: import org.evosuite.runtime.testdata.EvoSuiteFile;
17: import org.evosuite.runtime.testdata.FileSystemHandling;
18: import org.junit.runner.RunWith;
19: import weka.classifiers.bayes.NaiveBayesMultinomialText;
20: import weka.core.BinarySparseInstance;
21: import weka.core.Instances;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
24: public class NaiveBayesMultinomialText_68_tmp__ESTest extends NaiveBayesMultinomialText_68_tmp__ESTest_scaffolding {
25: 
26:   /**
27:   //Test case number: 0
28:   /*Coverage entropy=2.68644405381145
29:   */
30:   @Test(timeout = 4000)
31:   public void test0()  throws Throwable  {
32:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
33:       FileSystemHandling.shouldAllThrowIOExceptions();
34:       double[] doubleArray0 = new double[0];
35:       naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
36:       naiveBayesMultinomialText0.m_stemmer = null;
37:       MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
38:       LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
39:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
40:       naiveBayesMultinomialText0.m_inputVector = linkedHashMap0;
41:       naiveBayesMultinomialText0.setStopwords(mockFile0);
42:       FileSystemHandling.createFolder((EvoSuiteFile) null);
43:       naiveBayesMultinomialText0.getStemmer();
44:       naiveBayesMultinomialText0.getLNorm();
45:       naiveBayesMultinomialText0.getStopwords();
46:       naiveBayesMultinomialText0.getUseWordFrequencies();
47:       naiveBayesMultinomialText0.getRevision();
48:       int int0 = 1641;
49:       BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1641);
50:       binarySparseInstance0.dataset();
51:       try { 
52:         naiveBayesMultinomialText0.buildClassifier((Instances) null);
53:         fail("Expecting exception: NullPointerException");
54:       
55:       } catch(NullPointerException e) {
56:          //
57:          // no message in exception (getMessage() returned null)
58:          //
59:          verifyException("weka.core.Capabilities", e);
60:       }
61:   }
62: }
RegularFileObject[/tmp/EvoSuite_68_1575501117307/weka/classifiers/bayes/NaiveBayesMultinomialText_68_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Wed Dec 04 23:11:57 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_68_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_68_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.core.DistanceFunction",
91:       "org.pentaho.packageManagement.PackageConstraint",
92:       "org.pentaho.packageManagement.Package",
93:       "weka.core.xml.XMLBasicSerialization",
94:       "weka.attributeSelection.SubsetEvaluator",
95:       "weka.classifiers.CostMatrix",
96:       "weka.classifiers.bayes.net.search.local.K2",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.logging.Logger$Level",
99:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
100:       "weka.attributeSelection.CfsSubsetEval",
101:       "weka.core.DenseInstance",
102:       "weka.core.stemmers.Stemmer",
103:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
104:       "org.pentaho.packageManagement.DefaultPackageManager",
105:       "org.bounce.net.DefaultAuthenticator",
106:       "weka.core.stemmers.NullStemmer",
107:       "weka.core.EnvironmentHandler",
108:       "weka.classifiers.functions.SGDText",
109:       "weka.core.Utils",
110:       "weka.core.CustomDisplayStringProvider",
111:       "weka.core.tokenizers.Tokenizer",
112:       "weka.core.NormalizableDistance",
113:       "weka.core.NoSupportForMissingValuesException",
114:       "weka.classifiers.UpdateableClassifier",
115:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
116:       "weka.core.MultiInstanceCapabilitiesHandler",
117:       "weka.core.Copyable",
118:       "weka.core.Capabilities",
119:       "weka.core.BinarySparseInstance",
120:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
121:       "weka.core.SerializedObject",
122:       "weka.clusterers.UpdateableClusterer",
123:       "weka.core.Summarizable",
124:       "weka.core.AdditionalMeasureProducer",
125:       "org.pentaho.packageManagement.PackageManager$1",
126:       "weka.attributeSelection.GreedyStepwise",
127:       "weka.core.Drawable",
128:       "weka.core.CapabilitiesHandler",
129:       "weka.attributeSelection.ASEvaluation",
130:       "weka.core.AbstractInstance",
131:       "weka.core.scripting.JythonObject",
132:       "weka.core.SelectedTag",
133:       "org.pentaho.packageManagement.DefaultPackage",
134:       "weka.classifiers.misc.InputMappedClassifier",
135:       "weka.classifiers.bayes.BayesNet",
136:       "weka.core.Version",
137:       "weka.attributeSelection.AttributeSelection",
138:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
139:       "weka.core.Tag",
140:       "weka.core.neighboursearch.CoverTree",
141:       "weka.classifiers.AbstractClassifier",
142:       "weka.core.OptionHandler",
143:       "weka.core.WekaException",
144:       "weka.filters.StreamableFilter",
145:       "weka.core.Range",
146:       "weka.classifiers.bayes.net.VaryNode",
147:       "weka.core.scripting.JythonSerializableObject",
148:       "weka.classifiers.Classifier",
149:       "weka.core.Capabilities$Capability",
150:       "weka.core.SparseInstance",
151:       "org.pentaho.packageManagement.PackageManager",
152:       "weka.core.tokenizers.WordTokenizer",
153:       "weka.classifiers.misc.SerializedClassifier",
154:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
155:       "weka.core.stemmers.SnowballStemmer",
156:       "weka.core.stemmers.LovinsStemmer",
157:       "weka.classifiers.Evaluation",
158:       "weka.core.WekaPackageManager",
159:       "weka.attributeSelection.ASSearch",
160:       "weka.filters.SupervisedFilter",
161:       "weka.core.TechnicalInformationHandler",
162:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
163:       "weka.core.neighboursearch.LinearNNSearch",
164:       "weka.attributeSelection.StartSetHandler",
165:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
166:       "weka.core.Option",
167:       "weka.classifiers.meta.CostSensitiveClassifier",
168:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
169:       "weka.core.neighboursearch.PerformanceStats",
170:       "weka.filters.Sourcable",
171:       "weka.core.Attribute",
172:       "weka.core.Stopwords",
173:       "weka.core.tokenizers.AlphabeticTokenizer",
174:       "weka.core.FastVector",
175:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
176:       "weka.core.UnassignedDatasetException",
177:       "weka.classifiers.RandomizableClassifier",
178:       "weka.attributeSelection.RankedOutputSearch",
179:       "weka.classifiers.SingleClassifierEnhancer",
180:       "weka.core.RevisionUtils",
181:       "weka.core.Instance",
182:       "weka.estimators.Estimator",
183:       "weka.core.ProtectedProperties",
184:       "weka.classifiers.bayes.net.ADNode",
185:       "weka.core.AttributeStats",
186:       "weka.core.WeightedInstancesHandler",
187:       "weka.core.neighboursearch.NearestNeighbourSearch",
188:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
189:       "weka.filters.unsupervised.attribute.Remove",
190:       "weka.core.Randomizable",
191:       "weka.core.EuclideanDistance",
192:       "weka.core.Instances",
193:       "weka.core.UnassignedClassException",
194:       "weka.classifiers.bayes.net.BIFReader",
195:       "weka.classifiers.bayes.net.ParentSet",
196:       "weka.classifiers.rules.ZeroR",
197:       "weka.core.TechnicalInformation",
198:       "weka.core.UnsupportedAttributeTypeException",
199:       "weka.classifiers.Sourcable",
200:       "weka.core.RevisionHandler",
201:       "weka.classifiers.evaluation.output.prediction.PlainText",
202:       "weka.core.neighboursearch.TreePerformanceStats",
203:       "weka.core.xml.XMLSerialization",
204:       "weka.classifiers.xml.XMLClassifier",
205:       "weka.filters.Filter",
206:       "weka.classifiers.lazy.IBk",
207:       "weka.filters.supervised.attribute.Discretize"
208:     );
209:   } 
210: 
211:   private static void resetClasses() {
212:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_68_tmp__ESTest_scaffolding.class.getClassLoader()); 
213: 
214:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
215:       "weka.classifiers.AbstractClassifier",
216:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
217:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
218:       "weka.core.Capabilities$Capability",
219:       "weka.core.tokenizers.Tokenizer",
220:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
221:       "weka.core.tokenizers.WordTokenizer",
222:       "weka.core.stemmers.NullStemmer",
223:       "weka.core.Utils",
224:       "weka.core.Capabilities",
225:       "org.pentaho.packageManagement.PackageManager",
226:       "org.pentaho.packageManagement.DefaultPackageManager",
227:       "weka.core.Version",
228:       "weka.core.Environment",
229:       "weka.core.WekaPackageManager",
230:       "weka.classifiers.Evaluation",
231:       "weka.core.Option",
232:       "weka.classifiers.RandomizableClassifier",
233:       "weka.core.Tag",
234:       "weka.classifiers.functions.SGDText",
235:       "weka.core.AbstractInstance",
236:       "weka.core.SparseInstance",
237:       "weka.core.BinarySparseInstance",
238:       "weka.core.neighboursearch.balltrees.BallNode",
239:       "weka.classifiers.bayes.NaiveBayesMultinomial",
240:       "weka.attributeSelection.ASEvaluation",
241:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
242:       "weka.attributeSelection.PrincipalComponents",
243:       "weka.core.UnassignedDatasetException",
244:       "weka.classifiers.trees.REPTree",
245:       "weka.core.neighboursearch.NearestNeighbourSearch",
246:       "weka.core.neighboursearch.KDTree",
247:       "weka.core.NormalizableDistance",
248:       "weka.core.EuclideanDistance",
249:       "weka.core.Range",
250:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
251:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
252:       "weka.classifiers.bayes.NaiveBayes",
253:       "weka.core.SerializedObject",
254:       "weka.core.stemmers.LovinsStemmer",
255:       "weka.core.stemmers.IteratedLovinsStemmer",
256:       "weka.core.neighboursearch.CoverTree",
257:       "weka.core.Instances",
258:       "weka.core.stemmers.SnowballStemmer",
259:       "weka.core.stemmers.Stemming",
260:       "weka.core.TestInstances",
261:       "weka.core.Attribute",
262:       "weka.core.ProtectedProperties",
263:       "weka.core.DenseInstance",
264:       "weka.core.neighboursearch.BallTree",
265:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
266:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
267:       "weka.core.neighboursearch.balltrees.BallSplitter",
268:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
269:       "weka.core.FindWithCapabilities",
270:       "weka.core.SingleIndex",
271:       "weka.core.ClassDiscovery",
272:       "weka.core.RevisionUtils",
273:       "weka.core.tokenizers.NGramTokenizer",
274:       "weka.filters.Filter",
275:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
276:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
277:       "weka.core.neighboursearch.LinearNNSearch",
278:       "weka.classifiers.misc.SerializedClassifier",
279:       "weka.classifiers.SingleClassifierEnhancer",
280:       "weka.classifiers.misc.InputMappedClassifier",
281:       "weka.classifiers.rules.ZeroR",
282:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
283:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
284:       "weka.core.tokenizers.AlphabeticTokenizer",
285:       "weka.core.Stopwords",
286:       "weka.core.converters.ArffLoader$ArffReader",
287:       "weka.attributeSelection.AttributeSelection",
288:       "weka.classifiers.functions.supportVector.Kernel",
289:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
290:       "weka.classifiers.bayes.BayesNet",
291:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
292:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
293:       "weka.classifiers.bayes.net.search.local.K2",
294:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
295:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
296:       "weka.classifiers.bayes.net.BIFReader",
297:       "weka.classifiers.functions.SimpleLinearRegression",
298:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
299:       "weka.filters.supervised.attribute.Discretize",
300:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
301:       "weka.classifiers.bayes.net.ADNode",
302:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
303:       "weka.classifiers.meta.CostSensitiveClassifier",
304:       "weka.classifiers.CostMatrix",
305:       "weka.attributeSelection.CfsSubsetEval",
306:       "weka.classifiers.rules.JRip",
307:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
308:       "weka.classifiers.IteratedSingleClassifierEnhancer",
309:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
310:       "weka.classifiers.meta.AdaBoostM1",
311:       "weka.classifiers.trees.DecisionStump",
312:       "weka.core.UnassignedClassException",
313:       "weka.attributeSelection.ReliefFAttributeEval",
314:       "weka.classifiers.lazy.IBk",
315:       "weka.classifiers.meta.CVParameterSelection",
316:       "weka.core.FastVector",
317:       "weka.core.WekaException",
318:       "weka.core.UnsupportedAttributeTypeException",
319:       "weka.classifiers.trees.J48",
320:       "weka.classifiers.trees.j48.ClassifierTree",
321:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
322:       "weka.core.TechnicalInformation",
323:       "weka.core.TechnicalInformation$Type",
324:       "weka.core.TechnicalInformation$Field",
325:       "weka.classifiers.rules.DecisionTable",
326:       "weka.attributeSelection.ASSearch",
327:       "weka.attributeSelection.BestFirst",
328:       "weka.classifiers.trees.RandomTree",
329:       "weka.classifiers.functions.LinearRegression",
330:       "weka.attributeSelection.OneRAttributeEval",
331:       "weka.estimators.Estimator",
332:       "weka.estimators.KernelEstimator",
333:       "weka.classifiers.trees.LMT",
334:       "weka.estimators.PoissonEstimator",
335:       "weka.classifiers.rules.OneR",
336:       "weka.filters.AllFilter",
337:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
338:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
339:       "weka.classifiers.meta.RandomCommittee",
340:       "weka.attributeSelection.CorrelationAttributeEval",
341:       "weka.classifiers.MultipleClassifiersCombiner",
342:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
343:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
344:       "weka.classifiers.meta.Stacking",
345:       "weka.estimators.NormalEstimator",
346:       "weka.classifiers.meta.RegressionByDiscretization",
347:       "weka.filters.unsupervised.attribute.Discretize",
348:       "weka.classifiers.trees.m5.M5Base",
349:       "weka.classifiers.rules.M5Rules",
350:       "weka.classifiers.functions.SMOreg",
351:       "weka.classifiers.functions.supportVector.RegOptimizer",
352:       "weka.classifiers.functions.supportVector.RegSMO",
353:       "weka.classifiers.functions.supportVector.RegSMOImproved",
354:       "weka.classifiers.functions.supportVector.CachedKernel",
355:       "weka.classifiers.functions.supportVector.PolyKernel",
356:       "weka.classifiers.meta.MultiClassClassifier",
357:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
358:       "weka.classifiers.functions.Logistic",
359:       "weka.core.WekaEnumeration",
360:       "weka.core.Attribute$1",
361:       "weka.classifiers.functions.SMO",
362:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
363:       "weka.classifiers.meta.Vote",
364:       "weka.classifiers.functions.SimpleLogistic",
365:       "weka.classifiers.functions.SGD",
366:       "weka.classifiers.functions.GaussianProcesses",
367:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
368:       "weka.classifiers.meta.AttributeSelectedClassifier",
369:       "weka.classifiers.functions.supportVector.StringKernel",
370:       "weka.classifiers.trees.RandomForest",
371:       "weka.attributeSelection.GainRatioAttributeEval",
372:       "weka.filters.SimpleFilter",
373:       "weka.filters.SimpleStreamFilter",
374:       "weka.filters.MultiFilter",
375:       "weka.classifiers.functions.VotedPerceptron",
376:       "weka.classifiers.functions.MultilayerPerceptron",
377:       "weka.filters.unsupervised.attribute.NominalToBinary",
378:       "weka.classifiers.functions.neural.SigmoidUnit",
379:       "weka.classifiers.functions.neural.LinearUnit",
380:       "weka.classifiers.functions.supportVector.Puk",
381:       "weka.attributeSelection.WrapperSubsetEval",
382:       "weka.classifiers.meta.ClassificationViaRegression",
383:       "weka.classifiers.trees.M5P",
384:       "weka.core.AttributeStats",
385:       "weka.estimators.DiscreteEstimator",
386:       "weka.classifiers.lazy.LWL",
387:       "weka.classifiers.meta.FilteredClassifier",
388:       "weka.filters.supervised.attribute.AttributeSelection",
389:       "weka.attributeSelection.GreedyStepwise",
390:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
391:       "weka.attributeSelection.InfoGainAttributeEval",
392:       "weka.core.SelectedTag",
393:       "weka.classifiers.meta.AdditiveRegression",
394:       "weka.classifiers.meta.MultiScheme",
395:       "weka.classifiers.rules.PART",
396:       "weka.classifiers.rules.part.MakeDecList",
397:       "weka.classifiers.meta.Bagging",
398:       "weka.classifiers.lazy.KStar",
399:       "weka.classifiers.meta.LogitBoost",
400:       "weka.core.neighboursearch.PerformanceStats",
401:       "weka.core.matrix.Matrix",
402:       "weka.classifiers.bayes.NaiveBayesUpdateable",
403:       "weka.classifiers.functions.supportVector.RBFKernel",
404:       "weka.experiment.Stats",
405:       "weka.core.converters.ConverterUtils$DataSource",
406:       "weka.core.converters.AbstractLoader",
407:       "weka.core.converters.AbstractFileLoader",
408:       "weka.core.converters.ArffLoader"
409:     );
410:   }
411: }

[MASTER] 23:11:57.326 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
FileSystemHandling.shouldAllThrowIOExceptions();
double[] doubleArray0 = new double[0];
naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
naiveBayesMultinomialText0.m_stemmer = null;
MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
naiveBayesMultinomialText0.m_inputVector = linkedHashMap0;
naiveBayesMultinomialText0.setStopwords(mockFile0);
FileSystemHandling.createFolder((EvoSuiteFile) null);
naiveBayesMultinomialText0.getStemmer();
naiveBayesMultinomialText0.getLNorm();
naiveBayesMultinomialText0.getStopwords();
naiveBayesMultinomialText0.getUseWordFrequencies();
naiveBayesMultinomialText0.getRevision();
int int0 = 1641;
BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1641);
binarySparseInstance0.dataset();
naiveBayesMultinomialText0.buildClassifier((Instances) null);

[MASTER] 23:11:59.366 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 23:12:00.204 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/mosa/tests/s1011/107_weka/evosuite-tests
* Done!

* Computation finished
