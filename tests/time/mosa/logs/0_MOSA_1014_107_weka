* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.Evaluation
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.experiment.ResultMatrix
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.rules.JRip
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 7482
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 7483
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 7490
* Analyzing classpath: 
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:46:08.525 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:46:08.527 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:46:08.528 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:46:08.567 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.experiment.ResultMatrix
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2699
* Using seed 1014
* Starting evolution
[MASTER] 00:46:10.498 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:46:10.517 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:46:10.518 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:46:12.776 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:46:13.411 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:46:13.411 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.classifiers.rules.JRip
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2767
* Using seed 1014
* Starting evolution
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:46:24.756 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:46:24.758 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:46:24.759 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:46:25.390 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 00:46:26.167 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 00:46:26.172 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 00:46:28.058 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.ZoneId
[MASTER] 00:46:28.106 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.Temporal
[MASTER] 00:46:28.106 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAccessor
[MASTER] 00:46:28.106 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalField
[MASTER] 00:46:28.107 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalUnit
[MASTER] 00:46:28.108 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAmount
[MASTER] 00:46:28.108 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.Clock
[MASTER] 00:46:28.109 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalQuery
[MASTER] 00:46:28.109 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.temporal.TemporalAdjuster
[MASTER] 00:46:28.199 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Chronology
[MASTER] 00:46:28.229 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.time.chrono.Era
* Finished analyzing classpath
* Generating tests for class weka.classifiers.Evaluation
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 3904
* Using seed 1014
* Starting evolution
[MASTER] 00:46:30.737 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 00:46:46.381 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.NominalAntd.toString()Ljava/lang/String;
[MASTER] 00:46:46.382 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] weka.classifiers.rules.JRip.NominalAntd.toString()Ljava/lang/String;
[MASTER] 00:47:05.771 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.classifiers.rules.JRip.NominalAntd.<init>(Lweka/classifiers/rules/JRip;Lweka/core/Attribute;)V
[MASTER] 00:47:16.871 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 123s and 185 generations, 66236 statements, best individual has fitness: 13240.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 34%
* Total number of goals: 705
* Number of covered goals: 237
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 25%
* Total number of goals: 416
* Number of covered goals: 103
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 11
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 51%
* Total number of goals: 993
* Number of covered goals: 504
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 28%
* Total number of goals: 93
* Number of covered goals: 26
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 72
* Number of covered goals: 72
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 25%
* Total number of goals: 416
* Number of covered goals: 103
* Search finished after 132s and 20 generations, 17996 statements, best individual has fitness: 3024.0
* Generated 64 tests with total length 388
* Resulting test suite's coverage: 40% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 00:48:24.784 [logback-1] WARN  TimeController - Phase SEARCH lasted too long, 15 seconds more than allowed.
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 97%
* Total number of goals: 647
* Number of covered goals: 627
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 441
* Number of covered goals: 407
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 678
* Number of covered goals: 596
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 38%
* Total number of goals: 244
* Number of covered goals: 93
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 93%
* Total number of goals: 124
* Number of covered goals: 115
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 93%
* Total number of goals: 124
* Number of covered goals: 115
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 85%
* Total number of goals: 441
* Number of covered goals: 377
* Generated 163 tests with total length 2326
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 126s and 68 generations, 37351 statements, best individual has fitness: 15296.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 56%
* Total number of goals: 1378
* Number of covered goals: 766
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 46%
* Total number of goals: 809
* Number of covered goals: 371
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 56
* Number of covered goals: 56
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 64%
* Total number of goals: 424
* Number of covered goals: 272
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 21%
* Total number of goals: 278
* Number of covered goals: 58
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 97%
* Total number of goals: 103
* Number of covered goals: 100
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 95%
* Total number of goals: 103
* Number of covered goals: 98
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 42%
* Total number of goals: 809
* Number of covered goals: 342
* Generated 141 tests with total length 1588
* Resulting test suite's coverage: 52% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 21%
* Compiling and checking tests
* Writing JUnit test case 'JRip_ESTest' to /home/ubuntu/termite/mosa/tests/s1014/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 00:52:26.572 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 00:52:26.954 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 00:52:26.954 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
[MASTER] 00:52:28.317 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing JUnit test case 'Evaluation_ESTest' to /home/ubuntu/termite/mosa/tests/s1014/107_weka/evosuite-tests
* Done!

* Computation finished
[MASTER] 00:53:56.152 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.667575% of time used, but only 73/163 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 22%
* Compiling and checking tests
[MASTER] 00:55:11.004 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.ArrayIndexOutOfBoundsException: 0
[MASTER] 00:55:11.011 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertNotNull(resultMatrixLatex0);
assertEquals("Whether to show the row with averages.", resultMatrixLatex0.showAverageTipText());
assertFalse(resultMatrixLatex0.getDefaultPrintColNames());
assertTrue(resultMatrixLatex0.getPrintRowNames());
assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex0.countWidthTipText());
assertEquals(0, resultMatrixLatex0.getCountWidth());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex0.printRowNamesTipText());
assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
assertFalse(resultMatrixLatex0.getRemoveFilterName());
assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex0.meanPrecTipText());
assertEquals(1, resultMatrixLatex0.getVisibleColCount());
assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex0.colNameWidthTipText());
assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
assertTrue(resultMatrixLatex0.getEnumerateColNames());
assertEquals(0, resultMatrixLatex0.getMeanWidth());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex0.printColNamesTipText());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateColNamesTipText());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex0.removeFilterNameTipText());
assertFalse(resultMatrixLatex0.getShowStdDev());
assertEquals(2, resultMatrixLatex0.getMeanPrec());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex0.rowNameWidthTipText());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex0.stdDevPrecTipText());
assertEquals(0, resultMatrixLatex0.getColNameWidth());
assertEquals(1, resultMatrixLatex0.getRowCount());
assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex0.globalInfo());
assertEquals("Whether to display the standard deviation column.", resultMatrixLatex0.showStdDevTipText());
assertEquals("LaTeX", resultMatrixLatex0.getDisplayName());
assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
assertEquals(2, resultMatrixLatex0.getStdDevPrec());
assertEquals(0, resultMatrixLatex0.getRowNameWidth());
assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex0.meanWidthTipText());
assertFalse(resultMatrixLatex0.getEnumerateRowNames());
assertFalse(resultMatrixLatex0.getPrintColNames());
assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
assertTrue(resultMatrixLatex0.getDefaultEnumerateColNames());
assertEquals(0, resultMatrixLatex0.getStdDevWidth());
assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
assertFalse(resultMatrixLatex0.getShowAverage());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex0.significanceWidthTipText());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex0.enumerateRowNamesTipText());
assertFalse(resultMatrixLatex0.getDefaultShowAverage());
assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
assertEquals(1, resultMatrixLatex0.getColCount());
assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());

ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2580, 1);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertNotNull(resultMatrixCSV0);
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
assertFalse(resultMatrixCSV0.getShowAverage());
assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
assertEquals(0, resultMatrixCSV0.getStdDevWidth());
assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
assertEquals(2580, resultMatrixCSV0.getColCount());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
assertEquals(2, resultMatrixCSV0.getStdDevPrec());
assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
assertFalse(resultMatrixCSV0.getPrintColNames());
assertFalse(resultMatrixCSV0.getShowStdDev());
assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
assertEquals(0, resultMatrixCSV0.getCountWidth());
assertTrue(resultMatrixCSV0.getPrintRowNames());
assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
assertFalse(resultMatrixCSV0.getDefaultShowAverage());
assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
assertEquals(2, resultMatrixCSV0.getMeanPrec());
assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
assertFalse(resultMatrixCSV0.getRemoveFilterName());
assertFalse(resultMatrixCSV0.getEnumerateRowNames());
assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
assertEquals(0, resultMatrixCSV0.getMeanWidth());
assertEquals(0, resultMatrixCSV0.getColNameWidth());
assertEquals(1, resultMatrixCSV0.getRowCount());
assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
assertEquals("CSV", resultMatrixCSV0.getDisplayName());
assertEquals(25, resultMatrixCSV0.getRowNameWidth());
assertTrue(resultMatrixCSV0.getEnumerateColNames());

String string0 = resultMatrixCSV0.toStringRanking();
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertNotNull(string0);
assertEquals("-ranking data not set-", string0);
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixCSV0.stdDevWidthTipText());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixCSV0.significanceWidthTipText());
assertFalse(resultMatrixCSV0.getShowAverage());
assertEquals(25, resultMatrixCSV0.getDefaultRowNameWidth());
assertEquals(0, resultMatrixCSV0.getStdDevWidth());
assertEquals("Whether to display the standard deviation column.", resultMatrixCSV0.showStdDevTipText());
assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
assertEquals(2580, resultMatrixCSV0.getColCount());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixCSV0.removeFilterNameTipText());
assertEquals(2, resultMatrixCSV0.getStdDevPrec());
assertEquals("The width of the mean (0 = optimal).", resultMatrixCSV0.meanWidthTipText());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixCSV0.stdDevPrecTipText());
assertFalse(resultMatrixCSV0.getPrintColNames());
assertFalse(resultMatrixCSV0.getShowStdDev());
assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateColNamesTipText());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixCSV0.printColNamesTipText());
assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
assertEquals(0, resultMatrixCSV0.getCountWidth());
assertTrue(resultMatrixCSV0.getPrintRowNames());
assertEquals("Generates the matrix in CSV ('comma-separated values') format.", resultMatrixCSV0.globalInfo());
assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
assertEquals("The width of the counts (0 = optimal).", resultMatrixCSV0.countWidthTipText());
assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixCSV0.meanPrecTipText());
assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
assertFalse(resultMatrixCSV0.getDefaultPrintColNames());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixCSV0.enumerateRowNamesTipText());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixCSV0.printRowNamesTipText());
assertFalse(resultMatrixCSV0.getDefaultShowAverage());
assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixCSV0.rowNameWidthTipText());
assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
assertEquals(2, resultMatrixCSV0.getMeanPrec());
assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixCSV0.colNameWidthTipText());
assertFalse(resultMatrixCSV0.getRemoveFilterName());
assertFalse(resultMatrixCSV0.getEnumerateRowNames());
assertTrue(resultMatrixCSV0.getDefaultEnumerateColNames());
assertEquals(0, resultMatrixCSV0.getMeanWidth());
assertEquals(0, resultMatrixCSV0.getColNameWidth());
assertEquals(1, resultMatrixCSV0.getRowCount());
assertEquals("Whether to show the row with averages.", resultMatrixCSV0.showAverageTipText());
assertEquals("CSV", resultMatrixCSV0.getDisplayName());
assertEquals(25, resultMatrixCSV0.getRowNameWidth());
assertTrue(resultMatrixCSV0.getEnumerateColNames());

int int0 = ResultMatrix.SIGNIFICANCE_WIN;
assertEquals(1, int0);

Vector<Integer> vector0 = new Vector<Integer>();
assertFalse(vector0.contains(2580));
assertNotNull(vector0);
assertTrue(vector0.isEmpty());
assertEquals("[]", vector0.toString());
assertEquals(0, vector0.size());
assertEquals(10, vector0.capacity());

ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(0, 2175);
assertEquals(0, ResultMatrix.SIGNIFICANCE_TIE);
assertEquals(2, ResultMatrix.SIGNIFICANCE_LOSS);
assertEquals(1, ResultMatrix.SIGNIFICANCE_WIN);
assertNotNull(resultMatrixLatex1);
assertFalse(resultMatrixLatex1.equals((Object)resultMatrixLatex0));
assertFalse(resultMatrixLatex1.getShowStdDev());
assertTrue(resultMatrixLatex1.getDefaultEnumerateColNames());
assertEquals(2, resultMatrixLatex1.getStdDevPrec());
assertEquals("The width of the mean (0 = optimal).", resultMatrixLatex1.meanWidthTipText());
assertEquals("Generates the matrix output in LaTeX-syntax.", resultMatrixLatex1.globalInfo());
assertEquals("LaTeX", resultMatrixLatex1.getDisplayName());
assertEquals(0, resultMatrixLatex1.getStdDevWidth());
assertTrue(resultMatrixLatex1.getDefaultPrintRowNames());
assertEquals(0, resultMatrixLatex1.getVisibleColCount());
assertEquals(0, resultMatrixLatex1.getColCount());
assertFalse(resultMatrixLatex1.getShowAverage());
assertTrue(resultMatrixLatex1.getEnumerateColNames());
assertEquals(0, resultMatrixLatex1.getRowNameWidth());
assertEquals("Whether to display the standard deviation column.", resultMatrixLatex1.showStdDevTipText());
assertEquals(0, resultMatrixLatex1.getMeanWidth());
assertEquals(0, resultMatrixLatex1.getDefaultMeanWidth());
assertFalse(resultMatrixLatex1.getDefaultShowAverage());
assertEquals(0, resultMatrixLatex1.getDefaultCountWidth());
assertEquals("The maximum width of the column names (0 = optimal).", resultMatrixLatex1.colNameWidthTipText());
assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateRowNamesTipText());
assertEquals("Whether to show the row with averages.", resultMatrixLatex1.showAverageTipText());
assertFalse(resultMatrixLatex1.getDefaultShowStdDev());
assertEquals("Whether to output row names or just numbers representing them.", resultMatrixLatex1.printRowNamesTipText());
assertFalse(resultMatrixLatex1.getRemoveFilterName());
assertFalse(resultMatrixLatex1.getEnumerateRowNames());
assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex1.stdDevWidthTipText());
assertEquals(2, resultMatrixLatex1.getDefaultStdDevPrec());
assertEquals(0, resultMatrixLatex1.getDefaultColNameWidth());
assertEquals("The number of decimals after the decimal point for the mean.", resultMatrixLatex1.meanPrecTipText());
assertEquals(0, resultMatrixLatex1.getDefaultSignificanceWidth());
assertEquals("The width of the counts (0 = optimal).", resultMatrixLatex1.countWidthTipText());
assertEquals(2, resultMatrixLatex1.getDefaultMeanPrec());
assertFalse(resultMatrixLatex1.getDefaultPrintColNames());
assertEquals("The maximum width for the row names (0 = optimal).", resultMatrixLatex1.rowNameWidthTipText());
assertEquals(0, resultMatrixLatex1.getDefaultRowNameWidth());
assertFalse(resultMatrixLatex1.getDefaultEnumerateRowNames());
assertFalse(resultMatrixLatex1.getDefaultRemoveFilterName());
assertEquals("Whether to output column names or just numbers representing them.", resultMatrixLatex1.printColNamesTipText());
assertEquals(2, resultMatrixLatex1.getMeanPrec());
assertEquals(0, resultMatrixLatex1.getDefaultStdDevWidth());
assertEquals(0, resultMatrixLatex1.getColNameWidth());
assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", resultMatrixLatex1.enumerateColNamesTipText());
assertEquals("The number of decimals after the decimal point for the standard deviation.", resultMatrixLatex1.stdDevPrecTipText());
assertTrue(resultMatrixLatex1.getPrintRowNames());
assertEquals(0, resultMatrixLatex1.getSignificanceWidth());
assertEquals(2175, resultMatrixLatex1.getRowCount());
assertEquals("Whether to remove the classname package prefixes from the filter names in datasets.", resultMatrixLatex1.removeFilterNameTipText());
assertFalse(resultMatrixLatex1.getPrintColNames());
assertEquals(2175, resultMatrixLatex1.getVisibleRowCount());
assertEquals("The width of the significance indicator (0 = optimal).", resultMatrixLatex1.significanceWidthTipText());
assertEquals(0, resultMatrixLatex1.getCountWidth());

resultMatrixLatex1.toString();

[MASTER] 00:55:19.298 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing JUnit test case 'ResultMatrix_ESTest' to /home/ubuntu/termite/mosa/tests/s1014/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.Optimization
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 7483
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:56:00.844 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:56:00.876 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:56:00.877 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:56:00.906 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class weka.core.Optimization
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 2499
* Using seed 1014
* Starting evolution
[MASTER] 00:56:04.162 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] weka.core.Optimization.DynamicIntArray.<init>(Lweka/core/Optimization;I)V
* Search finished after 122s and 113 generations, 61916 statements, best individual has fitness: 16712.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 10%
* Total number of goals: 620
* Number of covered goals: 59
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 926
* Number of covered goals: 258
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 10%
* Total number of goals: 21
* Number of covered goals: 2
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 50%
* Total number of goals: 18
* Number of covered goals: 9
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 8%
* Total number of goals: 448
* Number of covered goals: 37
* Generated 19 tests with total length 89
* Resulting test suite's coverage: 16% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
* Writing JUnit test case 'Optimization_ESTest' to /home/ubuntu/termite/mosa/tests/s1014/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.classifiers.bayes.NaiveBayesMultinomialText
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.filters.unsupervised.attribute.Discretize
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 7485
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 7487
* Analyzing classpath: 
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 01:20:39.910 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:20:39.913 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:20:39.914 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 01:20:40.121 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:20:40.140 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:20:40.141 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
* Finished analyzing classpath
* Generating tests for class weka.filters.unsupervised.attribute.Discretize
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
[MASTER] 01:20:41.371 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiFunction
[MASTER] 01:20:41.371 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
[MASTER] 01:20:41.372 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.BiConsumer
[MASTER] 01:20:41.427 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 01:20:41.443 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 01:20:41.444 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
* Total number of test goals for MOSA: 1729
* Using seed 1014
* Starting evolution
* Finished analyzing classpath
* Generating tests for class weka.classifiers.bayes.NaiveBayesMultinomialText
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1412
* Using seed 1014
* Starting evolution
[MASTER] 01:21:03.112 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch weka.classifiers.bayes.NaiveBayesMultinomialText.setStemmer(Lweka/core/stemmers/Stemmer;)V: I3 Branch 47 IFNULL L524 - true in context: weka.classifiers.bayes.NaiveBayesMultinomialText:setStemmer(Lweka/core/stemmers/Stemmer;)V
[MASTER] 01:21:07.968 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 01:21:07.968 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 01:21:37.230 [logback-1] WARN  ClassResetter - class java.lang.NoClassDefFoundError thrown during execution of method  __STATIC_RESET() for class weka.core.converters.ConverterUtils, null
[MASTER] 01:21:45.530 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 01:22:26.940 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 123s and 267 generations, 101480 statements, best individual has fitness: 4080.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 72%
* Total number of goals: 370
* Number of covered goals: 266
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 60%
* Total number of goals: 242
* Number of covered goals: 146
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 75%
* Total number of goals: 713
* Number of covered goals: 535
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 50%
* Total number of goals: 72
* Number of covered goals: 36
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 45
* Number of covered goals: 45
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 60%
* Total number of goals: 242
* Number of covered goals: 146
* Generated 84 tests with total length 537
* Resulting test suite's coverage: 71% (average coverage for all fitness functions)
* Generating assertions
* Search finished after 123s and 274 generations, 109567 statements, best individual has fitness: 1640.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 338
* Number of covered goals: 303
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 194
* Number of covered goals: 161
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 22
* Number of covered goals: 22
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 90%
* Total number of goals: 476
* Number of covered goals: 428
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 112
* Number of covered goals: 61
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 49
* Number of covered goals: 49
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 194
* Number of covered goals: 158
* Generated 74 tests with total length 535
* Resulting test suite's coverage: 86% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
[MASTER] 01:24:46.564 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 01:24:47.108 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 01:25:03.139 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 01:25:03.140 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Instances instances0 = new Instances(" R8k\"$26", arrayList0, 0);
Attribute attribute0 = new Attribute("QuyLArDPl=*$.MH7x", instances0, 1801);
Attribute attribute1 = attribute0.copy(" R8k\"$26");
arrayList0.add(attribute1);
Instances instances1 = new Instances("Name o\"position\": ", arrayList0, 0);
discretize0.setInputFormat(instances1);

[MASTER] 01:25:04.512 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 01:25:04.513 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Discretize discretize0 = new Discretize();
ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
Instances instances0 = new Instances(";<37*qqK^6:=:", arrayList0, 6);
Attribute attribute0 = new Attribute((String) null, instances0, (-2783));
arrayList0.add(attribute0);
Instances instances1 = new Instances("@data", arrayList0, 1);
discretize0.setInputFormat(instances0);

* Writing JUnit test case 'Discretize_ESTest' to /home/ubuntu/termite/mosa/tests/s1014/107_weka/evosuite-tests
* Done!

* Computation finished
* Resulting test suite's mutation score: 58%
* Compiling and checking tests
[MASTER] 01:25:53.546 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_32_1575509153520/weka/classifiers/bayes/NaiveBayesMultinomialText_32_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_32_1575509153520/weka/classifiers/bayes/NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding.java]]
[MASTER] 01:25:53.546 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 01:25:53.546 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 01:25:53.549 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 33
[MASTER] 01:25:53.549 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 33
[MASTER] 01:25:53.549 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_32_1575509153520/weka/classifiers/bayes/NaiveBayesMultinomialText_32_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Dec 05 01:25:53 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.LinkedHashMap;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import weka.classifiers.AbstractClassifier;
15: import weka.classifiers.bayes.NaiveBayesMultinomialText;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class NaiveBayesMultinomialText_32_tmp__ESTest extends NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding {
19: 
20:   /**
21:   //Test case number: 0
22:   /*Coverage entropy=3.047707978151193
23:   */
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
27:       naiveBayesMultinomialText0.toString();
28:       naiveBayesMultinomialText0.m_stemmer = null;
29:       AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
30:       assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
31:       
32:       naiveBayesMultinomialText0.setLNorm(0.0);
33:       LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap0 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
34:       naiveBayesMultinomialText0.setUseStopList(false);
35:       double double0 = naiveBayesMultinomialText0.getLNorm();
36:       assertEquals(0.0, double0, 0.01);
37:       
38:       naiveBayesMultinomialText0.minWordFrequencyTipText();
39:       naiveBayesMultinomialText0.getUseWordFrequencies();
40:       naiveBayesMultinomialText0.getStopwords();
41:       naiveBayesMultinomialText0.minWordFrequencyTipText();
42:       naiveBayesMultinomialText0.normalizeDocLengthTipText();
43:       naiveBayesMultinomialText0.periodicPruningTipText();
44:       naiveBayesMultinomialText0.m_useStopList = false;
45:       naiveBayesMultinomialText0.globalInfo();
46:       naiveBayesMultinomialText0.getNormalizeDocLength();
47:       naiveBayesMultinomialText0.getStemmer();
48:       assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", naiveBayesMultinomialText0.periodicPruningTipText());
49:   }
50: }
RegularFileObject[/tmp/EvoSuite_32_1575509153520/weka/classifiers/bayes/NaiveBayesMultinomialText_32_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Dec 05 01:25:53 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.filters.unsupervised.attribute.NominalToBinary",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.attributeSelection.AttributeEvaluator",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.attributeSelection.SubsetEvaluator",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.logging.Logger$Level",
99:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
100:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
101:       "weka.attributeSelection.CfsSubsetEval",
102:       "weka.core.DenseInstance",
103:       "weka.classifiers.trees.J48",
104:       "weka.core.stemmers.Stemmer",
105:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
106:       "org.pentaho.packageManagement.DefaultPackageManager",
107:       "org.bounce.net.DefaultAuthenticator",
108:       "weka.core.neighboursearch.KDTree",
109:       "weka.core.stemmers.NullStemmer",
110:       "weka.core.EnvironmentHandler",
111:       "weka.classifiers.trees.j48.C45ModelSelection",
112:       "weka.classifiers.functions.SGDText",
113:       "weka.core.RelationalLocator",
114:       "weka.core.Utils",
115:       "weka.core.CustomDisplayStringProvider",
116:       "weka.core.tokenizers.Tokenizer",
117:       "weka.core.NormalizableDistance",
118:       "weka.core.NoSupportForMissingValuesException",
119:       "weka.classifiers.UpdateableClassifier",
120:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
121:       "weka.core.MultiInstanceCapabilitiesHandler",
122:       "weka.core.Copyable",
123:       "weka.core.Capabilities",
124:       "weka.core.BinarySparseInstance",
125:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
126:       "weka.core.AttributeLocator",
127:       "weka.core.SerializedObject",
128:       "weka.clusterers.UpdateableClusterer",
129:       "weka.core.Summarizable",
130:       "weka.attributeSelection.BestFirst",
131:       "weka.classifiers.trees.j48.ModelSelection",
132:       "weka.core.AdditionalMeasureProducer",
133:       "org.pentaho.packageManagement.PackageManager$1",
134:       "weka.attributeSelection.GreedyStepwise",
135:       "weka.core.Drawable",
136:       "weka.core.matrix.Matrix",
137:       "weka.core.CapabilitiesHandler",
138:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
139:       "weka.attributeSelection.ASEvaluation",
140:       "weka.core.AbstractInstance",
141:       "weka.core.scripting.JythonObject",
142:       "weka.core.SelectedTag",
143:       "weka.classifiers.meta.FilteredClassifier",
144:       "org.pentaho.packageManagement.DefaultPackage",
145:       "weka.classifiers.misc.InputMappedClassifier",
146:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
147:       "weka.core.Version",
148:       "weka.attributeSelection.AttributeSelection",
149:       "weka.core.Tag",
150:       "weka.classifiers.trees.j48.BinC45ModelSelection",
151:       "weka.core.neighboursearch.CoverTree",
152:       "weka.classifiers.AbstractClassifier",
153:       "weka.filters.unsupervised.attribute.Center",
154:       "weka.core.OptionHandler",
155:       "weka.core.WekaException",
156:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
157:       "weka.filters.supervised.attribute.AttributeSelection",
158:       "weka.filters.StreamableFilter",
159:       "weka.core.Range",
160:       "weka.core.PartitionGenerator",
161:       "weka.core.scripting.JythonSerializableObject",
162:       "weka.classifiers.Classifier",
163:       "weka.core.Capabilities$Capability",
164:       "weka.core.SparseInstance",
165:       "org.pentaho.packageManagement.PackageManager",
166:       "weka.attributeSelection.AttributeTransformer",
167:       "weka.core.tokenizers.WordTokenizer",
168:       "weka.classifiers.trees.j48.ClassifierTree",
169:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
170:       "weka.attributeSelection.PrincipalComponents",
171:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
172:       "weka.core.stemmers.SnowballStemmer",
173:       "weka.classifiers.trees.j48.PruneableClassifierTree",
174:       "weka.core.stemmers.LovinsStemmer",
175:       "weka.classifiers.Evaluation",
176:       "weka.classifiers.functions.supportVector.Kernel",
177:       "weka.core.WekaPackageManager",
178:       "weka.attributeSelection.ASSearch",
179:       "weka.filters.SupervisedFilter",
180:       "weka.core.TechnicalInformationHandler",
181:       "weka.attributeSelection.StartSetHandler",
182:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
183:       "weka.core.Option",
184:       "weka.core.neighboursearch.PerformanceStats",
185:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
186:       "weka.filters.Sourcable",
187:       "weka.core.Attribute",
188:       "weka.core.Stopwords",
189:       "weka.core.tokenizers.AlphabeticTokenizer",
190:       "weka.core.FastVector",
191:       "weka.core.UnassignedDatasetException",
192:       "weka.classifiers.RandomizableClassifier",
193:       "weka.attributeSelection.RankedOutputSearch",
194:       "weka.classifiers.SingleClassifierEnhancer",
195:       "weka.core.RevisionUtils",
196:       "weka.core.Instance",
197:       "weka.core.ProtectedProperties",
198:       "weka.core.StringLocator",
199:       "weka.core.Matchable",
200:       "weka.core.AttributeStats",
201:       "weka.core.WeightedInstancesHandler",
202:       "weka.core.neighboursearch.NearestNeighbourSearch",
203:       "weka.filters.unsupervised.attribute.Remove",
204:       "weka.core.Randomizable",
205:       "weka.core.EuclideanDistance",
206:       "weka.core.Instances",
207:       "weka.core.UnassignedClassException",
208:       "weka.classifiers.rules.ZeroR",
209:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
210:       "weka.filters.unsupervised.attribute.Standardize",
211:       "weka.attributeSelection.Ranker",
212:       "weka.core.TechnicalInformation",
213:       "weka.core.UnsupportedAttributeTypeException",
214:       "weka.classifiers.Sourcable",
215:       "weka.core.RevisionHandler",
216:       "weka.classifiers.evaluation.output.prediction.PlainText",
217:       "weka.core.neighboursearch.TreePerformanceStats",
218:       "weka.core.xml.XMLSerialization",
219:       "weka.classifiers.xml.XMLClassifier",
220:       "weka.filters.Filter",
221:       "weka.filters.supervised.attribute.Discretize"
222:     );
223:   } 
224: 
225:   private static void resetClasses() {
226:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_32_tmp__ESTest_scaffolding.class.getClassLoader()); 
227: 
228:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
229:       "weka.classifiers.AbstractClassifier",
230:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
231:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
232:       "weka.core.Capabilities$Capability",
233:       "weka.core.tokenizers.Tokenizer",
234:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
235:       "weka.core.tokenizers.WordTokenizer",
236:       "weka.core.stemmers.NullStemmer",
237:       "weka.core.Utils",
238:       "weka.classifiers.Evaluation",
239:       "weka.core.Option",
240:       "weka.core.RevisionUtils",
241:       "weka.filters.Filter",
242:       "weka.filters.supervised.attribute.Discretize",
243:       "weka.core.Range",
244:       "weka.core.Capabilities",
245:       "org.pentaho.packageManagement.PackageManager",
246:       "org.pentaho.packageManagement.DefaultPackageManager",
247:       "weka.core.Version",
248:       "weka.core.Environment",
249:       "weka.core.WekaPackageManager",
250:       "weka.core.tokenizers.NGramTokenizer",
251:       "weka.core.SerializedObject",
252:       "weka.classifiers.RandomizableClassifier",
253:       "weka.core.Tag",
254:       "weka.classifiers.functions.SGDText",
255:       "weka.core.neighboursearch.NearestNeighbourSearch",
256:       "weka.core.neighboursearch.KDTree",
257:       "weka.core.NormalizableDistance",
258:       "weka.core.EuclideanDistance",
259:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
260:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
261:       "weka.classifiers.SingleClassifierEnhancer",
262:       "weka.classifiers.misc.InputMappedClassifier",
263:       "weka.classifiers.rules.ZeroR",
264:       "weka.core.AbstractInstance",
265:       "weka.core.SparseInstance",
266:       "weka.core.BinarySparseInstance",
267:       "weka.core.Instances",
268:       "weka.core.converters.ArffLoader$ArffReader",
269:       "weka.core.UnassignedDatasetException",
270:       "weka.core.neighboursearch.CoverTree",
271:       "weka.core.neighboursearch.balltrees.BallNode",
272:       "weka.classifiers.misc.SerializedClassifier",
273:       "weka.core.Stopwords",
274:       "weka.attributeSelection.ASEvaluation",
275:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
276:       "weka.attributeSelection.PrincipalComponents",
277:       "weka.attributeSelection.AttributeSelection",
278:       "weka.core.TestInstances",
279:       "weka.core.DenseInstance",
280:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
281:       "weka.classifiers.meta.CostSensitiveClassifier",
282:       "weka.classifiers.CostMatrix",
283:       "weka.classifiers.bayes.NaiveBayes",
284:       "weka.core.neighboursearch.BallTree",
285:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
286:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
287:       "weka.core.neighboursearch.balltrees.BallSplitter",
288:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
289:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
290:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
291:       "weka.core.Attribute",
292:       "weka.core.ProtectedProperties",
293:       "weka.core.stemmers.LovinsStemmer",
294:       "weka.core.stemmers.Stemming",
295:       "weka.classifiers.lazy.IBk",
296:       "weka.core.neighboursearch.LinearNNSearch",
297:       "weka.core.SelectedTag",
298:       "weka.core.stemmers.SnowballStemmer",
299:       "weka.core.stemmers.IteratedLovinsStemmer",
300:       "weka.core.WekaException",
301:       "weka.classifiers.functions.supportVector.Kernel",
302:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
303:       "weka.classifiers.bayes.BayesNet",
304:       "weka.classifiers.bayes.net.BIFReader",
305:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
306:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
307:       "weka.classifiers.bayes.net.search.local.K2",
308:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
309:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
310:       "weka.classifiers.MultipleClassifiersCombiner",
311:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
312:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
313:       "weka.classifiers.meta.Stacking",
314:       "weka.classifiers.IteratedSingleClassifierEnhancer",
315:       "weka.classifiers.meta.AdditiveRegression",
316:       "weka.classifiers.trees.m5.M5Base",
317:       "weka.classifiers.rules.M5Rules",
318:       "weka.core.TechnicalInformation",
319:       "weka.core.TechnicalInformation$Type",
320:       "weka.core.TechnicalInformation$Field",
321:       "weka.classifiers.functions.MultilayerPerceptron",
322:       "weka.core.FastVector",
323:       "weka.filters.unsupervised.attribute.NominalToBinary",
324:       "weka.classifiers.functions.neural.SigmoidUnit",
325:       "weka.classifiers.functions.neural.LinearUnit",
326:       "weka.core.SerializationHelper",
327:       "weka.filters.SimpleFilter",
328:       "weka.filters.SimpleStreamFilter",
329:       "weka.filters.MultiFilter",
330:       "weka.filters.AllFilter",
331:       "weka.core.tokenizers.AlphabeticTokenizer",
332:       "weka.core.FindWithCapabilities",
333:       "weka.core.SingleIndex",
334:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
335:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
336:       "weka.core.WekaEnumeration",
337:       "weka.core.Attribute$1",
338:       "weka.classifiers.rules.JRip",
339:       "weka.core.ClassDiscovery",
340:       "weka.classifiers.bayes.NaiveBayesMultinomial",
341:       "weka.core.converters.ConverterUtils$DataSource",
342:       "weka.core.converters.AbstractLoader",
343:       "weka.core.converters.AbstractFileLoader",
344:       "weka.core.converters.ArffLoader",
345:       "weka.classifiers.functions.LinearRegression",
346:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
347:       "weka.classifiers.functions.SimpleLinearRegression",
348:       "weka.attributeSelection.WrapperSubsetEval",
349:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
350:       "weka.classifiers.rules.OneR",
351:       "weka.estimators.Estimator",
352:       "weka.estimators.PoissonEstimator",
353:       "weka.core.UnassignedClassException",
354:       "weka.classifiers.rules.DecisionTable",
355:       "weka.attributeSelection.ASSearch",
356:       "weka.attributeSelection.BestFirst",
357:       "weka.attributeSelection.CfsSubsetEval",
358:       "weka.classifiers.meta.MultiClassClassifier",
359:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
360:       "weka.classifiers.functions.Logistic",
361:       "weka.classifiers.functions.SMO",
362:       "weka.classifiers.functions.supportVector.CachedKernel",
363:       "weka.classifiers.functions.supportVector.PolyKernel",
364:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
365:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
366:       "weka.classifiers.meta.Bagging",
367:       "weka.classifiers.trees.REPTree",
368:       "weka.classifiers.lazy.KStar",
369:       "weka.attributeSelection.OneRAttributeEval",
370:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
371:       "weka.estimators.KernelEstimator",
372:       "weka.core.UnsupportedAttributeTypeException",
373:       "weka.classifiers.meta.CVParameterSelection",
374:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
375:       "weka.classifiers.meta.Vote",
376:       "weka.classifiers.functions.SimpleLogistic",
377:       "weka.attributeSelection.CorrelationAttributeEval",
378:       "weka.classifiers.rules.PART",
379:       "weka.classifiers.rules.part.MakeDecList",
380:       "weka.estimators.NormalEstimator",
381:       "weka.classifiers.functions.VotedPerceptron",
382:       "weka.core.AttributeStats",
383:       "weka.classifiers.functions.SMOreg",
384:       "weka.classifiers.functions.supportVector.RegOptimizer",
385:       "weka.classifiers.functions.supportVector.RegSMO",
386:       "weka.classifiers.functions.supportVector.RegSMOImproved",
387:       "weka.gui.GenericPropertiesCreator",
388:       "weka.gui.GenericObjectEditor",
389:       "weka.core.converters.ConverterUtils",
390:       "weka.classifiers.trees.DecisionStump",
391:       "weka.classifiers.trees.LMT",
392:       "weka.classifiers.lazy.LWL",
393:       "weka.classifiers.functions.GaussianProcesses",
394:       "weka.attributeSelection.InfoGainAttributeEval",
395:       "weka.classifiers.functions.supportVector.Puk",
396:       "weka.classifiers.meta.RegressionByDiscretization",
397:       "weka.filters.unsupervised.attribute.Discretize",
398:       "weka.classifiers.trees.J48",
399:       "weka.classifiers.trees.j48.ClassifierTree",
400:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
401:       "weka.core.matrix.Matrix",
402:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
403:       "weka.attributeSelection.GainRatioAttributeEval",
404:       "weka.classifiers.meta.FilteredClassifier",
405:       "weka.filters.supervised.attribute.AttributeSelection",
406:       "weka.attributeSelection.GreedyStepwise",
407:       "weka.classifiers.trees.RandomTree",
408:       "weka.core.neighboursearch.PerformanceStats",
409:       "weka.core.ChebyshevDistance",
410:       "weka.attributeSelection.ReliefFAttributeEval",
411:       "weka.classifiers.meta.AttributeSelectedClassifier",
412:       "weka.classifiers.bayes.NaiveBayesUpdateable",
413:       "weka.classifiers.meta.RandomCommittee",
414:       "weka.classifiers.functions.supportVector.StringKernel",
415:       "weka.classifiers.trees.RandomForest",
416:       "weka.estimators.MahalanobisEstimator",
417:       "weka.classifiers.meta.ClassificationViaRegression",
418:       "weka.classifiers.trees.M5P",
419:       "weka.estimators.DiscreteEstimator",
420:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
421:       "weka.classifiers.functions.SGD",
422:       "weka.core.Javadoc",
423:       "weka.core.OptionHandlerJavadoc",
424:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
425:       "weka.classifiers.meta.AdaBoostM1",
426:       "weka.classifiers.functions.supportVector.RBFKernel",
427:       "weka.classifiers.meta.MultiScheme",
428:       "weka.classifiers.meta.LogitBoost",
429:       "weka.classifiers.meta.RandomSubSpace"
430:     );
431:   }
432: }

[MASTER] 01:25:53.550 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
naiveBayesMultinomialText0.toString();
naiveBayesMultinomialText0.m_stemmer = null;
AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);

naiveBayesMultinomialText0.setLNorm(0.0);
LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> linkedHashMap0 = new LinkedHashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.setUseStopList(false);
double double0 = naiveBayesMultinomialText0.getLNorm();
assertEquals(0.0, double0, 0.01);

naiveBayesMultinomialText0.minWordFrequencyTipText();
naiveBayesMultinomialText0.getUseWordFrequencies();
naiveBayesMultinomialText0.getStopwords();
naiveBayesMultinomialText0.minWordFrequencyTipText();
naiveBayesMultinomialText0.normalizeDocLengthTipText();
naiveBayesMultinomialText0.periodicPruningTipText();
naiveBayesMultinomialText0.m_useStopList = false;
naiveBayesMultinomialText0.globalInfo();
naiveBayesMultinomialText0.getNormalizeDocLength();
naiveBayesMultinomialText0.getStemmer();
assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", naiveBayesMultinomialText0.periodicPruningTipText());


[MASTER] 01:25:54.447 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_69_1575509154424/weka/classifiers/bayes/NaiveBayesMultinomialText_69_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_69_1575509154424/weka/classifiers/bayes/NaiveBayesMultinomialText_69_tmp__ESTest_scaffolding.java]]
[MASTER] 01:25:54.447 [logback-2] ERROR JUnitAnalyzer - Classpath: /home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar:/home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 01:25:54.447 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/ubuntu/termite/evosuite.jar:/home/ubuntu/termite/projects/107_weka/weka.jar:/home/ubuntu/termite/projects/107_weka/lib/packageManager.jar:/home/ubuntu/termite/projects/107_weka/lib/JFlex.jar:/home/ubuntu/termite/projects/107_weka/lib/java-cup.jar
[MASTER] 01:25:54.447 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 31
[MASTER] 01:25:54.447 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 31
[MASTER] 01:25:54.447 [logback-2] ERROR JUnitAnalyzer - Diagnostic: weka.classifiers.bayes.NaiveBayesMultinomialText.Count has private access in weka.classifiers.bayes.NaiveBayesMultinomialText: 33
[MASTER] 01:25:54.448 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_69_1575509154424/weka/classifiers/bayes/NaiveBayesMultinomialText_69_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Thu Dec 05 01:25:54 GMT 2019
4:  */
5: 
6: package weka.classifiers.bayes;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import java.util.HashMap;
11: import java.util.LinkedHashMap;
12: import java.util.Map;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: import weka.classifiers.bayes.NaiveBayesMultinomialText;
17: import weka.core.Capabilities;
18: import weka.core.Instances;
19: import weka.core.TestInstances;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
22: public class NaiveBayesMultinomialText_69_tmp__ESTest extends NaiveBayesMultinomialText_69_tmp__ESTest_scaffolding {
23: 
24:   /**
25:   //Test case number: 0
26:   /*Coverage entropy=2.1076197306159186
27:   */
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
31:       HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
32:       naiveBayesMultinomialText0.m_lowercaseTokens = true;
33:       naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
34:       Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
35:       TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
36:       Instances instances0 = testInstances0.generate();
37:       naiveBayesMultinomialText0.buildClassifier(instances0);
38:       assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
39:       assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
40:       assertEquals(0, capabilities0.getMinimumNumberInstances());
41:       assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
42:       assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
43:   }
44: }
RegularFileObject[/tmp/EvoSuite_69_1575509154424/weka/classifiers/bayes/NaiveBayesMultinomialText_69_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Thu Dec 05 01:25:54 GMT 2019
5:  */
6: 
7: package weka.classifiers.bayes;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class NaiveBayesMultinomialText_69_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "weka.classifiers.bayes.NaiveBayesMultinomialText"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("file.encoding", "UTF-8"); 
76:     java.lang.System.setProperty("java.awt.headless", "true"); 
77:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
78:     java.lang.System.setProperty("user.country", "US"); 
79:     java.lang.System.setProperty("user.dir", "/home/ubuntu/termite/projects/107_weka"); 
80:     java.lang.System.setProperty("user.home", "/home/ubuntu"); 
81:     java.lang.System.setProperty("user.language", "en"); 
82:     java.lang.System.setProperty("user.name", "ubuntu"); 
83:     java.lang.System.setProperty("user.timezone", "Etc/UTC"); 
84:   }
85: 
86:   private static void initializeClasses() {
87:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(NaiveBayesMultinomialText_69_tmp__ESTest_scaffolding.class.getClassLoader() ,
88:       "weka.core.Environment",
89:       "weka.core.TestInstances",
90:       "weka.filters.unsupervised.attribute.NominalToBinary",
91:       "weka.core.DistanceFunction",
92:       "org.pentaho.packageManagement.PackageConstraint",
93:       "weka.attributeSelection.AttributeEvaluator",
94:       "org.pentaho.packageManagement.Package",
95:       "weka.core.xml.XMLBasicSerialization",
96:       "weka.attributeSelection.SubsetEvaluator",
97:       "weka.filters.UnsupervisedFilter",
98:       "weka.core.logging.Logger$Level",
99:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
100:       "weka.classifiers.evaluation.output.prediction.AbstractOutput",
101:       "weka.attributeSelection.CfsSubsetEval",
102:       "weka.core.DenseInstance",
103:       "weka.classifiers.trees.J48",
104:       "weka.core.stemmers.Stemmer",
105:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
106:       "org.pentaho.packageManagement.DefaultPackageManager",
107:       "org.bounce.net.DefaultAuthenticator",
108:       "weka.core.neighboursearch.KDTree",
109:       "weka.core.stemmers.NullStemmer",
110:       "weka.core.EnvironmentHandler",
111:       "weka.classifiers.trees.j48.C45ModelSelection",
112:       "weka.classifiers.functions.SGDText",
113:       "weka.core.RelationalLocator",
114:       "weka.core.Utils",
115:       "weka.core.CustomDisplayStringProvider",
116:       "weka.core.tokenizers.Tokenizer",
117:       "weka.core.NormalizableDistance",
118:       "weka.core.NoSupportForMissingValuesException",
119:       "weka.classifiers.UpdateableClassifier",
120:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
121:       "weka.core.MultiInstanceCapabilitiesHandler",
122:       "weka.core.Copyable",
123:       "weka.core.Capabilities",
124:       "weka.core.BinarySparseInstance",
125:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
126:       "weka.core.AttributeLocator",
127:       "weka.core.SerializedObject",
128:       "weka.clusterers.UpdateableClusterer",
129:       "weka.core.Summarizable",
130:       "weka.attributeSelection.BestFirst",
131:       "weka.classifiers.trees.j48.ModelSelection",
132:       "weka.core.AdditionalMeasureProducer",
133:       "org.pentaho.packageManagement.PackageManager$1",
134:       "weka.attributeSelection.GreedyStepwise",
135:       "weka.core.Drawable",
136:       "weka.core.matrix.Matrix",
137:       "weka.core.CapabilitiesHandler",
138:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
139:       "weka.attributeSelection.ASEvaluation",
140:       "weka.core.AbstractInstance",
141:       "weka.core.scripting.JythonObject",
142:       "weka.core.SelectedTag",
143:       "weka.classifiers.meta.FilteredClassifier",
144:       "org.pentaho.packageManagement.DefaultPackage",
145:       "weka.classifiers.misc.InputMappedClassifier",
146:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
147:       "weka.core.Version",
148:       "weka.attributeSelection.AttributeSelection",
149:       "weka.core.Tag",
150:       "weka.classifiers.trees.j48.BinC45ModelSelection",
151:       "weka.core.neighboursearch.CoverTree",
152:       "weka.classifiers.AbstractClassifier",
153:       "weka.filters.unsupervised.attribute.Center",
154:       "weka.core.OptionHandler",
155:       "weka.core.WekaException",
156:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
157:       "weka.filters.supervised.attribute.AttributeSelection",
158:       "weka.filters.StreamableFilter",
159:       "weka.core.Range",
160:       "weka.core.PartitionGenerator",
161:       "weka.core.scripting.JythonSerializableObject",
162:       "weka.classifiers.Classifier",
163:       "weka.core.Capabilities$Capability",
164:       "weka.core.SparseInstance",
165:       "org.pentaho.packageManagement.PackageManager",
166:       "weka.attributeSelection.AttributeTransformer",
167:       "weka.core.tokenizers.WordTokenizer",
168:       "weka.classifiers.trees.j48.ClassifierTree",
169:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
170:       "weka.attributeSelection.PrincipalComponents",
171:       "weka.core.neighboursearch.kdtrees.KDTreeNode",
172:       "weka.core.stemmers.SnowballStemmer",
173:       "weka.classifiers.trees.j48.PruneableClassifierTree",
174:       "weka.core.stemmers.LovinsStemmer",
175:       "weka.classifiers.Evaluation",
176:       "weka.classifiers.functions.supportVector.Kernel",
177:       "weka.core.WekaPackageManager",
178:       "weka.attributeSelection.ASSearch",
179:       "weka.filters.SupervisedFilter",
180:       "weka.core.TechnicalInformationHandler",
181:       "weka.attributeSelection.StartSetHandler",
182:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
183:       "weka.core.Option",
184:       "weka.core.neighboursearch.PerformanceStats",
185:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
186:       "weka.filters.Sourcable",
187:       "weka.core.Attribute",
188:       "weka.core.Stopwords",
189:       "weka.core.tokenizers.AlphabeticTokenizer",
190:       "weka.core.FastVector",
191:       "weka.core.UnassignedDatasetException",
192:       "weka.classifiers.RandomizableClassifier",
193:       "weka.attributeSelection.RankedOutputSearch",
194:       "weka.classifiers.SingleClassifierEnhancer",
195:       "weka.core.RevisionUtils",
196:       "weka.core.Instance",
197:       "weka.core.ProtectedProperties",
198:       "weka.core.StringLocator",
199:       "weka.core.Matchable",
200:       "weka.core.AttributeStats",
201:       "weka.core.WeightedInstancesHandler",
202:       "weka.core.neighboursearch.NearestNeighbourSearch",
203:       "weka.filters.unsupervised.attribute.Remove",
204:       "weka.core.Randomizable",
205:       "weka.core.EuclideanDistance",
206:       "weka.core.Instances",
207:       "weka.core.UnassignedClassException",
208:       "weka.classifiers.rules.ZeroR",
209:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
210:       "weka.filters.unsupervised.attribute.Standardize",
211:       "weka.attributeSelection.Ranker",
212:       "weka.core.TechnicalInformation",
213:       "weka.core.UnsupportedAttributeTypeException",
214:       "weka.classifiers.Sourcable",
215:       "weka.core.RevisionHandler",
216:       "weka.classifiers.evaluation.output.prediction.PlainText",
217:       "weka.core.neighboursearch.TreePerformanceStats",
218:       "weka.core.xml.XMLSerialization",
219:       "weka.classifiers.xml.XMLClassifier",
220:       "weka.filters.Filter",
221:       "weka.filters.supervised.attribute.Discretize"
222:     );
223:   } 
224: 
225:   private static void resetClasses() {
226:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(NaiveBayesMultinomialText_69_tmp__ESTest_scaffolding.class.getClassLoader()); 
227: 
228:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
229:       "weka.classifiers.AbstractClassifier",
230:       "weka.classifiers.bayes.NaiveBayesMultinomialText",
231:       "weka.classifiers.bayes.NaiveBayesMultinomialText$Count",
232:       "weka.core.Capabilities$Capability",
233:       "weka.core.tokenizers.Tokenizer",
234:       "weka.core.tokenizers.CharacterDelimitedTokenizer",
235:       "weka.core.tokenizers.WordTokenizer",
236:       "weka.core.stemmers.NullStemmer",
237:       "weka.core.Utils",
238:       "weka.classifiers.Evaluation",
239:       "weka.core.Option",
240:       "weka.core.RevisionUtils",
241:       "weka.filters.Filter",
242:       "weka.filters.supervised.attribute.Discretize",
243:       "weka.core.Range",
244:       "weka.core.Capabilities",
245:       "org.pentaho.packageManagement.PackageManager",
246:       "org.pentaho.packageManagement.DefaultPackageManager",
247:       "weka.core.Version",
248:       "weka.core.Environment",
249:       "weka.core.WekaPackageManager",
250:       "weka.core.tokenizers.NGramTokenizer",
251:       "weka.core.SerializedObject",
252:       "weka.classifiers.RandomizableClassifier",
253:       "weka.core.Tag",
254:       "weka.classifiers.functions.SGDText",
255:       "weka.core.neighboursearch.NearestNeighbourSearch",
256:       "weka.core.neighboursearch.KDTree",
257:       "weka.core.NormalizableDistance",
258:       "weka.core.EuclideanDistance",
259:       "weka.core.neighboursearch.kdtrees.KDTreeNodeSplitter",
260:       "weka.core.neighboursearch.kdtrees.SlidingMidPointOfWidestSide",
261:       "weka.classifiers.SingleClassifierEnhancer",
262:       "weka.classifiers.misc.InputMappedClassifier",
263:       "weka.classifiers.rules.ZeroR",
264:       "weka.core.AbstractInstance",
265:       "weka.core.SparseInstance",
266:       "weka.core.BinarySparseInstance",
267:       "weka.core.Instances",
268:       "weka.core.converters.ArffLoader$ArffReader",
269:       "weka.core.UnassignedDatasetException",
270:       "weka.core.neighboursearch.CoverTree",
271:       "weka.core.neighboursearch.balltrees.BallNode",
272:       "weka.classifiers.misc.SerializedClassifier",
273:       "weka.core.Stopwords",
274:       "weka.attributeSelection.ASEvaluation",
275:       "weka.attributeSelection.UnsupervisedAttributeEvaluator",
276:       "weka.attributeSelection.PrincipalComponents",
277:       "weka.attributeSelection.AttributeSelection",
278:       "weka.core.TestInstances",
279:       "weka.core.DenseInstance",
280:       "weka.classifiers.RandomizableSingleClassifierEnhancer",
281:       "weka.classifiers.meta.CostSensitiveClassifier",
282:       "weka.classifiers.CostMatrix",
283:       "weka.classifiers.bayes.NaiveBayes",
284:       "weka.core.neighboursearch.BallTree",
285:       "weka.core.neighboursearch.balltrees.BallTreeConstructor",
286:       "weka.core.neighboursearch.balltrees.TopDownConstructor",
287:       "weka.core.neighboursearch.balltrees.BallSplitter",
288:       "weka.core.neighboursearch.balltrees.PointsClosestToFurthestChildren",
289:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeap",
290:       "weka.core.neighboursearch.NearestNeighbourSearch$MyHeapElement",
291:       "weka.core.Attribute",
292:       "weka.core.ProtectedProperties",
293:       "weka.core.stemmers.LovinsStemmer",
294:       "weka.core.stemmers.Stemming",
295:       "weka.classifiers.lazy.IBk",
296:       "weka.core.neighboursearch.LinearNNSearch",
297:       "weka.core.SelectedTag",
298:       "weka.core.stemmers.SnowballStemmer",
299:       "weka.core.stemmers.IteratedLovinsStemmer",
300:       "weka.core.WekaException",
301:       "weka.classifiers.functions.supportVector.Kernel",
302:       "weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel",
303:       "weka.classifiers.bayes.BayesNet",
304:       "weka.classifiers.bayes.net.BIFReader",
305:       "weka.classifiers.bayes.net.search.SearchAlgorithm",
306:       "weka.classifiers.bayes.net.search.local.LocalScoreSearchAlgorithm",
307:       "weka.classifiers.bayes.net.search.local.K2",
308:       "weka.classifiers.bayes.net.estimate.BayesNetEstimator",
309:       "weka.classifiers.bayes.net.estimate.SimpleEstimator",
310:       "weka.classifiers.MultipleClassifiersCombiner",
311:       "weka.classifiers.ParallelMultipleClassifiersCombiner",
312:       "weka.classifiers.RandomizableParallelMultipleClassifiersCombiner",
313:       "weka.classifiers.meta.Stacking",
314:       "weka.classifiers.IteratedSingleClassifierEnhancer",
315:       "weka.classifiers.meta.AdditiveRegression",
316:       "weka.classifiers.trees.m5.M5Base",
317:       "weka.classifiers.rules.M5Rules",
318:       "weka.core.TechnicalInformation",
319:       "weka.core.TechnicalInformation$Type",
320:       "weka.core.TechnicalInformation$Field",
321:       "weka.classifiers.functions.MultilayerPerceptron",
322:       "weka.core.FastVector",
323:       "weka.filters.unsupervised.attribute.NominalToBinary",
324:       "weka.classifiers.functions.neural.SigmoidUnit",
325:       "weka.classifiers.functions.neural.LinearUnit",
326:       "weka.core.SerializationHelper",
327:       "weka.filters.SimpleFilter",
328:       "weka.filters.SimpleStreamFilter",
329:       "weka.filters.MultiFilter",
330:       "weka.filters.AllFilter",
331:       "weka.core.tokenizers.AlphabeticTokenizer",
332:       "weka.core.FindWithCapabilities",
333:       "weka.core.SingleIndex",
334:       "weka.filters.unsupervised.attribute.PotentialClassIgnorer",
335:       "weka.filters.unsupervised.attribute.ReplaceMissingValues",
336:       "weka.core.WekaEnumeration",
337:       "weka.core.Attribute$1",
338:       "weka.classifiers.rules.JRip",
339:       "weka.core.ClassDiscovery",
340:       "weka.classifiers.bayes.NaiveBayesMultinomial",
341:       "weka.core.converters.ConverterUtils$DataSource",
342:       "weka.core.converters.AbstractLoader",
343:       "weka.core.converters.AbstractFileLoader",
344:       "weka.core.converters.ArffLoader",
345:       "weka.classifiers.functions.LinearRegression",
346:       "weka.classifiers.bayes.NaiveBayesMultinomialUpdateable",
347:       "weka.classifiers.functions.SimpleLinearRegression",
348:       "weka.attributeSelection.WrapperSubsetEval",
349:       "weka.core.neighboursearch.balltrees.BottomUpConstructor",
350:       "weka.classifiers.rules.OneR",
351:       "weka.estimators.Estimator",
352:       "weka.estimators.PoissonEstimator",
353:       "weka.core.UnassignedClassException",
354:       "weka.classifiers.rules.DecisionTable",
355:       "weka.attributeSelection.ASSearch",
356:       "weka.attributeSelection.BestFirst",
357:       "weka.attributeSelection.CfsSubsetEval",
358:       "weka.classifiers.meta.MultiClassClassifier",
359:       "weka.classifiers.meta.MultiClassClassifierUpdateable",
360:       "weka.classifiers.functions.Logistic",
361:       "weka.classifiers.functions.SMO",
362:       "weka.classifiers.functions.supportVector.CachedKernel",
363:       "weka.classifiers.functions.supportVector.PolyKernel",
364:       "weka.classifiers.ParallelIteratedSingleClassifierEnhancer",
365:       "weka.classifiers.RandomizableParallelIteratedSingleClassifierEnhancer",
366:       "weka.classifiers.meta.Bagging",
367:       "weka.classifiers.trees.REPTree",
368:       "weka.classifiers.lazy.KStar",
369:       "weka.attributeSelection.OneRAttributeEval",
370:       "weka.core.neighboursearch.balltrees.MiddleOutConstructor",
371:       "weka.estimators.KernelEstimator",
372:       "weka.core.UnsupportedAttributeTypeException",
373:       "weka.classifiers.meta.CVParameterSelection",
374:       "weka.classifiers.RandomizableMultipleClassifiersCombiner",
375:       "weka.classifiers.meta.Vote",
376:       "weka.classifiers.functions.SimpleLogistic",
377:       "weka.attributeSelection.CorrelationAttributeEval",
378:       "weka.classifiers.rules.PART",
379:       "weka.classifiers.rules.part.MakeDecList",
380:       "weka.estimators.NormalEstimator",
381:       "weka.classifiers.functions.VotedPerceptron",
382:       "weka.core.AttributeStats",
383:       "weka.classifiers.functions.SMOreg",
384:       "weka.classifiers.functions.supportVector.RegOptimizer",
385:       "weka.classifiers.functions.supportVector.RegSMO",
386:       "weka.classifiers.functions.supportVector.RegSMOImproved",
387:       "weka.gui.GenericPropertiesCreator",
388:       "weka.gui.GenericObjectEditor",
389:       "weka.core.converters.ConverterUtils",
390:       "weka.classifiers.trees.DecisionStump",
391:       "weka.classifiers.trees.LMT",
392:       "weka.classifiers.lazy.LWL",
393:       "weka.classifiers.functions.GaussianProcesses",
394:       "weka.attributeSelection.InfoGainAttributeEval",
395:       "weka.classifiers.functions.supportVector.Puk",
396:       "weka.classifiers.meta.RegressionByDiscretization",
397:       "weka.filters.unsupervised.attribute.Discretize",
398:       "weka.classifiers.trees.J48",
399:       "weka.classifiers.trees.j48.ClassifierTree",
400:       "weka.classifiers.trees.j48.C45PruneableClassifierTree",
401:       "weka.core.matrix.Matrix",
402:       "weka.attributeSelection.SymmetricalUncertAttributeEval",
403:       "weka.attributeSelection.GainRatioAttributeEval",
404:       "weka.classifiers.meta.FilteredClassifier",
405:       "weka.filters.supervised.attribute.AttributeSelection",
406:       "weka.attributeSelection.GreedyStepwise",
407:       "weka.classifiers.trees.RandomTree",
408:       "weka.core.neighboursearch.PerformanceStats",
409:       "weka.core.ChebyshevDistance",
410:       "weka.attributeSelection.ReliefFAttributeEval",
411:       "weka.classifiers.meta.AttributeSelectedClassifier",
412:       "weka.classifiers.bayes.NaiveBayesUpdateable",
413:       "weka.classifiers.meta.RandomCommittee",
414:       "weka.classifiers.functions.supportVector.StringKernel",
415:       "weka.classifiers.trees.RandomForest",
416:       "weka.estimators.MahalanobisEstimator",
417:       "weka.classifiers.meta.ClassificationViaRegression",
418:       "weka.classifiers.trees.M5P",
419:       "weka.estimators.DiscreteEstimator",
420:       "weka.classifiers.functions.supportVector.NormalizedPolyKernel",
421:       "weka.classifiers.functions.SGD",
422:       "weka.core.Javadoc",
423:       "weka.core.OptionHandlerJavadoc",
424:       "weka.classifiers.RandomizableIteratedSingleClassifierEnhancer",
425:       "weka.classifiers.meta.AdaBoostM1",
426:       "weka.classifiers.functions.supportVector.RBFKernel",
427:       "weka.classifiers.meta.MultiScheme",
428:       "weka.classifiers.meta.LogitBoost",
429:       "weka.classifiers.meta.RandomSubSpace"
430:     );
431:   }
432: }

[MASTER] 01:25:54.448 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
naiveBayesMultinomialText0.m_lowercaseTokens = true;
naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
Instances instances0 = testInstances0.generate();
naiveBayesMultinomialText0.buildClassifier(instances0);
assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
assertEquals(0, capabilities0.getMinimumNumberInstances());
assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);


[MASTER] 01:25:56.345 [logback-2] ERROR ClassStateSupport - Could not initialize weka.core.converters.ConverterUtils: null
[MASTER] 01:25:56.465 [logback-2] ERROR ClassStateSupport - Could not initialize weka.gui.GenericObjectEditor: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 01:25:56.565 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.gui.GenericObjectEditor
[MASTER] 01:25:56.565 [logback-2] ERROR ClassResetter - java.lang.NoClassDefFoundError: Could not initialize class weka.core.converters.ConverterUtils
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing JUnit test case 'NaiveBayesMultinomialText_ESTest' to /home/ubuntu/termite/mosa/tests/s1014/107_weka/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: weka.core.stemmers.LovinsStemmer
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/107_weka/evosuite-files/evosuite.properties
* Connecting to master process on port 7489
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class weka.core.stemmers.LovinsStemmer
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 1367
* Using seed 1014
* Starting evolution
* Search finished after 124s and 167 generations, 68354 statements, best individual has fitness: 2864.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 217
* Number of covered goals: 189
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 65%
* Total number of goals: 428
* Number of covered goals: 279
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 2
* Number of covered goals: 2
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 92%
* Total number of goals: 260
* Number of covered goals: 239
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 18
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 8
* Number of covered goals: 8
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 65%
* Total number of goals: 428
* Number of covered goals: 278
* Generated 73 tests with total length 188
* Resulting test suite's coverage: 74% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 75%
* Compiling and checking tests
* Writing JUnit test case 'LovinsStemmer_ESTest' to /home/ubuntu/termite/mosa/tests/s1014/107_weka/evosuite-tests
* Done!

* Computation finished
