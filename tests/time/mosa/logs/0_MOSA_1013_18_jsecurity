* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.jsecurity.authc.UsernamePasswordToken
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/18_jsecurity/evosuite-files/evosuite.properties
* Connecting to master process on port 13275
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
* Finished analyzing classpath
* Generating tests for class org.jsecurity.authc.UsernamePasswordToken
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 213
* Using seed 1013
* Starting evolution
* Search finished after 121s and 1439 generations, 542426 statements, best individual has fitness: 64.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 54
* Number of covered goals: 54
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100% (no goals)
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 23
* Number of covered goals: 22
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 81%
* Total number of goals: 36
* Number of covered goals: 29
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Generated 30 tests with total length 81
* Resulting test suite's coverage: 96% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 61%
* Compiling and checking tests
* Writing JUnit test case 'UsernamePasswordToken_ESTest' to /home/ubuntu/termite/mosa/tests/s1013/18_jsecurity/evosuite-tests
* Done!

* Computation finished
* EvoSuite 1.0.6
* Configuration: MOSA
* Going to generate test cases for class: org.jsecurity.web.DefaultWebSecurityManager
* Starting client
* Properties loaded from /home/ubuntu/termite/projects/18_jsecurity/evosuite-files/evosuite.properties
* Connecting to master process on port 13275
* Analyzing classpath: 
* Inheritance tree loaded from evosuite-files/inheritance.xml.gz
[MASTER] 00:29:37.232 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Consumer
[MASTER] 00:29:37.267 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Predicate
[MASTER] 00:29:37.287 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.UnaryOperator
[MASTER] 00:29:37.602 [logback-1] WARN  InheritanceTree - Class not in inheritance graph: java.util.function.Function
* Finished analyzing classpath
* Generating tests for class org.jsecurity.web.DefaultWebSecurityManager
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for MOSA: 468
* Using seed 1013
* Starting evolution
[MASTER] 00:29:42.337 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jsecurity.web.DefaultWebSecurityManager.<init>(Lorg/jsecurity/realm/Realm;)V: Line 71
[MASTER] 00:29:42.337 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jsecurity.web.DefaultWebSecurityManager.<init>(Lorg/jsecurity/realm/Realm;)V: Line 72
[MASTER] 00:29:42.337 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jsecurity.web.DefaultWebSecurityManager.<init>(Lorg/jsecurity/realm/Realm;)V: Line 73
[MASTER] 00:29:42.339 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.jsecurity.web.DefaultWebSecurityManager.<init>(Lorg/jsecurity/realm/Realm;)V: root-Branch
[MASTER] 00:29:42.341 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] org.jsecurity.web.DefaultWebSecurityManager.<init>(Lorg/jsecurity/realm/Realm;)V
[MASTER] 00:29:42.341 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.jsecurity.web.DefaultWebSecurityManager.<init>(Lorg/jsecurity/realm/Realm;)V
[MASTER] 00:29:42.341 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch org.jsecurity.web.DefaultWebSecurityManager.<init>(Lorg/jsecurity/realm/Realm;)V: root-Branch in context: org.jsecurity.web.DefaultWebSecurityManager:<init>(Lorg/jsecurity/realm/Realm;)V
* Search finished after 124s and 74 generations, 20420 statements, best individual has fitness: 904.0
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 79%
* Total number of goals: 97
* Number of covered goals: 77
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 67
* Number of covered goals: 48
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 18
* Number of covered goals: 18
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 80%
* Total number of goals: 162
* Number of covered goals: 129
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 38%
* Total number of goals: 29
* Number of covered goals: 11
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 23
* Number of covered goals: 23
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 70%
* Total number of goals: 67
* Number of covered goals: 47
* Generated 38 tests with total length 203
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 35%
* Compiling and checking tests
[MASTER] 00:34:23.722 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalStateException: No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
[MASTER] 00:34:23.722 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("`wpma&");
DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
defaultWebSecurityManager0.getSessionMode();
defaultWebSecurityManager0.setSessionMode("jsecurity");
defaultWebSecurityManager0.setSessionIdCookiePath("jsecurity");
defaultWebSecurityManager0.getSubject();

[MASTER] 00:34:31.352 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalStateException: No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
[MASTER] 00:34:31.352 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
ServletContainerSessionManager servletContainerSessionManager0 = new ServletContainerSessionManager();
ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
defaultWebSecurityManager0.getSubject();
defaultWebSecurityManager0.bind((Subject) null, (ServletRequest) null, servletResponseWrapper0);

[MASTER] 00:34:31.580 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalStateException: No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
[MASTER] 00:34:31.580 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
defaultWebSecurityManager0.setSessionMode("jsecurity");
defaultWebSecurityManager0.newSessionManagerInstance();
defaultWebSecurityManager0.getSubject();
defaultWebSecurityManager0.getSessionMode();
assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
assertFalse(defaultWebSecurityManager0.isHttpSessionMode());


[MASTER] 00:34:32.577 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalStateException: No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
[MASTER] 00:34:32.578 [logback-1] WARN  JUnitAnalyzer - Failing test:
 DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
ServletContainerSessionManager servletContainerSessionManager0 = new ServletContainerSessionManager();
ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
Subject subject0 = defaultWebSecurityManager0.getSubject();
defaultWebSecurityManager0.bind(subject0, (ServletRequest) null, servletResponseWrapper0);
assertTrue(defaultWebSecurityManager0.isHttpSessionMode());


* Writing JUnit test case 'DefaultWebSecurityManager_ESTest' to /home/ubuntu/termite/mosa/tests/s1013/18_jsecurity/evosuite-tests
* Done!

* Computation finished
