/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 10:41:13 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5892839920999835
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range0.toString();
      Range range1 = Range.of((-9223372036854775808L), (-360L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ -9223372036854775808 .. -359 ]/SB", string0);
      
      range0.equals(range1);
      Object object0 = new Object();
      Range range2 = Range.of((-9223372036854775808L));
      boolean boolean0 = range1.equals(range2);
      assertSame(range2, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.386371757896165
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(448L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-20L), (-20L));
      Long long0 = new Long(448L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range2.getEnd(range_CoordinateSystem0);
      assertEquals((-19L), long1);
      
      Range range3 = Range.of((-20L));
      range2.equals((Object) null);
      assertSame(range2, range3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5961839908503035
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      String string0 = range0.toString();
      assertEquals("[ -9223372036854775808 .. -9223372036854775808 ]/0B", string0);
      
      Range range1 = Range.of((-882L), 2104L);
      Range range2 = Range.of((-360L));
      range1.equals(range2);
      Range range3 = Range.of((-9223372036854775808L));
      assertSame(range3, range0);
      
      Range range4 = Range.of((-882L), 3567L);
      assertFalse(range4.isEmpty());
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-3L), 2147483647L);
      Long long0 = new Long((-3L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.7563859689978996
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.ofLength(9223372036854775807L);
      Range range1 = Range.of((-749L), (-749L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -749 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2046488405579923
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-3601L), (-3601L));
      String string0 = range0.toString();
      assertEquals("[ -3601 .. -3601 ]/0B", string0);
      
      Range range1 = Range.of((-3601L), (-360L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Long long0 = new Long((-3601L));
      Range range2 = Range.of((-2147483648L));
      assertFalse(range2.isEmpty());
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.981638675931792
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483648 .. 2147483648 ]/RB", string0);
      
      Range range2 = Range.of(2147483647L, 4294967302L);
      range1.equals(range2);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6697368478417194
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(448L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 448 ]/SB", string0);
      
      Range range1 = Range.of(range_CoordinateSystem1, 255L, 448L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(448L);
      assertFalse(range3.isEmpty());
      
      boolean boolean0 = range0.endsBefore(range2);
      assertFalse(boolean0);
      
      range0.equals(range1);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7328623165463024
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range1 = Range.of(9223372036854775106L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775106 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(2147483642L);
      range0.equals((Object) null);
      Range range1 = range0.asRange();
      Long long0 = new Long(2147483642L);
      range1.isEmpty();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5139878819208303
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-3L), 2147483647L);
      Long long0 = new Long((-3L));
      Range range1 = Range.of((-2147483648L));
      range1.equals(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2035456965977054
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      range0.equals(range2);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.8935146408294528
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 1 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      range0.startsBefore(range1);
      range2.equals(range0);
      boolean boolean0 = range2.isEmpty();
      assertSame(range0, range3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.493801771623489
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      
      Range range2 = Range.ofLength(9223372036854775807L);
      range1.equals(range2);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range0));
      //  // Unstable assertion: assertSame(range2, range1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-3L), 2147483647L);
      Long long0 = new Long((-3L));
      Range range1 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.7354979291961468
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(2147483664L);
      Range range1 = Range.ofLength(2147483664L);
      range0.split(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(2147483664L, 2147483664L);
      Range range2 = Range.of((-108L), 127L);
      range0.startsBefore(range2);
      Range range3 = Range.of(2147483664L);
      Range range4 = range3.asRange();
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.540390206318463
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(3062L, 2147483664L);
      Range.ofLength(2147483664L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.of(2147483664L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-975L));
      range0.equals((Object) null);
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3883141447274405
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.of(0L);
      boolean boolean0 = range1.startsBefore(range3);
      Range range4 = Range.of(1L);
      boolean boolean1 = range3.equals(range4);
      assertFalse(range4.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.493952914123386
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      range0.complement(range1);
      Range range2 = Range.ofLength(1L);
      range0.equals(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4417067387292817
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 1 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range2 = range1.intersection(range0);
      Range.of(1L);
      Long.getLong("W8'");
      range2.equals((Object) null);
      Range range3 = Range.ofLength(1L);
      assertFalse(range3.isEmpty());
      
      boolean boolean0 = range2.equals(range0);
      assertNotSame(range0, range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4929074147969286
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-27L), (-27L));
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-1126L));
      Range range3 = range1.intersection(range2);
      Range.of((-1468L));
      boolean boolean0 = range3.startsBefore(range2);
      boolean boolean1 = range3.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5580652265582673
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.ofLength(12L);
      range0.equals("?");
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.54259193579292
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.intersects(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.iterator();
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      range0.getBegin(range_CoordinateSystem0);
      String string0 = range1.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/RB", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 9223372036854775807L, 9223372036854775807L);
      Range range4 = Range.of(9223372032559808512L);
      Long.valueOf((-9223372036854775808L));
      boolean boolean1 = range3.equals(range4);
      //  // Unstable assertion: assertFalse(range4.equals((Object)range3));
      //  // Unstable assertion: assertTrue(range3.equals((Object)range0));
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5892756689060175
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(448L);
      range0.split(448L);
      range0.asRange();
      Long long0 = new Long(448L);
      Range range1 = Range.ofLength(2074L);
      range0.equals(range1);
      Range range2 = Range.of(448L, 2591L);
      Range range3 = range1.intersection(range2);
      Range.of((-590L));
      range3.startsBefore(range2);
      Range range4 = range2.asRange();
      Object object0 = new Object();
      range4.equals(range2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7976345979445405
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(4294967302L);
      Range range1 = Range.of(4294967302L);
      range1.startsBefore(range0);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967302 .. 4294967303 ]/SB", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.587974968695738
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-33L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.intersects(range0);
      long long0 = new Long((-33L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ -33 .. -32 ]/SB", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(range_CoordinateSystem0, (-33L), (-33L));
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(boolean1);
      
      long long1 = range1.getEnd();
      assertEquals((-34L), long1);
      
      Range range2 = Range.of(65578L, 4294967295L);
      range0.isSubRangeOf(range2);
      boolean boolean2 = range1.equals((Object) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.of(58L);
      Range range0 = Range.of(58L);
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3290116633839473
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.386170077223896
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2046488405579923
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-3L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString();
      assertEquals("[ -3 .. 2147483647 ]/0B", string0);
      
      boolean boolean0 = range0.equals("[ -3 .. 2147483647 ]/0B");
      Range range1 = Range.of(range_CoordinateSystem0, (-1577L), (-1577L));
      Range range2 = Range.of((-3L), 2147483647L);
      assertSame(range2, range0);
      
      boolean boolean1 = range1.equals("[ -3 .. 2147483647 ]/0B");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.675926170773478
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.toString();
      range0.complement(range0);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(127L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.138773231436188
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      boolean boolean0 = range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      //  // Unstable assertion: assertEquals("[ 4294967296 .. 4294967296 ]/RB", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem3);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.parseRange("[ 4294967296 .. 4294967296 ]/RB");
      List<Range> list0 = range1.complement(range3);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(2, list1.size());
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      
      boolean boolean1 = range2.startsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Range.of(4294967295L);
      range0.complement(range3);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.137070163854353
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      //  // Unstable assertion: assertEquals("[ 4294967296 .. 4294967296 ]/RB", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem3);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.parseRange("[ 4294967296 .. 4294967296 ]/RB");
      List<Range> list0 = range1.complement(range3);
      List<Range> list1 = range0.complementFrom(list0);
      range2.startsBefore(range1);
      range1.asRange();
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem4.getAbbreviatedName();
      range1.equals(list1);
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertEquals(2, list1.size());
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range4 = Range.of((-1L));
      boolean boolean0 = range0.startsBefore(range4);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3318359335878966
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-2934L), (-3L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3L), (-3L));
      range0.complement(range1);
      Range range2 = range0.asRange();
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(412L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals(">#[NAMZx.9. |2$6");
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(1L, 9223372034707292160L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.541665294866279
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = Range.of(range_CoordinateSystem0, 2147483648L, 2147483647L);
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of(2147483648L);
      range4.asRange();
      Object object0 = new Object();
      range3.equals(object0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.424489887603963
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(9223372036854775776L);
      Range range1 = Range.of((-376L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2680842177352765
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-3L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString();
      assertEquals("[ -3 .. 2147483647 ]/0B", string0);
      
      range0.equals("[ -3 .. 2147483647 ]/0B");
      range0.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range range1 = Range.parseRange("[ -3 .. 2147483647 ]/0B", range_CoordinateSystem0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.330930239033385
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      range2.equals((Object) null);
      Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      range1.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-1507L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1507 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3290116633839473
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(9223372036854775807L);
      range0.equals((Object) null);
      //  // Unstable assertion: assertNotSame(range0, range2);
      //  // Unstable assertion: assertTrue(range0.equals((Object)range2));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-3L), (-3L));
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-882L), (-882L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-882L), 2104L);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-882L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.ofLength(2147483664L);
      Long long0 = new Long(2147483664L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(736L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(3062L, 2147483664L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(3062L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Long long0 = new Long((-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 2763L;
      range_CoordinateSystem0.toString();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Residue Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.6429369543410237
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.of((-3L), 32767L);
      Long long0 = new Long(32767L);
      Range range0 = Range.of(9223372036854773073L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.8460165427000126
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 1 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.intersection(range1);
      Range range2 = Range.ofLength(1L);
      List<Range> list0 = range1.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      Range range3 = Range.of(1L, 1L);
      range3.equals(list0);
      assertTrue(list0.contains(range1));
      assertFalse(range2.isEmpty());
      assertSame(range3, range0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.4939401588586505
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      String string1 = range1.toString();
      assertEquals("[ 0 .. -1 ]/0B", string1);
      
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.771218947794189
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(533L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-410L), (-410L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.6760617984754362
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      boolean boolean0 = range0.endsBefore(range1);
      range1.intersection(range0);
      Range range2 = Range.of(1L);
      Range range3 = Range.parseRange("b`q66B\fg-2-27qI", range_CoordinateSystem0);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(3446L, 3446L);
      boolean boolean1 = range4.equals(range2);
      assertTrue(boolean1 == boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder();
      long long1 = range1.getBegin();
      assertTrue(long1 == long0);
      assertTrue(range1.isEmpty());
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(65578L, 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = 65535L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-2492L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2492L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2493 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1371L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1371 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.1837886990665565
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.of(9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1351L, 9223372036854775807L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.268932515385784
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range0));
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(65578L, 9223372032559804641L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.493755988969011
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967302L, 4294967302L);
      Range range1 = Range.of(4294967302L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L));
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(3409L);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.4421765357275262
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range range1 = Range.ofLength(32767L);
      range1.complement(range0);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
      
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(4294967302L, 9223372036854773261L);
      Range range1 = Range.of((-2452L));
      range0.startsBefore(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.4315965669185005
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-3L), 2147483647L);
      Long long0 = new Long((-3L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.of(4294967302L);
      Long long0 = new Long(4294967302L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3187441012011307
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(3058L, 2147483664L);
      Range range1 = Range.of(2158L, 4294967272L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.5885043822923244
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1 .. 1 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 3713L, 3713L);
      boolean boolean0 = range0.startsBefore(range1);
      boolean boolean1 = range2.equals(range0);
      assertFalse(boolean1);
      
      boolean boolean2 = range3.intersects(range1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.6318970936269914
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(65557L, 65557L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.076021389574272
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-365L));
      Range range1 = Range.of(1726L);
      range0.endsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2670942167452757
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(125L, 2061L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.314256934772029
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4935863508072096
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(1L);
      boolean boolean0 = range0.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      List<Range> list0 = range0.complement(range0);
      boolean boolean1 = range0.equals(list0);
      assertEquals(0, list0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.equals(")TR$kb):;7y1HfG");
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1859L, 1859L);
      Range range1 = Range.ofLength(255L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.63290354235402
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(2147483648L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = Range.of(range_CoordinateSystem0, 2147483648L, 2147483647L);
      range2.intersection(range1);
      Range range3 = Range.of(2147483648L);
      range2.intersects(range0);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      //  // Unstable assertion: assertTrue(range0.equals((Object)range3));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.of(401L, 4294967302L);
      Long long0 = new Long(401L);
      assertEquals(401L, (long)long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.1196712799737276
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Long long0 = new Long(65535L);
      Range range1 = Range.of(65535L);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2035456965977054
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(161L, 161L);
      String string0 = range0.toString();
      assertEquals("[ 161 .. 161 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 161 .. 161 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3856988606999034
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("^?uVn!4,61Hh}KD9 ", range_CoordinateSystem0);
      range1.spliterator();
      range1.asRange();
      long long0 = 2987L;
      // Undeclared exception!
      try { 
        Range.of(2987L, 1421L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-3L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.44740329808857
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.4420915613260648
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(736L);
      Object object0 = new Object();
      range0.equals(object0);
      List<Range> list0 = range0.split(736L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.1421092206222596
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.of(58L);
      Range range0 = Range.of(58L);
      long long0 = range0.getBegin();
      assertEquals(58L, long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.5470429317864016
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-1720L), 2260L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.269731579382638
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(2147483664L);
      Range range1 = Range.ofLength(2147483664L);
      List<Range> list0 = range0.split(2147483664L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Range range2 = Range.of(2147483664L, 2147483664L);
      range1.equals(range0);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.4427667383637646
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      List<Range> list1 = range0.split(1L);
      assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.split(9223372036854775807L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.2028955619269524
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(92L);
      Range range1 = Range.of(4294967297L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.6336760341109677
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range.ofLength((long) long0);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.20490554701416
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder0.expandBegin(9223372036854775807L);
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      range2.getLength();
      range1.startsBefore(range2);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3486L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder0.expandEnd(65535L);
      assertSame(range_Builder3, range_Builder1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(2147483639L);
      Long long0 = new Long(2147483664L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.2227634799363307
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-128L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.058620243537487
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-7L));
      Range range1 = Range.of((-7L), (-7L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.expandEnd(65535L);
      // Undeclared exception!
      try { 
        Range.of(65535L, 9L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.40640935807259
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(317L, 2434L);
      range_Builder0.contractBegin((-1182L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.of(1661L, 1661L);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1661L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.606253777185925
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      //  // Unstable assertion: assertSame(range0, range2);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.2739199337628127
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(9223372036854775776L);
      range0.getEnd();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(448L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(448L, long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.545392486344893
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L, 9223372036854775785L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.794892785301738
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. -9223372036854775808 ]/SB", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.3884109735824395
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(448L, 448L);
      Range range1 = Range.of(448L, 448L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = new Object();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9987L, 9987L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(2147483664L, 2147483664L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-32768L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.3992274483023697
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-1674L));
      long long0 = range0.getEnd();
      assertEquals((-1674L), long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.694854985095141
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range2 = range1.intersection(range0);
      range2.getEnd();
      Range range3 = Range.of(0L);
      range1.startsBefore(range3);
      Range range4 = Range.of(1L);
      range3.equals(range4);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.511795418810849
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 4294967295L);
      long long0 = range0.getLength();
      assertEquals(6442450944L, long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.441765182374996
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.2700286917069685
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967295 .. 4294967296 ]/SB", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1470823338168756
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(9223372036854775776L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854775777L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1890760075458306
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -32767 .. -32767 ]/RB", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(682L);
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-3208L), (-3208L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-3208L), long0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1706L);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 408L, (-2147483649L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.1396664047217486
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(161L);
      String string0 = range0.toString();
      assertEquals("[ 161 .. 161 ]/0B", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-882L), (-882L));
      long long0 = range0.getBegin();
      assertEquals((-883L), long0);
      
      Range range1 = Range.of((-882L), (-883L));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range range0 = Range.ofLength(32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(32871L);
      Range range1 = Range.ofLength(32871L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(255L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.0840133560770506
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483664L);
      Range range0 = Range.ofLength(2147483664L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of((-2147483653L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.3852171187209072
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(65535L);
      range_Builder1.expandEnd(65535L);
      Range range1 = Range.of((-763L), 65535L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L, 127L);
      range_Builder0.expandBegin(127L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.2662596083157305
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.893390768293866
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2L, long0);
      
      Range range1 = range0.intersection(range0);
      range_CoordinateSystem0.getAbbreviatedName();
      range0.equals("SB");
      assertFalse(range0.isEmpty());
      assertSame(range0, range1);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.3268842301321655
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.2622243017037382
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L, 127L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.4841991774853796
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(range0.equals((Object)range2));
      //  // Unstable assertion: assertFalse(range1.equals((Object)range2));
      //  // Unstable assertion: assertNotSame(range0, range2);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.4760313720298903
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      List<Range> list0 = range1.split(2147483647L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range2 = Range.of((-9223372036854775296L), (-1561L));
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertSame(range0, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.150256936991479
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of(2147483664L, 2147483664L);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.ofLength(2147483664L);
      Range range1 = Range.of(2147483664L, 2147483664L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of(1663L, 1663L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.3605385140248165
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.ofLength(65578L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of((-967L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(65535L, 368L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
