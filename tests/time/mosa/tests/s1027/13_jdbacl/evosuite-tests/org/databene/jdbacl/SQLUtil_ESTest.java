/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 11:07:17 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6nf");
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "6nf";
      stringArray0[2] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("6nf", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, 336789529, "select into");
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1810885240883677
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized viAw/wtnm^qm<,@s'jh@");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materialized viAw/wtnm^qm<,@s'jh@";
      stringArray0[1] = " ";
      stringArray0[2] = "alter materialized viAw/wtnm^qm<,@s'jh@";
      stringArray0[3] = "alter materialized viAw/wtnm^qm<,@s'jh@";
      stringArray0[4] = "alter materialized viAw/wtnm^qm<,@s'jh@";
      String string0 = SQLUtil.join("alter materialized viAw/wtnm^qm<,@s'jh@", "alter materialized viAw/wtnm^qm<,@s'jh@", stringArray0, "Unknown constraint type: ", "alter materialized viAw/wtnm^qm<,@s'jh@", stringArray0);
      assertEquals("alter materialized viAw/wtnm^qm<,@s'jh@ join Unknown constraint type:  as alter materialized viAw/wtnm^qm<,@s'jh@ on alter materialized viAw/wtnm^qm<,@s'jh@.alter materialized viAw/wtnm^qm<,@s'jh@ = alter materialized viAw/wtnm^qm<,@s'jh@.alter materialized viAw/wtnm^qm<,@s'jh@ and alter materialized viAw/wtnm^qm<,@s'jh@.  = alter materialized viAw/wtnm^qm<,@s'jh@.  and alter materialized viAw/wtnm^qm<,@s'jh@.alter materialized viAw/wtnm^qm<,@s'jh@ = alter materialized viAw/wtnm^qm<,@s'jh@.alter materialized viAw/wtnm^qm<,@s'jh@ and alter materialized viAw/wtnm^qm<,@s'jh@.alter materialized viAw/wtnm^qm<,@s'jh@ = alter materialized viAw/wtnm^qm<,@s'jh@.alter materialized viAw/wtnm^qm<,@s'jh@ and alter materialized viAw/wtnm^qm<,@s'jh@.alter materialized viAw/wtnm^qm<,@s'jh@ = alter materialized viAw/wtnm^qm<,@s'jh@.alter materialized viAw/wtnm^qm<,@s'jh@", string0);
      
      String string1 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = (-97132113);
      DBDataType dBDataType0 = DBDataType.getInstance((-97132113), "=TABLETYPES");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=TABLETYPES", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("=TABLETYPES", defaultDBTable0, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      defaultDBColumn0.setNullable(false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = "executeselect rdb$procedure_5ame as qrocedure_name, rdb$description as remarks, rdb$procedure_outputs as procedure_type from rdb$procedures where";
      String string1 = "#P ";
      MockFile mockFile0 = new MockFile("#P ", "=TABLETYPES");
      File file0 = MockFile.createTempFile("executeselect rdb$procedure_5ame as qrocedure_name, rdb$description as remarks, rdb$procedure_outputs as procedure_type from rdb$procedures where", "=TABLETYPES, =TABLETYPES", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "executeselect rdb$procedure_5ame as qrocedure_name, rdb$description as remarks, rdb$procedure_outputs as procedure_type from rdb$procedures where");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-97132113));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-97132113), "=TABLETYPES");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=TABLETYPES", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("=TABLETYPES", defaultDBTable0, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "=TABLETYPES", true, "=TABLETYPES");
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("=TABLETYPES NOT NULL", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-97132113), "=TABLETYPES");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("=TABLETYPES", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("=TABLETYPES", defaultDBTable0, dBDataType0);
      defaultDBColumn1.setDefaultValue("rename");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("#P ", "=TABLETYPES");
      File file0 = MockFile.createTempFile("executeselect rdb$procedure_5ame as qrocedure_name, rdb$description as remarks, rdb$procedure_outputs as procedure_type from rdb$procedures where", "=TABLETYPES, =TABLETYPES", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "executeselect rdb$procedure_5ame as qrocedure_name, rdb$description as remarks, rdb$procedure_outputs as procedure_type from rdb$procedures where");
      Locale locale0 = Locale.JAPANESE;
      printWriter0.format(locale0, "rename", (Object[]) dBColumnArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cann");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "cann";
      stringArray0[1] = "cann";
      stringArray0[2] = "cann";
      stringArray0[3] = "cann";
      stringArray0[4] = "cann";
      stringArray0[5] = "cann";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("cann", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cann");
      PrintWriter printWriter0 = mockPrintWriter0.format("cann", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals("cann", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-97132113), "{SHh=BF*");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("execalterttubl", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      MockFile mockFile0 = new MockFile("{SHh=BF*", "SQL type for this field is not yet supported.");
      File file0 = MockFile.createTempFile(".EbWQe@}C^@9j'Zk=\"", "execal", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "execal");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4702731126890676
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder(2322);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select", true, defaultDBTable0, "select");
      dBCheckConstraint0.equals((Object) null);
      dBCheckConstraint0.setName((String) null);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "inner";
      stringArray0[1] = "create table";
      stringArray0[3] = "create table";
      stringArray0[4] = "create table";
      stringArray0[5] = "create table";
      String string0 = SQLUtil.join("inner", "inner", stringArray0, "inner", stringArray0[2], stringArray0);
      assertEquals("inner as null on inner.inner = null.inner and inner.create table = null.create table and inner.null = null.null and inner.create table = null.create table and inner.create table = null.create table and inner.create table = null.create table", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop materialized viewp=axug#}8";
      String string0 = SQLUtil.join("drop materialized viewp=axug#}8", "drop materialized viewp=axug#}8", stringArray0, "drop materialized viewp=axug#}8", "}Ef\"$T@:}MquV", stringArray0);
      assertEquals("drop materialized viewp=axug#}8 join drop materialized viewp=axug#}8 as }Ef\"$T@:}MquV on drop materialized viewp=axug#}8.drop materialized viewp=axug#}8 = }Ef\"$T@:}MquV.drop materialized viewp=axug#}8", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewp=axug#}8");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("}Ef\"$T@:}MquV", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT }Ef\"$T@:}MquV FOREIGN KEY (drop materialized viewp=axug#}8) REFERENCES drop materialized viewp=axug#}8(drop materialized viewp=axug#}8)", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6603631172353484
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("BXGa3%z!*WQ");
      assertNull(boolean0);
      
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      String string0 = SQLUtil.substituteMarkers("JJ3", "JJ3", stringBuilder0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "JJ3";
      stringArray0[1] = "";
      stringArray0[2] = "JJ3";
      stringArray0[3] = "JJ3";
      stringArray0[4] = "JJ3";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(JJ3, , JJ3, JJ3, JJ3)", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.359005762630872
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = SQLUtil.renderValue(" DEFAULT ");
      assertEquals("' DEFAULT '", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" DEFAULT ", false, " DEFAULT ", "' DEFAULT '");
      SQLUtil.removeComments("' DEFAULT '");
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \" DEFAULT \" ", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance((-444471321), "SELECT * FROM ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C2|{[wzhw=UVQ:&+R5$", (DBTable) null, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("C2|{[wzhw=UVQ:&+R5$", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      TableContainer tableContainer0 = new TableContainer("truncate=8_i !au|li v<s@,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(720, "^xJ5");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("HQ44", defaultDBTable0, dBDataType0, integer1, (Integer) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("^XJ5(1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.join("exec=", "qYcc<Z1A", stringArray0, "exec=", "qYcc<Z1A", stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[1] = "exec= join exec= as qYcc<Z1A on qYcc<Z1A.null = qYcc<Z1A.null and qYcc<Z1A.null = qYcc<Z1A.null";
      stringArray1[2] = "exec= join exec= as qYcc<Z1A on qYcc<Z1A.null = qYcc<Z1A.null and qYcc<Z1A.null = qYcc<Z1A.null";
      stringArray1[3] = "exec= join exec= as qYcc<Z1A on qYcc<Z1A.null = qYcc<Z1A.null and qYcc<Z1A.null = qYcc<Z1A.null";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("exec=", stringArray1, "drop index", "exec= join exec= as qYcc<Z1A on qYcc<Z1A.null = qYcc<Z1A.null and qYcc<Z1A.null = qYcc<Z1A.null", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder("truncat");
      SQLUtil.addRequiredCondition("truncat", stringBuilder0);
      DBSequence dBSequence0 = new DBSequence("execalter materialized viaw/wtnm^!qm<,@s'jh@", (String) null, "*G!");
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("truncat and truncat", stringBuilder0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLUtil.isProcedureCall("call\"");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.593071960830989
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder(23001);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getComponents();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("[/v", true, defaultDBTable1, "TABLETYPES");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("TABLETYPES");
      assertNull(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.normalize("REVOKE role", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter tableexists", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      columnDescriptorList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLUtil.isDDL("R6as!4*K");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[4];
      SQLUtil.leftJoin("exec", stringArray0, "create tabler6as!4*k", "exec", stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "R6as!4*K", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("R6as!4*K");
      SQLUtil.addRequiredCondition("R6as!4*K", stringBuilder0);
      DBSequence dBSequence0 = new DBSequence("create materialized view", "R6as!4*K", " QS'_cuo");
      SQLUtil.ownerDotComponent(dBSequence0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DataStore dataStore0 = new DataStore(" NULL");
      VirtualFile virtualFile0 = new VirtualFile("R6as!4*K", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.format(" DEFAULT ", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("NR~mAS#-*CqApW)", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NR~mAS#-*CqApW)");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NR~mAS#-*CqApW)", defaultDBTable0, (-94936256), "NR~mAS#-*CqApW)");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("NR~mAS#-*CqApW)NR~MAS#-*CQAPW)", stringBuilder1.toString());
      assertEquals("NR~mAS#-*CqApW)NR~MAS#-*CQAPW)", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execalter materialized viaw/wtnm^!qm<,@s'jh@", false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder(5);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.delete(5, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.402886181440778
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLUtil.isProcedureCall("select");
      StringBuilder stringBuilder0 = new StringBuilder(2331);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select", false, defaultDBTable0, "select");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      TableContainer tableContainer0 = new TableContainer("Syntax erro after ");
      assertEquals("container", tableContainer0.getObjectType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3729499867192074
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder(2331);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select", true, defaultDBTable0, "select");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT select ", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "delete";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "delete";
      stringArray1[1] = "delete";
      stringArray1[2] = "fD@aBc0(M?r";
      String string0 = SQLUtil.innerJoin("delete", stringArray0, "delete", "delete", stringArray1);
      assertEquals("delete as delete on delete.delete = delete.delete", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLUtil.isQuery("select");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select  RDB$PROCEDURE_5AME as qROCEDURE_NAME, RDB$DESCRIPTION as REMARKS, RDB$PROCEDURE_OUTPUTS as PROCEDURE_TYPE from RDB$PROCEDURES where ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alterttubl");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("update");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SQLUtil.removeComments("/*");
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[1]);
      StringBuilder stringBuilder0 = new StringBuilder();
      System.setCurrentTimeMillis(0L);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "acos(double)", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT acos(double) ", stringBuilder0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("TABLETYPES");
      String string0 = "g:\\(;S>a:";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("TABLETYPES", false, "g:(;S>a:", "TABLETYPES");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = SQLUtil.isProcedureCall("S6;L<yd<sdk0L/uR=y");
      assertFalse(boolean0);
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = SQLUtil.normalize("H^m1#H.>{*(6", false);
      assertEquals("H ^ m1 # H.> { * (6", string0);
      
      String string1 = SQLUtil.renderValue("S6;L<yd<sdk0L/uR=y");
      assertEquals("'S6;L<yd<sdk0L/uR=y'", string1);
      
      VersionNumber.valueOf("H^m1#H.>{*(6");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("'S6;L<yd<sdk0L/uR=y'", compositeDBObject0);
      tableContainer0.getTable("setBinaryStream(String, InputStream)");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-17), "SysschemasIndex1Identifier");
      DBDataType.getInstance((-17), "H ^ m1 # H.> { * (6");
      Integer integer0 = RawTransaction.ABORT;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "alter materialized viAw/wtnm^qm<,@s'jh@";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("KzT77H[Bw*Z()cB", (DBTable) null, (-583), "KzT77H[Bw*Z()cB");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updaTe/owI(int, RowId)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec,w$<;/#mi");
      assertNull(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4801213348501356
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "upS%6Oe$(X-_|R}", stringArray0);
      SQLUtil.isDML(".");
      SQLUtil.mutatesStructure("null as upS%6Oe$(X-_|R} on ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[3];
      stringArray1[0] = null;
      stringArray1[1] = "null as upS%6Oe$(X-_|R} on ";
      stringArray1[2] = "upS%6Oe$(X-_|R}";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("\u0001\u01B4", (String[]) null, "\u0001\u01B4", "\u0001\u01B4", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5108045110385615
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "BjA{+LcEufm~mvRaj'");
      SQLUtil.mutatesDataOrStructure("llterttubl");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "BjA{+LcEufm~mvRaj'";
      stringArray0[2] = "llterttubl";
      stringArray0[3] = "llterttubl";
      stringArray0[4] = "BjA{+LcEufm~mvRaj'";
      stringArray0[5] = "llterttubl";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "llterttubl";
      stringArray1[1] = "#Y)ny[TTt";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("llterttubl", stringArray0, "#Y)ny[TTt", "llterttubl", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "RxerK";
      // Undeclared exception!
      try { 
        SQLUtil.join("RxerK", "RxerK", stringArray0, "RxerK", "RxerK", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLUtil.isDML("alter index80220011-010c-bc85-060d-000000109ab8");
      SQLUtil.isDML("alter index80220011-010c-bc85-060d-000000109ab8");
      System.setCurrentTimeMillis(497L);
      VersionNumber versionNumber0 = VersionNumber.valueOf("alter index80220011-010c-bc85-060d-000000109ab8");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("?GE_5.&2", "alter index80220011-010c-bc85-060d-000000109ab8", versionNumber0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, 265, "");
      DBDataType.getInstance(265, "sM");
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      jdbcConnectionPool0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(" = ", compositeDBObject0);
      tableContainer0.getTable(" = ");
      DBDataType dBDataType0 = DBDataType.getInstance(46, " = ");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" = ", (DBTable) null, dBDataType0, integer0, integer2);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(" = (1,3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "5VE~7a0K-7z5w<pK<'";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("5VE~7a0K-7z5w<pK<'", (DBTable) null, 64, "(\"&#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (\"&#
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(";p(9l<:2&?f/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ;p(9l<:2&?f/
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLUtil.isQuery("select");
      // Undeclared exception!
      try { 
        SQLUtil.join("select", "select", (String[]) null, "select", "select", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("G/y@W?^-7NvDYZVi]");
      assertNull(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("G/y@W?^-7NvDYZVi]", (DBTable) null, 2042, "G/y@W?^-7NvDYZVi]");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("G/Y@W?^-7NVDYZVI]", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = SQLUtil.normalize("SZ)Lbj|wU.L5*!8", false);
      assertEquals("SZ) Lbj | wU.L5 * ! 8", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("alter materialized viAw/wtnm^!qm<,@s'jh@", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3654597361104446
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u0001\u01B4";
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("\u0001\u01B4", stringArray0, "6,%|6ILC,-!Y}pto=", "\u0001\u01B4", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "h1");
      String string0 = SQLUtil.renderValue("p\u01B4");
      String string1 = SQLUtil.removeComments("");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLUtil.removeComments("alter matriqVized viaw/");
      DBPackage dBPackage0 = new DBPackage("", (DBSchema) null);
      DBProcedure dBProcedure0 = new DBProcedure("hd'#", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("cann");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter index80220011-010c-bc85-060d-000000109ab8");
      boolean boolean1 = SQLUtil.isDML("alter index80220011-010c-bc85-060d-000000109ab8");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = SQLUtil.normalize("lDJR?;,?&YZ\"", false);
      assertEquals(" lDJR ? ;, ? & YZ \"\"", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName(" and ", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("EYgBkh6S-stjaQ", "_vJGl)9-aF", "_vJGl)9-aF");
      assertEquals("EYgBkh6S-stjaQ", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updateRowId(int, RowId)", (DBTable) null, (-444), "Vo");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = Character.valueOf('A');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'A'", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7091199915606667
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      boolean boolean0 = SQLUtil.isQuery("reserve ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "table null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = SQLUtil.renderValue(".DEFULT ");
      assertEquals("'.DEFULT '", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(".DEFULT ", false, ".DEFULT ", "'.DEFULT '");
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \".DEFULT \" ", string1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean.valueOf("SYSCONSTRAINTS");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(318, "?aOh$7-");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null ?AOH$7-(0,0) NULL", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance((-512), "w>EZ1x,IuD sE7-");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w>EZ1x,IuD sE7-", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("w>EZ1x,IuD sE7- W>EZ1X,IUD SE7-(1) NULL", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("truncate<(r#h<n,");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("s/aaT >Wk],i,:kl*@*", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create materialized viewtabletypes");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableexecute");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        SQLUtil.join("RxerK", "RxerK", stringArray0, "RxerK", "RxerK", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = SQLUtil.normalize("<N1j.(3", true);
      assertEquals("< N1j.(3", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = SQLUtil.normalize("callalter materialized viaw/wtnm^!qm<,@s'jh@", true);
      assertEquals("callalter materialized viaw / wtnm ^ ! qm <, @ s 'jh@'", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viAw/wtnm^!qm<,@s'jh@", (DBTable) null, 336789529, "alter materialized viAw/wtnm^!qm<,@s'jh@");
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("alter materialized viAw/wtnm^!qm<,@s'jh@ : ALTER MATERIALIZED VIAW/WTNM^!QM<,@S'JH@", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("exec", true, "exec", "exec");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT exec ", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK exec", string1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("LOWER", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("H^m14.U*(5`6");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema H^m14.U*(5`6", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-@U2<1 |OT@gu6_}8h";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-@U2<1 |OT@gu6_}8h", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"-@U2<1 |OT@gu6_}8h\" PRIMARY KEY (-@U2<1 |OT@gu6_}8h)", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0863987732327742
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = SQLUtil.normalize("8XQ-+pSX", false);
      assertEquals("8XQ - + pSX", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8XQ-+pSX");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("D^.m5N\"Hg=iS[");
      String[] stringArray0 = new String[18];
      stringArray0[0] = "select  RDB$PROCEDURE_5AME as qROCEDURE_NAME, RDB$DESCRIPTION as REMARKS, RDB$PROCEDURE_OUTPUTS as PROCEDURE_TYPE from RDB$PROCEDURES where ";
      stringArray0[13] = "D^.m5N\"Hg=iS[";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select  RDB$PROCEDURE_5AME as qROCEDURE_NAME, RDB$DESCRIPTION as REMARKS, RDB$PROCEDURE_OUTPUTS as PROCEDURE_TYPE from RDB$PROCEDURES where ", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"select  RDB$PROCEDURE_5AME as qROCEDURE_NAME, RDB$DESCRIPTION as REMARKS, RDB$PROCEDURE_OUTPUTS as PROCEDURE_TYPE from RDB$PROCEDURES where \" PRIMARY KEY (select  RDB$PROCEDURE_5AME as qROCEDURE_NAME, RDB$DESCRIPTION as REMARKS, RDB$PROCEDURE_OUTPUTS as PROCEDURE_TYPE from RDB$PROCEDURES where , , , , , , , , , , , , , D^.m5N\"Hg=iS[, , , , )", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, (-130268870), "CLOB");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("CLOB CLOB NULL", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "8EcA8A");
      SQLUtil.addOptionalCondition("8EcA8A", stringBuilder0);
      assertEquals("8EcA8A or 8EcA8A", stringBuilder0.toString());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("alter materialized viAw/wtnm^!qm<,@s'jh@", stringBuilder0);
      assertEquals("alter materialized viAw/wtnm^!qm<,@s'jh@", stringBuilder0.toString());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized viAw/wtnm^qm<,@s'jh@");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = Boolean.valueOf((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin(stringArray0[0], stringArray0, stringArray0[1], "8XQ-+p4X", stringArray0);
      assertEquals("null as 8XQ-+p4X on null.null = 8XQ-+p4X.null and null.null = 8XQ-+p4X.null", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("}sH1!oo49Dlg9+Ty9J", stringArray0);
      assertEquals("}sH1!oo49Dlg9+Ty9J.null, }sH1!oo49Dlg9+Ty9J.null", string1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[15];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.innerJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = SQLUtil.normalize("c013800d-00fb-2647-07ec-000000134f30", true);
      assertEquals("c013800d - 00fb - 2647 - 07ec - 000000134f30", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("WG#wMi'");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "WG#wMi'", jMXPrincipal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join(";", ";", stringArray0, "0cCD", ";", stringArray0);
      assertEquals("; join 0cCD as ; on ;.null = ;.null", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("org.firebirdsql.jdbc.field.FBLongVarCharField", (String[]) null, "org.firebirdsql.jdbc.field.FBLongVarCharField", "EXCEPT", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("drop materialized viewalter ableexecute", stringArray0, "syscs_im", "A[!Hexy", stringArray0);
      assertEquals("left join syscs_im as A[!Hexy on ", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8XQ-+p4X";
      String string0 = SQLUtil.innerJoin("8XQ-+p4X", stringArray0, stringArray0[1], "8XQ-+p4X", stringArray0);
      assertEquals("null as 8XQ-+p4X on 8XQ-+p4X.8XQ-+p4X = 8XQ-+p4X.8XQ-+p4X and 8XQ-+p4X.null = 8XQ-+p4X.null", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog(stringArray0[1]);
      String string1 = SQLUtil.join("LP_*o", "LP_*o", stringArray0, "LP_*o", "8XQ-+p4X", stringArray0);
      assertEquals("LP_*o join LP_*o as 8XQ-+p4X on LP_*o.8XQ-+p4X = 8XQ-+p4X.8XQ-+p4X and LP_*o.null = 8XQ-+p4X.null", string1);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("8XQ-+p4X", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string2 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 8XQ-+p4X FOREIGN KEY (8XQ-+p4X, ) REFERENCES null(8XQ-+p4X, )", string2);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("CompiledStatementExecutor.executeImpl()");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!c|R~$mU{}0?KkfU/sT1");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "!c|R~$mU{}0?KkfU/sT1", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT !c|R~$mU{}0?KkfU/sT1 UNIQUE ()", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("exec", true, "exec", "exec");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT exec ", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT exec ", stringBuilder0.toString());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("alter table");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter table");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.normalize("", false);
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.renderValue(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT  FOREIGN KEY () REFERENCES alter table()", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[8];
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized viAw/wtnm^!qm<,@s'jh@");
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("%[sY");
      assertEquals(1, objectArray0.length);
  }
}
