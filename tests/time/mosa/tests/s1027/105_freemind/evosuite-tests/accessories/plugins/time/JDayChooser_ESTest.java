/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 10:51:34 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Date;
import java.util.Locale;
import java.util.Stack;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JFormattedTextField;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.JTextComponent;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.css.parser.Parser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.205652786454007
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBorderSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setMonth((-2443));
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8016776519777116
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 40, 40, 40, 'G');
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser1.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.142594069758184
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.updateUI();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.177217605772988
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0966040333564617
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAutoscrolls(true);
      JButton[] jButtonArray0 = new JButton[1];
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jButtonArray0[0] = (JButton) jDayChooser_DecoratorButton0;
      jDayChooser0.weeks = jButtonArray0;
      Color color0 = Color.getHSBColor(100, (-709.107F), 654.35F);
      // Undeclared exception!
      try { 
        jDayChooser0.setForeground(color0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.577674757227539
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(1086);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8009128521913698
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 35, 35, 'C');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.151003002680045
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.weeks = null;
      Font.decode("day");
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth((-1273));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1689), (-1689), (-1689), 37, '6');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.896090218646746
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2069166546193513
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      System.setCurrentTimeMillis((-3698L));
      jDayChooser0.getDecorationBackgroundColor();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory();
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField(defaultFormatterFactory0, metalToolBarUI0);
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jFormattedTextField0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getTextBounds(3771, 2654);
      Rectangle rectangle0 = null;
      try {
        rectangle0 = new Rectangle((Rectangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Rectangle", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8017094362514885
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setForeground(color0);
      assertEquals((-2956050), color0.getRGB());
      
      jDayChooser0.setFocus();
      Date date0 = jDayChooser1.maxSelectableDate;
      Date date1 = jDayChooser1.setMinSelectableDate(date0);
      jDayChooser1.setSelectableDateRange((Date) null, date1);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(100);
      LocalDate localDate0 = MockLocalDate.ofYearDay(13, 13);
      java.sql.Date date0 = java.sql.Date.valueOf(localDate0);
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6956472902699735
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(1453);
      jDayChooser0.updateUI();
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.forLanguageTag("day");
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(100);
      jDayChooser0.setMonth(100);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.696313830523833
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1287753249064387
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setDay(230);
      jDayChooser0.setMonth(230);
      jDayChooser0.drawWeeks();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-1680));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2019), (-2019), (-2019), (-2019), 't');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(100);
      MockDate mockDate0 = new MockDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Stack<String> stack0 = new Stack<String>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(stack0, stack0);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, 9978, "POO2^");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6090497473625858
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-2258));
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null, jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.800923963425939
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.setYear(100);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      Color color0 = Color.PINK;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096711151984391
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setForeground(systemColor0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8016776519777116
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "day";
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8832, 8832, 405, 405, 'm');
      keyEvent0.consume();
      KeyEvent.getKeyModifiersText(405);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      jDayChooser1.setDayBordersVisible(false);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy(stringArray0[2], vetoableChangeListener0);
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.selectedColor;
      jDayChooser0.setForeground(color0);
      assertEquals((-6250336), color0.getRGB());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.096688477532829
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverIcon();
      jDayChooser_DecoratorButton0.getInsets();
      jDayChooser_DecoratorButton0.isFocusable();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      // Undeclared exception!
      try { 
        defaultTreeCellRenderer0.setVerticalTextPosition(979);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // verticalTextPosition
         //
         verifyException("javax.swing.JLabel", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2401873239899905
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#}Y4?1XjmK");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(42);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.initDecorations();
      System.setCurrentTimeMillis(1759L);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(695);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      int int0 = 2;
      jDayChooser0.addListeners(2);
      int int1 = (-1977);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1977));
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      int int2 = 9660;
      Color color0 = new Color(9660);
      int int3 = (-3001);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      color0.getRGBComponents(floatArray0);
      floatArray0[1] = (-178.878F);
      try { 
        ICC_Profile.getInstance("org.apache.xpath.functions.FuncStartsWith");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot open file org.apache.xpath.functions.FuncStartsWith
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.800934927977544
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setMonth(100);
      jDayChooser0.setMonth(100);
      Font font0 = new Font("R(7,y O", 1785, 100);
      jDayChooser0.setFont(font0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Point point0 = new Point(2600, 2600);
      jDayChooser0.getLocation(point0);
      jDayChooser0.setBounds(2600, 2600, 0, 2600);
      jDayChooser0.getSelectedDay();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'R');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getBackground();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setMaxDayCharacters(21);
      Boolean.valueOf("WG_NO_DECIMALFORMAT\"DECLARATION");
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.133742703431037
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.init();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 637, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.orange;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      assertEquals(128, systemColor0.getGreen());
  }
}
