/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 11:08:54 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8747271283845204
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("S<Du?", (Object) "S<Du?");
      try { 
        jSONObject1.getBoolean("S<Du?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"S<Du?\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      Object object0 = new Object();
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "getsplit";
      stringArray0[1] = "getsplit";
      stringArray0[2] = "getsplit";
      stringArray0[3] = "getsplit";
      stringArray0[4] = "getsplit";
      stringArray0[5] = "getsplit";
      stringArray0[6] = "getsplit";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("lo", (Object) "p");
      jSONObject1.optBoolean("x!TGPi8 </cEC");
      JSONObject jSONObject2 = jSONObject1.append("getsplit", (Object) null);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3940707815836118
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("F]HM.Fz{x]?/", (Object) jSONArray0);
      JSONObject jSONObject2 = jSONObject1.put("_?5P?(`]", (Map) hashMap0);
      jSONObject1.toString(13, (-1799));
      JSONObject.quote("JD/m");
      JSONArray jSONArray1 = jSONObject2.getJSONArray("F]HM.Fz{x]?/");
      assertSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.469549264037227
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-2929));
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        JSONObject.valueToString(double0, (-2929), 3091);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{q>%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {q>%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[@#3Jl`^`Jh'PwI{OC", 0.0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject1.accumulate("[@#3Jl`^`Jh'PwI{OC", jSONArray0);
      jSONObject1.getJSONArray("[@#3Jl`^`Jh'PwI{OC");
      JSONArray jSONArray2 = jSONObject1.optJSONArray("[@#3Jl`^`Jh'PwI{OC");
      assertNotNull(jSONArray2);
      assertEquals(2, jSONArray2.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3224666791876494
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.removeFirstOccurrence(jSONArray0);
      jSONArray0.put(75, (Collection) linkedList0);
      jSONArray0.toString(62);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 75, 628);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.720174537456256
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Double double0 = Double.valueOf((-2323.494829984));
      JSONObject jSONObject2 = jSONObject0.put("lJd!cN.SQdwbM/h8]H", (Object) double0);
      jSONObject2.getLong("lJd!cN.SQdwbM/h8]H");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      jSONObject2.put("paV", (Map) hashMap0);
      jSONObject0.toString((-286), (-286));
      String string0 = JSONObject.quote("paV");
      assertEquals("\"paV\"", string0);
      
      long long0 = jSONObject1.optLong("ha");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2394611692523752
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "isreverseBytes");
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      Double double0 = new Double(1215.39723335);
      JSONObject jSONObject3 = jSONObject2.append("isreverseBytes", double0);
      jSONObject3.accumulate("isreverseBytes", jSONObject0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9980262329715759
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F]HM.az{x]?/", 3638);
      Float.max(3638, 3638);
      JSONObject jSONObject2 = jSONObject0.accumulate("F]HM.az{x]?/", jSONObject1);
      Boolean boolean0 = new Boolean(false);
      jSONObject2.append("F]HM.az{x]?/", boolean0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getBoolean("F]HM.az{x]?/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F]HM.az{x]?/\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9673917912964267
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("[@#3Jl`^`Jh'PwI{OC", 0.0);
      jSONObject2.getDouble("[@#3Jl`^`Jh'PwI{OC");
      try { 
        jSONObject0.getJSONArray("[@#3Jl`^`Jh'PwI{OC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[@#3Jl`^`Jh'PwI{OC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.334724097060483
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getsplit", (Object) "getsplit");
      boolean boolean0 = jSONObject0.optBoolean("getsplit");
      assertFalse(boolean0);
      
      Long long0 = new Long(2116L);
      JSONObject.numberToString(long0);
      boolean boolean1 = jSONObject0.has("getsplit");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.54746333538558
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F]HM.az{x]?/", 3638);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject2 = jSONObject1.put("NIPrw?|ge4H[4r@?*i", (Collection) linkedList0);
      jSONObject1.names();
      JSONArray jSONArray0 = jSONObject2.optJSONArray("NIPrw?|ge4H[4r@?*i");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2756304369699905
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Integer integer0 = null;
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute((Integer) null, biFunction0);
      hashMap0.put((Integer) null, (Double) null);
      Double.isFinite(0.0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Integer) null, (Double) null);
      jSONObject0.optBoolean("toS");
      jSONObject0.optJSONArray((String) null);
      jSONObject0.toString();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4758351732438504
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "yr#?V0SA";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      hashMap0.put((Boolean) null, jSONArray0);
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject1.getInt("yr#?V0SA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"yr#?V0SA\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7822881003672664
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 120);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(jSONObject1, 120, 87);
      jSONObject1.optInt(" ;E");
      String string0 = jSONObject0.optString("u;x=>5s<K{LRZ", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0843755238125627
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F]HM.az{x]?/", 3638);
      jSONObject1.optDouble("F]HM.az{x]?/");
      JSONObject.quote("F]HM.az{x]?/");
      JSONObject.doubleToString(0.0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("F]HM.az{x]?/", (Collection) linkedList0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1180895882351156
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      JSONObject.getNames((Object) double0);
      jSONObject0.has("57$Sg%c&G/[3");
      try { 
        jSONObject0.putOpt("getcompare", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.849273740147575
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getsplit";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("getsplit", object0);
      try { 
        jSONObject1.getBoolean("getsplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsplit\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3046443781372403
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      jSONObject0.optString("", "");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2841657234944712
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("getsplit", object0);
      jSONObject0.optBoolean("getsplit");
      try { 
        jSONObject0.getDouble("getsplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsplit\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1092378324020875
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F]HM.az{x]?/", 3638);
      jSONObject0.getDouble("F]HM.az{x]?/");
      Float float0 = new Float((float) 3638);
      Float.max(3638, 773.5F);
      JSONObject jSONObject2 = jSONObject0.accumulate("getpush", jSONObject1);
      StringWriter stringWriter0 = new StringWriter(3638);
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "getpush";
      stringArray0[1] = "Expected a ',' or ']'";
      stringArray0[2] = "getpush";
      stringArray0[3] = "getpush";
      stringArray0[4] = "F]HM.az{x]?/";
      stringArray0[5] = "getpush";
      stringArray0[6] = "F]HM.az{x]?/";
      JSONObject jSONObject3 = new JSONObject(double0, stringArray0);
      jSONObject3.keys();
      jSONObject3.write(stringWriter0);
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Boolean> hashMap0 = new HashMap<Byte, Boolean>(298);
      jSONObject0.put(";RQ/O", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6495045944970208
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("nV!4;$?", (Collection) linkedList0);
      jSONObject1.toString(118, 118);
      StringWriter stringWriter0 = new StringWriter(118);
      jSONObject0.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8419745776615577
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("max", 9);
      JSONObject.valueToString(jSONObject0, (-32646308), 2648);
      boolean boolean0 = jSONObject0.optBoolean("max");
      assertFalse(boolean0);
      
      int int0 = jSONObject1.optInt("max");
      assertEquals(9, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("tr", object0);
      jSONObject1.optBoolean("tr");
      JSONObject jSONObject2 = jSONObject1.accumulate("tr", object0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8978107426074624
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      boolean boolean0 = jSONObject1.optBoolean("");
      boolean boolean1 = jSONObject1.isNull("");
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = JSONObject.getNames((Object) "");
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6977002150880063
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(58);
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("F]HM.az{x]?/", 58);
      jSONObject1.getInt("F]HM.az{x]?/");
      JSONObject jSONObject3 = jSONObject2.put("LU_iM", (Object) jSONObject0);
      jSONObject3.toString((-244), 13);
      jSONObject3.names();
      jSONObject3.keys();
      String string0 = "\\u";
      try { 
        jSONObject3.getJSONObject(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!Xede3d7@UH8(m", 59);
      double double0 = jSONObject0.optDouble("!Xede3d7@UH8(m", 321.3204373346);
      assertEquals(59.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3755987520833055
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isaccumulate", 92);
      jSONObject0.put("F]HM.az{x]?/", (Object) hashMap0);
      String string0 = jSONObject0.toString((-244), (-244));
      assertNotNull(string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8170275250586072
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("F]HM.az{x]?/", 99);
      jSONObject0.put("F]HM.az{x]?/", (Object) hashMap0);
      jSONObject0.toString(99, 99);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3342298951481277
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("y2MFNV9l=eGs6w", (Object) null);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.999933914749152
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Short short0 = new Short((short)0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("NY", (Map) hashMap0);
      jSONObject0.optJSONArray("&;Py%Mf)6rKjt7^");
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject1.toString();
      JSONObject jSONObject2 = jSONObject1.put("tWmPKZLkwL/X[gS", (int) (short)0);
      JSONObject.quote("tWmPKZLkwL/X[gS");
      jSONObject2.toString((int) (short)0, 2128);
      jSONObject1.getJSONObject("NY");
      jSONObject0.optBoolean(",\n");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "{\"java.lang.String@0000000007\":wheel.json.JSONObject@0000000006,\"java.lang.String@0000000004\":\"java.lang.Class@0000000005\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", 2128, (int) (short)0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("d'dL*$L5&g|3Q9y66", 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.85282740422466
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.quote("isformat");
      Float float0 = new Float(1.0F);
      JSONObject jSONObject2 = jSONObject1.accumulate("isformat", float0);
      jSONObject2.toString();
      jSONObject2.optLong("isformat");
      jSONObject1.put("isformat", (Object) "isformat");
      jSONObject0.opt("isformat");
      int int0 = 13;
      try { 
        jSONObject2.getLong("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.optBoolean("");
      JSONObject jSONObject2 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4763138503795772
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float((-28.863357421215245));
      JSONObject.doubleToString(0.0);
      Long long0 = new Long(2918L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put("0", (Object) long0);
      jSONObject1.getLong("0");
      jSONObject0.put("0", (Object) long0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4323966355417994
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ha", 0.0);
      jSONObject1.optLong("ha", (-271L));
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.optInt("ha");
      try { 
        jSONObject0.getJSONObject("se");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"se\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9608905407094879
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("#CHtH^;", "#CHtH^;");
      try { 
        jSONObject1.getInt("#CHtH^;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#CHtH^;\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4850318142616366
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getgetInteger");
      assertEquals(Double.NaN, double0, 0.01);
      
      Object object0 = JSONObject.NULL;
      jSONObject0.put("getsplit", object0);
      boolean boolean0 = jSONObject0.optBoolean("getsplit");
      assertFalse(boolean0);
      
      int int0 = jSONObject0.optInt("getsplit");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getsplit", (Object) jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("getsplit");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isfloatToRawIntBits", true);
      jSONObject0.optBoolean("isfloatToRawIntBits");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("F]HM.az{x]?/", 3638);
      double double0 = jSONObject0.getDouble("F]HM.az{x]?/");
      assertEquals(3638.0, double0, 0.01);
      
      Float float0 = new Float((float) 3638);
      String string0 = jSONObject0.optString("isquote");
      assertEquals("", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject.quote("");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float float0 = new Float(1272.55F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5398324517832704
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Object) "^d$");
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("?PSO=bhTS$t4EI=sJ~_", (Map) hashMap0);
      jSONObject1.toString();
      JSONObject.quote("wheel.json.JSONObject$Null");
      JSONObject.doubleToString(0.0);
      jSONObject1.optString("?PSO=bhTS$t4EI=sJ~_", "^d$");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1831617822460583
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] not found.", "] not found.");
      try { 
        jSONObject0.getLong("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3052012129933126
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject.doubleToString((-1071.61));
      JSONObject jSONObject0 = new JSONObject((Object) "-1071.61");
      try { 
        jSONObject0.getDouble("-1071.61");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-1071.61\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7243333624400137
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F]HM.az{x]?/", 3638);
      jSONObject0.getDouble("F]HM.az{x]?/");
      Float float0 = new Float((float) 3638);
      Float.max(3638, 773.5F);
      JSONObject jSONObject2 = jSONObject0.accumulate("getpush", jSONObject1);
      Boolean boolean0 = new Boolean(false);
      jSONObject2.put("getpush", (Object) boolean0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0);
      jSONObject3.optBoolean("!Jp6=m-`pI.C,Zo5B");
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-2899));
      jSONObject0.optJSONObject("JSON does not allw non-finite numbers.");
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7130415601881177
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("not", false);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      jSONObject0.put("", false);
      try { 
        jSONObject0.append("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.953093269754322
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("S0 7#CA1~OIe+>", (-1835));
      jSONObject1.remove("S0 7#CA1~OIe+>");
      try { 
        jSONObject1.getBoolean("S0 7#CA1~OIe+>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"S0 7#CA1~OIe+>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.quote("2Z:/$J");
      assertEquals("\"2Z:/$J\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3468618197243933
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("=^#<|", 0.0);
      JSONObject.getNames((Object) jSONObject0);
      String string0 = jSONObject0.optString("=^#<|");
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("F]HM.az{x]?/");
      String string0 = jSONObject0.optString("F]HM.az{x]?/");
      assertEquals("", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected a ':' after a key", (Collection) null);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("Expected a ':' after a key");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("?@_a2G_jhU^2XZ", (-1L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.400632456493242
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getpush", float0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      jSONObject1.optInt("getpush", 0);
      boolean boolean0 = jSONObject2.optBoolean("getpush");
      jSONObject2.optBoolean("aEe,5|A,a?qXMu|uo");
      assertEquals(1, jSONObject2.length());
      
      boolean boolean1 = jSONObject1.isNull("YZ5)oQaqo{w");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      linkedList1.offer(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[@#3Jl`^`Jh'PwI{OC", 0.0);
      try { 
        jSONObject0.getJSONArray("[@#3Jl`^`Jh'PwI{OC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[@#3Jl`^`Jh'PwI{OC\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("3+=/LQ1j#l$KE");
      assertEquals("\"3+=/LQ1j#l$KE\"", string0);
      
      String string1 = jSONObject0.optString("\"3+=/LQ1j#l$KE\"", "\"3+=/LQ1j#l$KE\"");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.2829875394034933
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.names();
      jSONObject0.toString(92);
      jSONObject1.names();
      jSONObject0.remove("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      Double double0 = new Double(0L);
      JSONObject jSONObject3 = new JSONObject((Object) jSONTokener0);
      JSONObject jSONObject4 = jSONObject1.put("`avF-T<&U9s@|_&4M82", (double) 92);
      assertFalse(jSONObject4.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{d5n=DBBwAH\"vQWy");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 12 of {d5n=DBBwAH\"vQWy
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      HashMap<Long, Double> hashMap1 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("S<Du?", (Object) "S<Du?");
      jSONObject1.optBoolean("S<Du?");
      Object object0 = new Object();
      jSONObject1.accumulate("S<Du?", object0);
      String string0 = jSONObject0.getString("S<Du?");
      assertNotNull(string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote("u/cg/-8|n^dc&[Km");
      assertEquals("\"u/cg/-8|n^dc&[Km\"", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null, true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("zhpV:H CqnC|vx", false);
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Ti2x58x?;C/", 0.0);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.765976792018692
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-404), 1932);
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-447), (-447));
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1015014044975926
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-2899));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }N
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1938090917981254
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5103090061340354
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("get", "get");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.756037857890329
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      JSONObject.getNames((Object) jSONObject1);
      try { 
        jSONObject1.getJSONObject("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.382412991617002
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = "cv#KPLBQ";
      jSONObject0.optJSONObject("cv#KPLBQ");
      // Undeclared exception!
      jSONObject0.toString(792, 2756);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isaccumulate", (-463));
      jSONObject0.put("F]M.az{x]4?/", (Object) "isaccumulate");
      String string0 = jSONObject0.toString(2174, 71);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.5739520203977473
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString(jSONObject0, (-2899), (-2899));
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      String string0 = JSONObject.valueToString(jSONArray0, 75, 628);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("7CVz%\"(#rE", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.quote("M?:%{=X$h.JP");
      assertEquals("\"M?:%{=X$h.JP\"", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("g`", "g`");
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("isreplaceFirst", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("java.lang.Float@0000000001", (-1044.991055458736));
      assertEquals((-1044.991055458736), double0, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.4981423022637577
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float(626.796145971);
      JSONObject.valueToString("");
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 626.796145971);
      assertEquals(626.796145971, double0, 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("'>o`]%", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1071.3012164046816));
      String string1 = JSONObject.valueToString("-1071.3012164046816");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("MfZd+4vq.!Hg)PD6ea");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MfZd+4vq.!Hg)PD6ea\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4001368050742196
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      jSONObject0.toString(1875);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.2311872343213008
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Short short0 = new Short((short)698);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString((int) (short)698, (int) (short)698);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("{}");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1559), (-1559));
      Boolean boolean0 = new Boolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 70, 70);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("] is not a JSONArray.", 0L);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.35225850633821
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.toString();
      jSONObject0.opt("{\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      Integer integer0 = new Integer(13);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) "~HnY");
      boolean boolean0 = jSONObject0.has("~HnY");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.601008630606935
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("isaddFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isaddFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("tri", 1L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.testValidity(long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.quote("jjj[A2y>L.1AL\"_c");
      assertEquals("\"jjj[A2y>L.1AL\\\"_c\"", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1576770355110229
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("E/bn(_0M%CN~mH0{D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E/bn(_0M%CN~mH0{D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.put((String) null, (-2008));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.9400278056800047
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      int int0 = jSONObject0.optInt("{}", (-3052));
      assertEquals((-3052), int0);
      
      String string1 = JSONObject.doubleToString((-3052));
      assertEquals("-3052", string1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("isjoin", 10);
      assertEquals(10, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("7CVz%\"(#rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7CVz%\\\"(#rE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString("Y22D!h.2(]jBd", 34, 34);
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 50, 682);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0, 1275, 1275);
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-1403), (-1403));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("E?+NlgnMQ`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of E?+NlgnMQ`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getlogicalOr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getlogicalOr
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
