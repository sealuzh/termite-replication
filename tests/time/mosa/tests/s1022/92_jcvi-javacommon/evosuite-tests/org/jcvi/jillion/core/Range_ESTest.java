/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 28 05:30:46 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.278597793092133
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 432L, 4294967358L);
      Range range1 = Range.of(432L, 4294967358L);
      boolean boolean0 = range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 252L, 4294967358L);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 432 .. 4294967358 ]/0B", string0);
      
      Range range2 = Range.of(1549L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.373863928902089
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = (-9223372036854775784L);
      Range range0 = Range.of((-9223372036854775784L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854772605L, 9223372036854772605L);
      List<Range> list0 = range1.split(9223372036854772605L);
      // Undeclared exception!
      try { 
        range0.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775784 would make range [9223372036854772605 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9504258637418848
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775788L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0864593035344696
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-2147483672L), (-2147483672L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2913361527953433
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-61L), (-61L));
      Range range1 = Range.of((-61L), (-61L));
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-61L), 1L);
      range2.equals(range1);
      assertFalse(range1.isEmpty());
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.of(range_CoordinateSystem0, 1L, 1L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.060460739855643
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967319L, 4294967319L);
      Range range1 = Range.of(4294967319L, 4294967319L);
      assertNotSame(range1, range0);
      
      Range range2 = Range.of(831L, 831L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 831L, 2041L);
      boolean boolean0 = range2.equals(range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0870423502280264
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-61L), (-61L));
      Range range1 = Range.of((-61L), (-61L));
      range1.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-61L), 1L);
      range2.equals(range1);
      String string0 = range2.toString();
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertEquals("[ -62 .. 0 ]/0B", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9186795923123086
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.of(255L, 255L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals("");
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.of(318L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.018752151201809
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.split(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1017903121400825
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-2147483672L), (-2147483672L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483672L), 1273L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1315061709253724
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775788L));
      Range range1 = Range.of(9223372032559808513L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775788 would make range [9223372032559808513 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9227182066088235
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967319L, 4294967319L);
      Range range1 = Range.of(4294967319L, 4294967319L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.536297059318709
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(248L, 248L);
      range0.startsBefore(range0);
      Range range1 = Range.of(248L);
      Range range2 = Range.of((-32763L), 248L);
      List<Range> list0 = range2.complement(range0);
      range1.complementFrom(list0);
      range2.endsBefore(range1);
      // Undeclared exception!
      range2.split(1L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2240902111457808
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.of(343L, 343L);
      Range.of(343L, 343L);
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("h7-1u4PKj2W,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1722696170693396
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(2147483647L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.778225413018444
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 9223372032559808502L;
      Range range0 = Range.of(9223372032559808502L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9728457116721216
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 374L, 65527L);
      Range range1 = Range.of(374L, 374L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.942734887715744
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65527L, 65527L);
      Range range1 = Range.of(65527L, 65527L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-21L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0864593035344696
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-2147483672L), (-2147483672L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.95303753033263
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-128L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1726444688344255
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483648L, 2147483648L);
      Range range1 = Range.ofLength(2147483648L);
      boolean boolean0 = range1.endsBefore(range0);
      Range range2 = Range.ofLength(2147483648L);
      Range range3 = Range.of(range_CoordinateSystem0, 2147483648L, 2147483648L);
      boolean boolean1 = range1.isSubRangeOf(range3);
      assertFalse(boolean1 == boolean0);
      
      Range.ofLength(2147483648L);
      range1.equals(range2);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range3));
      
      long long0 = range3.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2540808905306973
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 144L, 144L);
      Range.of(range_CoordinateSystem0, 144L, 144L);
      Range.of(144L);
      long long0 = new Long(144L);
      Object object0 = new Object();
      Range range1 = Range.of(144L);
      assertFalse(range1.isEmpty());
      
      Range.of(1352L);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.976544516702746
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("rJs^nsZ]xcZ-g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse rJs^nsZ]xcZ-g into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.997756703271982
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65527L, 65527L);
      Range range1 = Range.of(65527L, 65527L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.00648115999309
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 144L, 144L);
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range range2 = Range.ofLength(0L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(range0.isEmpty());
      
      boolean boolean1 = range2.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertTrue(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.889263291669269
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967319L, 4294967319L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0351972967827754
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = 2147483646L;
      Range range0 = Range.of((-1232L), 2147483646L);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$LongStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$LongStartIntLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4572234522278356
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9223372032559808502L);
      Range range1 = Range.ofLength(9223372032559808502L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1853102740845833
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 604L, 2954L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(2954L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9909112080063873
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.of((-3131L), 2147483647L);
      Long long0 = new Long(2147483647L);
      assertEquals(2147483647L, (long)long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8314802400679735
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(255L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0351972967827754
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-1232L), 2147483646L);
      range0.equals((Object) null);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8310204811135162
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-409L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -409 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0778507209190007
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.of(9223372032559808502L, 9223372032559808502L);
      Range range0 = Range.ofLength(9223372032559808502L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9370665455009894
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(4294967316L, 4294967316L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-1110L), (-1110L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.016453999086494
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(1353L, 1353L);
      Range range1 = Range.of(1353L, 1353L);
      range1.split(1353L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.751915969031122
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = Range.of(2147483647L);
      Range.of(range_CoordinateSystem0, 498L, 498L);
      long long0 = range0.getBegin();
      assertEquals(2147483647L, long0);
      
      Object object0 = new Object();
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
      
      range1.equals(range0);
      assertFalse(range1.equals((Object)range2));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.133025247212663
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      List<Range> list0 = range0.split(1473L);
      boolean boolean0 = range0.equals(list0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2047775241322567
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9683918915419634
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(1322L, 1322L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1713L, 9223372036854775653L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -129 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3549875696248246
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-61L), (-61L));
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-61L), (-61L));
      range1.equals(range0);
      Range range2 = Range.of(122L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1096996737706273
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-32763L), 248L);
      Range range1 = Range.of((-1410L));
      range0.equals(range1);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.131333581636701
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2453L), (-2453L));
      Range range1 = Range.of((-2453L), 795L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-165L), (-165L));
      Range range1 = Range.of((-165L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.443100038690542
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(710L, 710L);
      Range range1 = Range.ofLength(0L);
      range0.complement(range1);
      range0.iterator();
      Range range2 = Range.of(0L, 5482L);
      range2.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      Range range3 = Range.ofLength(0L);
      range1.equals(range3);
      range3.asRange();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.584823476781373
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(710L, 4294967300L);
      Range range1 = Range.ofLength(255L);
      range0.equals(range1);
      Range range2 = Range.of(2147483647L, 2147483647L);
      Range range3 = Range.ofLength(2147483646L);
      List<Range> list0 = range1.split(127L);
      assertEquals(3, list0.size());
      
      List<Range> list1 = range2.complement(range3);
      assertTrue(list1.contains(range2));
      
      Range range4 = Range.ofLength(4294967300L);
      assertFalse(range4.isEmpty());
      
      range1.equals(range2);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.83412587655526
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-156L), (-156L));
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.000599812106182
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(243L, 243L);
      Range range1 = Range.ofLength(1587L);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.954331036271918
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.0140772805713656
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.of(255L, 255L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2068279117905236
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.ofLength(65535L);
      range0.isSubRangeOf(range0);
      Iterator<Long> iterator0 = range1.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7886260379670387
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.equals(" into a Range");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.7410716301609974
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967296L, 4294967296L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.788626037967039
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808513L);
      boolean boolean0 = range0.equals(" into a Range");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.583518938456111
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(33012L);
      Range range1 = Range.ofLength(33012L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.83154442690767
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967296L, 9223372036854775759L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8892632916692698
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 413L, 2147483647L);
      Long long0 = new Long(413L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long1 = range0.getLength();
      assertEquals(2147483235L, long1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3739L, 2147483614L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0541439513752504
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2702L, 2702L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.180890848248028
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.split(9223372036854775807L);
      range0.complementFrom(list0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.891713602476633
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483650L, 2147483650L);
      Range range1 = Range.of(2147483650L, 2147483650L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object0 = new Object();
      range0.equals(object0);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.167837918978632
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 144L, 144L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.ofLength(144L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8389889331546985
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-156L), (-156L));
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-1232L), (-1232L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9174329732922155
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32989L, 32989L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8850829812280656
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775653L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.9490123306617946
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(281L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.220618355555702
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.060287092608695
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65527L, 65527L);
      Range range1 = Range.of(65527L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.475272201948944
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.ofLength(9223372032559808490L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.939099261288858
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L, 9223372032559808513L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.830713403754631
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(144L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.149557874507356
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L), (-32768L));
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.942734887715744
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(374L, 1314L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.016511028793469
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 125L, 125L);
      Range range1 = Range.of(range_CoordinateSystem0, (-30L), 125L);
      Long long0 = new Long((-30L));
      range0.equals(long0);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8309404302537744
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808513L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.3214777183647106
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1426L), (-1426L));
      Range range1 = Range.of((-1426L));
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.072411518778937
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(9223372032559808513L, 9223372032559808513L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.285819949395403
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.83154442690767
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 256L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.1760828146595914
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(4294967281L);
      String string0 = range0.toString();
      assertEquals("[ 4294967281 .. 4294967281 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 4294967281 .. 4294967281 ]/0B", range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.131333581636701
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.parseRange("yhZ!D'0,3|q");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4L, long0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(247L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.060240443670951
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(127L);
      Range range1 = Range.ofLength(127L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.2150787467207467
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2L, 2L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      boolean boolean0 = range0.equals(" into a Range");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.83412587655526
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-156L), (-156L));
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.getBegin();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65527L, 65527L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65527L, 65527L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0045706252519193
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.889049918570348
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.2396471196915986
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.0370801618679657
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range1.intersects(range0);
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.2357288685127923
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65527L, 65527L);
      Long long0 = new Long(65527L);
      Object object0 = new Object();
      Range range1 = Range.of(2147483647L);
      range1.intersects(range0);
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.1709395301969012
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.2928445050522135
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(9223372032559808505L);
      Range range1 = Range.ofLength(9223372032559808505L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.4591573243217586
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(1334L);
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.7860846934917882
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      range0.getEnd();
      Range range1 = Range.of(255L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.470087875566939
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(65527L);
      Range range1 = Range.of(65527L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(2122L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.7878762280875944
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808513L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.831480240067973
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32768L), long0);
      
      Long long1 = new Long((-32768L));
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.9785084205272367
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 144L, 144L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(318L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.1364528516688597
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(1021L, 1021L);
      Range range1 = Range.ofLength(1021L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.83412587655526
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(143L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(144L, long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.1287241924819895
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775782L), (-9223372036854775782L));
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775782L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.0635324475712333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.split(125L);
      Range range1 = Range.of(0L);
      range1.getEnd();
      Range range2 = Range.of(125L);
      range2.getBegin();
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("w_%,J<`}GU'#Uyi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.w_%,J<`}GU'#Uyi
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.8337387456310323
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372032559808489L, 9223372032559808489L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372032559808489 .. 9223372032559808489 ]/0B", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.134162458586648
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(1021L, 1021L);
      Range range1 = Range.of(1021L);
      List<Range> list0 = range0.split(1021L);
      assertTrue(list0.contains(range0));
      assertSame(range0, range1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.135265111891203
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      List<Range> list0 = range0.split(65535L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.4947075731865787
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.of(1021L, 1021L);
      Range.ofLength(1021L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775566L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.954331036271918
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.237009535015832
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(9223372032559808502L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.941616952644221
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 31L, 1353L);
      long long0 = 689L;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.719809854865039
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(2147483630L);
      String string0 = range0.toString();
      assertEquals("[ 2147483630 .. 2147483630 ]/0B", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.8389889331546985
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 242L, 242L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32767L, (-3301L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(32768L, long0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.8997571011430576
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.170492662378066
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-56L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-55L), long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.2806855260679253
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.024695553858248
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.887577825056549
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-21L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.0146300137242736
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.of(1091L);
      Range.Builder range_Builder0 = new Range.Builder(1091L, 1091L);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.8580062396672252
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-32777L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.0904599236161974
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808502L);
      // Undeclared exception!
      try { 
        range0.split(9223372032559808502L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -8589934613 would make range [9223372032559808502 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-2011L), (-2011L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.3378616170975537
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.ofLength(2714L);
      Range range1 = Range.ofLength(2714L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.9504258637418843
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-21L), 1565L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.3914957832008006
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of((-1L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.245722306133545
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775797L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.0765950133957833
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.044820482464577
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(4294967319L, 4294967319L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.637586159726386
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(4294967281L);
      Range range1 = Range.of(4294967281L, 4294967281L);
      Range.ofLength(4294967281L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(4294967281L);
      range_Builder0.contractBegin(4294967281L);
      Range range2 = range_Builder0.build();
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-3599L));
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of(1021L, 1021L);
      Range range1 = Range.ofLength(1021L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.7759755531037946
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(3217L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.9306768766483344
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.1125080799469984
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(9223372032559808502L);
      range0.spliterator();
      Range.ofLength(9223372032559808502L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372032559808502L, 9223372032559808502L);
      Range range1 = range_Builder0.build();
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.0146300137242736
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of((-68L), (-68L));
      long long0 = range0.getBegin();
      assertEquals((-68L), long0);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of((-60L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-3367L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.2595693344322374
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of((-18L));
      range0.getBegin();
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-609L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-17L), long0);
      
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-2147483648L));
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.expandEnd((-17L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = (-153L);
      Range.Builder range_Builder0 = new Range.Builder((-153L), 560L);
      range_Builder0.contractEnd(560L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be >=0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      Range.of((-1806L));
      Range.Builder range_Builder3 = new Range.Builder();
      assertFalse(range_Builder3.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range.of(1021L, 1021L);
      Range.of(1021L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-48L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=3.087255641479956
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range range0 = Range.ofLength(125L);
      Range.Builder range_Builder0 = new Range.Builder(125L);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=2.719809854865039
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Range range0 = Range.of(9223372036854774031L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 170
  /*Coverage entropy=2.780466368938681
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 444L, 444L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 171
  /*Coverage entropy=2.9785084205272367
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 172
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Range range0 = Range.of((-1019L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 173
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 174
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
