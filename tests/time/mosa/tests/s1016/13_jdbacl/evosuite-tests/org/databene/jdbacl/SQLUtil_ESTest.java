/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 02:46:08 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) (-4);
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-1428.94583);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1428.94583", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, 126, "");
      defaultDBColumn0.setVersionColumn(false);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9016108689249258
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SQLUtil.normalize("G-K/+L)E7lcT|o\"(R}", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop indexcallremembering join strategy");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop indexcallremembering join strategy";
      stringArray0[1] = "G - K / + L) E7lcT  | o \"(R}\"";
      stringArray0[2] = "G - K / + L) E7lcT  | o \"(R}\"";
      stringArray0[3] = "G - K / + L) E7lcT  | o \"(R}\"";
      stringArray0[4] = "drop indexcallremembering join strategy";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop indexcallremembering join strategy", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("G-K/+L)E7lcT|o\"(R}", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      dBUniqueConstraint0.isIdentical(dBUniqueIndex0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getDoc());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      DBDataType dBDataType0 = DBDataType.getInstance((-2337), "NCLOB");
      Integer integer0 = new Integer((-1129661043));
      DBDataType.getInstance((-2337), "NCLOB");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setDefaultValue("pelect ");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      DBSchema dBSchema0 = new DBSchema("insert NCLOB DEFAULT pelect  NULL");
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "create unique indexselect intocannot creat5e inta", "op_exec_immediate2 ");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create unique indexselect intocannot creat5e inta");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("create unique indexselect intocannot creat5e inta", stringBuilder0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      SQLUtil.mutatesStructure("F18jty**.PC2/*");
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 841.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("841", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.152225652401658
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("--");
      assertNull(boolean0);
      
      SQLUtil.removeComments("--");
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 841.88;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("841.88", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("PelQct into", defaultDBTable0, (DBDataType) null, integer0);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("PelQct into, PelQct into", string0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("PelQct into", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"PelQct into\" FOREIGN KEY () REFERENCES null()", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionalter tableorg.firebirdsql.jdbc.fbblob$fbbloboutputstream");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5419879996659676
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select intoj_;ot7n-#rd");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "execj_;ot7n-#rd";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FROM ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (SELECT * FROM , execj_;ot7n-#rd)", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("exec`x>&w{^70)7ae(!=? = '`x>&w{^70)7ae(!=?'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"!=? = '`x>&w{^70\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("alter materialized view");
      dBCatalog0.getTables();
      String string0 = "L3W>d@oTQQCq);C\\";
      dBCatalog0.getSchema("L3W>d@oTQQCq);C");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("alter materialized view", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6200155105291458
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("alter materialized viewgd*/d?", false);
      assertEquals("alter materialized viewgd */ d ?", string0);
      
      boolean boolean0 = SQLUtil.isQuery("alter materialized viewgd */ d ?");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5aM_#Unxq9z-zegv/", defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.setNullable(false);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("5aM_#Unxq9z-zegv/", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5aM_#Unxq9z-zegv/";
      stringArray0[2] = "5aM_#Unxq9z-zegv/";
      stringArray0[3] = "4W";
      stringArray0[4] = "5aM_#Unxq9z-zegv/";
      String string1 = SQLUtil.leftJoin("5aM_#Unxq9z-zegv/", stringArray0, "4W", "9pLa|6^qi", stringArray0);
      assertEquals("left join 4W as 9pLa|6^qi on 5aM_#Unxq9z-zegv/.5aM_#Unxq9z-zegv/ = 9pLa|6^qi.5aM_#Unxq9z-zegv/ and 5aM_#Unxq9z-zegv/.null = 9pLa|6^qi.null and 5aM_#Unxq9z-zegv/.5aM_#Unxq9z-zegv/ = 9pLa|6^qi.5aM_#Unxq9z-zegv/ and 5aM_#Unxq9z-zegv/.4W = 9pLa|6^qi.4W and 5aM_#Unxq9z-zegv/.5aM_#Unxq9z-zegv/ = 9pLa|6^qi.5aM_#Unxq9z-zegv/", string1);
      
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("5aM_#Unxq9z-zegv/ NOT NULL", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = " /* ";
      // Undeclared exception!
      SQLUtil.isDDL(" /* ");
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("fd/*");
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.127557121554711
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      DBDataType dBDataType0 = DBDataType.getInstance((-2337), "NCLOB");
      Integer integer0 = new Integer((-1129661043));
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("insert NCLOB NULL");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("insert", defaultDBTable0.getName());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7935422987893692
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updatecannot create instance, module ignored.", (DBSchema) null);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(1220, "CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CO,NSTRAINT ", defaultDBTable0, dBDataType0, integer1, integer0);
      StringBuilder stringBuilder0 = new StringBuilder(1220);
      stringBuilder0.append("CLOB");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("}");
      assertNull(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.485180469147356
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.isQuery("select intoqxexf5br-;xgd\"x@f");
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select intoqxexf5br-;xgd\"x@f", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("select intoqxexf5br-;xgd\"x@f", true, dBUniqueConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("select intoqxexf5br-;xgd\"x@f");
      DBDataType dBDataType0 = DBDataType.getInstance((-1748), "select intoqxexf5br-;xgd\"x@f");
      SQLUtil.mutatesDataOrStructure("W X^75=");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      Integer.getInteger("ALTER TABLE ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?8nWHa", defaultDBTable2, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("SELECT INTOQXEXF5BR-;XGD\"X@F(1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6470104076670853
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updatecannot create instance, module ignored.", (DBSchema) null);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(1220, "LO{");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CO,NSTRAINT ", defaultDBTable0, dBDataType0, integer1, integer0);
      StringBuilder stringBuilder0 = new StringBuilder(1220);
      StringBuilder stringBuilder1 = new StringBuilder(1220);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("LO{(3,0)", stringBuilder0.toString());
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("}");
      String string0 = SQLUtil.renderValue("LO{");
      assertEquals("'LO{'", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("drop table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "drop table";
      stringArray0[2] = "drop table";
      stringArray0[4] = "drop table";
      stringArray0[5] = "drop table";
      stringArray0[6] = "drop table";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.988582879780422
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesStructure("\nRemembering join strategy ");
      String[] stringArray0 = new String[2];
      defaultDBTable0.getUniqueConstraints(false);
      stringArray0[0] = "\nRemembering join strategy ";
      SQLUtil.isQuery("\nRemembering join strategy ");
      SQLUtil.normalize("\nRemembering join strategy ", false);
      SQLUtil.isQuery("\nRemembering join strategy ");
      SQLUtil.typeAndName(defaultDBTable0);
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[19];
      SQLUtil.join("file:", "Rer11", stringArray0, "method ", "method ", stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery(" ADD ");
      SQLUtil.normalize("method ", true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("autoServerMode && (readOnly || fileLockMethod == NO || fileLockMethod == SERIALIZED)", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DataStore dataStore0 = new DataStore("- ");
      VirtualFile virtualFile0 = new VirtualFile("method ", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLUtil.removeComments("2c{reate table//");
      String string0 = " DtV_";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" DtV_", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("create materialized view");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append((-1782L));
      // Undeclared exception!
      try { 
        stringBuilder2.deleteCharAt((-1855371066));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1855371066
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("executea_ 6oxgchw");
      Boolean boolean1 = SQLUtil.mutatesStructure("executea_ 6oxgchw");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("pRTTC,l*:oUbqn", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      SQLUtil.join("inner", "S;$", stringArray0, "left", "BLOB", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = new Boolean("org.h2.command.ddl.CreateTable");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("47yK**[$?k!{^k1{{");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Q)K9@JO8";
      stringArray0[1] = "Q)K9@JO8";
      stringArray0[3] = "org.h2.command.ddl.CreateTable";
      stringArray0[4] = "org.h2.command.ddl.CreateTable";
      stringArray0[5] = "Q)K9@JO8";
      stringArray0[6] = "47yK**[$?k!{^k1{{";
      String string0 = SQLUtil.renderColumnListWithTableName("Q)K9@JO8", stringArray0);
      assertEquals("Q)K9@JO8.Q)K9@JO8, Q)K9@JO8.Q)K9@JO8, Q)K9@JO8.null, Q)K9@JO8.org.h2.command.ddl.CreateTable, Q)K9@JO8.org.h2.command.ddl.CreateTable, Q)K9@JO8.Q)K9@JO8, Q)K9@JO8.47yK**[$?k!{^k1{{", string0);
      
      String string1 = SQLUtil.innerJoin("emzo2R", stringArray0, "org.h2.command.ddl.CreateTable", (String) null, stringArray0);
      assertEquals("org.h2.command.ddl.CreateTable as null on emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.null = null.null and emzo2R.org.h2.command.ddl.CreateTable = null.org.h2.command.ddl.CreateTable and emzo2R.org.h2.command.ddl.CreateTable = null.org.h2.command.ddl.CreateTable and emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.47yK**[$?k!{^k1{{ = null.47yK**[$?k!{^k1{{", string1);
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "~5!ocx>:;{l";
      stringArray1[1] = null;
      stringArray1[2] = "Q)K9@JO8";
      stringArray1[3] = "org.h2.command.ddl.CreateTable as null on emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.null = null.null and emzo2R.org.h2.command.ddl.CreateTable = null.org.h2.command.ddl.CreateTable and emzo2R.org.h2.command.ddl.CreateTable = null.org.h2.command.ddl.CreateTable and emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.47yK**[$?k!{^k1{{ = null.47yK**[$?k!{^k1{{";
      stringArray1[4] = "org.h2.command.ddl.CreateTable as null on emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.null = null.null and emzo2R.org.h2.command.ddl.CreateTable = null.org.h2.command.ddl.CreateTable and emzo2R.org.h2.command.ddl.CreateTable = null.org.h2.command.ddl.CreateTable and emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.47yK**[$?k!{^k1{{ = null.47yK**[$?k!{^k1{{";
      stringArray1[5] = "org.h2.command.ddl.CreateTable";
      stringArray1[6] = "org.h2.command.ddl.CreateTable as null on emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.null = null.null and emzo2R.org.h2.command.ddl.CreateTable = null.org.h2.command.ddl.CreateTable and emzo2R.org.h2.command.ddl.CreateTable = null.org.h2.command.ddl.CreateTable and emzo2R.Q)K9@JO8 = null.Q)K9@JO8 and emzo2R.47yK**[$?k!{^k1{{ = null.47yK**[$?k!{^k1{{";
      stringArray1[7] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      String string2 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("leKVdC");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "6.I}hpeL=Q:#");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[8];
      defaultDBTable0.setName("leKVdC");
      stringArray1[1] = "[1M";
      stringArray1[2] = "NWNcAi";
      stringArray1[3] = "6.I}hpeL=Q:#";
      stringArray1[4] = "6.I}hpeL=Q:#";
      stringArray1[5] = "alter indexcannot create instance, module ignored.";
      stringArray1[6] = "leKVdC";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter indexcannot create instance, module ignored.", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLUtil.isQuery("//");
      TableDescriptor tableDescriptor0 = new TableDescriptor((DataDictionary) null, "//", (SchemaDescriptor) null, 1417, 'v');
      tableDescriptor0.getGeneratedColumns();
      GenericDescriptorList genericDescriptorList0 = tableDescriptor0.getTriggerDescriptorList();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("insertselect intocannot creat5e inta");
      genericDescriptorList0.add((Object) jMXPrincipal0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.management.remote.JMXPrincipal cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("index (1..");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: index (1..
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("r*+^R2l8.:@");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("r*+^R2l8.:@");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "n");
      StringBuilder stringBuilder0 = new StringBuilder("sj)*");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      int int0 = 65;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(65, (Object) "n");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 65
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = SQLUtil.isQuery("select intoqxexf5br-;xgd\"x@f");
      assertTrue(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select intoqxexf5br-;xgd\"x@f", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint1, nameSpec0);
      assertEquals("UNIQUE (, )", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.825650646494866
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter sessiwnater $ession");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter sessiwnater $ession");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter sessiwnater $ession", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("PRIMARY KEY ()", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intocannot creat5e inta", (DBTable) null, (-4191), "select intocannot creat5e inta");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intocannot creat5e inta", (DBTable) null, (-4159), "select intocannot creat5e inta");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("select intocannot creat5e inta", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "J_;oT7N-#RD");
      SQLUtil.addOptionalCondition("J_;oT7N-#RD", stringBuilder0);
      assertEquals("J_;oT7N-#RD or J_;oT7N-#RD", stringBuilder0.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SET");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 96, "SET");
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("SET.null", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.join("bs\r", "bs\r", stringArray0, "bs\r", "bs\r", stringArray0);
      SQLUtil.renderColumnListWithTableName("bs\r", stringArray0);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("pBLC1PJ hsiYJu>bzM", stringArray0, "insert", "SELECT * FROM ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(">^(-bG<0vV6s);*");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM >^(-bG<0vV6s);* WHERE null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("F0p>$3DxusJt+H/<S");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter tableorg.firebirdsql.jdbc.fbblob$fbbloboutputstream");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLUtil.removeComments("org.h2.command.ddl.CreateTable");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.command.ddl.CreateTable");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table org.h2.command.ddl.CreateTable", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("0", stringBuilder0);
      assertEquals("0", stringBuilder0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tableorg.firebirdsql.jdbc.fbblob$fbbloboutputstream");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("!2CN%jj/.N", false, "!2CN%jj/.N", "RS");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("!2CN%jj/.N", false, "!2CN%jj/.N", "RS");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
      SQLUtil.parseColumnTypeAndSize("");
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SQLUtil.isDML("callremembering join strategy");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("callremembering join strategy", false, "callremembering join strategy", "f8");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "callremembering join strategy");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("callremembering join strategyCONSTRAINT \"callremembering join strategy\" ", stringBuilder0.toString());
      
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"callremembering join strategy\" ", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("r*+^R2lH.:@", stringBuilder0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deleteoq+9t,szcid;a!", (DBTable) null, 90020, "deleteoq+9t,szcid;a!");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("r*+^R2lH.:@DELETEOQ+9T,SZCID;A!", stringBuilder1.toString());
      assertEquals("r*+^R2lH.:@DELETEOQ+9T,SZCID;A!", stringBuilder0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insert2create table//");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = SQLUtil.normalize("selectj??07a/ jr=e]og,", true);
      assertEquals("selectj ? ? 07a / jr = e ] og,", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("callselect");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7437009261328056
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableorg.firebirdsql.jdbc.fbblob$fbbloboutputstream");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isDDL("alter tableorg.firebirdsql.jdbc.fbblob$fbbloboutputstream");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.466266517864739
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("cannot creat5e inta");
      assertNull(boolean0);
      
      Character character0 = Character.valueOf('B');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'B'", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize("rememze");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rememze";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("rememze", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT rememze FOREIGN KEY (rememze) REFERENCES null(rememze)", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter sessiwnalter $ession");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter sessiwnalter $ession");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.737338642408412
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7uB`$((8Z-t");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "7uB`$((8Z-t");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("7UB`$((8Z-T(0)", string1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "alter sessiwnalter $ession";
      stringArray0[1] = "alter sessiwnalter $ession";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "drop materia";
      // Undeclared exception!
      try { 
        SQLUtil.join("alter sessiwnalter $ession", "org.postgresql.util.PSQLException", stringArray0, "org.postgresql.util.PSQLException", "alter sessiwnalter $ession", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(4, "%4Az+9)d`L");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null %4AZ+9)D`L(3,3) NULL", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uS+#7&!j\"Ek;a!cPc");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-318), "RA7fD[");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("RA7FD[", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLUtil.isQuery("SysschemasIdentifier");
      SQLUtil.mutatesDataOrStructure("alter table2uiv6g*t");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter table2uiv6g*t");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "group";
      stringArray0[1] = "alter table2uiv6g*t";
      stringArray0[2] = "SysschemasIdentifier";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "group", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter table2uiv6g*t", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("alter table2uiv6g*t");
      File file0 = MockFile.createTempFile("alter table2uiv6g*t", "}?RFS{,{]", (File) mockFile0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Y');
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter0);
      assertEquals(120L, file0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.360380995184394
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLUtil.isProcedureCall("callremembering join strategy");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("callremembering join strategy", true, "callremembering join strategy", "B8");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "callremembering join strategy");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("callremembering join strategyCONSTRAINT \"callremembering join strategy\" ", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"callremembering join strategy\" CHECK B8", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = SQLUtil.normalize("exec`x>&w{^70)7ae(!=? = '`x>&w{^70)7ae(!=?'", true);
      assertEquals("exec ` x > & w { ^ 70) 7ae (! = ? = '`x>&w{^70)7ae(!=?'", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("ZVU\"z", "<MmsF*wF5.bA!", (String[]) null, "ZVU\"z", "ZVU\"z", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SELECT * FROM ";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("SELECT * FROM  = 'SELECT * FROM '", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, " ", "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.mutatesStructure("");
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?hA$idmSIeuGBv])j", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ?hA$idmSIeuGBv])j PRIMARY KEY ()", string0);
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("UNIQUE ()", string1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLUtil.isDML("Vfmfu8R:'Z");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Vfmfu8R:'Z", false, "Vfmfu8R:'Z", "f8");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Vfmfu8R:'Z");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("Vfmfu8R:'ZCONSTRAINT Vfmfu8R:'Z ", stringBuilder0.toString());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.join("", "changePending", stringArray0, "setClob(int, Reader, long)", "setClob(int, Reader, long)", stringArray0);
      assertEquals("setClob(int, Reader, long) as setClob(int, Reader, long) on ", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.159098580890948
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "null = null AND null = null AND null = null AND null = null AND null = null AND null = null";
      objectArray0[1] = (Object) "null = null AND null = null AND null = null AND null = null AND null = null AND null = null";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = SQLUtil.normalize(" cannot create instance, module ignored.", true);
      assertEquals("cannot create instance, module ignored.", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.databene.jdbacl.SQLUtil", true);
      assertEquals("org.databene.jdbacl.SQLUtil", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = SQLUtil.normalize("JH32^eK5=m*]< ", false);
      assertEquals("JH32 ^ eK5 = m * ] <", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" and ");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = " and ";
      stringArray0[1] = " and ";
      stringArray0[2] = "alter table2uiv6g*t";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " and ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" and \" UNIQUE ( and ,  and , alter table2uiv6g*t)", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("VAjm+P", true, "VAjm+P", "nc");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT VAjm+P CHECK nc", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.store.raw.data.DropOnCommit");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  PRIMARY KEY (, , , , )", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5aM_#Unxq9z-zegv/", defaultDBTable0, (DBDataType) null, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" and ");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDML("oQN/>wX<]=:Mj`zZZ;g");
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("NhBR2.}wsv3", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLUtil.removeComments("Yi8][*nj[yw#vD|M%");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#Tp~vO9|");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("#Tp~vO9|");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7103690796668198
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.5037131526234186
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "callremembering join strategy";
      SQLUtil.isDML("callremembering join strategy");
      SQLUtil.mutatesDataOrStructure("callremembering join strategy");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "callremembering join strategy";
      String[] stringArray1 = new String[2];
      stringArray1[1] = "callremembering join strategy";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("callremembering join strategy", stringArray0, "callremembering join strategy", "callremembering join strategy", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6851287363978404
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      String string1 = SQLUtil.leftJoin("alter materialized viewdelete", stringArray0, "null = null", "!~ m*5A$6H", stringArray0);
      assertEquals("left join null = null as !~ m*5A$6H on alter materialized viewdelete.null = !~ m*5A$6H.null", string1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.568155382556487
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("\nRemembering join straegy ");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("create materialized view2c{reate table//", (String[]) null, "\nRemembering join straegy ", "\nRemembering join straegy ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      String string1 = SQLUtil.leftJoin("null.null, null.null, null.null, null.null, null.null, null.null, null.null", stringArray0, "null.null, null.null, null.null, null.null, null.null, null.null, null.null", "null.null, null.null, null.null, null.null, null.null, null.null, null.null", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.substituteMarkers("UNIQUE ", "UNIQUE ", stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL(" ADD ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("test", "test", (Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "alter tableorg.firebirdsql.jdbc.fbblob$fbbloboutputstream", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(zGhWyOT,]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (zGhWyOT,]
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6809837858852603
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.innerJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "#9QdtV=)c", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("XSTB3.M");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
