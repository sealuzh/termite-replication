/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 02:46:15 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      assertFalse(jRip0.getUsePruning());
      
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertTrue(jRip1.getUsePruning());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      boolean boolean0 = false;
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      jRip0.getUsePruning();
      jRip0.getCheckErrorRate();
      jRip0.getDebug();
      BallTree ballTree0 = new BallTree();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        sparseInstance0.enumerateAttributes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.setDebug(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Instances instances0 = new Instances("o*0'.e0O{o0V=AD!A(", arrayList0, 64);
      jRip0.getOptions();
      try { 
        jRip0.rulesetForOneClass(1.0, instances0, (-742.231), 64);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.339615142508975
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a", arrayList0, 10);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@data", 2056);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.splitData(instances0, 2056, 1.0);
      boolean boolean0 = jRip_NumericAntd1.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2814326612302802
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a", arrayList0, 10);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@relation", 2056);
      attribute0.copy();
      instances0.setClass(attribute0);
      Attribute attribute1 = new Attribute(".arff", (List<String>) null, (-1733));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 1337.6876634728, 0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.720538539192301
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(".bsi", 10);
      instances0.setClass(attribute0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip0.optimizationsTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Attribute.typeToString(78);
      jRip_NumericAntd0.splitData(instances0, 0, 0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.toString();
      assertEquals(0.0, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-999));
      jRip0.getOptimizations();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, arrayList0, protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accuRate = 1276.3;
      String string0 = jRip_NumericAntd0.toString();
      assertEquals((-999), jRip0.getOptimizations());
      assertEquals("null <= NaN", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@relation", 2056);
      Attribute attribute1 = (Attribute)attribute0.copy();
      instances0.setClass(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0115053753997263
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a", arrayList0, 10);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@relation", 2056);
      Attribute attribute1 = (Attribute)attribute0.copy();
      instances0.setClass(attribute0);
      Attribute attribute2 = new Attribute(".arff", (List<String>) null, (-1737));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.splitData(instances0, 0, 1);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(106);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("M", arrayList0, 106);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@relation", 2056);
      instances0.setClass(attribute0);
      Attribute attribute1 = new Attribute(".arff", (List<String>) null, (-1741));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip0.optimizationsTipText();
      jRip_NominalAntd0.splitData(instances0, (-1741), 1);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("relational");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // relational not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6880942771518648
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(106);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("M", arrayList0, 106);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@relation", 2056);
      instances0.setClass(attribute0);
      Attribute attribute1 = new Attribute(".arff", (List<String>) null, (-1741));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      instances0.add((Instance) binarySparseInstance0);
      jRip0.optimizationsTipText();
      jRip_NominalAntd0.splitData(instances0, (-1741), 1);
      // Undeclared exception!
      try { 
        jRip0.getMeasure(".arff");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .arff not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(".bsi", 10);
      instances0.setClass(attribute0);
      jRip0.minNoTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 0, 0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(1.0, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(".bsi", 10);
      instances0.setClass(attribute0);
      jRip0.minNoTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.getRevision();
      jRip_NumericAntd0.splitData(instances0, 0, 0);
      assertEquals(Double.POSITIVE_INFINITY, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2322067503076206
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      instances0.add((Instance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(8);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute("/$K@zf$2E", 2056);
      instances0.setClass(attribute0);
      Attribute attribute1 = new Attribute(",>F07[,I'y{_]mx", (List<String>) null, 1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 0.5, 2);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(".bsi", 10);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, 0);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 0.8, 1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(1, instancesArray0.length);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(".bsi", 10);
      Attribute attribute1 = new Attribute("@end", (List<String>) null, 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.splitData(instances0, 3, 2);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("@attribute");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @attribute not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4061887407480635
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(".bsi", 10);
      instances0.setClass(attribute0);
      jRip0.minNoTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(3);
      jRip_RipperRule0.prune(instances0, false);
      assertEquals(3.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@data", 10);
      instances0.setClass(attribute0);
      Attribute attribute1 = new Attribute("K", (List<String>) null, (-1754));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4);
      jRip_RipperRule0.grow(instances0);
      assertEquals(4.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 10);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(".arff", 2056);
      instances0.setClass(attribute0);
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3274939303877629
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a", arrayList0, 10);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@data", 2056);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 2056, 2);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@data", 10);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0.0);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("o*0'.e0O{o0V=AD!A(", arrayList0, 70);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(70);
      jRip_RipperRule0.grow(instances0);
      assertEquals(70.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3826677280704462
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a", arrayList0, 10);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute("@data", 2056);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 1, 2);
      try { 
        jRip0.rulesetForOneClass(2056, instances0, 1, -0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2056, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute((String) null, (String) null, 2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("null <= NaN", string0);
      
      SparseInstance sparseInstance0 = new SparseInstance(4);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      instances0.add((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(".bsi", 10);
      instances0.setClass(attribute0);
      jRip0.minNoTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 3, 0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("[q~>>", arrayList0, 70);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 70);
      Attribute attribute1 = new Attribute("||mR7 NAv6ff>X", instances0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(614);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("||mR7 NAv6ff>X <= NaN", string0);
      
      boolean boolean1 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(boolean1 == boolean0);
      
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6875440376031756
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("5&");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip0.getSeed();
      jRip_NumericAntd1.covers(sparseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip_NominalAntd0.value = (double) 1L;
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2056);
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute0 = new Attribute(".arff", (List<String>) null, 2056);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 0, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("9SP/_vrARh-Z>?x", arrayList0, 103);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, false);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("o*0'.e0O{o0V=AD!A(", arrayList0, 64);
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 64);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 2, 4);
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 3, 2);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1, instancesArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("(useAccuray? ");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      jRip_NominalAntd0.covers(sparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("o*0'.e0O{o0V=AD!A(", arrayList0, 64);
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 64);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 64, 4);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.seedTipText();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.value = (-549.850667);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = new Attribute("| data size: ");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 3);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("6}V}1sTBJ/EG2>", list0, protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      String string0 = jRip0.usePruningTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals("Whether pruning is performed.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7544878594526097
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      System.setCurrentTimeMillis((-1L));
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("8FuE1;RHWWHw", (-710));
      jRip0.globalInfo();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      jRip0.getOptions();
      jRip_NominalAntd0.toString();
      jRip1.getCapabilities();
      jRip_NominalAntd0.getAttr();
      jRip0.getCapabilities();
      jRip1.toString();
      jRip_NominalAntd0.toString();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("&%?Lol?MuT,", arrayList0, 1);
      try { 
        jRip0.rulesetForOneClass(2369.4, instances0, 1, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(0L);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-5479.39845));
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6875440376031756
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Attribute attribute0 = new Attribute("5&");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      jRip_NumericAntd1.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.optimizationsTipText();
      jRip0.getOptions();
      Attribute attribute0 = new Attribute("The number of optimization runs.", 207);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      String string1 = jRip0.seedTipText();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The seed used for randomizing the data.", string1);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0018442867649786
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("N", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals("N = ", string0);
      
      SparseInstance sparseInstance0 = new SparseInstance(79);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(11, stringArray0.length);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      jRip0.getTechnicalInformation();
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Gu%\\6#L!", linkedList0, protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, (-1.0), (-601.79160596));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attribute attribute0 = new Attribute("(useAccr^y? ");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0652173913644494
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(">]^j`W#'", arrayList0, 1430);
      Attribute attribute0 = new Attribute("WxL%;2+L`5 OkQKG_B", (List<String>) null, 61);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      Instances[] instancesArray0 = jRip_NominalAntd0.splitData(instances0, 1130.42, 10);
      assertEquals(1, instancesArray0.length);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      String string0 = jRip0.debugTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("Whether debug information is output to the console.", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", (-5053));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2, jRip0.getOptimizations());
      
      jRip0.setOptimizations(3);
      jRip0.getOptions();
      assertEquals(3, jRip0.getOptimizations());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo((-1.0));
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, (-9));
      Attribute attribute1 = attribute0.copy((String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip0.globalInfo();
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("oFKY5Jl", linkedList0, 11);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("Iz", "");
      String string1 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => Iz=", string1);
      
      Utils.SMALL = (-364.47574);
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      String string2 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string2);
      
      String string3 = jRip_RipperRule0.getRevision();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals("8118", string3);
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      
      String string4 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string4);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string5 = jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals("Iz <= NaN", string5);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass((-1551.0), (Instances) null, (-1551.0), 0.001);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      JRip.main(stringArray0);
      String[] stringArray1 = jRip0.getOptions();
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(11, stringArray1.length);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-15));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      jRip_RipperRule0.covers((Instance) null);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      Attribute attribute0 = new Attribute("", 434);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getMaxInfoGain();
      String[] stringArray0 = new String[0];
      jRip0.getRevision();
      jRip0.getSeed();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, int0);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(" = ", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip0.enumerateMeasures();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.", (-574));
      String string1 = jRip_RipperRule0.toString(attribute0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => Whether check for error rate >= 1/2 is included in stopping criterion.=", string1);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertFalse(jRip0.getDebug());
      assertEquals(2, int0);
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(false);
      String string0 = jRip0.seedTipText();
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The seed used for randomizing the data.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-1841));
      jRip0.listOptions();
      assertEquals((-1841), jRip0.getFolds());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.foldsTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(11, stringArray0.length);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(boolean0);
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setOptions((String[]) null);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
  }
}
