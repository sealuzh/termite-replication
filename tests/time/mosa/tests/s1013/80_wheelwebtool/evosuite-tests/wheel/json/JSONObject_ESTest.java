/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 00:38:49 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1530604874709436
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("f`xeV", (Map) null);
      jSONObject1.optString("", "");
      try { 
        jSONObject0.getBoolean("#TYIZOW6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#TYIZOW6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double(0.0);
      Float float0 = new Float(Double.NaN);
      hashMap0.put(double0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      try { 
        jSONObject0.toString(87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.testValidity("HZ");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9159458594897067
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('(');
      jSONObject0.write(stringWriter1);
      jSONObject0.put("zAkMV{WCjI)7", (Map) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.toString();
      jSONObject0.optInt("-1294.3527860336110", 0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("T}9E[", (Collection) linkedList0);
      jSONObject1.toString(16, (-806));
      String[] stringArray0 = JSONObject.getNames((Object) "{\n\"java.lang.String@0000000003\": {},\n\"java.lang.String@0000000006\": []\n}");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.326787722174819
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(9, (long) 9);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.accumulate("gettoString", "gettoString");
      jSONObject0.optBoolean("gettoString");
      try { 
        jSONObject0.getBoolean("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.625875206064657
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.removeAll(linkedList1);
      JSONObject jSONObject1 = jSONObject0.put("Na^wYnK[z!lr'c", (Collection) linkedList0);
      JSONObject.getNames(jSONObject0);
      Double double0 = new Double(1615.2463094003872);
      jSONObject1.append("Na^wYnK[z!lr'c", double0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames(jSONObject2);
      jSONObject1.optJSONArray("Na^wYnK[z!lr'c");
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.getNames((Object) "\"TW)u4t=/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      JSONObject jSONObject1 = jSONObject0.put("true", (Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter(2);
      Writer writer0 = jSONArray0.write(stringWriter0);
      Writer writer1 = jSONObject1.write(writer0);
      Writer writer2 = jSONObject0.write(writer1);
      assertSame(writer1, writer2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7234994339596863
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Double.max(0.0, 0.0);
      try { 
        jSONObject0.getInt("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "${*0k)pd1kE!.}";
      stringArray0[1] = "${*0k)pd1kE!.}";
      stringArray0[2] = "${*0k)pd1kE!.}";
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      Boolean boolean0 = new Boolean("${*0k)pd1kE!.}");
      Long long0 = new Long(0L);
      hashMap0.put(boolean0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8136605216916037
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("isintBitsToFloat", "isintBitsToFloat");
      boolean boolean0 = jSONObject0.optBoolean("isintBitsToFloat");
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "isintBitsToFloat");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      Float.isFinite(970.63513F);
      try { 
        JSONObject.valueToString(float0, 1093, 463);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4554218170747184
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Long long0 = new Long(871L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("gettoString", 0.0);
      JSONObject jSONObject1 = jSONObject0.put("gettoString", true);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.accumulate("gettoString", boolean0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.length();
      jSONObject0.put("gettoString", (Map) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9649279290481876
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "${*0k)pd1kE!.}");
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject1 = jSONObject0.put("${*0k)pd1kE!.}", (Map) hashMap0);
      jSONObject1.optJSONObject("${*0k)pd1kE!.}");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5389467034052196
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Long long1 = Long.valueOf(1L);
      JSONObject jSONObject1 = jSONObject0.accumulate("MkHm!: ", long1);
      jSONObject0.getLong("MkHm!: ");
      jSONObject0.optBoolean("MkHm!: ");
      JSONObject.getNames((Object) "MkHm!: ");
      String string0 = "^a?1b.Ec";
      try { 
        jSONObject1.getLong("^a?1b.Ec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^a?1b.Ec\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.69990855225631
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject.quote("${*0k)pd1kE!.}");
      String[] stringArray0 = JSONObject.getNames((Object) "\"${*0k)pd1kE!.}\"");
      JSONObject jSONObject0 = new JSONObject("${*0k)pd1kE!.}", stringArray0);
      try { 
        jSONObject0.getDouble("${*0k)pd1kE!.}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"${*0k)pd1kE!.}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8772034520289815
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gttoString", true);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.accumulate("gttoString", boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject0.put("gttoString", (Map) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject2.toString();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject3 = jSONObject2.put("{\"java.lang.String@0000000002\":wheel.json.JSONObject@0000000006}", (Collection) linkedList0);
      jSONObject3.optJSONObject("$GdN6jH4");
      jSONObject1.getJSONObject("gttoString");
      JSONArray jSONArray1 = jSONObject0.optJSONArray("isparseByte");
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6516322380597397
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(115, (Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[115] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5378782734884235
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "H$7~n11!VJvTK%h}J@";
      JSONObject jSONObject1 = jSONObject0.put("H$7~n11!VJvTK%h}J@", (-863));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("a6jJ", (Collection) linkedList0);
      jSONObject2.put("A JSONArray text must start with '['", (Collection) linkedList0);
      linkedList0.add(jSONObject1);
      JSONObject jSONObject3 = new JSONObject((Object) "a6jJ");
      // Undeclared exception!
      jSONObject1.toString(8448);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8116946523454565
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("H$7~n11!VJvTK%h}J@", (-863));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("a6jJ", (Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject((Object) "a6jJ");
      jSONObject1.toString((-863), (-863));
      jSONObject1.put("{\n\"java.lang.String@0000000002\": java.lang.Integer@0000000003,\n\"java.lang.String@0000000005\": []\n}", (Object) jSONObject2);
      jSONObject2.optInt("H$7~n11!VJvTK%h}J@");
      try { 
        jSONObject2.getJSONArray(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.776099806298804
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer(3609);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("getintern");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.remove("\"TW)u4t=/");
      JSONObject jSONObject2 = jSONObject0.put("getintern", (Collection) null);
      JSONObject jSONObject3 = jSONObject2.put("getintern", (long) 3609);
      long long0 = jSONObject0.optLong("\"TW)u4t=/");
      assertEquals(0L, long0);
      
      int int0 = jSONObject0.optInt("getintern");
      assertEquals(3609, int0);
      
      jSONObject3.keys();
      assertTrue(integer0.equals((Object)int0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      Collection<Short> collection0 = hashMap0.values();
      String string0 = JSONObject.valueToString(collection0, (-1089), (-1089));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      StringWriter stringWriter0 = new StringWriter(61);
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.write(writer0);
      assertEquals("{}{}", writer0.toString());
      assertEquals("{}{}", stringWriter0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wtt#&7E%[-S";
      stringArray0[1] = "wtt#&7E%[-S";
      stringArray0[2] = "wtt#&7E%[-S";
      JSONObject jSONObject0 = new JSONObject("wtt#&7E%[-S", stringArray0);
      Byte byte0 = new Byte((byte)34);
      jSONObject0.put("wtt#&7E%[-S", (Object) byte0);
      jSONObject0.getDouble("wtt#&7E%[-S");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.292743712176101
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("H$7~n11!VJvTK%h}J@", (-863));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("a6jJ", (Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject((Object) "a6jJ");
      assertEquals(3, jSONObject3.length());
      
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = jSONObject2.getDouble("H$7~n11!VJvTK%h}J@");
      assertEquals((-863.0), double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray((String) null);
      try { 
        jSONObject0.put((String) null, (-1475));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.438955369844398
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long(875L);
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("isdoubleToString", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      JSONObject jSONObject1 = jSONObject0.put("isdoubleToString", false);
      jSONObject1.length();
      Object object0 = jSONObject0.get("isdoubleToString");
      assertEquals(false, object0);
      
      JSONObject jSONObject2 = jSONObject0.put("isdoubleToString", (Map) null);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject2.put("isdoubleToString", (Collection) linkedList0);
      jSONObject2.getJSONArray("isdoubleToString");
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalAnd(true, true);
      JSONObject jSONObject3 = new JSONObject(boolean0);
      assertEquals(1, jSONObject3.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.7569036587561297
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toJSONArray(jSONArray0);
      Byte byte0 = new Byte((byte) (-82));
      JSONObject jSONObject1 = jSONObject0.append("", byte0);
      jSONObject1.getJSONArray("");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long(883L);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isdoubJeTTStr/g", false);
      try { 
        jSONObject1.getJSONObject("isdoubJeTTStr/g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdoubJeTTStr/g\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("H$7~n11!VJvTK%h}J@", (-1142));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("a6jJ", (Collection) linkedList0);
      jSONObject1.getInt("H$7~n11!VJvTK%h}J@");
      Byte byte0 = new Byte((byte)58);
      String string0 = jSONObject2.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.160987391284589
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Byte byte0 = new Byte((byte)8);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(2);
      Integer.sum(2, 3394);
      jSONObject0.append("get", integer0);
      jSONObject0.isNull("get");
      try { 
        jSONObject0.getInt("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.830459244180516
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("QOb\"EXR1?6)pXa]", true);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.length();
      jSONObject1.toString();
      Integer integer0 = new Integer(1);
      Integer.compareUnsigned(4, 596);
      JSONObject.valueToString(integer0);
      boolean boolean0 = jSONObject1.getBoolean("QOb\"EXR1?6)pXa]");
      assertTrue(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Integer@0000000005", 927L);
      JSONArray jSONArray1 = jSONObject2.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3561059745753763
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject1 = jSONObject0.accumulate(")YP_-+?", jSONArray0);
      boolean boolean0 = jSONObject1.optBoolean(")YP_-+?");
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) ")YP_-+?");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.131744970831987
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("H$7~n11!VJvTK%h}J@", (-1142));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.optLong("H$7~n11!VJvTK%h}J@");
      try { 
        jSONObject1.getDouble("J\u0004W3V%TsmR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J\\u0004W3V%TsmR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(883L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("\"\"");
      jSONObject0.put("istoString", (Collection) null);
      Byte byte0 = new Byte((byte)59);
      JSONObject jSONObject1 = jSONObject0.accumulate("istoString", byte0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2090137701606987
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Object) "MkHm!: ");
      JSONObject jSONObject1 = jSONObject0.accumulate("MkHm!: ", boolean0);
      jSONObject1.optBoolean("MkHm!: ");
      try { 
        jSONObject1.getBoolean("Z2*b!Tdmr&:>?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z2*b!Tdmr&:>?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9939858289311718
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("gHgd=$", (Object) boolean0);
      Integer integer0 = new Integer(23);
      JSONObject.valueToString(float0);
      jSONObject1.put("java.lang.Float@000000001", (long) 23);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("@$B>!MHF3v/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of @$B>!MHF3v/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2795643472768354
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject.getNames((Object) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("1]n1X\"Y'jZgi\">CMFP", 0L);
      jSONObject1.getString("1]n1X\"Y'jZgi\">CMFP");
      jSONObject0.getLong("1]n1X\"Y'jZgi\">CMFP");
      jSONObject0.optString("1]n1X\"Y'jZgi\">CMFP");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1764395260381857
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      HashMap<Boolean, Double> hashMap1 = new HashMap<Boolean, Double>();
      hashMap0.putAll(hashMap1);
      Boolean boolean0 = new Boolean("Q//$w//q)B=xe");
      Boolean.logicalAnd(false, false);
      Double double0 = new Double((-626.94862574));
      hashMap0.put(boolean0, double0);
      Double double1 = new Double(0.0);
      Double.isFinite(1.0);
      Boolean boolean1 = Boolean.valueOf(true);
      hashMap0.put(boolean1, double1);
      Double.isFinite(1.0);
      Double.min(207.545407840733, 0.0);
      hashMap0.replace((Boolean) null, double1, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put((Boolean) null, double1);
      jSONObject0.optLong("wa");
      JSONObject jSONObject1 = jSONObject0.put("toS", 467.9452071228);
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject1.append("toS", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[toS] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1098171340858656
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", false);
      jSONObject1.getBoolean("Substring bounds error");
      jSONObject0.length();
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.46769983754709
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Object object0 = new Object();
      jSONObject0.accumulate("m", object0);
      String string0 = jSONObject0.optString("m", "m");
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0527739011048984
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Long.getLong("", 0L);
      Byte byte0 = new Byte((byte)8);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.accumulate("", byte0);
      jSONObject1.optLong("");
      Object object0 = jSONObject1.get("");
      Byte.toUnsignedInt((byte) (-50));
      try { 
        jSONObject1.append("", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", (-2934L));
      long long0 = jSONObject1.getLong("JSON does not allow non-finite numbers.");
      assertEquals((-2934L), long0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2103209597031823
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.put("gHgd=$", (Object) boolean0);
      jSONObject0.optBoolean("gHgd=$", false);
      Float.min(0.0F, (-2727.6143F));
      jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("H$7~n11!VJvTK%h}J@", (-1142));
      jSONObject1.optDouble("H$7~n11!VJvTK%h}J@", (double) (-1142));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      byte byte0 = (byte) (-116);
      Byte byte1 = new Byte((byte) (-116));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("<L^$XQ/ROmG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of <L^$XQ/ROmG
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7687132192203148
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer(3648);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.optBoolean("");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.toString((-2196), 3648);
      JSONObject jSONObject1 = jSONObject0.put("ws=;Hav", (Map) null);
      jSONObject0.opt("");
      jSONObject0.put("ws=;Hav", (Map) null);
      JSONObject jSONObject2 = new JSONObject((Object) "{}");
      JSONObject jSONObject3 = jSONObject2.put("[", (Map) null);
      jSONObject0.keys();
      jSONObject3.put("[", (-1138));
      JSONObject jSONObject4 = jSONObject1.put("PAi-Jc^O", (-676));
      jSONObject1.optDouble("9?{~$");
      Long long0 = new Long((-2196));
      jSONObject2.accumulate("9?{~$", long0);
      jSONObject4.opt("ws=;Hav");
      try { 
        jSONObject0.getLong("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8133555239257966
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "A JSONArray text must start with '['");
      JSONObject.quote("}/H)BO#4Z0");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "}/H)BO#4Z0";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "}/H)BO#4Z0";
      JSONObject jSONObject1 = jSONObject0.put("}/H)BO#4Z0", (-1L));
      jSONObject0.optDouble("}/H)BO#4Z0");
      Short short0 = new Short((short)514);
      JSONObject.valueToString(short0);
      jSONObject0.toString((-1370), (-2408));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject2 = new JSONObject("}/H)BO#4Z0", stringArray0);
      jSONObject2.isNull("d#~M1]%[F\"c^;vvbe}");
      jSONObject0.put("\"}/H)BO#4Z0\"", (double) (short)514);
      JSONObject.valueToString(jSONObject0, (-1370), (short)514);
      jSONObject1.accumulate("' and instead saw '", "A JSONArray text must start with '['");
      assertEquals(6, jSONObject1.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.219920431318263
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Byte byte0 = new Byte((byte)8);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-10));
      Integer integer1 = new Integer((byte)8);
      JSONObject.valueToString("ha");
      JSONObject jSONObject1 = jSONObject0.put("get", (long) (byte)8);
      double double0 = jSONObject1.optDouble("get");
      assertEquals(8.0, double0, 0.01);
      
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      int int0 = jSONObject0.optInt("\t", (-10));
      assertEquals((-10), int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("isnMtify", "isnMtify");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = jSONObject0.optString("]RR2-");
      assertEquals("", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("og8oFLMZk", "og8oFLMZk");
      jSONObject1.accumulate("og8oFLMZk", jSONObject0);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2488215410938253
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("] is not a JSONArray.");
      JSONObject.getNames((Object) "\"g1.&U|9{");
      try { 
        jSONObject0.append((String) null, "] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.5791671892683463
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.toString((-3351));
      int int0 = jSONObject0.optInt("9$-Ld=A *C", (-3351));
      assertEquals((-3351), int0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("toS");
      stringWriter0.append((CharSequence) "\"toS\"");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("'5x6Kx[", (Collection) linkedList0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.105019573460502
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("0", 988);
      Object object1 = jSONObject1.get("0");
      assertEquals(2, jSONObject0.length());
      assertEquals(988, object1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.0897004112551643
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "\\Ijfh3ojH";
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("Ijfh3ojH", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("Ijfh3ojH", "Ijfh3ojH");
      try { 
        jSONObject1.getInt("Ijfh3ojH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ijfh3ojH\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.2039958490137452
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("\"\"", (Collection) linkedList0);
      jSONObject1.getString("\"\"");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.5301804704258064
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "<&s";
      JSONObject jSONObject0 = new JSONObject((Object) "<&s");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("<&s", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      String string1 = jSONObject0.toString(150, 555);
      String string2 = JSONObject.quote(string1);
      jSONObject1.optDouble(string2);
      // Undeclared exception!
      JSONObject.quote(string2);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      int int0 = jSONObject0.optInt("_[KCqjHi,", 4383);
      assertEquals(4383, int0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5716989046975223
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      String string0 = jSONObject0.toString(150, 555);
      String string1 = JSONObject.quote(string0);
      JSONObject.quote(string1);
      Long.getLong("Scc:2N?F/f", (-1536L));
      byte byte0 = (byte)8;
      // Undeclared exception!
      jSONObject1.getDouble(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.9948516297969727
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.9853278202731631
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.574778536606728
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      int int0 = jSONObject0.optInt("{}", 101);
      assertEquals(101, int0);
      
      String string1 = jSONObject1.toString(23, 106);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("Ijfh3ojH", stringArray0);
      Long long0 = new Long(1674L);
      JSONObject jSONObject1 = jSONObject0.accumulate("}", long0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = jSONObject1.getInt("}");
      assertEquals(1674, int0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1381), (-1381));
      assertEquals("null", string0);
      
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4954128440366972
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(188, 188);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 188, 188);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.120638772827693
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(object0);
      String string0 = jSONObject0.toString(150, 555);
      String string1 = JSONObject.quote(string0);
      jSONObject2.optDouble(string1);
      JSONObject.quote(string1);
      jSONObject1.toString(123, 555);
      double double0 = new Double(Double.NaN);
      jSONObject2.optBoolean(".", false);
      Float.min(4, (-194.706F));
      jSONObject2.toString();
      JSONObject.valueToString("{\"java.lang.String@0000000014\":\"java.lang.Class@0000000015\"}", 4, 555);
      jSONObject2.put(".", (long) 150);
      // Undeclared exception!
      jSONObject2.getLong(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.6497028762095836
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      linkedList0.add(jSONObject0);
      jSONObject0.toString(150, 55);
      jSONObject2.optDouble("\r");
      JSONObject.doubleToString((-1294.352786033611));
      jSONObject1.has("");
      assertEquals(4, jSONObject0.length());
      
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte)105);
      String string0 = JSONObject.quote("E],.'P68");
      assertEquals("\"E],.'P68\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optInt("");
      String string0 = "\\u";
      Long long0 = new Long((-73L));
      JSONObject jSONObject1 = jSONObject0.putOpt(string0, long0);
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject1.append(string0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\\u] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.quote("y\n");
      assertEquals("\"y\\n\"", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.046085738959629
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "HM/)";
      jSONObject0.put("HM/)", (Map) null);
      try { 
        jSONObject0.getJSONArray("HM/)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HM/)\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "x.8Rc]^/qMu~i|_";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("x.8Rc]^/qMu~i|_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of x.8Rc]^/qMu~i|_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 1L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-3204), (-1853));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.675051214795301
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetLong", (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote("|_p`O<\"S%/BBUc");
      assertEquals("\"|_p`O<\\\"S%/BBUc\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.2039958490137452
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Double double0 = new Double(0.0F);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(14, 4951);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.1522536010540225
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject.quote("??tYv1-");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"??tYv1-\"";
      stringArray0[1] = ";*z-.B";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(857);
      jSONObject0.write(stringWriter0);
      jSONObject0.opt(";*z-.B");
      jSONObject0.toString();
      Byte byte0 = new Byte((byte)25);
      jSONObject0.putOpt("\"??tYv1-\"", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.1316056923621347
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject.quote("??tYv1-");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"??tYv1-\"";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(857);
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      jSONObject0.opt(stringArray0[1]);
      jSONObject0.optBoolean(":'oz6QLL");
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("${*0k)pd1kE!.}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"${*0k)pd1kE!.}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("'", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.100963336162914
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float((-3484.5342F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      jSONObject0.toString(150, 61);
      jSONObject0.remove("{\n                                                                                                                                                                                                                   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                                                   \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                                                   \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                             }");
      assertEquals(3, jSONObject0.length());
      
      StringWriter stringWriter0 = new StringWriter(0);
      JSONObject jSONObject1 = new JSONObject("{\n                                                                                                                                                                                                                   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                                                                                                                                                   \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                                                                                                                                                   \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                                             }");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "{6w\"W2a";
      JSONTokener jSONTokener0 = new JSONTokener("{6w\"W2a");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {6w\"W2a
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.put("{}", 897.22509);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Long long0 = new Long(883L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("000", 0.029360762282333277);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, 1431, (-1912));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("H$7~n11!VJvTK%h}J@", (-863));
      String string0 = JSONObject.valueToString(jSONObject0, (-863), (-863));
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.doubleToString((-1217.7));
      assertEquals("-1217.7", string0);
      
      String string1 = JSONObject.valueToString(jSONArray0, (-3896), 343);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double((-1294.8688465898501));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(0, (-2164));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.0698079367832465
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-1L));
      assertEquals((-1L), long0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8980861166742309
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.optLong("vvfkD+SXunz~p", 0L);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.quote("%4|eUr\t8V");
      assertEquals("\"%4|eUr\\t8V\"", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = JSONObject.quote(".asCL/s.TT");
      assertEquals("\".asCL/s.TT\"", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7235632430715113
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
      
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.2603967218250913
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray((String) null);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.toString((-1139));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      
      jSONObject0.putOpt((String) null, jSONArray0);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("Ijfh3ojH", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("isreverseBytes", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(".TB<\"fFh[VD(y_W!", ".TB<\"fFh[VD(y_W!");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("uN+d<Lo,", 2734.250400407216);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.9747595558674815
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(",", true);
      assertTrue(boolean0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = jSONObject0.toString(3703, 3703);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4771123124520242
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(30);
      jSONObject0.put("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", true);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.3328462280962987
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(380);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-233), (-233));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(9, 9);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.9948516297969727
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("p\"4");
      assertEquals("\"p\\\"4\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("|WP8v(@J#Hm", false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Collection) linkedList0);
      jSONObject1.optLong("] is not a Boolean.");
      try { 
        jSONObject0.getDouble("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("XzHx)=k");
      jSONObject0.accumulate("XzHx)=k", boolean0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getLong("XzHx)=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XzHx)=k\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.7511893730418442
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "mv9k AkJ>/-7t_`|LjFv");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject0.put("is", (Map) hashMap0);
      try { 
        jSONObject0.getBoolean("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.5952629603288848
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("get");
      boolean boolean0 = jSONObject0.optBoolean("get");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "get";
      stringArray0[1] = "IE7/=3?t6";
      stringArray0[2] = "[]";
      stringArray0[3] = "r,KG1 Ck;qM";
      stringArray0[4] = "JSONArray initial value should be a string or collection or array.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.has("r,KG1 Ck;qM");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("wa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, (-12.0));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.accumulate("R{Jo:{F0Zo", "R{Jo:{F0Zo");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Float float0 = new Float(592.8F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Double double0 = new Double(0.0F);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONArray0, (-1381), (-1381));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("v}GoX{u{Xb{j2$6XO?");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of v}GoX{u{Xb{j2$6XO?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.5998344474620394
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("QOb\"EXR1?6)pXa]", true);
      jSONObject0.names();
      jSONObject0.toString(1892, 1892);
      jSONObject0.remove("QOb\"EXR1?6)pXa]");
      JSONObject.quote("QOb\"EXR1?6)pXa]");
      jSONObject1.optDouble("\"QOb\"EXR1?6)pXa]\"");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("getgetJSONObject");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("A", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("`oY ,!Kv=|0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`oY ,!Kv=|0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("WF'5jG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WF'5jG\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("`* 1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of `* 1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.9918959647723422
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Float float0 = new Float((-3497.9033F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.valueToString(float0);
      jSONObject0.isNull("|.");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }
}
