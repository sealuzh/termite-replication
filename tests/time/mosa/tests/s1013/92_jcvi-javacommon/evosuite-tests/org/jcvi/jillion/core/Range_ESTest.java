/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 00:22:44 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.814378503171271
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1419L, 9223372036854775807L);
      Range range2 = Range.of(1419L);
      range2.iterator();
      Object object0 = new Object();
      range1.equals(object0);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.443300027002431
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.of(2511L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(2511L, 2511L);
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of((-63L), 9223372036854714451L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd();
      assertEquals(9223372036854775807L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.387415595320563
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1L), 32767L);
      Range.of((-1L), 127L);
      // Undeclared exception!
      try { 
        Range.of(32767L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4002030538378456
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(159L, 1960L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(159L);
      range1.getLength();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("NxCx/AQ23W~kE6RG5@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.NxCx/AQ23W~kE6RG5@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.89226804795603
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-1L), 32767L);
      Range range1 = Range.of(32767L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      
      range1.getLength();
      List<Range> list1 = range1.complement(range0);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.542914720681621
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(2511L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(2511L, 2511L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      Range range2 = Range.of(1118L, 4294967295L);
      range2.equals(range0);
      List<Range> list0 = range1.complement(range2);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1320150760941314
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.of(0L);
      Range.ofLength(0L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.9488406427744027
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range.of(1375L);
      range0.equals("org.jcvi.jillion.core.io.IOUtil");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(1L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Long.compareUnsigned(9223372036854714432L, 9223372036854714432L);
      Range range0 = Range.of(784L, 9223372036854775807L);
      String string0 = "SPACE_BASED";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("Null Range used in intersection operation.", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Null Range used in intersection operation. into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.547688865947104
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(1L);
      Object object0 = new Object();
      Long long0 = new Long(1L);
      range0.equals(range1);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Range range2 = Range.of(1014L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(24L, 24L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6732206103378267
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(368L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.of(80L);
      long long0 = (-4802L);
      range0.spliterator();
      range_Builder0.expandEnd((-4802L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5683287439167732
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-1074L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1074 .. 32768 ]/SB", string0);
      
      List<Range> list0 = range0.split(32767L);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = Range.of(959L, 9223372032559808512L);
      Long long0 = new Long(9223372032559808512L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4424469472939303
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long.compareUnsigned(4294967295L, 1801L);
      Range range0 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.8315315626651096
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1L), (-1826L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.8096148085656387
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 127 ]/RB", string0);
      
      range1.getLength();
      Range range2 = Range.parseRange("[ 1 .. 127 ]/RB");
      List<Range> list0 = range0.complement(range2);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.543393769551864
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(18L, 9223372036854714432L);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object1 = new Object();
      Range.ofLength(9223372036854714432L);
      Range range1 = Range.ofLength(9223372036854714432L);
      range0.equals(range1);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(2147483646L, 2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2023030746654286
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L);
      Range range1 = Range.of(9223372036854714432L, 9223372036854714432L);
      range0.equals((Object) null);
      range0.isEmpty();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-8L));
      Range range1 = Range.of((-8L), (-8L));
      range0.startsBefore(range1);
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem1.toString();
      assertEquals("Zero Based", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9799561547384963
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(1081L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6759962171792218
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-3L), 9223372036854714432L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854714432L);
      boolean boolean0 = range1.startsBefore(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-2592L), 1084L);
      Range range1 = range0.asRange();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5420834133331778
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-8L));
      Range range1 = Range.of((-8L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-1751L), (-1751L));
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-1751L), (-1751L));
      range3.iterator();
      range3.equals(object0);
      Range range4 = Range.of(range_CoordinateSystem0, (-1751L), (-1751L));
      assertTrue(range4.isEmpty());
      assertSame(range4, range3);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.389206256730664
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L, 9223372036854714432L);
      Range range1 = Range.ofLength(9223372036854714432L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      
      List<Range> list1 = range0.split(9223372036854714432L);
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1346325508541963
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.of(9223372036854714432L);
      Range range0 = Range.ofLength(9223372036854714432L);
      Range range1 = Range.ofLength(9223372036854714432L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.717628942075181
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Range range1 = Range.of(2357L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.505941135456977
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-991L), (-491L));
      range0.iterator();
      Range range1 = Range.of((-491L), 2147483647L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(820L, 65535L);
      Range range1 = Range.of(65535L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.of(14L, 9223372036854714444L);
      Range range0 = Range.ofLength(14L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6910517378300467
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-2692L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-2692L));
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(0L);
      range0.iterator();
      Range range1 = Range.ofLength(999L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = range1.equals(object0);
      assertFalse(boolean1);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(1L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      assertSame(range_CoordinateSystem1, range_CoordinateSystem0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6085198112745336
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2696985488293766
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854714432L);
      Object object0 = new Object();
      range0.iterator();
      Range range1 = Range.ofLength(9223372036854714432L);
      Range range2 = Range.ofLength(9223366790552226187L);
      range0.equals(range2);
      range0.getEnd();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-487L), (-128L));
      // Undeclared exception!
      try { 
        range1.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.ofLength(9223372034707359664L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.494332469873285
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L, 9223372036854714432L);
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854714432L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L);
      Range range1 = Range.ofLength(9223372036854714432L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 329L, 686L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(582L, 582L);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(0L);
      range0.iterator();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9751224365093942
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-1424L));
      Range range1 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range2);
      assertSame(range2, range1);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.315608610650334
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.of(329L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775479L, (-536L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -536 would make range [9223372036854775479 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2672123781537596
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(2511L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(2511L, 2511L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(2511L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.588695035517939
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(2355L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(2511L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(2511L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2080377182661097
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = 1801L;
      Range range0 = Range.of(1801L, 65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.265126035672617
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(959L, 959L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.isEmpty();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(range0.isEmpty());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.7690057131206767
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
      
      Range range4 = range0.asRange();
      Range range5 = Range.of(4294967295L, 4294967295L);
      range1.iterator();
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range4.toString(range_CoordinateSystem1);
      assertSame(range4, range5);
      assertEquals("[ 4294967295 .. 4294967295 ]/0B", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(2355L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.8169412782655976
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(0L, 9223372036854714432L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854714432L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      //  // Unstable assertion: assertFalse(list1.contains(range1));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372034707292162L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483648 would make range [9223372034707292162 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.4546266136495154
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L);
      Range range1 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      boolean boolean0 = range2.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.5641959169446134
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-2062L), 65535L);
      Range range1 = Range.of(1660L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5424320539339678
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L, 9223372036854714432L);
      Range range1 = Range.ofLength(9223372036854714432L);
      boolean boolean0 = range0.equals(range1);
      Range range2 = Range.ofLength(729L);
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertTrue(boolean1 == boolean0);
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem.values();
      String string0 = range2.toString();
      assertEquals("[ 0 .. 728 ]/0B", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of((-1238L), 4294967288L);
      Long long0 = new Long((-1442L));
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 955L, (-1238L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.267538217189276
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.of(9223372036854714432L, 9223372036854714432L);
      Range range0 = Range.ofLength(9223372036854714432L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5418197350207192
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L, 9223372036854714432L);
      Range.of(1040L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range range2 = Range.of((-1L), 9223372036854714432L);
      range2.equals((Object) null);
      range0.iterator();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.equals("%=xSb?_T3]{#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.2023030746654286
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
      
      Range range2 = range1.asRange();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(9952L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      assertEquals(Range.CoordinateSystem.SPACE_BASED, range_CoordinateSystem0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3545344305579152
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.441171005310231
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(959L, 959L);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.ofLength(4294967295L);
      Range range3 = Range.ofLength(4294967295L);
      boolean boolean0 = range3.equals(range2);
      assertTrue(boolean0);
      assertSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.8672892166672472
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.toString();
      Object object0 = new Object();
      range0.equals(object0);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1L, 1549L);
      Range range1 = Range.ofLength(1L);
      Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem0);
      range1.getEnd();
      Range range2 = range_Builder0.build();
      range1.getBegin(range_CoordinateSystem0);
      range1.spliterator();
      Range.of(range_CoordinateSystem0, (-607L), 0L);
      range1.iterator();
      range1.getLength();
      Range.of(1142L);
      List<Range> list0 = range2.split(1L);
      // Undeclared exception!
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.614987848454748
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-1L), 1388L);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1 .. 1388 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ -1 .. 1388 ]/0B", range_CoordinateSystem0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.756317178590878
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(9997L);
      Range range1 = Range.of((-129L));
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list0.contains(range1));
      assertTrue(list2.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.676486432228824
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-767L), 0L);
      Range range2 = Range.ofLength(1801L);
      boolean boolean0 = range0.endsBefore(range2);
      range0.iterator();
      List<Range> list0 = range2.complement(range0);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
      
      boolean boolean1 = range1.startsBefore(range2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.387145951444552
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(0L, 9223372036854714484L);
      range0.iterator();
      Object object0 = new Object();
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.ofLength(0L);
      range1.equals(range2);
      //  // Unstable assertion: assertSame(range2, range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      Range range3 = Range.ofLength(9223372036854714484L);
      //  // Unstable assertion: assertNotSame(range3, range0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L);
      boolean boolean0 = range0.equals(range0);
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(0L, 9223372036854714484L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854714484L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L);
      Range range1 = Range.ofLength(9223372036854714432L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.623914127708201
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.intersects(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.ofLength(0L);
      range2.endsBefore(range0);
      range0.equals(range2);
      range0.getLength();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.5214083516989985
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.of(2643L, 2643L);
      Object object0 = new Object();
      Range range0 = Range.ofLength(2643L);
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.split(2643L);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.6330551915389058
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.5886727851118687
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(2355L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Long.compareUnsigned(4294967295L, 4294967295L);
      Range range0 = Range.of(333L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.541958335159319
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-725L), 65535L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Long.compareUnsigned(0L, 822L);
      Range range0 = Range.of((-2045L), 0L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L), (-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.76464523737426
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-32756L), 9952L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -32755 .. 9953 ]/RB", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.of(2984L, 3424L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.152573647162874
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(65535L);
      boolean boolean0 = range0.equals("cluster distance can not be negative");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-2147483627L), (-2147483627L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-2692L), 65536L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-8L), 9223372036854714432L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-2147483660L), (-2147483660L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.7743323932223474
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L, 9223372036854714432L);
      Range range1 = Range.ofLength(9223372036854714432L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(1L);
      List<Range> list1 = range2.split(1L);
      assertFalse(list1.contains(range0));
      assertTrue(list1.contains(range2));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.2062451469505855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-32756L), 9972L);
      List<Range> list0 = range0.split(9972L);
      assertEquals(5, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(2147483648L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.3037208868785237
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      Range range0 = Range.of((-491L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-490L), long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.2672123781537596
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range1 = Range.of((-2692L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.519025627682888
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-8L), 9223372036854714432L);
      Range range1 = Range.of(9223372036854714432L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range2 = Range.of(9223372036854714432L);
      List<Range> list0 = range1.complement(range2);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      
      long long0 = range2.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.4905971579909782
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(959L, 959L);
      Range range1 = Range.of(959L, 1081L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      boolean boolean0 = range1.isSubRangeOf(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      long long0 = range1.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(959L, long0);
      
      boolean boolean1 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean1);
      
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-956L), (-491L));
      Object object0 = new Object();
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.2026738570161886
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-9L), 9223372036854714484L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854714484L);
      range1.endsBefore(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.889123342973809
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.3891758744699407
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.of(9223372036854714432L);
      Range range0 = Range.ofLength(9223372036854714432L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.2254962211604985
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-8L));
      range0.getEnd();
      Range.of((-890L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = 9972L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9972L, (-32757L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.3857846019328623
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9997L, 9997L);
      Range range1 = Range.of(9997L);
      range0.toString();
      range0.isSubRangeOf(range1);
      Long long0 = new Long(9997L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 9997 .. 9996 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 9997 .. 9996 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Long.compareUnsigned(4294967295L, 4294967295L);
      Range range0 = Range.ofLength(0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = range0.equals(integer0);
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.3844894049549885
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long.compareUnsigned(4294967295L, 4294967295L);
      Range range0 = Range.ofLength(0);
      Range range1 = Range.of((long) 0, 4294967295L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertFalse(list0.isEmpty());
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036826086905L, 9223372036826086905L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.4619358141871412
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 558L, 558L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L);
      Range range1 = Range.of(9223372036854714432L, 9223372036854714432L);
      boolean boolean0 = range1.startsBefore(range1);
      assertFalse(boolean0);
      
      range0.isEmpty();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of(2147483647L, 9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-1424L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(2354L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.4390626350804188
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.ofLength(0L);
      range1.getLength();
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.6344547148896487
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(2549L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.contractEnd(2549L);
      range0.complement(range0);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      range1.intersection(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(32767L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.540818734019718
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(987L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(987L, 987L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.058282690794871
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(2705L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      assertTrue(list0.contains(range1));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.4600953571395916
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(0L, 9223372036854714484L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854714484L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.543305892711256
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L);
      Range range1 = Range.ofLength(9223372036854714432L);
      // Undeclared exception!
      try { 
        range1.complement(range0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.2655736183106976
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(0L);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.3304200479668307
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-8L), 9223372036854714432L);
      range0.toString();
      Range range1 = Range.parseRange("[ -8 .. 9223372036854714432 ]/0B");
      // Undeclared exception!
      try { 
        range1.split(9223372036854714432L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -122745 would make range [9223372036854714440 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.5418197350207192
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(959L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 959L, 959L);
      List<Range> list0 = new LinkedList<Range>();
      range1.complementFrom(list0);
      Long long0 = new Long(959L);
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long1);
      
      range_Builder0.expandBegin(0L);
      Range range2 = Range.of((-1862L), 800L);
      Range range3 = range2.intersection(range0);
      assertNotSame(range3, range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.65623545865907
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(995L, 995L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(995L, 995L);
      range_Builder0.expandBegin(995L);
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 995 .. 995 ]/0B", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.05725704976923
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1890760075458306
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-2692L));
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2692 .. -2691 ]/SB", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.0581000423930447
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1935L, 1935L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2112L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.1396664047217486
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(121L);
      String string0 = range0.toString();
      assertEquals("[ 121 .. 121 ]/0B", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.386495788903917
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(9223372036854714432L);
      Range range1 = Range.of(308L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.892740633623113
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.112227645912027
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(919L);
      Range range0 = Range.ofLength(919L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(2433L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.4429013675112197
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(959L);
      long long0 = range0.getBegin();
      assertEquals(959L, long0);
      
      Range range1 = Range.of(959L, 998L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.460766086733638
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.of(2355L, 2355L);
      Range range0 = Range.ofLength(2355L);
      range0.getBegin();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(959L, 959L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(959L, long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.976709928476526
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854773872L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 65536 .. 9223372036854773873 ]/RB", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.388188351782628
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-2692L));
      Range range1 = Range.of((-2692L), (-2692L));
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.1342029606832194
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(2676L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.6334533996026193
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(2188L);
      long long0 = range0.getEnd();
      assertEquals(2187L, long0);
      
      Range range1 = Range.ofLength(2188L);
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(2147483648L, 2147483648L);
      assertFalse(range0.isEmpty());
      
      List<Range> list0 = range0.split(2147483648L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.3851086000014283
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.797321935099309
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.6332915727573436
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      range_Builder0.expandEnd((-1L));
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.contractBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("b7o", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse b7o into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2433L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Range range0 = Range.of(2433L, 2433L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of((-709L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of((-595L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-1057L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
