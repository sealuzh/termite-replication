/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 00:45:59 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3833708337453663
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(2);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.setColName(0, "Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      resultMatrixHTML0.getMeanWidth();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0225686557920652
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.m_RemoveFilterName = false;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixGnuPlot0.setStdDevWidth(141);
      resultMatrixSignificance0.clearHeader();
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray0[0] = doubleArray1;
      resultMatrixCSV0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.m_ColNameWidth = 0;
      resultMatrixPlainText0.getDefaultPrintColNames();
      resultMatrixPlainText0.getDefaultCountWidth();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.12119508891845
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      String[] stringArray0 = new String[0];
      ResultMatrixPlainText.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixCSV0.getSignificanceWidth();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.339216950647034
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_HeaderValues = null;
      resultMatrixSignificance0.getSummaryTitle(85);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringSummary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.777012791336485
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1677, 2);
      resultMatrixCSV0.setOptions((String[]) null);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 1);
      // Undeclared exception!
      resultMatrixCSV1.assign(resultMatrixCSV0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2348527783044725
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRowNameWidth(2);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.setColHidden(1, false);
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixSignificance1);
      resultMatrixSignificance2.getDisplayCol(2);
      resultMatrixSignificance2.getDefaultShowStdDev();
      String[][] stringArray0 = new String[5][1];
      String[] stringArray1 = new String[1];
      stringArray1[0] = ")";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[1];
      stringArray2[0] = "";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[5];
      stringArray3[0] = "v";
      stringArray3[1] = ")";
      stringArray3[2] = "*";
      stringArray3[3] = ">;wc5+~FaOe8PHj*";
      stringArray3[4] = "";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[9];
      stringArray4[0] = " ";
      stringArray4[1] = "(";
      stringArray4[2] = "";
      stringArray4[3] = " ";
      stringArray4[4] = " ";
      stringArray4[5] = "";
      stringArray4[6] = ")";
      stringArray4[7] = "";
      stringArray4[8] = " ";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[4];
      stringArray5[0] = " ";
      stringArray5[1] = "*";
      stringArray5[2] = " ";
      stringArray5[3] = "*";
      stringArray0[4] = stringArray5;
      resultMatrixSignificance1.getColSize(stringArray0, 0, false, true);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.121495713164891
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.clearSummary();
      String[] stringArray0 = new String[0];
      resultMatrixSignificance0.setOptions(stringArray0);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      resultMatrixSignificance0.trimString("d", (-3488));
      ResultMatrixSignificance.main(stringArray0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2956154562448297
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(1, 82);
      resultMatrixSignificance0.setColHidden((-764), false);
      resultMatrixSignificance0.getDisplayCol(1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.382452921178722
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      resultMatrixCSV0.setCountWidth(16);
      resultMatrixLatex0.getSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixCSV0.getDefaultEnumerateRowNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringKey();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.9397180006771277
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.getOptions();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixSignificance0.getAverage(0);
      resultMatrixSignificance1.toStringMatrix();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.210310743778538
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.setColHidden(8, false);
      resultMatrixSignificance1.getDisplayCol(0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2573108711379395
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      resultMatrixCSV0.getMean(0, 1);
      resultMatrixLatex0.getSignificance(0, 0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getDefaultCountWidth();
      resultMatrixLatex0.stdDevWidthTipText();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4872576972828044
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[10][3];
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      resultMatrixSignificance0.getDisplayCol((-1291));
      ResultMatrixSignificance resultMatrixSignificance1 = null;
      try {
        resultMatrixSignificance1 = new ResultMatrixSignificance((-416), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8296793181386266
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setPrintRowNames(true);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixCSV0.m_HeaderValues = vector0;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixCSV0.toStringKey();
      resultMatrixHTML0.toStringSummary();
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixLatex0.getDisplayRow(1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.889603785982917
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.getAverage(1);
      resultMatrixHTML1.setSignificance(0, 3306, 1619);
      resultMatrixSignificance0.countWidthTipText();
      resultMatrixSignificance0.removeFilterNameTipText();
      resultMatrixSignificance0.getAverage(0);
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV((-39), 3306);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.347965059077318
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1);
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[10][3];
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      resultMatrixHTML0.setSignificance(1, (-247), (-393));
      resultMatrixSignificance0.countWidthTipText();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4416848037957424
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(8, 8);
      resultMatrixSignificance0.setColHidden(8, false);
      resultMatrixSignificance0.getDisplayCol(1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2990052063386157
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRowHidden(0);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      resultMatrixCSV0.getVisibleColCount();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.toStringKey();
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.781776142865967
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRowHidden(73);
      int int0 = 3;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(3, 110);
      resultMatrixLatex0.setRowNameWidth(1);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 0);
      resultMatrixCSV0.setCount(0, 110);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 73;
      intArray0[5] = 1;
      intArray0[6] = 2;
      intArray0[7] = 3;
      resultMatrixCSV0.m_ColOrder = intArray0;
      int int1 = 66;
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(0, 1);
      resultMatrixLatex0.setRowNameWidth(110);
      resultMatrixCSV0.getRevision();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      // Undeclared exception!
      try { 
        resultMatrixLatex1.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.210310743778538
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setColHidden(0, false);
      int int0 = resultMatrixSignificance0.getDisplayCol(0);
      assertEquals(0, int0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.getRevision();
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.541904636676301
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      double double0 = resultMatrixCSV0.getMean((-1631), (-2220));
      assertEquals(0.0, double0, 0.01);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      assertEquals(0, resultMatrixGnuPlot1.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertEquals(2, resultMatrixGnuPlot1.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6750235273176433
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      boolean boolean0 = resultMatrixGnuPlot0.getPrintRowNames();
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      resultMatrixHTML0.setRowOrder(intArray0);
      resultMatrixHTML0.showStdDevTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText0.toStringKey();
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Key:\n(1) col0\n", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4478790382112408
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 0);
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getSignificance(2, (-2443));
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      boolean boolean0 = resultMatrixGnuPlot0.isMean(1);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(boolean0);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8202528655293415
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixCSV0.setColOrder(intArray0);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixSignificance0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixHTML0.getDefaultStdDevWidth();
      String[][] stringArray0 = new String[5][2];
      String[] stringArray1 = new String[6];
      stringArray1[0] = "*";
      stringArray1[1] = " ";
      stringArray1[2] = "gOb&](";
      stringArray1[3] = "(";
      stringArray1[4] = ")";
      stringArray1[5] = ")";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      stringArray2[0] = "*";
      stringArray2[1] = " ";
      stringArray2[2] = "]";
      stringArray2[3] = "(";
      stringArray2[4] = "vV+L`J KvmL\"xUi";
      stringArray2[5] = ")";
      stringArray2[6] = "]";
      stringArray2[7] = ")";
      stringArray2[8] = "Dataset (1)\n-----------\nrow0       \n";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[0];
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[6];
      stringArray4[0] = ")";
      stringArray4[1] = " ";
      stringArray4[2] = "(";
      stringArray4[3] = "v";
      stringArray4[4] = "gOb&](";
      stringArray4[5] = ")";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[8];
      stringArray5[0] = "title \"";
      stringArray5[1] = ")";
      stringArray5[2] = "v";
      stringArray5[3] = "gOb&](";
      stringArray5[4] = ")";
      stringArray5[5] = ")";
      stringArray5[6] = "(";
      stringArray5[7] = "(";
      stringArray0[4] = stringArray5;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.getColSize(stringArray0, 0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.653159853606753
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[3];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(97, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.toStringKey();
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 97;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 97;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 97;
      doubleArray2[4] = (-1902.13472);
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (-1081);
      doubleArray3[1] = (-1902.13472);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 97;
      doubleArray4[1] = (double) 34;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) (-1081);
      doubleArray5[3] = (double) 1;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = (double) 34;
      doubleArray5[6] = (-1902.13472);
      doubleArray0[4] = doubleArray5;
      resultMatrixCSV0.m_StdDev = doubleArray0;
      resultMatrixCSV0.setMeanPrec((-1081));
      assertEquals(0, resultMatrixLatex0.getVisibleRowCount());
      
      double double0 = resultMatrixCSV0.getStdDev(34, 0);
      assertEquals(0.0, double0, 0.01);
      
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.getVisibleColCount();
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixLatex0.getRowNameWidth();
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.195185233124568
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      double double0 = resultMatrixCSV0.getMean(0, 0);
      assertEquals(Double.NaN, double0, 0.01);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.494394930297573
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      double double0 = resultMatrixCSV0.getStdDev(70, 56);
      assertEquals(0.0, double0, 0.01);
      
      resultMatrixCSV0.assign(resultMatrixHTML1);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      
      resultMatrixSignificance0.getRevision();
      resultMatrixHTML1.setMean(0, 1448, 1448);
      assertEquals(1, resultMatrixHTML1.getRowCount());
      assertFalse(resultMatrixHTML1.getShowStdDev());
      
      resultMatrixSignificance0.getDefaultStdDevWidth();
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.538423146798994
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRowNameWidth(2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(26, 1);
      resultMatrixCSV0.getMean(0, (-1128));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixCSV0.getStdDev(12, 2502);
      resultMatrixCSV0.assign(resultMatrixGnuPlot0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixSignificance0.getRevision();
      assertEquals(2, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.355598908940037
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      resultMatrixSignificance0.setRowNameWidth(2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(77, 0);
      resultMatrixGnuPlot0.m_ColNameWidth = 2;
      resultMatrixCSV0.getMean(56, 0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixCSV0.getStdDev(2952, 207);
      resultMatrixCSV0.assign(resultMatrixSignificance0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixSignificance0.getRevision();
      String[][] stringArray0 = new String[0][0];
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getColSize(stringArray0, 207);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.9727110800819427
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setEnumerateColNames(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixLatex0.setRowNameWidth(0);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.setCount((-2124), 0.0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(1363, 2);
      resultMatrixLatex1.setRowNameWidth(731);
      resultMatrixCSV1.getRevision();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixLatex0.getColName(1363);
      ResultMatrixCSV resultMatrixCSV2 = null;
      try {
        resultMatrixCSV2 = new ResultMatrixCSV(8, (-2666));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2286443931453856
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.colNameWidthTipText();
      // Undeclared exception!
      resultMatrixSignificance0.setSize(2187, 97);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=4.039084953990937
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setEnumerateColNames(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixLatex0.setRowNameWidth(2);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixCSV0.m_PrintColNames = false;
      resultMatrixCSV0.setCount(1089, (-2418.9071782));
      resultMatrixLatex0.setRowNameWidth(1);
      resultMatrixLatex0.TIE_STRING = "\begin{table}[thb]\ncaption{label{labelname}Table Caption}\n\footnotesize\n{centering \begin{tabular}{lr}\n\\\nhline\nDataset & (1)\\\nhline\nro &    \\\nhline\nmulticolumn{2}{c}{$circ$, $\bullet$ statistically significant improvement or degradation}\\\nend{tabular} \footnotesize par}\nend{table}\n";
      resultMatrixCSV0.getRevision();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 2;
      resultMatrixLatex0.getSignificance((-1014), 171);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.enumerateRowNamesTipText();
      assertEquals(1, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.082870430025501
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 2);
      resultMatrixLatex0.setEnumerateColNames(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lrr@{\\hspace{0.1cm}}c}\n\\\\\n\\hline\nDataset & (1)& (2) & \\\\\n\\hline\nrow0 &     &     &        \\\\\nrow1 &     &     &        \\\\\n\\hline\n\\multicolumn{4}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      resultMatrixCSV0.setCount(0, 0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(66, 2);
      resultMatrixLatex1.clearRanking();
      int int0 = resultMatrixLatex1.getSignificance((-1509), 0);
      assertEquals(0, int0);
      
      int int1 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML1.enumerateRowNamesTipText();
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertTrue(resultMatrixHTML1.getPrintRowNames());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.8409619284206764
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 2);
      resultMatrixLatex0.setEnumerateColNames(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixCSV0.setCount(0, 0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(66, 2);
      resultMatrixLatex1.setRowNameWidth(2);
      resultMatrixCSV0.getRevision();
      resultMatrixLatex1.getDefaultEnumerateColNames();
      resultMatrixLatex1.getColName(1);
      assertEquals(2, resultMatrixLatex1.getRowNameWidth());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1;
      resultMatrixHTML0.setRowOrder(intArray0);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.545871071603508
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      String string0 = resultMatrixCSV0.getRowName(1);
      assertEquals("row1", string0);
      
      int int0 = resultMatrixCSV0.getSignificanceCount(1, 3322);
      assertEquals(0, int0);
      
      resultMatrixCSV0.listOptions();
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.getDefaultPrintRowNames();
      String[][] stringArray0 = new String[3][9];
      String[] stringArray1 = new String[0];
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      stringArray2[0] = "[";
      stringArray2[1] = " ";
      stringArray2[2] = "[";
      stringArray2[3] = "]";
      stringArray2[4] = "v";
      stringArray2[5] = "]";
      stringArray2[6] = "[";
      stringArray2[7] = "v";
      stringArray2[8] = "]";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[9];
      stringArray3[0] = "]";
      stringArray3[1] = "Generates the matrix in CSV ('comma-separated values') format.";
      stringArray3[2] = "]";
      stringArray3[3] = "Generates the matrix in CSV ('comma-separated values') format.";
      stringArray3[4] = "]";
      stringArray3[5] = "Generates the matrix in CSV ('comma-separated values') format.";
      stringArray3[6] = "]";
      stringArray3[7] = "*";
      stringArray3[8] = "v";
      stringArray0[2] = stringArray3;
      resultMatrixCSV0.getColSize(stringArray0, 3322);
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(3, resultMatrixCSV0.getVisibleColCount());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.8409413257287897
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.getOptions();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(0, 1);
      resultMatrixSignificance2.setRowName(1, "\begin{table}[thb]\ncaption{label{labelname}Table Caption (Key)}\n");
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 20);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(2158, 11);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2932234483652745
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.setColHidden(564, false);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.237307109398287
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.m_PrintRowNames = false;
      resultMatrixSignificance0.m_RowNameWidth = 2;
      resultMatrixSignificance0.getOptions();
      assertEquals(2, resultMatrixSignificance0.getRowNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.m_ShowAverage = true;
      String string0 = resultMatrixSignificance1.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.6337021012338093
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.getMean(0, 1);
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 2;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRowName(0, "$\bullet$");
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int int0 = resultMatrixGnuPlot0.getVisibleRowCount();
      assertEquals(1, int0);
      
      resultMatrixGnuPlot0.getDefaultRemoveFilterName();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.8031653188696506
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearHeader();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(1, 1);
      String string0 = resultMatrixSignificance1.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      resultMatrixSignificance1.getPrintColNames();
      assertFalse(resultMatrixSignificance1.getShowStdDev());
      assertEquals(40, resultMatrixSignificance1.getRowNameWidth());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.541074161861353
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRowNameWidth(2);
      assertEquals(2, resultMatrixSignificance0.getRowNameWidth());
      
      resultMatrixGnuPlot0.setColOrder((int[]) null);
      resultMatrixGnuPlot0.LEFT_PARENTHESES = ")";
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.349282251575593
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 97);
      resultMatrixCSV0.getMean(2, 2);
      assertEquals(0, resultMatrixCSV0.getColCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.418387689954422
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[1][3];
      resultMatrixHTML0.m_CountWidth = 2;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      String string0 = resultMatrixHTML0.enumerateRowNamesTipText();
      assertEquals("Whether to enumerate the row names (prefixing them with '(x)', with 'x' being the index).", string0);
      
      int int1 = resultMatrixHTML0.getMeanPrec();
      assertEquals(2, int1);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.045441755021227
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 1);
      int[] intArray0 = new int[2];
      ResultMatrixCSV.main((String[]) null);
      intArray0[0] = 1;
      intArray0[1] = 2;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.removeFilterName("D2FnL1?Bk/");
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixGnuPlot0.getAverage(2);
      resultMatrixCSV0.addHeader(" ", "$k");
      resultMatrixCSV0.getCount((-2));
      resultMatrixGnuPlot0.getMeanPrec();
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.025020042042437
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRowNameWidth(2);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringMatrix();
      assertEquals(2, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.778566062746746
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      resultMatrixSignificance0.setRowName(15, "count-width");
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.padString("", 0, true);
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.336646879554132
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[3];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(97, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      double double0 = resultMatrixCSV0.getStdDev(1, 114);
      assertEquals(0.0, double0, 0.01);
      
      resultMatrixCSV0.assign(resultMatrixLatex0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getRevision();
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.5396680687913826
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      boolean boolean0 = resultMatrixGnuPlot0.getPrintRowNames();
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      resultMatrixHTML0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.709823153478788
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.setStdDevPrec(2);
      resultMatrixCSV0.setShowStdDev(false);
      resultMatrixSignificance0.setStdDevWidth(18);
      assertEquals(18, resultMatrixSignificance0.getStdDevWidth());
      
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixCSV0.isAverage(2);
      assertEquals(0, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.491384447467034
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][3];
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.setRanking(intArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.169501957207281
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      double double0 = resultMatrixGnuPlot0.getAverage((-1322));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.225614243944907
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_PrintRowNames = false;
      resultMatrixHTML0.getRowNameWidth();
      resultMatrixSignificance0.setColNameWidth(1972);
      resultMatrixSignificance0.toStringSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixPlainText0.getDefaultRowNameWidth();
      assertEquals(1972, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8527366261722404
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[] intArray0 = new int[3];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(97, 0);
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertEquals(18, stringArray0.length);
      
      int int0 = resultMatrixLatex0.getSignificance(16, 0);
      assertEquals(0, int0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      
      boolean boolean0 = resultMatrixLatex0.getShowAverage();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(97, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.8389943400266677
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      resultMatrixHTML0.m_CountWidth = 2;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance1.getRevision();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixHTML1);
      resultMatrixCSV0.toStringRanking();
      resultMatrixSignificance1.toStringMatrix();
      resultMatrixCSV0.getStdDev(1421, 97);
      resultMatrixCSV0.assign(resultMatrixHTML1);
      resultMatrixCSV0.isRowName((-1804));
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixSignificance0.toStringRanking();
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=4.261143612133841
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[3];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(97, 0);
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      resultMatrixLatex0.getSignificance(16, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.toStringRanking();
      resultMatrixGnuPlot0.setRowName((-3954), "The maximum width of the column names (0 = optimal).");
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      
      ResultMatrixHTML.main(stringArray0);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(18, stringArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3571448305751144
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      double double0 = resultMatrixCSV0.getMean(0, 1);
      assertEquals(0.0, double0, 0.01);
      
      resultMatrixLatex0.getSignificance(0, 0);
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      
      boolean boolean0 = resultMatrixCSV0.getEnumerateColNames();
      assertTrue(boolean0);
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4924642996977817
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][3];
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.setMeanWidth(0);
      resultMatrixSignificance0.setRanking(intArray0);
      resultMatrixSignificance1.setRowName(3639, "");
      assertEquals(0, resultMatrixSignificance1.getRowCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringRanking();
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.9796667560322394
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[19];
      stringArray0[1] = "CmxQw7|vwd[$po=";
      ResultMatrixPlainText.main((String[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName(2);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixSignificance0.countWidthTipText();
      String[][] stringArray1 = new String[2][5];
      stringArray1[0] = stringArray0;
      stringArray1[1] = null;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getColSize(stringArray1, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2955193301273638
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultShowStdDev();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertFalse(resultMatrixHTML0.getShowStdDev());
      
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      double double0 = resultMatrixSignificance0.getAverage(2);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.608095291773129
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toArray();
      resultMatrixHTML0.globalInfo();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.assign(resultMatrixHTML0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixCSV0.toStringSummary();
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.53984954052716
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixHTML0.setShowStdDev(false);
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[1][3];
      resultMatrixHTML0.m_CountWidth = 2;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixHTML0.getStdDev(0, (-1482));
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=4.237617810180579
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 1);
      ResultMatrixPlainText.main((String[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.getColName(2);
      resultMatrixGnuPlot0.getPrintRowNames();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixGnuPlot0.showAverageTipText();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2854600626943533
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[19];
      stringArray0[0] = "v";
      stringArray0[1] = "CmxQw7|vwd[$po=";
      resultMatrixSignificance0.setStdDevPrec(2);
      resultMatrixSignificance0.setStdDevWidth((-776));
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.clearHeader();
      resultMatrixSignificance0.getDefaultShowStdDev();
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML((-776), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.399015199922773
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      resultMatrixCSV0.getMean(0, 1);
      resultMatrixLatex0.getSignificance(0, 0);
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      double double0 = resultMatrixCSV0.getStdDev(1, 0);
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0.0, double0, 0.01);
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=4.212361412951284
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(291, 0);
      String[] stringArray0 = resultMatrixSignificance0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance1.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      resultMatrixSignificance0.rowNameWidthTipText();
      assertEquals(291, resultMatrixSignificance0.getColCount());
      
      resultMatrixLatex0.getStdDev(1, 291);
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.434635057597813
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.globalInfo();
      double double0 = resultMatrixCSV0.getStdDev((-917), 10);
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.285952241175594
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(51, 51);
      resultMatrixCSV0.getRowName((-876));
      resultMatrixCSV0.getSignificanceCount(357, 51);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixCSV1);
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixSignificance1);
      // Undeclared exception!
      try { 
        resultMatrixSignificance2.padString((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.9350974962053162
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[19];
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.globalInfo();
      resultMatrixHTML0.clearHeader();
      ResultMatrixLatex.main((String[]) null);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.assign((ResultMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3977919138328656
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getPrintRowNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(44, 76);
      resultMatrixHTML0.setRowOrder(intArray0);
      resultMatrixHTML0.getColOrder();
      assertEquals(44, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultColNameWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(76, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=4.017745997876469
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      
      ResultMatrixPlainText.main((String[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.getPrintRowNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.getDisplayName();
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      
      resultMatrixGnuPlot1.getCount(0);
      assertEquals(50, resultMatrixGnuPlot1.getRowNameWidth());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.490970368792086
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixHTML0.m_HeaderValues = vector0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[1][3];
      resultMatrixHTML0.m_CountWidth = 2;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixHTML0.getCount(2);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.487977817998107
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[3];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(97, 0);
      int int0 = resultMatrixLatex0.getVisibleRowCount();
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(0, int0);
      assertEquals(97, resultMatrixLatex0.getVisibleColCount());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=4.185885442137892
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[3];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(97, 0);
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setOptions(stringArray0);
      resultMatrixHTML0.getDefaultRowNameWidth();
      int int0 = resultMatrixHTML0.getStdDevWidth();
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=4.012796063127682
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixCSV0.setOptions((String[]) null);
      resultMatrixCSV0.assign(resultMatrixSignificance0);
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixSignificance0.getRemoveFilterName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.633533431615424
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot2.getColName((-757));
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot3 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot1);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance2 = null;
      try {
        resultMatrixSignificance2 = new ResultMatrixSignificance(0, (-757));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2364195679099574
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getRowName(3);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.5506574643821875
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      resultMatrixCSV0.setPrintRowNames(false);
      resultMatrixCSV0.getRowName(1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1010, 1);
      resultMatrixHTML0.getRowOrder();
      resultMatrixHTML0.setCountWidth(1010);
      int int0 = 25;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(25, 191);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2888024150737896
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 1;
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      resultMatrixHTML0.m_Significance = intArray0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      int[][] intArray3 = new int[1][3];
      resultMatrixHTML0.m_CountWidth = 0;
      resultMatrixSignificance0.setSummary(intArray3, intArray3);
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixHTML0.setStdDev((-248), 2122, 0.0);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.236162760205781
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultPrintColNames();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01);
      
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixSignificance0.getShowAverage());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=4.0188056375876595
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(1, resultMatrixSignificance0.getColCount());
      
      String[] stringArray0 = new String[19];
      stringArray0[0] = "v";
      stringArray0[1] = "CmxQw7|vwd[$po=";
      ResultMatrixPlainText.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName(2);
      boolean boolean0 = resultMatrixGnuPlot0.getPrintRowNames();
      assertTrue(boolean0);
      
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot1.getDisplayName();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot1);
      resultMatrixPlainText0.getDefaultRowNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot2);
      resultMatrixCSV0.getRemoveFilterName();
      resultMatrixPlainText0.getDefaultColNameWidth();
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      assertEquals(40, resultMatrixPlainText0.getRowNameWidth());
      assertFalse(resultMatrixPlainText0.getShowAverage());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.34339634066789
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.toStringKey();
      assertEquals("Key:\n1 col0\n", string0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.setColName(47, "");
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.6796202753623692
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixSignificance0.setMeanWidth((-412));
      resultMatrixCSV0.setOptions((String[]) null);
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      
      resultMatrixCSV0.assign(resultMatrixSignificance0);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.169501957207281
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3102);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-3102);
      resultMatrixGnuPlot0.m_Counts = doubleArray0;
      resultMatrixGnuPlot0.setColNameWidth((-3102));
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      int[] intArray0 = new int[1];
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.632138511231163
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixHTML0.clearSummary();
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 1);
      resultMatrixGnuPlot0.countWidthTipText();
      String string0 = resultMatrixGnuPlot0.stdDevWidthTipText();
      assertEquals("The width of the standard deviation (0 = optimal).", string0);
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.9641384587102677
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[][] stringArray0 = resultMatrixSignificance0.toArray();
      assertEquals(3, stringArray0.length);
      
      resultMatrixSignificance0.setStdDevPrec((-2506));
      resultMatrixSignificance0.getDefaultShowStdDev();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getVisibleRowCount();
      resultMatrixSignificance0.stdDevPrecTipText();
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.1699021172713064
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "*";
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSize((-2008), (-2008));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.540763039227181
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultShowStdDev();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.globalInfo();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.getStdDev(3423, 2);
      resultMatrixCSV0.assign(resultMatrixSignificance0);
      boolean boolean0 = resultMatrixCSV0.isRowName(0);
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(boolean0);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.747553778254631
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.getOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.m_ShowAverage = true;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      boolean boolean0 = resultMatrixCSV0.isRowName(1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.5706333920910693
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevPrec((-2469));
      resultMatrixSignificance0.getDefaultShowStdDev();
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.255345460527768
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1);
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[1][3];
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.3428254489086298
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int int0 = resultMatrixLatex0.getVisibleRowCount();
      assertEquals(1, int0);
      
      resultMatrixLatex0.getColHidden(10);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.4906817685034857
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance0.printColNamesTipText();
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.289522881448332
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearRanking();
      resultMatrixSignificance0.getDefaultShowStdDev();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=4.07975953995987
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixLatex0.getSignificance(12, 16);
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.2852024312961516
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.getColName(0);
      assertEquals("col0", string0);
      assertNotNull(string0);
      
      resultMatrixLatex0.getDisplayName();
      int int0 = resultMatrixSignificance0.getDefaultMeanPrec();
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.5870424533583143
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_StdDevPrec = 2;
      resultMatrixGnuPlot0.TIE_STRING = "g";
      String string0 = resultMatrixGnuPlot0.getRowName((-1));
      assertNull(string0);
      
      String string1 = resultMatrixGnuPlot0.toStringKey();
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals("Key:\n1 col0\n", string1);
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.6312207116556454
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 1);
      int int0 = resultMatrixLatex0.getSignificance((-3832), (-3832));
      assertEquals(0, int0);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertTrue(resultMatrixSignificance1.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.2286443931453856
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 27);
      resultMatrixLatex0.getDefaultShowStdDev();
      assertEquals(27, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5419843666574318
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixCSV0.setColOrder(intArray0);
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(0, resultMatrixCSV0.getColCount());
      
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      assertEquals(0, resultMatrixGnuPlot0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=4.053915396732966
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setColOrder(intArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.540174611636465
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSummary((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.770086912094579
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int int0 = 1071;
      Vector<String> vector0 = new Vector<String>();
      resultMatrixLatex0.m_HeaderValues = vector0;
      resultMatrixLatex0.setSignificance(1071, 1071, 0);
      resultMatrixLatex0.headerKeys();
      resultMatrixLatex0.toArray();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.getDefaultCountWidth();
      resultMatrixLatex0.LOSS_STRING = "\begin{table}[thb]\ncaption{label{labelname}Table Caption (Key)}\nscriptsize\n{centering\n\begin{tabular}{cl}\\\n(1) & col0 \\\nend{tabular}\n}\nend{table}\n";
      resultMatrixLatex0.isSignificance(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.m_SignificanceWidth = 97;
      resultMatrixPlainText0.setEnumerateRowNames(false);
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=4.043509260256834
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[1][3];
      resultMatrixHTML0.m_CountWidth = 2;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      resultMatrixSignificance0.setMean(2, 2, 0);
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=4.0437571862828765
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      String[] stringArray0 = resultMatrixSignificance0.getOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.globalInfo();
      ResultMatrixLatex.main(stringArray0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.7469737785218817
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_StdDevPrec = 95;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 95;
      resultMatrixPlainText0.setRemoveFilterName(true);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(2896, 0);
      // Undeclared exception!
      resultMatrixGnuPlot1.toString();
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.7499522234507916
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_StdDevPrec = 95;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 95;
      resultMatrixPlainText0.setRemoveFilterName(false);
      resultMatrixGnuPlot0.toString();
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixPlainText0.clearHeader();
      resultMatrixGnuPlot0.setRowHidden(0, false);
      resultMatrixPlainText0.countWidthTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.getRevision();
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(95, resultMatrixPlainText0.getStdDevPrec());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.457969324463883
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      String string0 = resultMatrixCSV0.padString("$\bullet$", (-2560));
      assertEquals("$\bullet$", string0);
      
      double double0 = resultMatrixCSV0.getMean(0, 1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, resultMatrixCSV0.getVisibleColCount());
      
      resultMatrixLatex0.getSignificance(0, 0);
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.540320757051153
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.setMeanPrec(0);
      resultMatrixSignificance0.setColNameWidth(1976);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.3716624828004464
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*";
      stringArray0[1] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = "*";
      String string0 = "P`m<\"ks";
      // Undeclared exception!
      try { 
        resultMatrixSignificance1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.1922279528125785
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth((-2039));
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.getDefaultSignificanceWidth();
      String string0 = resultMatrixGnuPlot0.toStringKey();
      assertEquals("Key:\n1 col0\n", string0);
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.5929667619184142
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.getColName(0);
      assertNotNull(string0);
      assertEquals("col0", string0);
      
      resultMatrixCSV0.getSignificanceCount((-386), 1772);
      String string1 = resultMatrixCSV0.doubleToString(1, 0);
      assertEquals("1.", string1);
      
      resultMatrixCSV0.getShowStdDev();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.getDefaultEnumerateRowNames();
      resultMatrixGnuPlot1.getDisplayName();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.getDefaultRowNameWidth();
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      
      boolean boolean0 = resultMatrixCSV0.getRemoveFilterName();
      assertFalse(boolean0);
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(3, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=4.226916951641921
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setSignificanceWidth((-2166));
      resultMatrixHTML0.m_ColNameWidth = (-1722);
      resultMatrixHTML0.m_ColNameWidth = (-993);
      resultMatrixHTML0.globalInfo();
      resultMatrixHTML0.setMean(0, (-1722), 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setRemoveFilterName(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.toString();
      resultMatrixGnuPlot0.setPrintColNames(true);
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.m_SignificanceWidth = 0;
      resultMatrixGnuPlot0.setRowHidden((-1303), true);
      resultMatrixPlainText0.countWidthTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 0);
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 14);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.884316066578502
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(39, 0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      String[] stringArray0 = resultMatrixLatex0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixLatex0.getSignificance(2, 1);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixSignificance1);
      resultMatrixLatex0.toStringRanking();
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      
      resultMatrixGnuPlot1.countWidthTipText();
      assertTrue(resultMatrixGnuPlot1.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot1.getColNameWidth());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot1.getStdDevWidth());
      assertEquals(40, resultMatrixGnuPlot1.getRowNameWidth());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.587974968695738
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.getSignificance(1, 1);
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.5372760609118274
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = new int[4];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.listOptions();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.9948682172041843
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_StdDevPrec = 95;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[1] = (double) 95;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 95;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (-2.193009787215525);
      doubleArray3[4] = (double) 1;
      doubleArray3[5] = (double) 2;
      doubleArray3[6] = (double) 95;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 95;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (double) 95;
      doubleArray5[1] = (double) 1;
      doubleArray5[3] = (double) 2;
      doubleArray5[4] = (double) 95;
      resultMatrixGnuPlot0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.setRemoveFilterName(true);
      resultMatrixGnuPlot0.toString();
      resultMatrixGnuPlot0.setPrintColNames(true);
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.countWidthTipText();
      resultMatrixGnuPlot0.getDefaultShowAverage();
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4929252609798036
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      resultMatrixCSV0.getMean(0, 1);
      resultMatrixLatex0.getSignificance(0, 0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setColHidden(0, true);
      resultMatrixSignificance0.setStdDev(1, 2, 2);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      resultMatrixCSV0.getShowStdDev();
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=4.10848387576157
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[2][6];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray1[5] = 2;
      intArray1[6] = 1;
      intArray0[0] = intArray1;
      resultMatrixHTML0.getRowOrder();
      resultMatrixHTML0.setCountWidth(2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.toArray();
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      resultMatrixSignificance0.m_RowHidden = booleanArray0;
      resultMatrixSignificance0.setStdDevPrec(0);
      resultMatrixSignificance0.setStdDevWidth(1);
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixHTML0.setMeanPrec(2156);
      resultMatrixSignificance0.setStdDev(2, 2156, 1609.1824832);
      assertEquals(1, resultMatrixSignificance0.getStdDevWidth());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=4.260292674677231
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = resultMatrixSignificance0.getOptions();
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(1, 2);
      resultMatrixSignificance1.toStringMatrix();
      resultMatrixSignificance0.setOptions(stringArray0);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(18, stringArray0.length);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.975227366454743
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      resultMatrixHTML0.m_CountWidth = 2;
      resultMatrixHTML0.globalInfo();
      resultMatrixHTML0.clear();
      resultMatrixHTML0.setCountWidth(936);
      ResultMatrixLatex.main((String[]) null);
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixHTML0.significanceWidthTipText();
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.965380620021475
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      resultMatrixGnuPlot1.getDefaultEnumerateRowNames();
      resultMatrixGnuPlot0.setSize(1, 2);
      assertEquals(2, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=4.137529399594703
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRowHidden(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.assign(resultMatrixHTML0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")";
      stringArray0[1] = "*";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.291697895352307
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRowHidden(0);
      resultMatrixHTML0.isStdDev(1992);
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.184596921993312
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.padString("LG*L<pS@z'l9", 249);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals("LG*L<pS@z'l9                                                                                                                                                                                                                                             ", string0);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.1699021172713064
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultMeanWidth();
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertFalse(resultMatrixCSV0.getDefaultShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.8043102007711345
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.getColName(0);
      assertEquals("col0", string0);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      String string1 = resultMatrixSignificance0.toStringMatrix();
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string1);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.2549300549138582
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.getMean(0, 1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.getColName(1);
      assertNull(string0);
      
      resultMatrixCSV0.toStringSummary();
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.490577634378733
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(190, 2);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "O:";
      try { 
        resultMatrixHTML0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.3991981138967837
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.setStdDevWidth(82);
      assertEquals(82, resultMatrixSignificance0.getStdDevWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 3);
      resultMatrixCSV0.getMean(3, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.8438479241449595
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setEnumerateRowNames(false);
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.toStringMatrix();
      assertTrue(resultMatrixSignificance0.getEnumerateRowNames());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.6713871636812794
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      boolean boolean0 = true;
      resultMatrixPlainText0.setPrintColNames(true);
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.toStringKey();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")";
      stringArray0[1] = "(";
      stringArray0[2] = "*";
      stringArray0[3] = "<SON4+i#Ck1?";
      stringArray0[4] = " ";
      stringArray0[5] = " ";
      stringArray0[6] = " ";
      stringArray0[7] = "-summary data not set-";
      stringArray0[8] = "(";
      resultMatrixPlainText0.m_RowNames = stringArray0;
      resultMatrixPlainText0.enumerateColNamesTipText();
      resultMatrixPlainText0.setEnumerateRowNames(true);
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.6604300384473554
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[1][3];
      resultMatrixHTML0.m_CountWidth = 2;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.toStringRanking();
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.countWidthTipText();
      String[][] stringArray0 = new String[2][2];
      String[] stringArray1 = new String[6];
      stringArray1[0] = ")";
      stringArray1[1] = ")";
      stringArray1[2] = "*";
      stringArray1[3] = " ";
      stringArray1[4] = "v";
      stringArray1[5] = " ";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      stringArray2[0] = "v";
      stringArray2[1] = ")";
      stringArray0[1] = stringArray2;
      int int0 = resultMatrixHTML0.getColSize(stringArray0, 1606, true, true);
      assertEquals(0, int0);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.48629831128984
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixHTML0.colNameWidthTipText();
      String[][] stringArray0 = new String[5][3];
      String[] stringArray1 = new String[1];
      stringArray1[0] = ")";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      stringArray2[0] = "(";
      stringArray2[1] = "*";
      stringArray2[2] = " ";
      stringArray2[3] = " x~w^4h$)&Ao";
      stringArray2[4] = "v";
      stringArray2[5] = "*";
      stringArray2[6] = " ";
      stringArray2[7] = "The maximum width of the column names (0 = optimal).";
      stringArray2[8] = "v";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[9];
      stringArray3[0] = ")";
      stringArray3[1] = " ";
      stringArray3[2] = "The maximum width of the column names (0 = optimal).";
      stringArray3[3] = "v";
      stringArray3[4] = ")";
      stringArray3[5] = "The maximum width of the column names (0 = optimal).";
      stringArray3[6] = "# the plot commands\n";
      stringArray3[7] = " x~w^4h$)&Ao";
      stringArray3[8] = "(";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[8];
      stringArray4[0] = ")";
      stringArray4[1] = "*";
      stringArray4[2] = "(";
      stringArray4[3] = "(";
      stringArray4[4] = "v";
      stringArray4[5] = " ";
      stringArray4[6] = "# the plot commands\n";
      stringArray4[7] = "(";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[6];
      stringArray5[0] = "The maximum width of the column names (0 = optimal).";
      stringArray5[1] = " ";
      stringArray5[2] = " x~w^4h$)&Ao";
      stringArray5[3] = "s*kx]AXa*}UKLRw";
      stringArray5[4] = "*";
      stringArray5[5] = "Inf";
      stringArray0[4] = stringArray5;
      int int0 = resultMatrixHTML0.getColSize(stringArray0, (-289), true, true);
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, int0);
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.5862805485964095
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance0.colNameWidthTipText();
      assertEquals("The maximum width of the column names (0 = optimal).", string0);
      
      int int0 = resultMatrixSignificance0.getDisplayCol(4050);
      assertEquals((-1), int0);
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.9039814589826447
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.getSignificanceCount(3440, 1);
      resultMatrixCSV0.doubleToString(3440, 4);
      resultMatrixCSV0.getShowStdDev();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV1);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getRevision();
      resultMatrixHTML0.toString();
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixSignificance1);
      resultMatrixCSV2.toStringRanking();
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixCSV1.getStdDev(13, 2);
      resultMatrixCSV2.assign(resultMatrixSignificance0);
      assertEquals(40, resultMatrixCSV2.getRowNameWidth());
      
      ResultMatrixCSV resultMatrixCSV3 = new ResultMatrixCSV(1, 1);
      resultMatrixCSV3.isRowName(1);
      resultMatrixSignificance2.getColNameWidth();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=4.3286090403122985
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = " HYnQ}B7$:WXp1,";
      stringArray0[1] = "";
      stringArray0[2] = "? #H(F>;MBZp%Ng}IcC";
      stringArray0[3] = "header1";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "+9";
      stringArray0[7] = ";[?(";
      stringArray0[8] = "end{tabular}\n";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setPrintRowNames(true);
      resultMatrixPlainText0.setStdDevPrec(97);
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.m_ShowStdDev = true;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixPlainText0.toStringKey();
      assertEquals(97, resultMatrixPlainText0.getStdDevPrec());
      
      resultMatrixGnuPlot0.getColNameWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.globalInfo();
      resultMatrixGnuPlot0.getOptions();
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixLatex0.getRevision();
      String string0 = resultMatrixLatex0.getSummaryTitle((-1));
      assertEquals("`", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.9950498355189574
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>col0</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>v/ /*</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      boolean boolean0 = resultMatrixHTML0.isMean((-1));
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(boolean0);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.585991948307809
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.headerKeys();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(544, 0);
      resultMatrixLatex0.toStringRanking();
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(544, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertFalse(resultMatrixLatex0.getShowStdDev());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.489559434047818
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth(2);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.setColName(1, " ");
      assertEquals(2, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.434635057597813
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanWidth(2545);
      resultMatrixGnuPlot0.getPrintRowNames();
      int[] intArray0 = new int[1];
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.7298602586200342
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][3];
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 0);
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      resultMatrixSignificance0.padString(" ", 37, false);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.631146389842193
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      boolean boolean0 = resultMatrixGnuPlot0.getPrintRowNames();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(boolean0);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.setRowOrder((int[]) null);
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColCount());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.5901250221656538
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(68, 2);
      String string0 = resultMatrixSignificance0.toStringKey();
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals("Key:\n(1) col0\n", string0);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      resultMatrixCSV0.setMeanPrec(2);
      resultMatrixCSV0.getStdDev(1, 2);
      int int0 = resultMatrixCSV0.getVisibleColCount();
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(68, int0);
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getDefaultPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.5395719426739167
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(15, 3);
      resultMatrixCSV0.setMeanPrec((-1581));
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      assertEquals(2, int0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.5370597511562574
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      
      resultMatrixHTML0.m_ColHidden = null;
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      resultMatrixHTML0.meanWidthTipText();
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.436242257854965
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setColNameWidth(2206);
      int int0 = resultMatrixCSV0.getVisibleColCount();
      assertEquals(2206, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.3432782766699805
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getPrintRowNames();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      // Undeclared exception!
      try { 
        resultMatrixCSV1.doubleToString(0.0, (-2448));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.558181474167665
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getVisibleRowCount();
      assertEquals(1, int0);
      
      resultMatrixHTML0.getRowName(1);
      resultMatrixSignificance0.getAverage(1);
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.487816518181232
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getPrintRowNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.doubleToString(2, 2271);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.309897787536354
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(3, 3);
      String string0 = resultMatrixCSV0.getRowName(1);
      assertNotNull(string0);
      assertEquals("row1", string0);
      
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      double double0 = resultMatrixSignificance0.getAverage(2);
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.3432313613521294
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultRemoveFilterName();
      resultMatrixPlainText0.getDefaultStdDevWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clear();
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.571819187510154
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 2);
      resultMatrixCSV0.getMean(2, 2);
      assertEquals(2, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.490877904621952
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 2);
      boolean boolean0 = resultMatrixHTML0.getRowHidden(4);
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
      assertFalse(boolean0);
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(2, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.404812894522604
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      resultMatrixCSV0.getMean(0, 1);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      
      resultMatrixLatex0.getSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      boolean boolean0 = resultMatrixLatex0.getEnumerateRowNames();
      assertFalse(boolean0);
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=4.14998024791309
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = ")";
      stringArray0[2] = "";
      stringArray0[3] = ");D>";
      stringArray0[4] = " ";
      stringArray0[5] = ")";
      stringArray0[6] = ")";
      stringArray0[7] = "(";
      resultMatrixHTML0.setOptions(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setPrintColNames(true);
      resultMatrixGnuPlot0.setMeanWidth(1);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.clearHeader();
      resultMatrixGnuPlot0.setRowHidden(1, false);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText1.countWidthTipText();
      resultMatrixPlainText1.toStringMatrix();
      resultMatrixHTML0.getDefaultMeanPrec();
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=4.024793126497041
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = ")";
      stringArray0[2] = "";
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 0);
      resultMatrixPlainText0.setRemoveFilterName(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.toString();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixPlainText0.clearHeader();
      resultMatrixGnuPlot0.setRowHidden(1, false);
      resultMatrixPlainText0.countWidthTipText();
      assertEquals(2, resultMatrixPlainText0.getVisibleColCount());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.7997169328934066
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixLatex0.assign(resultMatrixGnuPlot0);
      resultMatrixLatex0.toStringMatrix();
      int int0 = resultMatrixLatex0.getVisibleRowCount();
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=4.054923252653389
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 3);
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.toString();
      int[][] intArray0 = new int[0][0];
      resultMatrixSignificance0.toStringKey();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.631146389842193
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRemoveFilterName(true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.getDefaultRowNameWidth();
      assertTrue(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.2404300887745494
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertTrue(resultMatrixSignificance0.getDefaultEnumerateColNames());
      
      resultMatrixHTML0.removeFilterName("");
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      String string0 = resultMatrixGnuPlot0.toStringKey();
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Key:\n(1) col0\n", string0);
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.803125539395387
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.removeFilterName("col");
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.m_ColOrder = intArray0;
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.getOptions();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      assertEquals(0, int0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.2994553198148298
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixSignificance0.getAverage(2);
      resultMatrixHTML1.setSignificance(0, 1, 1);
      resultMatrixSignificance0.countWidthTipText();
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      
      boolean boolean0 = resultMatrixHTML0.isMean(1);
      assertTrue(boolean0);
      
      resultMatrixHTML0.getDefaultPrintRowNames();
      assertEquals(1, resultMatrixHTML0.getRowCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      boolean boolean1 = resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=4.188781702403285
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(57, 0);
      resultMatrixLatex0.clearHeader();
      resultMatrixSignificance0.m_CountWidth = 1;
      resultMatrixSignificance0.setRemoveFilterName(true);
      resultMatrixSignificance0.getOptions();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringMatrix();
      assertTrue(resultMatrixSignificance0.getRemoveFilterName());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.2366086910864946
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.setRowNameWidth(1);
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixSignificance0.getAverage(0);
      int int1 = resultMatrixSignificance0.getDisplayRow(8);
      assertEquals(1, resultMatrixSignificance0.getRowNameWidth());
      assertEquals((-1), int1);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=3.3691323386865273
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setShowAverage(true);
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getPrintRowNames();
      int[] intArray0 = new int[1];
      resultMatrixHTML0.setRowOrder(intArray0);
      assertTrue(resultMatrixHTML0.getShowAverage());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.7148758248681983
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_StdDevPrec = 1727;
      resultMatrixSignificance0.TIE_STRING = "Czp`L";
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.setShowAverage(false);
      int int0 = resultMatrixSignificance0.getDisplayRow(0);
      assertEquals(0, int0);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[][] intArray0 = new int[6][6];
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1727;
      intArray1[3] = 1955;
      intArray1[4] = 0;
      intArray1[5] = 2;
      intArray1[6] = 2;
      intArray0[1] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 1727;
      intArray2[1] = 1727;
      intArray0[2] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 2;
      intArray3[2] = 2;
      intArray0[3] = intArray3;
      int[] intArray4 = new int[0];
      intArray0[4] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray5[2] = 1727;
      intArray5[3] = 1;
      intArray5[4] = 2;
      intArray5[5] = 1;
      intArray5[6] = 1727;
      intArray5[7] = 0;
      intArray0[5] = intArray5;
      resultMatrixPlainText0.m_NonSigWins = intArray0;
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.meanPrecTipText();
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.404812894522604
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      resultMatrixCSV0.getMean(0, 1);
      resultMatrixLatex0.getSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.meanPrecTipText();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=3.492626683491879
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][3];
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.setRanking(intArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.assign(resultMatrixSignificance0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixSignificance0.getRevision();
      resultMatrixSignificance1.getDefaultPrintColNames();
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=3.876973019457599
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getRowCount());
      
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.TIE_STRING = "Get position of option -o: ";
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals("Dataset                      (1) \n---------------------------------\nrow0                     (0)    |\n---------------------------------\n(v/Get position of option -o: / |\n", string0);
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
  }

  /**
  //Test case number: 169
  /*Coverage entropy=3.378779279636711
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      resultMatrixLatex0.getSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMean(1, 2, 797.449528473196);
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 170
  /*Coverage entropy=3.3377672983739357
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.clearHeader();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixSignificance0.setEnumerateColNames(false);
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      double double0 = resultMatrixSignificance0.getAverage(0);
      assertFalse(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=3.3438660264490183
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setPrintColNames(false);
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.getRowHidden(0);
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertFalse(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 172
  /*Coverage entropy=4.0552391527549325
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(5, 5);
      resultMatrixLatex0.toArray();
      resultMatrixLatex0.colNameWidthTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset               (1) (2) (3) (4) (5)\n-----------------------------------------\nrow0                                 \nrow1                                 \nrow2                                 \nrow3                                 \nrow4                                 \n", string0);
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
  }

  /**
  //Test case number: 173
  /*Coverage entropy=3.3432782766699805
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      
      resultMatrixLatex0.m_CountWidth = 92;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRowOrder();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 174
  /*Coverage entropy=3.4499962977744447
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = resultMatrixCSV0.getSignificanceCount(2, (-1));
      assertEquals(0, int0);
      
      resultMatrixCSV0.listOptions();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.globalInfo();
      int int1 = resultMatrixCSV1.getVisibleColCount();
      assertEquals(1, int1);
      assertFalse(resultMatrixCSV1.getDefaultShowAverage());
      assertEquals(1, resultMatrixCSV1.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
  }

  /**
  //Test case number: 175
  /*Coverage entropy=3.725564136058354
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultEnumerateColNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      int[] intArray0 = new int[0];
      resultMatrixHTML0.setRowOrder(intArray0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(2296, 0);
      resultMatrixHTML1.getRowOrder();
      resultMatrixHTML0.setCountWidth(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.toArray();
      resultMatrixSignificance0.setStdDevPrec(165);
      resultMatrixSignificance0.setStdDevWidth(2296);
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getDefaultShowStdDev();
      assertEquals(2296, resultMatrixSignificance0.getStdDevWidth());
  }

  /**
  //Test case number: 176
  /*Coverage entropy=3.2641141459685943
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setPrintColNames(true);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      int[] intArray0 = new int[1];
      resultMatrixHTML0.setRowOrder(intArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance((-299), (-299));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 177
  /*Coverage entropy=3.3532080234242314
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String string0 = resultMatrixCSV0.getRowName(1);
      assertNull(string0);
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      int int0 = resultMatrixCSV0.getSignificanceCount(1, 3322);
      assertEquals(0, int0);
      
      resultMatrixCSV0.listOptions();
      resultMatrixCSV0.globalInfo();
      int int1 = resultMatrixCSV0.getVisibleColCount();
      assertEquals(1, int1);
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 178
  /*Coverage entropy=3.3914339119572157
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setSignificanceWidth((-1081));
      int int0 = resultMatrixLatex0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
  }

  /**
  //Test case number: 179
  /*Coverage entropy=4.260457173643045
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setSignificanceWidth((-2164));
      resultMatrixHTML0.m_ColNameWidth = (-1713);
      resultMatrixHTML0.m_ColNameWidth = (-993);
      resultMatrixHTML0.globalInfo();
      resultMatrixHTML0.setMean(0, (-1713), 0);
      resultMatrixHTML0.getSignificanceCount(805, (-1713));
      resultMatrixHTML0.setPrintColNames(true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.setEnumerateColNames(true);
      resultMatrixPlainText0.getSummaryTitle(0);
      resultMatrixPlainText0.setStdDevPrec(0);
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixHTML0.getOptions();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals(0, resultMatrixPlainText0.getStdDevPrec());
      assertEquals("Dataset (1) col0\n----------------\nrow0            \n", string0);
  }

  /**
  //Test case number: 180
  /*Coverage entropy=3.48629831128984
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getSummaryTitle(97);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.getHeader("TMQ:U<OFh");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 181
  /*Coverage entropy=3.5402489334499174
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      
      resultMatrixHTML1.setCountWidth(1);
      assertEquals(1, resultMatrixHTML1.getCountWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevPrec(2);
      resultMatrixSignificance0.getDefaultShowStdDev();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 182
  /*Coverage entropy=3.5354315286325124
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[][] intArray0 = new int[8][3];
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setCountWidth((-1));
      int int0 = resultMatrixPlainText0.getSignificanceWidth();
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, int0);
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
  }

  /**
  //Test case number: 183
  /*Coverage entropy=3.5372760609118274
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.setSignificanceWidth(2);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getRowCount());
  }

  /**
  //Test case number: 184
  /*Coverage entropy=4.050923282728352
  */
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setRowNameWidth((-2039));
      String string0 = resultMatrixGnuPlot0.toStringKey();
      assertEquals("Key:\n1 col0\n", string0);
      
      String[] stringArray0 = resultMatrixGnuPlot0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixGnuPlot0.setColName((-2039), "Whether to output row names or just numbers representing them.");
      resultMatrixGnuPlot0.meanPrecTipText();
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 185
  /*Coverage entropy=3.2317679032968822
  */
  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[1][3];
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 186
  /*Coverage entropy=3.7319533210255926
  */
  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 957);
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 957;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      resultMatrixHTML0.toString();
      intArray2[0] = 2;
      intArray2[1] = 1;
      intArray2[2] = 957;
      intArray2[3] = 1;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 187
  /*Coverage entropy=3.5350884754592706
  */
  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setShowStdDev(true);
      assertTrue(resultMatrixPlainText0.getShowStdDev());
  }

  /**
  //Test case number: 188
  /*Coverage entropy=3.5414549530608452
  */
  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray0 = new int[3][3];
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      resultMatrixHTML0.getDefaultPrintColNames();
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowAverage());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 189
  /*Coverage entropy=3.3417291421646933
  */
  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 190
  /*Coverage entropy=3.5365859297869138
  */
  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.toStringKey();
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 191
  /*Coverage entropy=3.174551399664676
  */
  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      boolean boolean0 = resultMatrixGnuPlot1.getPrintRowNames();
      assertEquals(1, resultMatrixGnuPlot1.getColCount());
      assertTrue(boolean0);
      assertFalse(resultMatrixGnuPlot1.getDefaultShowAverage());
      assertEquals(0, resultMatrixGnuPlot1.getDefaultMeanWidth());
      assertFalse(resultMatrixGnuPlot1.getRemoveFilterName());
      assertEquals(1, resultMatrixGnuPlot1.getRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertTrue(resultMatrixGnuPlot1.getDefaultPrintColNames());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
  }

  /**
  //Test case number: 192
  /*Coverage entropy=3.9359387679756823
  */
  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(12, 12);
      resultMatrixSignificance0.m_RowNameWidth = 0;
      resultMatrixSignificance0.getOptions();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.m_ShowAverage = true;
      String string0 = resultMatrixSignificance1.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      resultMatrixSignificance0.getColCount();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      assertEquals(12, resultMatrixHTML0.getVisibleRowCount());
      
      resultMatrixHTML0.toStringMatrix();
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
  }

  /**
  //Test case number: 193
  /*Coverage entropy=3.7895141980675713
  */
  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getDefaultPrintColNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(2, 2);
      resultMatrixSignificance1.setPrintRowNames(true);
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      resultMatrixHTML0.getRowOrder();
      resultMatrixSignificance1.getCountWidth();
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
  }

  /**
  //Test case number: 194
  /*Coverage entropy=4.066780921528044
  */
  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, resultMatrixLatex0.getRowCount());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setPrintRowNames(true);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals("Dataset               (1)\n-------------------------\nrow0                     \n", string0);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
  }

  /**
  //Test case number: 195
  /*Coverage entropy=3.491307494792929
  */
  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      assertEquals(1, resultMatrixSignificance0.getColCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      int int0 = resultMatrixHTML0.getVisibleRowCount();
      assertEquals(1, int0);
      
      int[] intArray0 = new int[0];
      resultMatrixHTML0.setRowOrder(intArray0);
      assertFalse(resultMatrixHTML0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getColCount());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
  }

  /**
  //Test case number: 196
  /*Coverage entropy=3.9947282020358745
  */
  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintRowNames(false);
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\n(1)        \n", string0);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 197
  /*Coverage entropy=3.4869603437294296
  */
  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.countWidthTipText();
      resultMatrixGnuPlot0.printRowNamesTipText();
      int int0 = resultMatrixGnuPlot0.getRowCount();
      assertEquals(1, int0);
      
      String string0 = resultMatrixGnuPlot0.getColName(26);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertNull(string0);
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
  }

  /**
  //Test case number: 198
  /*Coverage entropy=4.054459962022273
  */
  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[10][3];
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      
      String string1 = resultMatrixHTML0.toString();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string1);
      
      resultMatrixSignificance0.removeFilterNameTipText();
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 199
  /*Coverage entropy=4.024812537000065
  */
  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 200
  /*Coverage entropy=3.9640857377832233
  */
  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int int0 = resultMatrixLatex0.getStdDevPrec();
      assertEquals(2, int0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      
      String string0 = resultMatrixCSV0.toStringMatrix();
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals("Dataset,[1]\nrow0,''\n'[v/ /*]',''\n", string0);
  }
}
