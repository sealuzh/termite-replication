/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 00:45:25 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Properties;
import java.util.Random;
import java.util.Stack;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.OneRAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.PlainText;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.supportVector.Puk;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.763790406934785
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.avgCost();
      Evaluation evaluation2 = new Evaluation(instances0);
      PlainText plainText0 = new PlainText();
      ZeroR zeroR0 = new ZeroR();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(zeroR0);
      evaluation1.equals(additiveRegression0);
      evaluation1.toSummaryString("@relation", false);
      evaluation0.SFMeanPriorEntropy();
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = '>';
      // Undeclared exception!
      try { 
        evaluation2.num2ShortID((-1), charArray0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9218445904343673
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = evaluation1.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      double double1 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      HashSet<Object> hashSet1 = new HashSet<Object>();
      double double2 = evaluation1.m_TotalCoverage;
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double3 = evaluation2.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double3, 0.01);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation.makeOptionString(additiveRegression0, false);
      String string0 = evaluation2.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      MockRandom mockRandom0 = new MockRandom(34);
      double double4 = evaluation2.numTrueNegatives(2505);
      double double5 = evaluation2.precision((-1642));
      assertEquals(double5, double4, 0.01);
      
      double[] doubleArray0 = evaluation2.getClassPriors();
      assertEquals(0.0, evaluation2.unclassified(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4938044278033904
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      long long0 = (-1160L);
      MockRandom mockRandom1 = new MockRandom((-1160L));
      instances0.resample(mockRandom1);
      instances0.enumerateInstances();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      evaluation0.rootMeanSquaredError();
      evaluation0.fMeasure(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      PlainText plainText0 = new PlainText();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) classificationViaRegression0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      Instances instances1 = testInstances0.getData();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances1);
      evaluation2.updatePriors(instance0);
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.901904699525582
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.avgCost();
      evaluation1.confusionMatrix();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      capabilities0.setOwner(stringKernel0);
      RandomForest randomForest0 = new RandomForest();
      evaluation1.equals(instances0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      try { 
        evaluation0.evaluateModelOnce((double) 1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.594580221277449
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      evaluation0.m_MarginCounts = doubleArray0;
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.avgCost();
      evaluation0.confusionMatrix();
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.numTrueNegatives(1);
      testInstances0.generate();
      evaluation0.precision(0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(1, charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4595624449571374
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = true;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      Object object0 = new Object();
      Object object1 = new Object();
      evaluation1.rootMeanSquaredError();
      // Undeclared exception!
      try { 
        evaluation1.fMeasure(19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 0;
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(false);
      instances0.stream();
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.avgCost();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getRevision();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      try { 
        evaluation1.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Puk puk0 = new Puk();
      puk0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stack<String> stack0 = new Stack<String>();
      Attribute attribute0 = new Attribute(" ", stack0);
      instances0.setClass(attribute0);
      MockRandom mockRandom1 = new MockRandom();
      MultiScheme multiScheme0 = new MultiScheme();
      try { 
        evaluation0.crossValidateModel((Classifier) multiScheme0, instances0, (-674), (Random) mockRandom1, (Object[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9907867545761526
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      evaluation0.equals((Object) null);
      try { 
        evaluation0.evaluateModelOnce((-3100.8955022898), instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3100
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.handleCostOption("", 859);
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka/core/Capabilities.props", arrayList0, 59);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.642947847141024
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.pctIncorrect();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      evaluation0.equals(randomForest0);
      instances0.enumerateAttributes();
      evaluation0.toSummaryString("error", true);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = new Capabilities(multiScheme0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      boolean boolean0 = evaluation0.equals(evaluation0);
      assertTrue(boolean0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.507492607093199
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XML xML0 = new XML();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.toClassDetailsString(xML0.DTD);
      evaluation0.pctIncorrect();
      evaluation0.matthewsCorrelationCoefficient((-1));
      SGD sGD0 = new SGD();
      try { 
        evaluation0.evaluateModel((Classifier) sGD0, instances0, (Object[]) sGD0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("W8[E+VwRem5eV");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "1dNAta(:D[i%C[g");
      Properties properties0 = new Properties();
      gaussianProcesses0.listOptions();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      try { 
        Evaluation.handleCostOption("W8[E+VwRem5eV", 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1dNAta(:D[i%C[g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.687420655767592
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = new Capabilities(multiScheme0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      evaluation0.updateStatsForPredictor(Double.NaN, instance0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      evaluation0.equals(checkOptionHandler0);
      evaluation0.toSummaryString("import weka.core.Capabilities.Capability;\n", false);
      assertEquals(0.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      OneRAttributeEval oneRAttributeEval0 = new OneRAttributeEval();
      Capabilities capabilities0 = oneRAttributeEval0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances1 = new Instances(evaluation0.m_Header, (-1));
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.SFMeanEntropyGain();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".bsi", instances1, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9160175838494786
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = new Capabilities(multiScheme0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      C45Loader c45Loader0 = new C45Loader();
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.66588935921926
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      stringKernel0.setMaxSubsequenceLength(14);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[10];
      evaluation0.m_Header = instances0;
      doubleArray0[2] = Double.NaN;
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      XML xML0 = new XML();
      evaluation0.equals(xML0);
      double double0 = evaluation0.relativeAbsoluteError();
      assertEquals(0.0, evaluation0.SFMeanEntropyGain(), 0.01);
      assertEquals(200.0, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.enumerateAttributes();
      Stacking stacking0 = new Stacking();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.getGlobalInfo(zeroR0);
      Evaluation evaluation0 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(45);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3044);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(143);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.truePositiveRate(143);
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '#';
      charArray0[1] = 'm';
      charArray0[2] = '8';
      charArray0[3] = 'Y';
      charArray0[4] = '_';
      charArray0[5] = 'i';
      charArray0[6] = '.';
      charArray0[7] = ',';
      String string0 = evaluation0.num2ShortID(4, charArray0, 4);
      assertEquals("   _", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.554106568502967
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[10];
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      String string0 = evaluation0.toClassDetailsString("\nrevDL: ");
      assertEquals("\nrevDL: \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedAreaUnderPRC();
      evaluation0.meanPriorAbsoluteError();
      boolean boolean1 = evaluation0.getDiscardPredictions();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4361062274866856
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      String string0 = Evaluation.getGlobalInfo(classifier0);
      assertEquals("\nSynopsis for weka.classifiers.rules.ZeroR:\n\nClass for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).", string0);
      
      evaluation0.toSummaryString();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(1L);
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.m_Header.resample(mockRandom1);
      String string1 = evaluation1.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
      
      evaluation0.weightedAreaUnderPRC();
      evaluation0.meanPriorAbsoluteError();
      evaluation1.getDiscardPredictions();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0190420673310716
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctIncorrect();
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom(0L);
      MockRandom mockRandom2 = new MockRandom();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.numTruePositives(0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.falsePositiveRate((-1));
      double double1 = evaluation0.falseNegativeRate(2);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5727852576372756
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[10];
      doubleArray0[9] = Double.NaN;
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      evaluation0.weightedRecall();
      assertEquals(0.0, evaluation0.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.976271435097229
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1305.12447129433;
      doubleArray0[2] = Double.NaN;
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.weightedMatthewsCorrelation();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      IBk iBk0 = new IBk(17);
      Evaluation.makeOptionString(iBk0, false);
      evaluation0.pctIncorrect();
      evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5885541816177144
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      evaluation0.equals(randomForest0);
      evaluation0.getDiscardPredictions();
      evaluation0.pctIncorrect();
      double double0 = evaluation0.precision(0);
      assertEquals(0.0, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) denseInstance0);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      Properties properties0 = new Properties();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.makeOptionString(zeroR0, true);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.313779101803171
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.avgCost();
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, instance0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      evaluation0.m_Header.add((Instance) denseInstance0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC(6);
      evaluation0.areaUnderROC(6);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.1924900789381168
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(1);
      double double0 = evaluation0.numFalseNegatives(93);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getRevision();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      properties0.values();
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[8];
      DenseInstance denseInstance0 = new DenseInstance(0);
      instances0.add((Instance) denseInstance0);
      evaluation0.getRevision();
      Properties properties0 = new Properties();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.KBMeanInformation();
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.456543259312559
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.resample(mockRandom0);
      evaluation0.trueNegativeRate((-2));
      IBk iBk0 = new IBk(59);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      try { 
        evaluation0.evaluateModelOnce((Classifier) iBk0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (-825.6);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      testInstances0.setNumInstances(1);
      doubleArray0[4] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      instances0.add((Instance) denseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -206150
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.050655398439939
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.incorrect();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.buildClassifier(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      double double1 = evaluation2.unweightedMacroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(0);
      MockRandom mockRandom1 = new MockRandom();
      instances0.resample(mockRandom1);
      double double2 = evaluation3.trueNegativeRate((-1842177144));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.pctUnclassified();
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.597073827129648
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = new Capabilities(multiScheme0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelationalClassFormat(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFalseNegativeRate();
      multiScheme0.buildClassifier(instances0);
      evaluation1.areaUnderPRC((-4876));
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.097242790482881
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.m_Header.randomize(mockRandom0);
      evaluation0.weightedPrecision();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(evaluation0.m_Header);
      converterUtils_DataSource0.nextElement(evaluation0.m_Header);
      evaluation1.kappa();
      evaluation1.rootMeanSquaredError();
      Evaluation evaluation2 = new Evaluation(evaluation0.m_Header);
      evaluation2.fMeasure(499);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3016087164076335
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.handleCostOption("", 859);
      Vote vote0 = new Vote();
      Capabilities capabilities0 = vote0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 859;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 859;
      doubleArray0[6] = 1305.12447129433;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(4, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC(859);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5178969046018347
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.numTruePositives((-2));
      org.evosuite.runtime.Random.setNextRandom(114);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 0.0;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1036847696879692
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      capabilities0.enableAllClassDependencies();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      try { 
        evaluation0.updateStatsForPredictor((-506.26862), instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -506
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8673605572559717
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1305.12447129433;
      doubleArray0[2] = Double.NaN;
      HashSet<Object> hashSet0 = new HashSet<Object>();
      testInstances0.setNumNumeric((-617));
      evaluation0.weightedMatthewsCorrelation();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(0.0, evaluation0.pctIncorrect(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.handleCostOption((String) null, 107);
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.enableAllClassDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBRelativeInformation();
      Stacking stacking0 = new Stacking();
      evaluation0.toMatrixString(".arff");
      evaluation0.toSummaryString();
      evaluation0.numFalseNegatives((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.equals(multiScheme0);
      evaluation0.KBInformation();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.SFEntropyGain();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSONLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      Evaluation.getGlobalInfo(classifier0);
      evaluation0.toSummaryString();
      evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.KBRelativeInformation();
      Stacking stacking1 = new Stacking();
      Evaluation.getGlobalInfo(stacking0);
      evaluation0.toSummaryString();
      evaluation0.numFalseNegatives(14);
      textDirectoryLoader1.getRevision();
      Properties properties0 = new Properties();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\nTotal Number of Instances                0     \n");
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      properties0.put(evoSuiteFile0, naiveBayesMultinomialUpdateable0);
      evaluation0.priorEntropy();
      evaluation0.truePositiveRate(12);
      evaluation0.equals(protectedProperties0);
      evaluation0.KBInformation();
      evaluation0.SFEntropyGain();
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getNextInstance(evaluation0.m_Header);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSONLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1037938094163526
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getTechnicalInformation";
      stringArray0[1] = "-xml filename | xml-string\n";
      stringArray0[2] = "";
      MultiScheme.main(stringArray0);
      Evaluation.makeOptionString(gaussianProcesses0, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        Evaluation.evaluateModel((Classifier) regressionByDiscretization0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.RegressionByDiscretization:
         // 
         // -B <int>
         // \tNumber of bins for equal-width discretization
         // \t(default 10).
         // 
         // -E
         // \tWhether to delete empty bins after discretization
         // \t(default false).
         // 
         // -A
         // \tWhether to minimize absolute error, rather than squared error.
         // \t(default false).
         // 
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -K
         // \tWhat type of density estimator to use: 0=histogram/1=kernel/2=normal (default: 0).
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.J48)
         // 
         // Options specific to classifier weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.pctIncorrect();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8404425255502646
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.m_SumAbsErr = 0.0;
      evaluation0.m_Incorrect = (-1338.268);
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation2 = new Evaluation(instances0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = "sGAHsuRl!46=,Q\"";
      Evaluation.main(stringArray0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.setNumericPriorsFromBuffer();
      ZeroR zeroR0 = new ZeroR();
      Evaluation evaluation3 = new Evaluation(instances0);
      Evaluation.getGlobalInfo(zeroR0);
      Instances instances1 = evaluation3.getHeader();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      converterUtils_DataSource0.nextElement(instances1);
      try { 
        evaluation3.updateStatsForPredictor(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.6850348326808318
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      evaluation0.m_ClassNames = testInstances0.DEFAULT_WORDS;
      evaluation0.equals(randomForest0);
      evaluation0.toSummaryString("error", true);
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0434690297310616
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      DenseInstance denseInstance0 = new DenseInstance(859);
      evaluation0.priorEntropy();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.17499999701976776;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 6;
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      double double0 = evaluation0.weightedTrueNegativeRate();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      double double1 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      evaluation0.m_Header.add((Instance) denseInstance0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC(6);
      evaluation0.toSummaryString("-distribution\n", true);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.631076572824261
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      evaluation0.SFMeanSchemeEntropy();
      Object object0 = new Object();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.fMeasure(1);
      assertNotEquals(double2, double0, 0.01);
      
      DenseInstance denseInstance0 = new DenseInstance(1);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updatePriors(instance0);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      DenseInstance denseInstance0 = new DenseInstance(859);
      evaluation0.priorEntropy();
      evaluation1.truePositiveRate(2275);
      RoundingMode roundingMode0 = RoundingMode.HALF_EVEN;
      boolean boolean0 = evaluation0.equals(roundingMode0);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      MultiScheme.main(testInstances0.DEFAULT_WORDS);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation.makeOptionString(cVParameterSelection0, true);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      assertEquals("Transform through the PC space and back to the original space. If only the best n PCs are retained (by setting varianceCovered < 1) then this option will give a dataset in the original space but with less attribute noise.", principalComponents0.transformBackToOriginalTipText());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      evaluation0.avgCost();
      evaluation1.confusionMatrix();
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.avgCost();
      evaluation0.confusionMatrix();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.numTrueNegatives((-1));
      // Undeclared exception!
      try { 
        evaluation0.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.2427276237316462
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[8];
      evaluation0.setNumericPriorsFromBuffer();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "Correlation-based Feature Subset Selection for Machine Learning");
      evaluation0.numFalsePositives(0);
      evaluation0.numTrueNegatives((-2));
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getTechnicalInformation";
      stringArray0[1] = "getTechnicalInformation";
      stringArray0[2] = "";
      Evaluation.main(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray0[0] = "-xml filename | xml-string\n";
      Evaluation.main(stringArray1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.316677448811225
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.setDiscardPredictions(false);
      double double1 = evaluation0.m_Correct;
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.avgCost();
      double double4 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double4, double3, 0.01);
      
      evaluation0.unclassified();
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Puk puk0 = new Puk();
      Puk puk1 = new Puk();
      Capabilities capabilities0 = puk1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Stacking stacking0 = new Stacking();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getRevision();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate((-833));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.addNumericTrainClass((-1810.643729), (-3016.752787082229));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = new Capabilities(multiScheme0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.kappa();
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.SFPriorEntropy();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.278079539338269
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Evaluation.handleCostOption("", 859);
      Puk puk0 = new Puk();
      puk0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      Stacking stacking0 = new Stacking();
      evaluation0.toSummaryString();
      evaluation0.numFalseNegatives(859);
      evaluation0.errorRate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      properties1.values();
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedFMeasure();
      assertNotEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9477644416516862
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      evaluation0.toMatrixString(" ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      evaluation0.KBInformation();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.577531167672402
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1305.12447129433;
      doubleArray0[2] = Double.NaN;
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.weightedMatthewsCorrelation();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(".arff");
      ConverterUtils.DataSource.read(".arff");
      converterUtils_DataSource0.nextElement(instances0);
      DenseInstance denseInstance0 = new DenseInstance(1);
      try { 
        evaluation0.updateStatsForPredictor(0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.79642509509525
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.SFMeanSchemeEntropy();
      testInstances0.getData();
      testInstances0.getData();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.incorrect();
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.unweightedMacroFmeasure();
      evaluation0.priorEntropy();
      double double0 = evaluation0.m_TotalCoverage;
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.m_ConfLevel = Double.NaN;
      evaluation0.toMatrixString("@relation");
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      properties0.values();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.areaUnderROC(501);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2427358753747004
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.enumerateAttributes();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      HashSet<Object> hashSet1 = new HashSet<Object>();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(1889);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.450181440026084
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      double double0 = evaluation0.m_ClassPriorsSum;
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      
      DenseInstance denseInstance0 = new DenseInstance(859);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.precision((-161));
      evaluation0.makeDistribution(Double.NaN);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.4361062274866856
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      instances0.setClassIndex(0);
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      instances0.enumerateAttributes();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.makeDistribution(1082.0);
      instances0.resample(mockRandom0);
      evaluation0.toClassDetailsString();
      evaluation0.pctIncorrect();
      evaluation1.pctCorrect();
      // Undeclared exception!
      try { 
        evaluation1.falsePositiveRate(93);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.handleCostOption("", 859);
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBRelativeInformation();
      Stacking stacking0 = new Stacking();
      Evaluation.getGlobalInfo(multiScheme0);
      evaluation0.toSummaryString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.unweightedMacroFmeasure();
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      evaluation0.toSummaryString();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      try { 
        evaluation0.crossValidateModel((Classifier) stacking0, (Instances) null, 3, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Puk puk0 = new Puk();
      puk0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom1 = new MockRandom((-1));
      MockRandom mockRandom2 = new MockRandom();
      evaluation0.trueNegativeRate(0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getOptions();
      evaluation0.m_MaxTarget = 704.062;
      String string0 = evaluation0.toSummaryString(".arff", true);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      SparseInstance sparseInstance0 = new SparseInstance(7);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getRevision();
      Properties properties0 = new Properties();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      double double0 = evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.setNumericPriorsFromBuffer();
      ZeroR zeroR0 = new ZeroR();
      evaluation1.getHeader();
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      evaluation0.equals(xML0);
      DenseInstance denseInstance0 = new DenseInstance(1);
      try { 
        evaluation0.evaluateModelOnce((double) (-1), (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Evaluation.handleCostOption("", 2770);
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBRelativeInformation();
      capabilities0.getOtherCapabilities();
      Stacking stacking0 = new Stacking();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Properties properties0 = new Properties();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.KBMeanInformation();
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.KBInformation();
      evaluation1.setNumericPriorsFromBuffer();
      ZeroR zeroR0 = new ZeroR();
      evaluation1.SFMeanEntropyGain();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0389712786066236
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[8];
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) denseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderPRC((-1));
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      double double0 = evaluation0.m_TotalCoverage;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.4933761634495393
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities0 = new Capabilities(multiScheme0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      C45Loader c45Loader0 = new C45Loader();
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numFalsePositives(19);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      double double2 = evaluation1.numTrueNegatives(102);
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5970925318292037
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom1 = new MockRandom(0);
      instances0.resample(mockRandom0);
      String string0 = evaluation0.toClassDetailsString("getEstimatorType");
      assertEquals("getEstimatorType\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.falsePositiveRate((-2));
      evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.useNoPriors();
      instances0.enumerateAttributes();
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.setDiscardPredictions(true);
      evaluation1.incorrect();
      evaluation1.SFMeanSchemeEntropy();
      double double1 = evaluation0.avgCost();
      evaluation0.weightedTrueNegativeRate();
      assertTrue(evaluation0.getDiscardPredictions());
      
      double double2 = evaluation1.KBInformation();
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.useNoPriors();
      instances0.enumerateAttributes();
      double double0 = evaluation0.m_SumAbsErr;
      evaluation0.setDiscardPredictions(true);
      evaluation1.incorrect();
      evaluation1.SFMeanSchemeEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.avgCost();
      evaluation0.weightedTrueNegativeRate();
      assertTrue(evaluation0.getDiscardPredictions());
      
      double double1 = evaluation2.KBInformation();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Stacking stacking0 = new Stacking();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      DenseInstance denseInstance0 = new DenseInstance(663.91915431842, doubleArray0);
      instances0.add((Instance) denseInstance0);
      textDirectoryLoader0.getRevision();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.pctIncorrect();
      double double0 = evaluation0.priorEntropy();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(1.413816850303634, double0, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.setDiscardPredictions(false);
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      DenseInstance denseInstance0 = new DenseInstance(2374);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.setSubsequenceLength(1303);
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities1 = cfsSubsetEval0.getCapabilities();
      capabilities0.or(capabilities1);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.toSummaryString(true);
      MockRandom mockRandom0 = new MockRandom(2);
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 23, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Logistic logistic0 = new Logistic();
      MockRandom mockRandom0 = new MockRandom((-26L));
      try { 
        evaluation0.crossValidateModel((Classifier) logistic0, instances0, (-4402), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.620567376177195
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      evaluation0.avgCost();
      evaluation0.confusionMatrix();
      evaluation1.setNumericPriorsFromBuffer();
      evaluation1.trueNegativeRate(14);
      evaluation0.addNumericTrainClass(Double.NaN, 14);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5299168492712905
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.enumerateAttributes();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      HashSet<Object> hashSet1 = new HashSet<Object>();
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.trueNegativeRate(1531);
      evaluation0.addNumericTrainClass(0.0, 107);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.7224612413750577
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      evaluation0.equals(randomForest0);
      evaluation0.toSummaryString("error", true);
      evaluation0.confusionMatrix();
      evaluation0.getHeader();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1305.12447129433;
      doubleArray0[2] = Double.NaN;
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.weightedMatthewsCorrelation();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updateStatsForPredictor(0, instance0);
      evaluation0.getHeader();
      assertEquals(1.0, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8427219519270834
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = Double.NaN;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      instances0.add((Instance) denseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "   * @return the classification result\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      instances0.stream();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toCumulativeMarginDistributionString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(120L);
      instances0.resample(mockRandom0);
      instances0.enumerateInstances();
      evaluation0.toMatrixString("setClassifiers");
      evaluation0.pctIncorrect();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.pctCorrect();
      int int0 = 1;
      evaluation0.falsePositiveRate(1);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.124212131993073
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.getGlobalInfo(logitBoost0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.falsePositiveRate(1);
      CostMatrix costMatrix0 = new CostMatrix(485);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5310060676472217
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      capabilities0.setOwner(stringKernel0);
      MockRandom mockRandom0 = new MockRandom();
      String string0 = evaluation0.toClassDetailsString(" ");
      assertEquals(" \n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.weightedAreaUnderPRC();
      double double0 = new Integer(1);
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.4795939748142395
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.avgCost();
      DenseInstance denseInstance0 = new DenseInstance(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updatePriors(instance0);
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.695600427808076
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.setSubsequenceLength(26);
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities1 = cfsSubsetEval0.getCapabilities();
      capabilities1.or(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.truePositiveRate(1);
      MultiScheme multiScheme0 = new MultiScheme();
      assertEquals(0, multiScheme0.getNumFolds());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctIncorrect();
      evaluation0.weightedTrueNegativeRate();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      double double1 = evaluation0.matthewsCorrelationCoefficient(2820);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_TotalCost;
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8466435205545344
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.handleCostOption("", 859);
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      instances0.stream();
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      assertEquals(2, instance0.numValues());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.getGlobalInfo(logitBoost0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        evaluation1.precision(105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.4036690346512835
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getOptions();
      evaluation0.m_MaxTarget = 704.062;
      String string0 = evaluation0.toSummaryString(".arff", true);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMacroFmeasure();
      instances0.resample(mockRandom0);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.priorEntropy();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctIncorrect();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.rootMeanPriorSquaredError();
      evaluation1.areaUnderPRC((-2));
      CoverTree coverTree0 = new CoverTree();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      assertEquals("Retain enough PC attributes to account for this proportion of variance.", principalComponents0.varianceCoveredTipText());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.getOptions();
      double double0 = evaluation1.pctIncorrect();
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      double double2 = evaluation1.areaUnderROC((-1479));
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, true);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = new Capabilities(regressionByDiscretization0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        Evaluation.handleCostOption("B", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.3291073911861533
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      ConverterUtils.DataSource converterUtils_DataSource1 = new ConverterUtils.DataSource(instances0);
      XML xML0 = new XML();
      RandomForest randomForest0 = new RandomForest();
      evaluation0.equals(randomForest0);
      evaluation0.toSummaryString("error", true);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), (char[]) null, 4211);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.avgCost();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.KBInformation();
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      String string0 = evaluation0.num2ShortID(98, charArray0, 98);
      assertEquals("33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka/core/Capabilities.props";
      Evaluation.main(stringArray0);
      evaluation0.toMatrixString();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.550683947301844
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      int int0 = 13;
      evaluation0.recall(13);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(44);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Properties properties0 = new Properties();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.falsePositiveRate((-2110));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      CostMatrix costMatrix0 = new CostMatrix(13);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.relativeAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation1.recall(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      evaluation0.useNoPriors();
      evaluation0.weightedPrecision();
      evaluation0.m_SumAbsErr = Double.NaN;
      evaluation0.setDiscardPredictions(false);
      instances0.compactify();
      evaluation0.incorrect();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.errorRate();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) serializedClassifier0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.toSummaryString();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      evaluation0.errorRate();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) serializedClassifier0, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom1 = new MockRandom((-1));
      MockRandom mockRandom2 = new MockRandom();
      evaluation0.trueNegativeRate(0);
      try { 
        evaluation0.crossValidateModel("@data", instances0, 0, testInstances0.DEFAULT_WORDS, (Random) mockRandom2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @data
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.5901377123969231
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.kappa();
      evaluation0.rootMeanSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1668));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1668
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.avgCost();
      evaluation0.confusionMatrix();
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.rootRelativeSquaredError();
      // Undeclared exception!
      try { 
        evaluation1.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        instances0.setClassIndex(1973);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid class index: 1973
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1101983788211287
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.addNumericTrainClass(0.0, 0.0);
      instances0.stream();
      instances0.stream();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.stream();
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.handleCostOption("", 859);
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      try { 
        Evaluation.evaluateModel("", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.numFalseNegatives((-1));
      evaluation0.setDiscardPredictions(false);
      double double1 = evaluation0.m_Correct;
      double double2 = evaluation0.SFMeanSchemeEntropy();
      evaluation0.avgCost();
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double2, 0.01);
      
      evaluation0.falseNegativeRate((-2));
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      Evaluation evaluation1 = new Evaluation(evaluation0.m_Header);
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation2.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      evaluation2.weightedMatthewsCorrelation();
      evaluation1.kappa();
      evaluation0.KBRelativeInformation();
      double double0 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".arff", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setClassIndex(0);
      evaluation0.setDiscardPredictions(true);
      instances0.stream();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedFalsePositiveRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(120L);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("seedTipText", arrayList0, 110);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.getGlobalInfo(regressionByDiscretization0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.recall(13);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      evaluation1.useNoPriors();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation1.weightedPrecision();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.toMatrixString("@relation");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, sparseInstance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      Properties properties0 = new Properties();
      evaluation0.setNumericPriorsFromBuffer();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, " is not assignable from ");
      double double1 = evaluation0.numFalsePositives(143);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numTrueNegatives(3);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      evaluation0.areaUnderPRC(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = new Capabilities(stringKernel0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      String string0 = evaluation0.toSummaryString("q&s", false);
      assertEquals("q&s\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.handleCostOption("", 859);
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBRelativeInformation();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        Evaluation.handleCostOption("@relation", 859);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.toSummaryString();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.pctUnclassified();
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      Capabilities capabilities0 = new Capabilities(logistic0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.4368192399644037
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.resample(mockRandom0);
      String string0 = evaluation1.toClassDetailsString();
      evaluation0.pctIncorrect();
      evaluation0.pctCorrect();
      evaluation0.setNumericPriorsFromBuffer();
      ZeroR zeroR0 = new ZeroR();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, "    getCapabilities().testWithFail(i);\n");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      boolean boolean0 = evaluation1.m_ClassIsNominal;
      evaluation0.pctIncorrect();
      HashSet<Object> hashSet0 = new HashSet<Object>();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForPredictor(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Header = instances0;
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(143);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation1.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation0.pctIncorrect();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numTruePositives(143);
      assertEquals(0.0, double2, 0.01);
      
      org.evosuite.runtime.Random.setNextRandom(143);
      double double3 = evaluation0.SFMeanPriorEntropy();
      double double4 = evaluation0.errorRate();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Instances instances0 = null;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      OneR oneR0 = new OneR();
      try { 
        Evaluation.wekaStaticWrapper(oneR0, "T6y3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.OneR$OneRRule", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.SFMeanSchemeEntropy();
      Instances instances1 = testInstances0.getData();
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        Evaluation.handleCostOption("@relation", (-2339));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.2801315622513108
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.useNoPriors();
      instances0.enumerateAttributes();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      Evaluation.getGlobalInfo(classifier0);
      evaluation0.toSummaryString();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      Evaluation.main(stringArray0);
      evaluation0.toClassDetailsString();
      double[] doubleArray0 = new double[0];
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashSet<Object> hashSet0 = new HashSet<Object>();
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation.handleCostOption((String) null, 109);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation.handleCostOption("", 859);
      Evaluation.main((String[]) null);
  }
}
