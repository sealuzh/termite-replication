/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 00:10:24 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.lazy.IBk;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.enumerateMeasures();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      String[] stringArray0 = jRip0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip0.getRevision();
      jRip0.seedTipText();
      jRip0.listOptions();
      jRip0.checkErrorRateTipText();
      jRip0.setOptions(stringArray0);
      jRip0.globalInfo();
      jRip0.enumerateMeasures();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "~[sZ^4TqM&'2_/MgdG6";
      stringArray0[1] = "-E";
      stringArray0[2] = "second_value";
      stringArray0[3] = "X";
      stringArray0[4] = "GV";
      stringArray0[5] = "Seed used to initialise the random number generator.Random numbers are used for setting the initial weights of the connections betweem nodes, and also for shuffling the training data.";
      jRip0.setOptions(stringArray0);
      int int0 = jRip0.getOptimizations();
      assertFalse(jRip0.getCheckErrorRate());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("&uGRM;}^}EMy");
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" | pos = ", arrayList0, 1284);
      DenseInstance denseInstance0 = new DenseInstance(1284);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(".bsi", instances0);
      arrayList0.add(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.toString();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4696072829762055
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "string";
      stringArray0[1] = "numeric";
      stringArray0[2] = " Reversed: ";
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      Attribute attribute1 = new Attribute("", 2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.toString(attribute0);
      jRip0.getFolds();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip0.getCheckErrorRate();
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("(2xki'MUJXH#S");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.trimToSize();
      Instances instances0 = new Instances("integer", arrayList0, 2);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@end";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      stringArray0[3] = "string";
      stringArray0[4] = "ebk5#]U`b_&";
      stringArray0[5] = "optimization in this implementation.\n\n";
      stringArray0[6] = "G +Fz3o^O^5";
      stringArray0[7] = " >= ";
      JRip.main(stringArray0);
      arrayList0.add(attribute0);
      Attribute.typeToString((-504));
      jRip0.setCheckErrorRate(true);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("lqp~]Rb .", 3);
      ArrayList<String> arrayList0 = new ArrayList<String>(5);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("E. Frank and Y. Wang and S. Inglis and G. Holmes and I.H. Witten", arrayList0, protectedProperties0);
      attribute0.addStringValue(attribute1, 1653);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "?X";
      stringArray0[3] = "-F";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -F option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      jRip0.enumerateMeasures();
      stringArray0[0] = "";
      String[] stringArray1 = new String[0];
      AbstractClassifier.runClassifier(jRip0, stringArray1);
      stringArray0[1] = "+KJL@@~w0f1V5pb&'U";
      jRip0.setOptimizations(6146);
      stringArray0[2] = "";
      stringArray0[3] = "((;qy~yq5N$-O<f";
      stringArray0[4] = "Inside m_Ruleset";
      jRip0.setDebug(true);
      stringArray0[5] = "BestFirst:\n\nSearches the space of attribute subsets by greedy hillclimbing augmented with a backtracking facility. Setting the number of consecutive non-improving nodes allowed controls the level of backtracking done. Best first may start with the empty set of attributes and search forward, or start with the full set of attributes and search backward, or start at any point and search in both directions (by considering all possible single attribute additions and deletions at a given point).\n";
      JRip.main(stringArray0);
      jRip0.checkErrorRateTipText();
      jRip0.getDebug();
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("");
      attribute0.indexOfValue("((;qy~yq5N$-O<f");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.cover = (-2140.30555);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 1, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("&uGRM;}^}My");
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) 2;
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("&uGRM;}^}My >= NaN", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = new Attribute("`Ox(Ee");
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) 4;
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 3;
      int[] intArray0 = null;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" y|", arrayList0, 3);
      try { 
        jRip0.rulesetForOneClass((-1499.446887), instances0, (-1499.446887), Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("w", "w", 4);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("&r@RM;^}My");
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      jRip_NominalAntd0.value = (double) 2;
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" | pos = ", arrayList0, 1284);
      DenseInstance denseInstance0 = new DenseInstance(1284);
      instances0.add((Instance) denseInstance0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-75));
      jRip0.getOptimizations();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-72));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      IBk iBk0 = new IBk();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-P", arrayList0, 4);
      try { 
        jRip0.rulesetForOneClass(2139.8529855204, instances0, 2, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Nim";
      stringArray0[1] = "Nim";
      stringArray0[2] = "Nim";
      stringArray0[3] = "-F";
      stringArray0[4] = "Nim";
      stringArray0[5] = "Nim";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Nim\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("IEu.^tC}lS}@4b:", arrayList0, 1559);
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("@relation", instances0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 0, 0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.classifiers.rules.JRip$RipperRule", arrayList0, 1559);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(".bsi", instances0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 2, 1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("B#^LW,Xzot&V", arrayList0, 315);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      
      jRip_RipperRule0.prune(instances0, false);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = new Attribute("");
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string0);
      
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Attribute attribute0 = new Attribute("jP<lRmO}ynLPIbD^", list0, 3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccu();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute("`yxEe");
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = new Attribute("`Ox(Ee");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals("`Ox(Ee = ", string0);
      
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setDebug(true);
      try { 
        jRip0.rulesetForOneClass((-2849.521), (Instances) null, 64.0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute("(2xki'MUJXH#S");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, 4, 4);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass((-53.58361047898915), (Instances) null, 2.0, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass((-53.58361047898915), (Instances) null, 1926.283991, (-53.58361047898915));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      jRip0.toString();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.foldsTipText();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = new Attribute("(2xki'MUJXH#S");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 2);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      String[] stringArray0 = jRip0.getOptions();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(110);
      jRip0.optimizationsTipText();
      assertEquals(110, jRip0.getFolds());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("&uGRM;}^}My");
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-224.3499));
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.hasAntds();
      assertEquals((-224.3499), jRip_RipperRule0.getConsequent(), 0.01);
      
      String[] stringArray0 = new String[3];
      Attribute attribute0 = new Attribute("8118", (List<String>) null, 69);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      JRip jRip1 = new JRip();
      jRip0.getUsePruning();
      JRip jRip2 = new JRip();
      jRip2.getCheckErrorRate();
      jRip2.debugTipText();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getSeed();
      jRip_RipperRule0.hasAntds();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(11, stringArray0.length);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1851);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[10];
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-224.3499));
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.hasAntds();
      assertEquals((-224.3499), jRip_RipperRule0.getConsequent(), 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 705;
      intArray0[1] = (-2021);
      intArray0[2] = (-3129);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-224.3499), intArray0, (-2021));
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("", 705);
      Attribute attribute1 = attribute0.copy("c'M4");
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip_NumericAntd0.getAttr();
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("`Ox(Ee");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo((-1.0));
      double double0 = jRip0.getMinNo();
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("V4ZR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // V4ZR not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether pruning is performed.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertFalse(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jRip0.globalInfo();
      Attribute attribute0 = new Attribute("", arrayList0);
      Attribute.typeToString(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getSplitPoint();
      double double0 = (-776.4530170836497);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4878.0, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = new Attribute("&uGRM;}^}My");
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(1);
      jRip_RipperRule0.toString(attribute0);
      assertEquals(1.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.seedTipText();
      Utils.log2 = (double) 0;
      Attribute attribute0 = new Attribute("\nGrowing and pruning Revision ...", 0);
      attribute0.value(2063);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("date", arrayList0, 4);
      // Undeclared exception!
      try { 
        instances0.renameAttributeValue(attribute0, (String) null, "SUNFV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null not found
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-2299.09422038));
      jRip0.checkErrorRateTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setSeed((-561L));
      jRip_RipperRule0.getRevision();
      jRip0.getSeed();
      jRip0.checkErrorRateTipText();
      jRip0.checkErrorRateTipText();
      Instances instances0 = null;
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.", (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(0L);
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-57));
      jRip0.getOptions();
      assertEquals((-57), jRip0.getOptimizations());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("\tLearning sceme: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // \tLearning sceme:  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attribute attribute0 = new Attribute("&r@RM;}^}My");
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(boolean0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attribute attribute0 = new Attribute("Type: ");
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd2 = (JRip.NumericAntd)jRip_NumericAntd1.copy();
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertNotSame(jRip_NumericAntd2, jRip_NumericAntd1);
      assertEquals(0.0, jRip_NumericAntd2.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd2.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd2.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(1.0001);
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(1.0001, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = jRip_RipperRule0.getConsequent();
      assertEquals((-1.0), double0, 0.01);
      
      String string0 = jRip0.seedTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("The seed used for randomizing the data.", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertNotSame(jRip_RipperRule0, jRip_RipperRule1);
      assertTrue(boolean0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
  }
}
