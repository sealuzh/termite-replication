/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 07:45:40 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3130702573629103
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderPRC((-2));
      evaluation1.weightedFalseNegativeRate();
      Evaluation.makeOptionString(gaussianProcesses0, false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 29.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.400284985950242
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.getRevision();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.m_ConfLevel;
      double double1 = evaluation1.m_ConfLevel;
      evaluation2.toCumulativeMarginDistributionString();
      evaluation1.m_Unclassified = 0.95;
      evaluation1.rootMeanSquaredError();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation1.unclassified();
      evaluation2.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation3.precision((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8918187634495545
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      SparseInstance sparseInstance0 = new SparseInstance(101);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.SFMeanSchemeEntropy();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(20, testInstances0.getNumInstances());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.728753191124508
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".arff");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@data");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.KBRelativeInformation();
      evaluation1.SFPriorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1450.7721235820034;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 0.0;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 362943
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "distributionForInstance");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 57.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 57.0;
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.842345486040718
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) (-2);
      doubleArray1[4] = (double) (-2);
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = (double) 0;
      doubleArray0[0] = doubleArray1;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.meanPriorAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate((-1120078202));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setSeed(20);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Instances instances0 = testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.relativeAbsoluteError();
      evaluation0.totalCost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      evaluation1.getHeader();
      evaluation1.numFalseNegatives((-2));
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9251468704358197
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.falseNegativeRate(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)24;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertFalse(testInstances0.getNoClass());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      evaluation0.KBMeanInformation();
      evaluation0.unclassified();
      evaluation0.setDiscardPredictions(true);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.0;
      CoverTree coverTree0 = new CoverTree();
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot((int[]) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.SFPriorEntropy();
      double double0 = Evaluation.MIN_SF_PROB;
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) logitBoost0, instances0, 121, (Random) mockRandom0, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4875361743690423
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.SFPriorEntropy();
      double double1 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.areaUnderPRC(2);
      evaluation0.kappa();
      evaluation0.setDiscardPredictions(false);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9184467655881388
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(1965);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = 6;
      double double0 = evaluation0.m_WithClass;
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.552212220279067
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.clone();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.truePositiveRate(1);
      evaluation0.areaUnderPRC(2);
      evaluation0.kappa();
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-1524), 41.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8836205643284467
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8037143984351165
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumClasses(1464);
      testInstances0.clone();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8375937467988783
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Capabilities capabilities0 = wrapperSubsetEval0.getCapabilities();
      capabilities0.enableAllAttributes();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.getRevision();
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) logitBoost0, instance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't normalize array. Sum is zero.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.275635350319579
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instance instance0 = null;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.612852339039317
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      evaluation1.numFalsePositives(1);
      double double0 = evaluation1.m_SumClass;
      evaluation1.areaUnderPRC(0);
      evaluation0.toClassDetailsString("dy&@tD3(>'br\"s");
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = 'Z';
      evaluation0.num2ShortID(0, charArray0, 1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      // Undeclared exception!
      try { 
        textDirectoryLoader0.getNextInstance(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.TextDirectoryLoader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.323245593310404
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = '&';
      charArray0[2] = '4';
      charArray0[3] = 'W';
      charArray0[4] = '@';
      charArray0[5] = 'E';
      charArray0[6] = 'k';
      charArray0[7] = '`';
      charArray0[8] = 'E';
      evaluation1.num2ShortID(658, charArray0, 2182);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3089958706863922
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(439);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.recall(0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5975170300947936
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation1.evaluateModel((Classifier) attributeSelectedClassifier0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8835319301806641
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.SFSchemeEntropy();
      double double0 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7394518068218354
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double2 = evaluation0.SFSchemeEntropy();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.m_SumKBInfo;
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFMeanEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      Instance instance1 = linearNNSearch0.nearestNeighbour(instance0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, instance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.913737189449991
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.681600612725696
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation1.rootMeanSquaredError();
      double double2 = evaluation0.unclassified();
      double double3 = evaluation0.priorEntropy();
      assertEquals(double3, double2, 0.01);
      
      evaluation1.getRevision();
      double double4 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double4, double1, 0.01);
      
      evaluation1.areaUnderROC(11);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.794375227518644
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      capabilities0.enableAllAttributes();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1882928116279063
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      capabilities0.enableAllAttributes();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.evaluateModelOnce((Classifier) simpleLinearRegression0, instance0);
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalseNegativeRate();
      evaluation0.kappa();
      double double1 = evaluation0.errorRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.071522124044181
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4927525454443895
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.numTruePositives(1);
      double double2 = evaluation0.truePositiveRate(1);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      double double3 = evaluation0.KBMeanInformation();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.rootMeanPriorSquaredError();
      assertNotEquals(double4, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation1.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.134512468457834
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.makeOptionString(logitBoost0, true);
      double double0 = evaluation0.numTruePositives((-2017));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8497394957867326
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getCapabilities();
      capabilities0.enableAllAttributes();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      Instance instance0 = converterUtils_DataSource0.nextElement((Instances) null);
      try { 
        evaluation1.evaluateModelOnce((Classifier) zeroR0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      DenseInstance denseInstance0 = new DenseInstance(104);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Instance instance0 = null;
      Evaluation evaluation0 = new Evaluation(instances0);
      REPTree rEPTree0 = new REPTree();
      try { 
        evaluation0.evaluateModel((Classifier) rEPTree0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.966344420151398
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFPriorEntropy();
      evaluation0.truePositiveRate(1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.0;
      evaluation0.numTrueNegatives(0);
      evaluation0.weightedMatthewsCorrelation();
      try { 
        Evaluation.handleCostOption("@", 118);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6389482949003704
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1895500582577871
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      DenseInstance denseInstance0 = new DenseInstance(460);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, binarySparseInstance0, 460);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.659781146080103
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString((String) null, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.numFalseNegatives((-1));
      evaluation1.areaUnderPRC((-1120078202));
      evaluation1.numFalseNegatives(1);
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.647838486823857
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      evaluation0.weightedAreaUnderROC();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8594215681656947
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0E-12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.565200777938294
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.SFPriorEntropy();
      evaluation0.weightedFMeasure();
      evaluation0.trueNegativeRate(0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor((-1), sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.101745604741793
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedMatthewsCorrelation();
      double double2 = evaluation0.weightedFMeasure();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.KBInformation();
      assertEquals(0.0, double3, 0.01);
      
      testInstances0.generate("@data");
      evaluation0.falsePositiveRate(1402);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1402;
      DenseInstance denseInstance0 = new DenseInstance(1402);
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-952));
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, ".bsi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1021915356225063
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.numTrueNegatives((-1));
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedFMeasure();
      evaluation0.KBInformation();
      testInstances0.generate("@data");
      evaluation0.falsePositiveRate(1402);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 1402;
      DenseInstance denseInstance0 = new DenseInstance(1402);
      denseInstance0.toStringNoWeight();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5599825459928525
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.KBInformation();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(100);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4947368421052632
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.530822721581522
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      AbstractFileLoader.runFileLoader(matlabLoader0, testInstances0.DEFAULT_WORDS);
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) naiveBayesMultinomialUpdateable0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.018914031070801
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.SFMeanSchemeEntropy();
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.6188490117647243
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.truePositiveRate(1);
      evaluation0.areaUnderPRC(2);
      evaluation0.kappa();
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1763806188916566
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation1.meanPriorAbsoluteError();
      try { 
        evaluation1.toClassDetailsString(" ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8835319301806641
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".arff");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@data");
      evaluation0.rootRelativeSquaredError();
      evaluation0.numTrueNegatives(11);
      try { 
        Evaluation.handleCostOption(".arff", 52);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@data\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3118764570483523
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[0];
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.numFalsePositives(1);
      evaluation0.kappa();
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.trueNegativeRate((-470));
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFMeanEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8725336946728466
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getDiscardPredictions();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8204997297048613
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Instance instance0 = null;
      Evaluation evaluation0 = new Evaluation(instances0);
      Utils.SMALL = (double) (-2);
      try { 
        evaluation0.updateStatsForPredictor((-2), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.106873809869998
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getAttributeSelectionMethod();
      evaluation0.toSummaryString("@data", false);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.weightedFalseNegativeRate();
      evaluation1.numFalsePositives((-1));
      evaluation0.KBInformation();
      evaluation1.falsePositiveRate(1);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.917499217543191
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      double double0 = evaluation0.trueNegativeRate((-470));
      double[] doubleArray0 = new double[1];
      SparseInstance sparseInstance0 = new SparseInstance((-470), doubleArray0);
      double double1 = evaluation0.numFalseNegatives((-470));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.631076572824261
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      LinearRegression linearRegression1 = new LinearRegression();
      evaluation0.SFPriorEntropy();
      double double0 = Evaluation.MIN_SF_PROB;
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(0);
      try { 
        evaluation0.crossValidateModel((Classifier) linearRegression0, instances0, (-2), (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8958389728225644
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5937579197360707
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation1.recall((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      double double1 = evaluation0.correct();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1));
      try { 
        evaluation0.evaluateModelOnce(0.125, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives((-1));
      evaluation0.relativeAbsoluteError();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, ";vc{s@pg>VIA`Y");
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation1.weightedFalseNegativeRate();
      double double0 = evaluation1.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.weightedFalseNegativeRate();
      double double2 = evaluation0.m_TotalCost;
      double double3 = evaluation1.pctIncorrect();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.4431477181160863
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.falseNegativeRate(5);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1878840226652085
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correlationCoefficient();
      evaluation0.setPriors(instances0);
      evaluation0.addNumericTrainClass(1560.8, (-2));
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.SFPriorEntropy();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.weightedFMeasure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      evaluation0.trueNegativeRate(0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 635, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 635
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.SFPriorEntropy();
      double double2 = evaluation0.truePositiveRate(1);
      assertEquals(double2, double1, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      evaluation0.updateMargins(doubleArray0, 2, 0.0);
      double double3 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double3, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation0.rootMeanSquaredError();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.unclassified();
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation1.precision((-2));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.weightedPrecision();
      assertEquals(double4, double1, 0.01);
      
      double[] doubleArray0 = evaluation2.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.962255798234182
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.toSummaryString("getRevision", false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.getRevision();
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation2.makeDistribution(1.050000000745058);
      evaluation2.KBMeanInformation();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.toCumulativeMarginDistributionString();
      try { 
        Evaluation.evaluateModel("H", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name H.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(0.95, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      evaluation0.KBMeanInformation();
      evaluation0.setPriors(instances0);
      try { 
        Evaluation.handleCostOption("kernelTipText", 113);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.0736556314531835
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.toSummaryString("getRevision", false);
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 's';
      charArray0[3] = 'b';
      charArray0[4] = 's';
      charArray0[5] = 'y';
      charArray0[6] = 'y';
      charArray0[7] = 'b';
      charArray0[8] = 's';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0608185358593016
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation2 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID(11, charArray0, 1719);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      evaluation0.getRevision();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0356414632756468
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      double double0 = evaluation0.SFMeanPriorEntropy();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = Evaluation.getGlobalInfo(gaussianProcesses0);
      assertEquals("\nSynopsis for weka.classifiers.functions.GaussianProcesses:\n\n Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.", string0);
      
      OneR oneR0 = new OneR();
      boolean boolean0 = evaluation0.equals("\nSynopsis for weka.classifiers.functions.GaussianProcesses:\n\n Implements Gaussian processes for regression without hyperparameter-tuning. To make choosing an appropriate noise level easier, this implementation applies normalization/standardization to the target attribute as well as the other attributes (if  normalization/standardizaton is turned on). Missing values are replaced by the global mean/mode. Nominal attributes are converted to binary ones. Note that kernel caching is turned off if the kernel used implements CachedKernel.");
      assertFalse(boolean0);
      
      String string1 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.560654192889907
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumClass;
      evaluation0.areaUnderPRC(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toClassDetailsString("reset");
      assertEquals("reset\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double2 = evaluation1.weightedTruePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) null, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(497, charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[0] = (-2286);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0, intArray0, 1564);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) attributeSelectedClassifier0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      evaluation0.getDiscardPredictions();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) logitBoost0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      double double0 = evaluation0.evaluateModelOnce((Classifier) simpleLinearRegression0, instance0);
      assertEquals(50.0, evaluation0.sizeOfPredictedRegions(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.kappa();
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double2, 0.01);
      
      double double3 = evaluation0.pctUnclassified();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.setPriors(instances0);
      String string0 = evaluation0.getRevision();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals("9101", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(".bsi", false);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      double double0 = evaluation0.weightedFMeasure();
      double double1 = evaluation0.weightedRecall();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.9239435019480644
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".arff", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      double double0 = evaluation1.weightedFalseNegativeRate();
      double double1 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.incorrect();
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8939941023645552
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation1.avgCost();
      CostMatrix costMatrix0 = new CostMatrix(1408);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.9995255626558264
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double2 = evaluation0.precision(1);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5937579197360707
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      try { 
        evaluation1.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      DecisionStump decisionStump0 = new DecisionStump();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Q,lOr\"t.&[5v7", arrayList0, 2634);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(2, testInstances0.getNumClasses());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.2563095855703486
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      AttributeSelectedClassifier.main(testInstances0.DEFAULT_WORDS);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-1), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      double double1 = evaluation0.falsePositiveRate((-1));
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.106644616344715
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.8851077448816969
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.trueNegativeRate(2);
      try { 
        Evaluation.handleCostOption("@data", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.3858784499132657
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(" ", true);
      assertEquals(" \nTotal Number of Instances                0     \n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.106705671996942
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.SFPriorEntropy();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.pctCorrect();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.trueNegativeRate(0);
      try { 
        Evaluation.handleCostOption(".arff", 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.kappa();
      String string0 = evaluation0.toSummaryString(" ", false);
      assertEquals(" \nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.evaluateModel((Classifier) attributeSelectedClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AttributeSelectedClassifier:
         // 
         // -E <attribute evaluator specification>
         // \tFull class name of attribute evaluator, followed
         // \tby its options.
         // \teg: \"weka.attributeSelection.CfsSubsetEval -L\"
         // \t(default weka.attributeSelection.CfsSubsetEval)
         // -S <search method specification>
         // \tFull class name of search method, followed
         // \tby its options.
         // \teg: \"weka.attributeSelection.BestFirst -D 1\"
         // \t(default weka.attributeSelection.BestFirst)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.J48)
         // 
         // Options specific to classifier weka.classifiers.trees.J48:
         // 
         // -U
         // \tUse unpruned tree.
         // -O
         // \tDo not collapse tree.
         // -C <pruning confidence>
         // \tSet confidence threshold for pruning.
         // \t(default 0.25)
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // \t(default 2)
         // -R
         // \tUse reduced error pruning.
         // -N <number of folds>
         // \tSet number of folds for reduced error
         // \tpruning. One fold is used as pruning set.
         // \t(default 3)
         // -B
         // \tUse binary splits only.
         // -S
         // \tDon't perform subtree raising.
         // -L
         // \tDo not clean up after the tree has been built.
         // -A
         // \tLaplace smoothing for predicted probabilities.
         // -J
         // \tDo not use MDL correction for info gain on numeric attributes.
         // -Q <seed>
         // \tSeed for random data shuffling (default 1).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      String string0 = Evaluation.makeOptionString(attributeSelectedClassifier0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      Evaluation.handleCostOption((String) null, (-1));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", (-1));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
