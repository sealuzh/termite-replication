/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 07:42:54 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.InputStream;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 141L, 40, 40, 'z');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton[] jButtonArray0 = new JButton[7];
      JButton jButton0 = new JButton((Action) null);
      jButtonArray0[0] = jButton0;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getPressedIcon();
      JButton jButton1 = new JButton((Icon) null);
      jButtonArray0[1] = jButton1;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      JButton jButton2 = new JButton(icon0);
      jButtonArray0[2] = jButton2;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jButtonArray0[3] = (JButton) jDayChooser_DecoratorButton1;
      jDayChooser0.getSelectedDay();
      jButtonArray0[4] = null;
      JButton jButton3 = new JButton(icon0);
      jButtonArray0[5] = jButton3;
      JButton jButton4 = new JButton();
      jButtonArray0[6] = jButton4;
      jDayChooser0.days = jButtonArray0;
      Color color0 = Color.pink;
      // Undeclared exception!
      try { 
        jDayChooser0.setForeground(color0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(62135596800000L);
      Locale locale0 = Locale.FRANCE;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setLocale(locale0);
      assertEquals("FRA", locale0.getISO3Country());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.983152263823089
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(724);
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 724, 9999, 8818, 33, 'O');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.114399273529393
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-2120L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      System.setCurrentTimeMillis((-1368L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton[] jButtonArray0 = new JButton[2];
      JButton jButton0 = new JButton();
      jButtonArray0[0] = jButton0;
      jButtonArray0[1] = jButton0;
      jDayChooser0.days = jButtonArray0;
      jButton0.setRequestFocusEnabled(false);
      jDayChooser0.setFocusCycleRoot(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters((-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser0.locale = locale0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 22, 172, 34, '');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.114399273529393
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-2120L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      System.setCurrentTimeMillis((-1368L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton[] jButtonArray0 = new JButton[2];
      JButton jButton0 = new JButton();
      jButtonArray0[0] = jButton0;
      JButton jButton1 = jDayChooser0.selectedDay;
      jButtonArray0[1] = null;
      jDayChooser0.days = jButtonArray0;
      jDayChooser0.setFocusCycleRoot(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters((-5));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2108824963133027
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.getBorder();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.desktop;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setForeground(systemColor0);
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.114399273529393
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2687894300107905
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.getMaxDayCharacters();
      Color color0 = Color.magenta;
      jDayChooser0.getBaselineResizeBehavior();
      Color.getColor("day", 46);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setFocus();
      try { 
        XmlDocument.createXmlDocument((InputStream) null, false);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.crimson.parser.Parser2", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 38, 38, 38, '@');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8009457487317504
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 0L, 39, 39, '5');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getSundayForeground();
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6956064543588734
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(2);
      SystemColor systemColor0 = SystemColor.controlText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setMaxDayCharacters(2);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6090497473625858
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-805));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2368490567160553
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(852);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 228, 228, 228, 228, 'S');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext.getDefaultStyleContext();
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(755);
      jDayChooser0.setDay(755);
      jDayChooser0.setMonth(755);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.dayBordersVisible = false;
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(13);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      Time time0 = new Time(1575L);
      jDayChooser0.setSelectableDateRange(date0, time0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 4278, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0632311444031184
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocusBackward();
      MockInstant.ofEpochSecond((-2522L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Timestamp timestamp0 = new Timestamp(2687L);
      Date date0 = jDayChooser0.setMaxSelectableDate(timestamp0);
      jDayChooser0.defaultMaxSelectableDate = date0;
      assertEquals("1970-01-01 00:00:02.687", jDayChooser0.defaultMaxSelectableDate.toString());
      
      jDayChooser0.setAutoscrolls(false);
      jDayChooser0.getY();
      jDayChooser0.getRegisteredKeyStrokes();
      jDayChooser0.initDecorations();
      jDayChooser0.getWeekdayForeground();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2817, false, jDayChooser0);
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = Color.black;
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2431947292375414
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.activeCaption;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8961651689921424
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jDayChooser0.weekPanel = (JPanel) jSpinner_NumberEditor0;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      jDayChooser0.getTreeLock();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke((-3661), 1203);
      focusEvent0.setSource(keyStroke0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMonth((-3661));
      Color color0 = Color.orange;
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(31, int0);
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1338013620262806
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ENGLISH;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695563447768113
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getY();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8969845259859843
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 4, (-1856), (-1856), '?');
      jDayChooser0.keyReleased(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      jDayChooser0.init();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1363), (-1363), (-1363), (-1363), '.');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInsets();
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.keyTyped((KeyEvent) null);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 159;
      MockDate mockDate0 = new MockDate((-3661), (-3661), (-3661), (-3661), (-3661), 159);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.activeCaption;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getY();
      jDayChooser0.addListeners(35);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8962003575441333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      Object object0 = jDayChooser0.getTreeLock();
      focusEvent0.setSource(object0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setMonth(275);
      Color color0 = Color.orange;
      jDayChooser0.setWeekdayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2448);
      Object object0 = jDayChooser0.getTreeLock();
      focusEvent0.setSource(object0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1424884148739936
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0918293977637266
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6963427431210523
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jMonthChooser0.setUI(basicPanelUI0);
      jMonthChooser0.getToolkit();
      jMonthChooser0.getAutoscrolls();
      jMonthChooser0.setFocusTraversalKeysEnabled(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(10148);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(9999);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(164);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(12);
      assertEquals(12, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(158);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setRequestFocusEnabled(true);
      jDayChooser0.getLocale();
      jDayChooser0.repaint();
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      jDayChooser0.setDay((-381));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5776871557149237
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      jDayChooser0.calendar = calendar0;
      jDayChooser0.setMaxDayCharacters(46);
      jDayChooser0.setWeekOfYearVisible(false);
      Time time0 = new Time(46);
      jDayChooser0.setSelectableDateRange(time0, time0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }
}
