/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 07:49:16 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2041131932281943
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(811L);
      Range range1 = Range.of(261L, 261L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 261L, 811L);
      boolean boolean0 = range1.equals(range2);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.542196856328073
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(65552L, 9223372036854775807L);
      range0.iterator();
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 65552 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 65552 .. 9223372036854775807 ]/0B");
      range1.equals(range2);
      Range range3 = Range.of(65552L, 65552L);
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.268163943478719
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967295 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 149L, 4294967295L);
      range1.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem1);
      assertFalse(range1.isEmpty());
      assertEquals(150L, long0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.9416699572341076
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2760L, 2760L);
      Range range0 = Range.of(2760L);
      Range range1 = Range.of(1900L);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.push(range0);
      Range range2 = Range.ofLength(315L);
      range2.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.of(830L, (-1800L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.331103639414866
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      range1.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(65535L);
      Object object0 = new Object();
      long long1 = new Long(65535L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1544L, (-3003L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.330930239033385
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(9223372036854775547L, 9223372036854775807L);
      range0.iterator();
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 9223372036854775547 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 9223372036854775547 .. 9223372036854775807 ]/0B");
      range1.equals(range2);
      Range.parseRange("[ 9223372036854775547 .. 9223372036854775807 ]/0B");
      Object object0 = new Object();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 4294967295L);
      Long long0 = new Long(4294967295L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(150L, long1);
      
      long long2 = range1.getLength();
      assertEquals(4294967295L, long2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6747425720698006
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(3758L, 3758L);
      Range range1 = Range.ofLength(3758L);
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      Range range3 = range2.intersection(range0);
      range2.equals(range3);
      assertFalse(range3.equals((Object)range0));
      assertTrue(range3.isEmpty());
      assertFalse(range1.isEmpty());
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8611785700321457
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 128 .. 128 ]/RB", string0);
      
      range0.spliterator();
      Range range1 = Range.of(127L, 4294967295L);
      Range range2 = Range.ofLength(617L);
      List<Range> list0 = range1.complement(range2);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
      
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.20607391651723
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.push(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.of(830L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.438944473671935
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(9223372036854769709L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967342L, 4294967342L);
      range1.equals(range_CoordinateSystem0);
      assertTrue(range1.isEmpty());
      
      range0.asRange();
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.135746071337113
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775806 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B", range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B");
      boolean boolean0 = range1.equals(range2);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.484020913514291
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(2760L, 2760L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2760L, 2760L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.9203750487465157
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 775L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ -128 .. 775 ]/0B", range_CoordinateSystem1);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(775L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 4294967024L);
      range0.intersects(range1);
      Long long0 = new Long(693L);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967024L, 22L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = (-8L);
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("[ 0 .. 9223372036854775806 ]/0B", (Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.492283997691922
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 6098L, 6098L);
      boolean boolean1 = range1.isEmpty();
      assertTrue(boolean1);
      
      Long long0 = new Long(0L);
      Object object0 = new Object();
      boolean boolean2 = range1.equals((Object) null);
      assertFalse(boolean2 == boolean0);
      
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range2.getBegin(range_CoordinateSystem1);
      assertTrue(range2.isEmpty());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3870604996180194
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      range0.complementFrom(linkedList0);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertSame(range0, range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of((-128L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4933848557136153
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      range0.iterator();
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 65535 .. 65535 ]/0B", range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 65535 .. 65535 ]/0B");
      boolean boolean0 = range1.equals(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range3 = Range.parseRange("[ 65535 .. 65535 ]/0B");
      //  // Unstable assertion: assertNotSame(range3, range1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.700445909305863
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.of(1L, 1L);
      Object object0 = new Object();
      Range range0 = Range.of(1L);
      Long long0 = new Long(9223372036854775805L);
      range0.equals(long0);
      range0.isEmpty();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-799L), 32767L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775805L, 4294967337L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5825336563019947
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(4294967337L, 4294967337L);
      Range range1 = Range.of(9223372036854769709L);
      range1.equals(range0);
      range0.equals(range1);
      Range range2 = Range.of(790L, 790L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Iterator<Long> iterator0 = range2.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(4294967337L, 4294967337L);
      Range range1 = Range.of(9223372036854769709L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(4294967337L, 4294967337L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Range range1 = Range.of(4294967337L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.675480259322387
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.toString();
      range0.equals("[ 9223372036854775807 .. 9223372036854775807 ]/0B");
      range0.toString();
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-312L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift((-426L));
      range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long1 = 9223372036854775807L;
      Range.of(255L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -312 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(1356L);
      long long0 = range0.getEnd();
      assertEquals(1356L, long0);
      
      boolean boolean0 = range0.equals("CUUO2muRsYe(]4B");
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967337L, 9223372036854710272L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3305678414107134
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(3758L);
      Range range1 = Range.ofLength(3758L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(139L, 139L);
      boolean boolean0 = range3.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
      
      range1.iterator();
      assertSame(range1, range2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.63290354235402
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854775807L);
      range0.iterator();
      Range range1 = Range.of(65535L, 9223372036854772050L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1546L), (-1546L));
      Object object0 = new Object();
      range2.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(9223372036854772050L);
      Long long0 = new Long(1706L);
      range0.equals(range1);
      Range.Builder range_Builder1 = new Range.Builder();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.756354377742738
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854775807L);
      range0.iterator();
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 65535 .. 9223372036854775807 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 65535 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of(65535L);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7942595789380835
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.spliterator();
      Range range1 = Range.of((-1L), 0L);
      Range range2 = Range.ofLength(1502L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(0, list0.size());
      
      boolean boolean0 = range0.equals(range1);
      Object object0 = new Object();
      Range range3 = Range.of(0L, (-1L));
      Object object1 = new Object();
      range3.equals(object1);
      boolean boolean1 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object0 = new Object();
      long long0 = 32767L;
      Range range0 = Range.ofLength(32767L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.827362523433254
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Iterator<Long> iterator0 = range0.iterator();
      range0.toString();
      range0.equals(iterator0);
      range0.toString();
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 9223372036854775806L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(1L);
      range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.toString();
      range_CoordinateSystem0.toString();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of((-128L), 1L);
      Range.ofLength(2154L);
      range_CoordinateSystem1.getAbbreviatedName();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(2760L, 2760L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3675L, 3675L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.794249564417028
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.spliterator();
      Range range1 = Range.of((-1L), 0L);
      Range.ofLength(1502L);
      range0.complement(range1);
      range0.equals(range1);
      Object object0 = new Object();
      Range range2 = Range.of(0L, (-1L));
      // Undeclared exception!
      try { 
        range2.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4925876194659407
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967295 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      range1.equals(range0);
      Long long0 = new Long((-1212L));
      boolean boolean0 = range2.equals(long0);
      assertFalse(boolean0);
      
      range1.iterator();
      assertSame(range1, range0);
      assertFalse(range1.equals((Object)range2));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.equals("#48hR}Cd.:{'Q]a9RV4");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 1983L;
      Range range0 = Range.of(1983L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long long0 = 2080L;
      Range range0 = Range.ofLength(2080L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9804021452834966
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(4294967315L, 4294967315L);
      String string0 = range0.toString();
      assertEquals("[ 4294967315 .. 4294967315 ]/0B", string0);
      
      range0.equals("[ 4294967315 .. 4294967315 ]/0B");
      Range range1 = Range.of(4294967315L, 4294967315L);
      boolean boolean0 = range1.equals("[ 4294967315 .. 4294967315 ]/0B");
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.268771928346651
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      long long0 = range0.getBegin();
      assertEquals(4294967295L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long.getLong("(d+)s*,s*(d+)");
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Range range3 = range2.asRange();
      assertSame(range3, range0);
      
      Long long1 = new Long(4294967295L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3876093269569383
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854775807L);
      range0.toString();
      range0.complement(range0);
      Long long0 = new Long(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(range0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2995793963713953
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of((-6113L), 2147483647L);
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Space Based", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.4916672329035845
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.equals(range0);
      range0.equals(range1);
      Range range2 = Range.of((-213L));
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      range0.equals(range0);
      Range range1 = Range.of((-213L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5884783507942117
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1021L), 65535L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      Long long0 = new Long(65535L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3035770196432024
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, (-5262L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3856988606999034
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854775807L);
      range0.equals("number of entries must be >=0");
      range0.toString();
      Range.of(65535L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.388088652873334
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854775807L);
      range0.iterator();
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 65535 .. 9223372036854775807 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 65535 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 65535 .. 9223372036854775807 ]/0B");
      boolean boolean0 = range1.equals(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range3 = Range.parseRange("[ 65535 .. 9223372036854775807 ]/0B");
      //  // Unstable assertion: assertSame(range3, range0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.385517388964126
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(2760L, 9223372036854769710L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854769710L, 9223372036854769710L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = 6098L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 6098L, 6098L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.58836865656687
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.of(0L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5428613081553153
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967331L, 4294967331L);
      Range range1 = Range.of((-820L), 4294967331L);
      range0.complement(range1);
      Range.of(4294967331L, 4294967331L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = (-1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2033L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2034 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = 2901L;
      Range range0 = Range.ofLength(2901L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.7216599328425786
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(1501L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = range0.split(149L);
      assertEquals(11, list0.size());
      
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long0 = range1.getLength();
      assertEquals(1501L, long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Object object0 = new Object();
      Long long0 = new Long(1563L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 6098L, 6098L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.7167113227036963
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1021L), 65535L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range range1 = Range.of((-1021L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.ofLength(9223372036854775004L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(140L);
      Range range1 = Range.of(140L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("& LHJvqw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse & LHJvqw into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 140L, 140L);
      Range range1 = Range.of(140L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.494446926510289
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 4586L);
      Range range1 = Range.of((-2147483648L), 1506L);
      range0.complement(range1);
      range0.asRange();
      Long long0 = new Long(4586L);
      assertEquals(4586L, (long)long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5162782447723964
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      Object object0 = new Object();
      range0.complementFrom(list0);
      List<Range> list1 = range1.complement(range0);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertFalse(list1.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5753795769727805
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 140L, 140L);
      Long long0 = new Long(140L);
      Range range1 = Range.ofLength(140L);
      Range.ofLength(140L);
      boolean boolean0 = range0.startsBefore(range1);
      boolean boolean1 = range0.equals("org.jcvi.jillion.core.Range$CoordinateSystem");
      assertTrue(boolean1 == boolean0);
      assertTrue(range0.isEmpty());
      
      Range range2 = range1.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.5425304058509117
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 140L, 140L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 140L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.7576877072774115
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1645L), 153L);
      List<Range> list0 = range0.split(407L);
      Range.of((-1645L), 407L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(5, list0.size());
      assertEquals(0, list1.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.of(811L);
      Range range0 = Range.of(261L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(2584L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.2464725774353704
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range0);
      Long long0 = new Long((-2114L));
      boolean boolean1 = range0.equals(long0);
      assertTrue(boolean1 == boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long1 = range0.getLength();
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.4916000421490323
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.ofLength(9223372036854775807L);
      Range range1 = Range.of((-1050L), 1450L);
      range1.intersects(range0);
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.48805269497229
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(4294967337L, 4294967337L);
      Range range1 = Range.of(9223372036854769724L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2793259947806455
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 4294967337L);
      Range range0 = Range.of(1043L, 4294967337L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = (-9223372036854772188L);
      Range.of((-9223372036854772188L));
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854772188L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 6098L, 6098L);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(6094L, 6094L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.410548929789647
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-618L), (-618L));
      Range range0 = Range.of((-618L), (-618L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-618L), long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.269042622949001
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1945L), (-1945L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1945L), (-1945L));
      Long long0 = new Long((-1945L));
      range1.iterator();
      boolean boolean0 = range1.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      range0.equals(range1);
      Long long1 = new Long((-1945L));
      Range range2 = Range.of((-1L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.5828431307829582
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 140L, 140L);
      Range range1 = Range.of(range_CoordinateSystem0, 140L, 140L);
      Range.of(9223372036854775807L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.4324021194697076
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(830L);
      Range range1 = Range.of(261L, 4294967295L);
      boolean boolean0 = range1.intersects(range0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.329616221754058
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(4294967343L, 4294967343L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-712L));
      range1.intersects(range0);
      Range range2 = Range.of(4294967343L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.1342029606832194
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of((-5261L), (-5261L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-5261L), (-5261L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-820L), 140L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.203625422341148
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.toString();
      range0.equals("[ 4294967295 .. 4294967295 ]/0B");
      Range.parseRange("[ 4294967295 .. 4294967295 ]/0B");
      Object object0 = new Object();
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.238586093918178
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-32770L));
      range0.getBegin();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1502L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.614224239858697
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-267L), 255L);
      Long long0 = new Long(9223372036854774978L);
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.5418486409319776
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 6099L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      range0.spliterator();
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotSame(range1, range0);
      
      Range range2 = Range.of(873L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.6318970936269914
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.spliterator();
      Range range1 = Range.ofLength(1502L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.6746981256499596
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(255L);
      Range range2 = range1.intersection(range0);
      Object object0 = new Object();
      Range range3 = range1.intersection(range2);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      range3.iterator();
      assertFalse(range1.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(1734L, 1734L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.307291923125391
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 140L, 140L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      range1.equals(range0);
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ -9223372036854775808 .. -9223372036854775808 ]/RB", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-2147425576L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147425576L), (-2147425576L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1172L), (-1172L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.5376582370906133
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(830L);
      Range range1 = Range.of(261L, 4294967295L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.2047389428240645
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854775806 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B", range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B");
      boolean boolean0 = range1.equals(range2);
      //  // Unstable assertion: assertSame(range2, range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.6766009926245524
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1021L), 65535L);
      List<Range> list0 = range0.split(65535L);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
      
      Long long0 = new Long(65535L);
      Object object0 = new Object();
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1021L), long1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-820L), 145L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(146L, long0);
      
      long long1 = range0.getLength();
      assertEquals(966L, long1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2039851604518037
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(2901L, 2901L);
      range0.toString();
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(2901L);
      Range.Builder range_Builder0 = new Range.Builder(2901L);
      Range range2 = range0.asRange();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        Range.parseRange("& LHJvqw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse & LHJvqw into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.357284162522736
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-820L), 140L);
      range0.getEnd();
      Object object0 = new Object();
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.9127337412056686
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.ofLength(9223372036854775807L);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder();
      range0.getEnd();
      range_Builder0.shift((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-1L), 862L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("?E8!Hf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.?E8!Hf
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(4294967327L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.59335290694644
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 140L, 140L);
      long long0 = range0.getBegin();
      assertEquals(139L, long0);
      
      Range.of((-32768L));
      Range range1 = Range.of(140L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.2674340830645234
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-32768L), (-32768L));
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.of(2147483678L, 2147483678L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1389L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.3267198375627096
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      range_Builder0.expandBegin(1L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      
      Range range2 = range0.asRange();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-21L);
      range_Builder0.contractEnd((-21L));
      // Undeclared exception!
      try { 
        Range.ofLength((-21L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-9223372036854775807L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.198616238838059
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.198959292011301
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long((-128L));
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = Range.of(1L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(2475L);
      range_Builder0.build();
      Range.of(825L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Dl)c^Qej.fmk/aY9<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Dl)c^Qej.fmk/aY9<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(2147483604L, 2147483604L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.split(2147483604L);
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.3037208868785237
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("}9im#5aZjHv9i", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse }9im#5aZjHv9i into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.442236335994634
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1021L), (-1021L));
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1021L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.0538382463504266
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.spliterator();
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.493786748262162
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.of((-2689L), (-2689L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      assertEquals(0, linkedList1.size());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.442861692100194
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(3758L, 3758L);
      Range range1 = range0.intersection(range0);
      List<Range> list0 = range1.complement(range0);
      assertSame(range1, range0);
      assertTrue(list0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = Range.of(3758L, 3758L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.386825658605385
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(3758L, 3758L);
      range0.intersection(range0);
      Range range1 = Range.of(9223372036854775669L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = 4294967337L;
      Range.of(4294967337L, 4294967337L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.1126512729537206
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-24L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775300L);
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.9802337525917397
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.isSubRangeOf(range0);
      Long long0 = new Long(693L);
      boolean boolean1 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-743L), (-743L));
      Range range0 = Range.of(830L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 3433L, (-1130L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(139L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-1103L));
      range0.toString();
      // Undeclared exception!
      try { 
        range0.split((-1103L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.9799561547384963
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      List<Range> list0 = range0.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.5876410928140965
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(3758L, 3758L);
      Range range1 = Range.ofLength(3758L);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(3757L, long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.204174232109962
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range range1 = Range.of(620L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 449L, (-397L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.320829020848802
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range1.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.2563121549435428
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 6098L, 6098L);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.toString();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.30673035034876
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.9950339055202577
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.359150530570515
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-820L), 140L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -819 .. 141 ]/RB", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(266L, 4294967280L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.801196212838344
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(2760L, 2760L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2760L, 2760L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      
      boolean boolean0 = range1.endsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.5252238672476177
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      range0.spliterator();
      Range range1 = Range.of(1502L);
      range1.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(4294967337L);
      Range range1 = Range.of(4294967337L);
      range1.endsBefore(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.716818211699474
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.ofLength(140L);
      Range range1 = Range.of((-820L), 140L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.endsBefore(range0);
      Long long0 = new Long(693L);
      boolean boolean1 = range0.equals(long0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(2620L, 2620L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(1983L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1984L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1040L, 1040L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-383L), (-383L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.of((-784L));
      assertFalse(range0.isEmpty());
  }
}
