/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 15:48:43 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4938872551038065
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("|r&=}z1,2{z=30<", range_CoordinateSystem0);
      range0.intersects(range1);
      range0.getEnd();
      range0.complement(range0);
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split((-1186L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1311208216787505
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(1669L, 9223372036854775805L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4781701239560876
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), 969L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.269731579382638
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), 65535L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2147483648L));
      Range range2 = Range.of(255L, 1477L);
      assertFalse(range2.isEmpty());
      
      long long0 = range1.getEnd();
      assertEquals((-2147483648L), long0);
      
      Range range3 = Range.of((-2147483648L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      range3.equals(object0);
      assertSame(range3, range1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 11667L;
      Range.Builder range_Builder0 = new Range.Builder(11667L, 9223372036854774008L);
      range_Builder0.shift(9223372036854774008L);
      Range range0 = Range.of(9223372036854774008L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.541665294866279
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1800L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1800L, 10004L);
      Long.getLong("!(^(");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(1800L);
      Range range3 = range2.intersection(range1);
      assertFalse(range3.isEmpty());
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.676435551652834
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getEnd();
      Range range1 = Range.of((-4479L), (-2279L));
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2279 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.664307267095413
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854771286L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(9223372036854771285L, long0);
      
      Object object0 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854771285L, 9223372036854771286L);
      Range range2 = Range.of(9223372036854771285L);
      List<Range> list0 = range2.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      //  // Unstable assertion: assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.of(9223372036854771286L);
      boolean boolean0 = range3.equals(range1);
      Object object1 = new Object();
      boolean boolean1 = range3.equals(object0);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range2));
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.130860608303783
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854775805L, 9223372036854775805L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.058455850968031
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771286L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(32767L);
      assertFalse(range1.isEmpty());
      
      range0.equals(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771286L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(255L, 9223372036854771286L);
      range0.equals(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.9185998595676512
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-110L), (-110L));
      range0.getEnd();
      Range range1 = Range.of((-110L), 127L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complementFrom(linkedList0);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range1.isSubRangeOf(range0);
      Range.of(127L);
      long long0 = 4524L;
      // Undeclared exception!
      try { 
        range1.split((-2252L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6758727317542377
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854771286L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854771285L, long0);
      
      Object object0 = new Object();
      Range range1 = range_Builder0.build();
      Range range2 = Range.ofLength(9223372036854771285L);
      range1.complement(range2);
      assertSame(range1, range0);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range1));
      
      Range range3 = Range.ofLength(403L);
      Object object1 = new Object();
      boolean boolean0 = range3.equals(object1);
      assertFalse(boolean0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.830373008343702
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(2147483626L);
      Range range0 = Range.of((-4381L), (-526L));
      Object object0 = new Object();
      Range.of(2246L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-526L), (-526L));
      Range.of(4069L);
      range0.equals(range0);
      Range range1 = Range.ofLength(2147483626L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771286L);
      Range range0 = Range.of(9223372036854771286L);
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.7178363238286973
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854771286L, 9223372036854771286L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 514L, 9223372036854771286L);
      range1.spliterator();
      range1.complement(range0);
      Range range2 = Range.ofLength(9223372036854771286L);
      range2.spliterator();
      boolean boolean0 = range1.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.892740633623113
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-32778L));
      Range range1 = Range.of((-32778L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals((-32777L), long0);
      
      range1.spliterator();
      Object object0 = new Object();
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.9323260749170403
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(0L, 210L);
      Range range3 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B");
      String string1 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string1);
      
      range1.complement(range3);
      assertSame(range3, range0);
      
      Range range4 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem0);
      Range range5 = Range.ofLength(210L);
      List<Range> list0 = range1.complement(range5);
      assertTrue(list0.contains(range1));
      assertNotSame(range5, range2);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      long long0 = range4.getLength();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      range4.equals((Object) null);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4414449671903924
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1800L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1799L, long0);
      
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(4172L, 37301L);
      Range range1 = range_Builder2.build();
      Range range2 = Range.of(1800L);
      Range range3 = Range.of(range_CoordinateSystem0, 1800L, 4172L);
      Long long1 = new Long((-33201L));
      range1.equals(long1);
      Object object1 = new Object();
      boolean boolean0 = range3.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.isEmpty());
      
      Range range4 = range3.asRange();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1342029606832194
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(4526L);
      Range range1 = Range.of(4526L, 4550L);
      long long0 = new Long(4526L);
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range1);
      Long long1 = new Long(4526L);
      assertEquals(4526L, (long)long1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854771286L);
      range_Builder0.expandEnd(9223372036854771286L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9045 would make range [9223372036854771286 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854771307L);
      range_Builder1.expandEnd((-330L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, 1670L, 4294967296L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("%yGb,p6isN((O9^I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %yGb,p6isN((O9^I into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-118L), (-118L));
      Object object0 = new Object();
      Range range1 = Range.of((-118L));
      range1.intersects(range0);
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.894789682736259
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854771286L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(9223372036854771285L, long0);
      
      Object object0 = new Object();
      Range range1 = range_Builder0.build();
      Range range2 = Range.of(9223372036854771285L);
      Range range3 = Range.of(9223372036854771286L);
      boolean boolean0 = range3.equals(range1);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Object object1 = new Object();
      range3.equals(object0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range2));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4442656005080687
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 144L);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(272L, long0);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.04947924781391
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(0L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(0L, 210L);
      range1.toString(range_CoordinateSystem0);
      range1.complement(range1);
      Range range3 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range3.getLength();
      //  // Unstable assertion: assertTrue(range3.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range3, range0);
      
      Object object0 = new Object();
      Range range4 = Range.parseRange("[ 0 .. 0 ]/SB");
      boolean boolean0 = range2.equals(range4);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1932L);
      Range range0 = range_Builder1.build();
      List<Range> list0 = range0.split(4524L);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.intersects(range0);
      boolean boolean1 = range0.equals(range_Builder0);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      range0.equals(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      
      Range range1 = Range.of(0L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(9223372036854771346L);
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854771346L);
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372034707292150L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.515441055964289
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.equals((Object) null);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      Range range2 = Range.of(9223372036854775807L);
      //  // Unstable assertion: assertSame(range2, range0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4432224341542748
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854771286L);
      Range range0 = range_Builder1.build();
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range1 = Range.ofLength(9223372036854771286L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.202367750185023
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 127L, 127L);
      // Undeclared exception!
      try { 
        Range.parseRange("]R=Hew41 .@7Eb2l=:", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ]R=Hew41 .@7Eb2l=: into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.228113758661758
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771286L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(3779L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      Range range2 = Range.of(37301L);
      assertNotSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.833063692152187
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-330L));
      range0.getBegin();
      Range range1 = Range.of((-739L));
      range0.endsBefore(range1);
      long long0 = range1.getEnd();
      assertEquals((-739L), long0);
      
      range0.iterator();
      long long1 = range1.getLength();
      assertEquals(1L, long1);
      
      Range range2 = Range.of(11655L);
      Object object0 = new Object();
      range1.equals(range0);
      range2.iterator();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 9223372036854771286L;
      Range.Builder range_Builder1 = new Range.Builder(9223372036854771286L, 9223372036854771286L);
      Range range0 = range_Builder1.build();
      range_Builder1.build();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.130860608303783
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(1669L, 9223372036854775805L);
      range0.forEach(consumer0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.267638227190276
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854771286L, 9223372036854771286L);
      Range range0 = Range.of((-9223372036854775808L));
      Range.of((-3301L), (-1094L));
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-9223372036854775808L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.542576912431593
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.ofLength(0L);
      range0.getBegin();
      boolean boolean0 = range1.isSubRangeOf(range2);
      range1.iterator();
      long long0 = range1.getLength();
      assertEquals(0L, long0);
      
      Range range3 = Range.of(2147483647L);
      long long1 = range3.getBegin();
      assertEquals(2147483647L, long1);
      
      range0.isSubRangeOf(range2);
      List<Range> list0 = range1.split(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.spliterator();
      boolean boolean1 = range2.intersects(range1);
      assertFalse(boolean1 == boolean0);
      
      range4.equals(range3);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list1.size());
      assertSame(range1, range2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1345528251107537
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range1 = range_Builder0.build();
      Range range2 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals(range1);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range2));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7975345879435403
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(4513L);
      Range range1 = Range.of(4513L);
      long long0 = range1.getBegin();
      assertEquals(4513L, long0);
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.equals(range1);
      assertSame(range1, range0);
      
      Long long1 = new Long(4513L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3285404468599546
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(32767L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483857L), 1282L);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854772207L, (-2147483857L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483858 would make range [9223372036854772207 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2696985488293766
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2147483686L), 65535L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2147483686L));
      long long0 = range1.getEnd();
      assertEquals((-2147483686L), long0);
      
      Range range2 = Range.of(65535L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Range range3 = Range.of((-2147483686L), (-2147483686L));
      assertSame(range3, range1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-32775L));
      Range range1 = Range.of((-4912L));
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-110L), 1437695L);
      range0.spliterator();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-681L));
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854771286L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1942099815042764
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.of(65535L);
      Range range0 = Range.of(9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3280587048809585
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854771286L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967296L, 9223372036854771286L);
      range1.spliterator();
      Long long0 = new Long((-3327L));
      range0.equals(range_CoordinateSystem0);
      Long long1 = new Long(4294967296L);
      assertEquals(4294967296L, (long)long1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3331889858937958
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(5101L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals((Object) null);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 5101 ]/SB", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 5101 ]/SB");
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3702201388231954
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 508L, 4408L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(144L);
      Range range1 = Range.of(144L, 1291L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      boolean boolean0 = range0.equals("x?5W2!");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.569429363014465
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.of(1L, 65535L);
      assertFalse(range1.isEmpty());
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771286L);
      Range range0 = Range.of(9223372036854771286L);
      String string0 = range0.toString();
      assertEquals("[ 9223372036854771286 .. 9223372036854771286 ]/0B", string0);
      
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.of(2147483648L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774009L, (-2787L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2787 would make range [9223372036854774009 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.20786480992683
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(1669L, 2327L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.739628645102291
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(4513L);
      Range range1 = Range.of(4522L);
      long long0 = range1.getBegin();
      assertEquals(4522L, long0);
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(4513L);
      List<Range> list0 = range2.split(4524L);
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 4522L);
      range0.spliterator();
      Object object0 = new Object();
      boolean boolean1 = range1.equals(range2);
      assertSame(range2, range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5425461531384412
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.getEnd();
      Range range1 = Range.of(4294967295L, 9223372036854775807L);
      range0.complement(range1);
      Range range2 = Range.of(2762L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.893222375602109
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-9223372036854775781L), (-9223372036854775781L));
      String string0 = range0.toString();
      assertEquals("[ -9223372036854775781 .. -9223372036854775781 ]/0B", string0);
      
      Range range1 = Range.of((-9223372036854775781L), (-9223372036854775781L));
      assertSame(range1, range0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3874477812879777
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(501L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-643L), 501L);
      Range range0 = range_Builder1.build();
      Long long0 = new Long((-643L));
      Object object0 = new Object();
      Range.Builder range_Builder2 = new Range.Builder((-2147483648L), (-2147483648L));
      Range range1 = range_Builder2.build();
      Range range2 = Range.of((-643L));
      Range.of(37301L);
      boolean boolean0 = range1.equals(range0);
      boolean boolean1 = range0.equals(range2);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967295L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3220545438853644
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854771286L, 9223372036854771286L);
      Range range0 = range_Builder1.build();
      Range range1 = Range.ofLength(514L);
      range0.isSubRangeOf(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.896106906308876
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.of(2147483647L);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(0L, 210L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range range2 = Range.of(65535L);
      boolean boolean0 = range0.startsBefore(range2);
      assertFalse(range2.isEmpty());
      
      boolean boolean1 = range0.equals(range_CoordinateSystem1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      Object object0 = new Object();
      range1.equals(range_CoordinateSystem1);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(3994L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.of(4563L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6910517378300467
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-2022L));
      range0.getEnd();
      Range range1 = Range.of((-2022L));
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.1345528251107537
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-4912L));
      Range range1 = Range.ofLength(2248L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775681L, (-647L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -647 would make range [9223372036854775681 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.329396550163086
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(4538L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4538L, 9223372036854775807L);
      range0.spliterator();
      boolean boolean0 = range0.endsBefore(range1);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.532941053727701
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(4513L);
      Range range1 = Range.of(4522L);
      long long0 = range1.getBegin();
      assertEquals(4522L, long0);
      
      range0.isSubRangeOf(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Long long1 = new Long(4522L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      
      range0.iterator();
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = (-1425L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1425L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4470602449153285
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(range_CoordinateSystem0, 1682L, 4294967296L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-32775L));
      Range range1 = Range.of((-4912L));
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775681L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3813791034628915
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(4538L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4538L, 9223372036854775797L);
      range0.spliterator();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.1783274279925093
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-5873L));
      long long0 = range0.getEnd();
      assertEquals((-5873L), long0);
      
      Range range1 = Range.of((-2388L));
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.4928421001435863
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 255L, 255L);
      Range range1 = Range.of(range_CoordinateSystem1, 553L, 9223372036854775307L);
      range1.intersects(range0);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.ofLength(553L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-399L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.606102551468469
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-118L));
      Range range1 = Range.of((-118L), (-118L));
      range0.endsBefore(range1);
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4538L, 9223372036854775797L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(144L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.5884783507942117
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = range1.getLength();
      long long1 = range1.getEnd(range_CoordinateSystem0);
      assertTrue(long1 == long0);
      
      Range range3 = Range.of(2147483647L);
      range3.isSubRangeOf(range2);
      Range.Comparators.values();
      range0.intersection(range2);
      range0.iterator();
      assertFalse(range0.isEmpty());
      
      List<Range> list0 = range2.complement(range1);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.5869102219533557
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.ofLength(2670L);
      assertFalse(range2.isEmpty());
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.1207510320681884
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.equals("[ 0 .. 0 ]/SB");
      Object object0 = new Object();
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.2908899280239634
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-32775L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.756317178590878
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(0L, 2147483647L);
      range0.iterator();
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.825812504199368
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      Object object2 = new Object();
      Range range1 = Range.of((-856L), 32767L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.1483895233593593
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(9223372036854769231L);
      range0.getLength();
      range0.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.2433546687129593
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      long long0 = 784L;
      Range range0 = Range.ofLength(784L);
      Long long1 = new Long(784L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-118L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-118L), long0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.5569758343305495
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 547L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      range1.spliterator();
      Range range2 = Range.of((-279L));
      boolean boolean0 = range1.intersects(range2);
      boolean boolean1 = range2.isSubRangeOf(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range2.isEmpty());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.533814123910154
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.of((-32775L));
      Range.Builder range_Builder0 = new Range.Builder((-32775L), 2147483647L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.3586685692998843
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.of(9223372036854771286L, 2298L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.959081874811961
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 1L);
      range0.intersection(range1);
      range0.startsBefore(range1);
      range0.intersects(range1);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("|t%/PjbeZc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse |t%/PjbeZc into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.265802019454259
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771286L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(3779L);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2662596083157305
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(10L, 10L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range0.forEach(consumer0);
      range0.isEmpty();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.493557558585055
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 199L, 140L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range0.forEach(consumer0);
      range0.isEmpty();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      List<Range> list0 = range0.split(1084L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.691477450899438
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-32775L));
      Range range1 = Range.of((-32775L));
      long long0 = new Long((-32775L));
      range1.startsBefore(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.137991231534235
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.getEnd();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1932L);
      Range range0 = range_Builder1.build();
      List<Range> list0 = range0.split(1932L);
      assertEquals(1, list0.size());
      
      range0.intersects(range0);
      range0.equals(range_Builder0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(4513L, 4513L);
      Range range1 = Range.of(4522L);
      long long0 = range1.getBegin();
      assertEquals(4522L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Long long1 = new Long(4522L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.136556853098811
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(9223372036854775805L);
      long long0 = range0.getBegin();
      range0.isSubRangeOf(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Long long1 = new Long((-1323L));
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.2318027162996135
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of((-118L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-117L), long0);
      
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = Range.of((-118L));
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 0L, 547L);
      Long long0 = new Long((-2699L));
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.633727431476853
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1112L, 1112L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1112L);
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertTrue(list0.isEmpty());
      
      Range range2 = Range.ofLength(1112L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-249L));
      Range range0 = range_Builder1.build();
      List<Range> list0 = new LinkedList<Range>();
      boolean boolean0 = range0.isEmpty();
      boolean boolean1 = range0.equals(range_Builder0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771286L);
      Range range0 = Range.of(9223372036854771286L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854771286L, long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.67309024687376
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771286L);
      Range range0 = Range.ofLength(9223372036854771286L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.ofLength(9223372036854771286L);
      Range.parseRange("[ 0 .. 9223372036854771286 ]/SB", range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.4128506665546605
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      Range range1 = range_Builder0.build();
      List<Range> list0 = range0.complement(range1);
      range0.spliterator();
      boolean boolean0 = range0.equals(list0);
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
      assertTrue(list0.contains(range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.20423340720908
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-1721L));
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.289520432159408
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 144L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(143L, long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.3874815844857604
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range.parseRange("[ 2147483647 .. 2147483647 ]/0B");
      List<Range> list0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.intersects(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean1 = range0.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertSame(range0, range1);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(range_CoordinateSystem0, 1670L, 1670L);
      Object object0 = new Object();
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1670L, long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(1437695L);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.6338967718396926
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.build();
      Range range2 = Range.ofLength(2147483647L);
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertSame(range2, range1);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.5135218043080276
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-128L));
      long long0 = new Long((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 933L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.0649219586999616
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(4538L);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.spliterator();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1437695L, 1437695L);
      range0.spliterator();
      Long long0 = new Long(1437695L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.3320423838688624
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(9223372036854774126L, 9223372036854774126L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.of(9223372036854774126L);
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.180624539878941
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(1598L);
      long long0 = range0.getEnd();
      assertEquals(1598L, long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-173L), (-173L));
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.241711887398469
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Range range0 = Range.of(37301L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(37302L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractBegin((-1507L));
      long long0 = (-21L);
      // Undeclared exception!
      try { 
        Range.parseRange("K]Gc62pBmcrnH#{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse K]Gc62pBmcrnH#{ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.203625422341148
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.build();
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-118L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.1159572496416303
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(5560L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 5559 ]/0B", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.2659220555731143
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.2886134026809497
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 144L);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1094L), 4198L);
      // Undeclared exception!
      try { 
        Range.of(4198L, (-1094L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(37301L);
      Range.of(37301L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854771286L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854771286L, 9223372036854771286L);
      range_Builder1.contractEnd(9223372036854771286L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1341L, (-687L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.4301344615675866
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1468L, 1468L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1468L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-249L));
      Range range0 = range_Builder1.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.1350573296152584
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range range2 = Range.of(2147483647L);
      assertSame(range2, range1);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.3764058124683003
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771276L);
      Range range0 = Range.of(9223372036854771276L, 9223372036854771276L);
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.441254265790644
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2653L);
      Range.Builder range_Builder1 = range_Builder0.shift(1932L);
      Range range0 = range_Builder1.build();
      List<Range> list0 = range0.split(1932L);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
      
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      boolean boolean1 = range0.equals(range_Builder0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.6339169288629036
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(9223372036854771286L);
      Range range0 = range_Builder1.build();
      range0.complement(range0);
      Range range1 = Range.ofLength(9223372036854771286L);
      // Undeclared exception!
      try { 
        range1.split(9223372036854771286L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9045 would make range [9223372036854771286 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(4380L);
      List<Range> list0 = range0.split(4380L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1065L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.expandBegin((-110L));
      assertSame(range_Builder2, range_Builder0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(9223372036854774126L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-3413L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of(881L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.5735210434237055
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854771286L);
      Range range0 = Range.of((-110L));
      Range range1 = Range.of(255L, 9223372036854771286L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 9223372036854771265L;
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854771265L);
      Range range0 = range_Builder1.build();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.5389592259773353
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 144L);
      Range range1 = Range.of(144L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(9223372036854774008L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.130285399790697
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }
}
