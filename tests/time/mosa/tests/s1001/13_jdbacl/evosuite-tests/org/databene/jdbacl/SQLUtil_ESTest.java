/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 27 11:03:43 GMT 2020
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.h2.value.ValueLobDb;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " ADMIN", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " ADMIN");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals(" ADMINCONSTRAINT \" ADMIN\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(4243, byteArray0, 4243);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = (double) (-1);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(" AS (2,2)");
      assertEquals(3, objectArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("", "", "");
      String string0 = SQLUtil.renderValue(dBSequence0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1142750373), "&?~8q31");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sele");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer0, integer0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intoorg.h2.expression.comparison");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("update");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create unique indexu20ovcbj()z");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("rea", false, "rea", "internal");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("create materialized viewselect inoalter yablealtrmaterial9zedeview", true, "rea", "rea");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.15374194270109
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execuzealter yablealQ% ma9erial9zedeview", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("H57", "H57", (Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("R1^{?6pN1", (String) null, "R1^{?6pN1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "constraint", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("iniGrY", defaultDBTable0, (-4060), "iniGrY");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("INIGRY", stringBuilder0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , )", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "IBg8d.n|{@", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT IBg8d.n|{@ PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "", stringArray0);
      assertEquals("left join  as  on .null = .null and .null = .null and .null = .null and .null = .null", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("log.ctrl", (String[]) null, "log.ctrl", "log.ctrl", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("drop materialized viewselect into< w ? * = ? z } aa 'z-'", stringArray0, "create unique index", "h2.clientTraceDirectory", stringArray0);
      assertEquals("left join create unique index as h2.clientTraceDirectory on ", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("McTll", "McTll", stringArray0, "2erK3fw", "exec8az!pe%&*v'fue!v*", stringArray0);
      assertEquals("McTll join 2erK3fw as exec8az!pe%&*v'fue!v* on ", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      assertEquals(" as  on .null = .null", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("-- [");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("exec[^td3fu1ba&,@s]");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("@eVlO8['q_xwVG");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("X>F");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.innerJoin("WD.WD, WD.UPDATE_RULE SMALLINT", stringArray0, "", "", stringArray0);
      assertEquals(" as  on WD.WD, WD.UPDATE_RULE SMALLINT.null = .null and WD.WD, WD.UPDATE_RULE SMALLINT.null = .null", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin("mlete", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on mlete.null = null.null and mlete.null = null.null and mlete.null = null.null and mlete.null = null.null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Hp$?", (String[]) null, "Hp$?", "Hp$?", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("alter ale", stringArray0, "alter ale", "LI-GV.bng", stringArray0);
      assertEquals("alter ale as LI-GV.bng on ", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "Querying state when in Wait mode", (String) null, stringArray0);
      assertEquals("Querying state when in Wait mode as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "q$B", stringArray0);
      assertEquals(" as q$B on .null = q$B.null and .null = q$B.null and .null = q$B.null and .null = q$B.null", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("T", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT T FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "(,el1h", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec[^td3fu1ba&,@s]", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SLdECT */FROM ");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("- ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null as null = null AND null = null on null = null AND null = null.null = null = null AND null = null.null and null = null AND null = null.null = null = null AND null = null.null", dBSchema0);
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("internal", false, "internal", "internal");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) dBCheckConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.DBCheckConstraint cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("create unique index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("R[V=m");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, "alter table", "alter table", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[27];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("alter materialized view.`(c8~a join .`(c8~a as .`(c8~a on .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null", stringArray0, "alter materialized view.`(c8~a join .`(c8~a as .`(c8~a on .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null", "alter materialized view.`(c8~a join .`(c8~a as .`(c8~a on .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null and .`(c8~a.null = .`(c8~a.null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", (String) null, stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("null = null AND null = null", stringArray0, "null = null AND null = null", "null = null AND null = null", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("$a^i4#/('1", stringArray0, "exec", "routinePerms: grantee=", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F$|:6uk=zeM m");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F$|:6uk=zeM m", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("`#`3mNVX'4AOo", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition(" <W?*:=?z}Aa'YZ-", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(4219, byteArray0, 4219);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = (double) 16;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("16", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.databene.commons.collection.OrderedNameMap");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob(4234, byteArray0, 4234);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = (-1313.4845525909);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1313.4845525909", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = SQLUtil.normalize(" <W?*:=?z}Aa'YZ-", false);
      assertEquals("< W ? * : = ? z } Aa 'YZ-'", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = SQLUtil.normalize("SLdECT */FROM ", true);
      assertEquals("SLdECT */ FROM", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = SQLUtil.normalize("/(sMC^~El!$-t.Qdg", false);
      assertEquals("/ (sMC ^ ~ El ! $ - t.Qdg", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = SQLUtil.normalize("MyaR,", true);
      assertEquals("MyaR,", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = SQLUtil.normalize("y\"%^!\"Qw?d3)", true);
      assertEquals("y \"%^!\" Qw ? d3)", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = SQLUtil.normalize("-- [", false);
      assertEquals("-- [", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = SQLUtil.removeComments("}Hx#)hTbM");
      assertEquals("}Hx#)hTbM", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("8@xZ");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container 8@xZ", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertNotNull(string0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("J0*KM9Ei3A", true, "J0*KM9Ei3A", "J0*KM9Ei3A");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT J0*KM9Ei3A ", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.162225544921092
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("internal", false, "internal", "internal");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK internal", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "exCcuVealte", "exCcuVealte");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("nwbyETf:y@e8h");
      DBSchema dBSchema0 = new DBSchema(".", dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Specified type is unknown.");
      SQLUtil.addOptionalCondition("Specified type is unknown.", stringBuilder0);
      assertEquals("Specified type is unknown. or Specified type is unknown.", stringBuilder0.toString());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("D");
      SQLUtil.addRequiredCondition("D", stringBuilder0);
      assertEquals("D and D", stringBuilder0.toString());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" as ", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES  as ()", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deleJe");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "deleJe", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DBSchema dBSchema0 = new DBSchema("dro indexnul =nurT .nd null =+nZl");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dro indexnul =nurT .nd null =+nZl", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&^':%];W_9S", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT &^':%];W_9S PRIMARY KEY (, )", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("1E([UTI4PhbF/v9X/*");
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec[^td3fu1ba&,@s]");
      assertNull(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.8775242811493906
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into< w ? *  = ? z } aa 'z-'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tablealter material9zed view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Character character0 = Character.valueOf('n');
      String string0 = SQLUtil.substituteMarkers(" ADMIN", " ADMIN", character0);
      assertEquals("'n'", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Weme";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Weme");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM Weme WHERE Weme = 'Weme'", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-519), "McTll");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer((-519));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("McTll", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("MCTLL(-519)", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6a7vVUnPV+6z", defaultDBTable0, (-68407547), "6a7vVUnPV+6z");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "6a7vVUnPV+6z", true, "6a7vVUnPV+6z");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("6a7vVUnPV+6z 6A7VVUNPV+6Z NOT NULL", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#d+]2tD0K9YQ.*", defaultDBTable0, (-96), "McTll");
      defaultDBColumn0.setDefaultValue("McTll join 2erK3fw as exec8az!pe%&*v'fue!v* on ");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("#d+]2tD0K9YQ.* MCTLL DEFAULT McTll join 2erK3fw as exec8az!pe%&*v'fue!v* on  NULL", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(2981, "select into$a^i4#/('1");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0, integer0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("delete, null", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("McTll");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("McTll", defaultDBTable0, 10, "McTll");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("McTll, McTll", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.4680602034990462
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DBSchema dBSchema0 = new DBSchema("eCondition=[ as null on org.apache.derby.iapi.types.VariableSizeDataValue.null = null.null and org.apache.derby.iapi.types.VariableSizeDataValue.LkJm6Nxmp&gok!)Cm4 = null.LkJm6Nxmp&gok!)Cm4 and org.apache.derby.iapi.types.VariableSizeDataValue.null = null.null and org.apache.derby.iapi.types.VariableSizeDataValue. = null. and org.apache.derby.iapi.types.VariableSizeDataValue.null = null.null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6mV$rjUT", dBSchema0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_+f>^~?p!zs^9Urqu");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized view", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("&_x&K{YI1Z(o", defaultDBTable0, (-289393289), "M(Yt&j3\"XyAI?IfVV)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Yt&j3\"XyAI?IfVV\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(".KVG]SrEv(d5]#,[X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: .KVG]SrEv(d5]#,[X
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(TIMESTAMP , TIMESTAMP , TIMESTAMP )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"TIMESTAMP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.412744636863848
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("internal", true, " NULL", "internal");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT internal CHECK internal", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(113, " as ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(" AS (2,2)", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DBSchema dBSchema0 = new DBSchema("eCondition=[ as null on org.apache.derby.iapi.types.VariableSizeDataValue.null = null.null and org.apache.derby.iapi.types.VariableSizeDataValue.LkJm6Nxmp&gok!)Cm4 = null.LkJm6Nxmp&gok!)Cm4 and org.apache.derby.iapi.types.VariableSizeDataValue.null = null.null and org.apache.derby.iapi.types.VariableSizeDataValue. = null. and org.apache.derby.iapi.types.VariableSizeDataValue.null = null.null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6mV$rjUT", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NBFAiq9\"", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_+f>^~?p!zs^9Urqu");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("select into", "", object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SYSCS_EXPORT_TABLE", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("ALTER TABLE null ADD \n\tCONSTRAINT SYSCS_EXPORT_TABLE FOREIGN KEY () REFERENCES null()", stringWriter0.toString());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "1Hx#+hjbtM", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("1Hx#+hjbtM", "sltect *");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
