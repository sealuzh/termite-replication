/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 16:01:15 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("qP6_TSP/*</X47J", 0L);
      String[] stringArray0 = new String[16];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{#1a/,EAz:;po~Re1jV");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 19 of {#1a/,EAz:;po~Re1jV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9669966330119029
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("0", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7245973773791725
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float((double) (short) (-29618));
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[12];
      stringArray0[0] = "Let";
      stringArray0[1] = "Let";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("Let", (int) (short) (-29618));
      jSONObject1.put("Let", 764L);
      Short short0 = new Short((short) (-29618));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList1);
      jSONObject2.getLong("Let");
      int int0 = jSONObject1.optInt("Let");
      assertEquals(3, jSONObject0.length());
      assertEquals(764, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0346021673803376
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float((double) (short) (-29618));
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "get";
      stringArray0[1] = "get";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("-!_Ap/", 764L);
      Short short0 = new Short((short) (-29618));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList1);
      String string0 = JSONObject.quote("emz*FWL2B^O$F]oB*9");
      assertEquals("\"emz*FWL2B^O$F]oB*9\"", string0);
      
      jSONObject2.toString((int) (short) (-29618), (-30733247));
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.doubleToString((-30733247));
      assertEquals("-3.0733247E7", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0543614337534315
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Float float1 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float1, stringArray0);
      jSONObject0.names();
      boolean boolean0 = jSONObject0.optBoolean("Dt8Cr#|,aRirg*SJ");
      assertEquals(8, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1044874173845955
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.quote(" yh1#ZR");
      JSONObject jSONObject0 = new JSONObject((Object) " yh1#ZR");
      jSONObject0.toString((-1));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000024,\njava.lang.Byte@0000000025,\njava.lang.Byte@0000000026,\njava.lang.Byte@0000000027,\njava.lang.Byte@0000000028,\njava.lang.Byte@0000000029,\njava.lang.Byte@0000000030\n],\n\"java.lang.String@0000000021\": \"java.lang.Class@0000000022\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7234994339596863
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double double0 = new Double(0.5819029739549496);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string0 = ",)T&~p!<IX)?";
      try { 
        jSONObject0.getBoolean(",)T&~p!<IX)?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",)T&~p!<IX)?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{s?b6~/HZe*0f;?s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {s?b6~/HZe*0f;?s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5134049813662336
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("4l[,l</", true);
      boolean boolean0 = jSONObject1.getBoolean("4l[,l</");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("0E", (Collection) linkedList0);
      jSONObject0.getJSONArray("0E");
      jSONObject0.toString(46);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6210652109703916
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("get", 0L);
      Short short0 = new Short((short) (-29623));
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.optBoolean("get", false);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.getDouble("get");
      JSONObject jSONObject2 = jSONObject1.accumulate("] not found.", "get");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertEquals(1, stringArray0.length);
      
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("~P$$3\"#m", false);
      boolean boolean0 = jSONObject0.getBoolean("~P$$3\"#m");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.515861944689119
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      JSONObject.getNames(object1);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optString("", "");
      StringWriter stringWriter0 = new StringWriter(3158);
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3292401639518663
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.getNames((Object) linkedList0);
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("to");
      JSONObject jSONObject1 = jSONObject0.put("false", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.accumulate("false", hashMap0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3503218491711164
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-710.7012F));
      JSONObject jSONObject1 = jSONObject0.accumulate("getspliterator", float0);
      jSONObject1.optBoolean("getspliterator", false);
      long long0 = jSONObject0.getLong("getspliterator");
      assertEquals((-710L), long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0115537715672924
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("HwEh,]m,ADGT[?a2", jSONArray0);
      try { 
        jSONObject1.getBoolean("HwEh,]m,ADGT[?a2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HwEh,]m,ADGT[?a2\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.246137993660529
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Ww}", 2503);
      Boolean boolean0 = new Boolean("Ww}");
      JSONObject jSONObject2 = jSONObject1.accumulate("Ww}", jSONObject0);
      // Undeclared exception!
      jSONObject2.toString(43);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("=ZN{", "=ZN{");
      jSONObject1.accumulate("=ZN{", jSONObject0);
      try { 
        jSONObject1.getBoolean("=ZN{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=ZN{\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.20053828109995
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!", "!");
      JSONObject jSONObject2 = jSONObject1.put("!", 0L);
      jSONObject2.remove("!");
      try { 
        jSONObject1.getJSONObject("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4836502017020687
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.quote("Expected '");
      JSONObject.quote("put");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5771672505374363
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double(0.5819029739549496);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put(">K<='?|4,x4w^Wb}", 2149.8132653028);
      Short short0 = new Short((short) (-983));
      String string0 = JSONObject.valueToString(short0, (-743), 45);
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Object object0 = JSONObject.NULL;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("121.332I633476010", (Collection) linkedList0);
      jSONObject0.accumulate("121.332I633476010", object0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.valueToString(linkedList0, (-1350), 2140);
      HashMap<String, JSONArray> hashMap0 = null;
      try {
        hashMap0 = new HashMap<String, JSONArray>((-1350), 2140);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1350
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getvalueOf", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.225684301584138
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)78);
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) short0);
      Integer integer0 = new Integer(88);
      JSONObject jSONObject2 = jSONObject1.putOpt("K%VmS$iKrXB!@", integer0);
      int int0 = jSONObject2.getInt("K%VmS$iKrXB!@");
      assertEquals(88, int0);
      
      String string0 = JSONObject.doubleToString(88);
      assertEquals("88", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7419822783982568
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("D4pz.jA-/P-)LJ9", (-88.9686));
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (-824L));
      jSONObject1.getDouble("] is not a number.");
      jSONObject1.optDouble("getgetChars");
      try { 
        jSONObject0.getJSONObject("java.lang.Long@0000000004.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@0000000004.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("joi", 92);
      jSONObject1.getDouble("joi");
      jSONObject0.optBoolean("joi");
      try { 
        jSONObject1.append("joi", "joi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[joi] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("v2 cm>)", (Map) null);
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("^csgYmeJ8");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.293823063420216
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("=ZN{", "=ZN{");
      jSONObject1.optBoolean("=ZN{", true);
      try { 
        jSONObject1.getInt("=ZN{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=ZN{\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9277603909275793
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.append("isaddLast", "isaddLast");
      jSONObject1.optInt((String) null, 69);
      JSONObject jSONObject2 = jSONObject0.accumulate("", object0);
      Short short0 = new Short((short)3);
      JSONObject.valueToString(short0);
      jSONObject2.optDouble("ite");
      jSONObject2.optJSONArray("isaddLast");
      try { 
        jSONObject1.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("iscompare", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("iscompare");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0723000599670853
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.putOpt("K%VmS$iKrXB!@", integer0);
      jSONObject2.getInt("K%VmS$iKrXB!@");
      Integer.compare((-1253), (-1253));
      jSONObject2.toString(0, (-1253));
      JSONObject jSONObject3 = jSONObject1.append("null", jSONObject0);
      jSONObject2.keys();
      jSONObject1.optLong("dEPp-m)*Y-Ly!s&5b");
      jSONObject3.optString("0ds$E");
      jSONObject0.optDouble("K%VmS$iKrXB!@");
      JSONObject jSONObject4 = new JSONObject();
      try { 
        jSONObject4.getBoolean("civ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"civ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3169392047597572
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      UnaryOperator.identity();
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JSON does not ailow non-finite numbers.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.opt("JSON does not ailow non-finite numbers.");
      jSONObject1.put("get", 12);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float(Double.NaN);
      Double.isFinite((-84.0));
      Double double0 = new Double((-940.49));
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.951683484789539
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      Integer integer0 = new Integer(25);
      JSONObject jSONObject2 = jSONObject1.putOpt("K%VmS$iKrXB!@", integer0);
      jSONObject2.getInt("K%VmS$iKrXB!@");
      Integer.compare((-1253), (-1253));
      JSONObject.valueToString(integer0, 0, 25);
      JSONObject jSONObject3 = jSONObject1.append("null", jSONObject0);
      jSONObject2.keys();
      jSONObject1.optLong("dE)pit*Y-Ly!s&5'");
      jSONObject3.optString("-0ds$E");
      jSONObject0.optDouble("K%VmS$iKrXB!@");
      JSONObject jSONObject4 = new JSONObject();
      try { 
        jSONObject4.getBoolean("civ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"civ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9948516297969727
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2851079010154893
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Short short0 = new Short((short)23);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optInt((String) null, 0);
      jSONObject0.optDouble("KspI_ !8h7N6m![_B[", 2246.0);
      JSONObject.quote("");
      jSONObject0.put("\"\"", true);
      int int0 = jSONObject0.optInt("] is not a JSONObject.");
      assertEquals(2, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.170576668409362
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6367430586192193
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Integer integer0 = new Integer(71);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float((double) 44L);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("2%#.;qO", object0);
      jSONObject1.optBoolean("2%#.;qO", false);
      try { 
        jSONObject0.getLong("2%#.;qO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2%#.;qO\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, (-55), 3387);
      JSONObject jSONObject0 = new JSONObject();
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "VQ";
      JSONObject jSONObject1 = jSONObject0.accumulate("VQ", "VQ");
      try { 
        jSONObject1.getDouble("VQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VQ\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-124));
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3536926991390703
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject.valueToString(hashMap0, 102, 5);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator.identity();
      JSONObject.valueToString(hashMap0, 12, 12);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("getsubList");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getsubList
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.380967719570625
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("joi", 92);
      jSONObject0.optBoolean("joi");
      Integer integer0 = new Integer(9);
      Integer integer1 = new Integer(92);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float(0.0);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      jSONObject0.optLong("joi");
      try { 
        jSONObject0.getBoolean("ZN2>D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZN2>D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("lis", 0.0);
      jSONObject0.optLong("lis");
      int int0 = jSONObject0.getInt("lis");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optDouble("_55ZM_3", 0.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("_55ZM_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of _55ZM_3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.4252920579420665
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("jYi", 92);
      boolean boolean0 = new Boolean("jYi");
      jSONObject1.append("#1)?x>%wZX@)", "jYi");
      jSONObject0.keys();
      long long0 = jSONObject0.optLong("#1)?x>%wZX@)");
      assertEquals(0L, long0);
      
      String string0 = jSONObject1.optString("jYi");
      jSONObject1.opt("pu");
      String string1 = jSONObject1.optString("jYi", "jYi");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6892880693997117
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("joi", 92);
      boolean boolean0 = jSONObject0.optBoolean("joi");
      assertFalse(boolean0);
      
      jSONObject1.append("#1)?x>%wZX@)", "joi");
      jSONObject0.keys();
      long long0 = jSONObject0.optLong("#1)?x>%wZX@)");
      assertEquals(0L, long0);
      
      jSONObject1.optString("joi");
      double double0 = jSONObject1.optDouble("K");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = ")O8ZxyBB!;";
      JSONObject jSONObject1 = jSONObject0.put(")O8ZxyBB!;", (long) 55);
      try { 
        jSONObject1.append(")O8ZxyBB!;", ")O8ZxyBB!;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[)O8ZxyBB!;] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("Unclosed comment", true);
      jSONObject0.append("Unclosed comment", "Unclosed comment");
      JSONObject jSONObject1 = jSONObject0.append("Unclosed comment", "Unclosed comment");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3199044298479494
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("2%#.;qO", object0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      Object object1 = jSONObject1.opt("2%#.;qO");
      assertSame(object1, object0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.4100004751111084
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("3h$2'l=1A7Muj%#>", "3h$2'l=1A7Muj%#>");
      JSONObject.getNames((Object) jSONObject0);
      String string0 = jSONObject1.getString("3h$2'l=1A7Muj%#>");
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("joi", 92);
      jSONObject0.optBoolean("joi");
      jSONObject1.optDouble("joi", (double) 92);
      Integer integer0 = new Integer(92);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(integer0, 9, 9);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.953093269754322
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      jSONObject0.put("] is not a number.", (-824L));
      String[] stringArray0 = new String[3];
      stringArray0[1] = "] is not a number.";
      double double0 = jSONObject0.optDouble("] is not a number.");
      assertEquals((-824.0), double0, 0.01);
      
      String string0 = JSONObject.quote("5W,rV@");
      assertEquals("\"5W,rV@\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.93504084661911
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 0, (-660));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      HashMap<Short, Boolean> hashMap0 = new HashMap<Short, Boolean>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("#vrPs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#vrPs\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "b~toU";
      JSONObject jSONObject1 = jSONObject0.accumulate("b~toU", "b~toU");
      try { 
        jSONObject1.getJSONArray("b~toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b~toU\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7862943611198907
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.valueToString(linkedList0);
      String string0 = "Expected a ',' or '}'";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Expected a ',' or '}'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.2968340962839777
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("put");
      JSONObject jSONObject1 = jSONObject0.accumulate("\"put\"", "\"put\"");
      jSONObject1.put("vWLriK", (Object) jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(1, 1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 8192, 8192);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("false", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate(",", object0);
      try { 
        jSONObject1.getJSONObject(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(",", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject(",");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float((-320.09F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("getpush", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      try { 
        jSONObject0.getString("JF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JF\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-34));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.475304951577024
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject1.get("] is not a number.");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("vd$mKsm(fJB\"", true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("null", (Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 914, 261);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString((Object) null, (-55), (-55));
      JSONObject jSONObject1 = new JSONObject();
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = jSONObject0.put("isputOpt", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("1..", 1L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(24, 24);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote("(!w%X=/n?IJ$");
      assertEquals("\"(!w%X=/n?IJ$\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.quote("a`76V)r1,a$,/@%e)_");
      assertEquals("\"a`76V)r1,a$,/@%e)_\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.491430283335538
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("", 0.0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.getInt("");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("^mKVD;F2sm", "^mKVD;F2sm");
      jSONObject0.optInt("^mKVD;F2sm");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("^mKVD;F2sm", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!", "!");
      try { 
        jSONObject1.getBoolean("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.6617503644104987
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) "K%VmS$iKrXB!@");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.putOpt("K%VmS$iKrXB!@", integer0);
      jSONObject2.getInt("K%VmS$iKrXB!@");
      Integer.compare((-1253), (-1253));
      jSONObject2.toString(0, (-1253));
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject2.put("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}", (Object) boolean0);
      Byte.toUnsignedInt((byte)90);
      Float float0 = new Float((double) 0);
      JSONObject jSONObject3 = new JSONObject(float0);
      String string0 = jSONObject2.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject.doubleToString(121.332263347601);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("121.332263347601", 0.0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      String string0 = jSONObject0.optString("joi", "joi");
      assertEquals("joi", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.521586834652811
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "7dEdsLi";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("@wd2khmuWy_M lj\"@");
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("^(GPH", 3122.045782925496);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("R+A}F").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Byte byte0 = Byte.valueOf((byte)124);
      hashMap0.put(byte0, "JSON does not allow non-finite numbers.");
      UnaryOperator.identity();
      hashMap0.computeIfAbsent((Object) null, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("R+A}F", "is").when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      String string1 = jSONObject0.optString("R+A}F");
      assertEquals("", string1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      hashMap0.put((Float) null, double0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
      
      long long0 = jSONObject0.optLong(",\n");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("null", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.224242115584231
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject.doubleToString((-2216.23821));
      JSONObject jSONObject0 = new JSONObject((Object) "-2216.23821");
      jSONObject0.length();
      try { 
        jSONObject0.getJSONObject("-2216.23821");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-2216.23821\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|HWdd]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |HWdd]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.6100777751436999
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(3);
      assertEquals("{}", string0);
      
      long long0 = jSONObject0.optLong("{", (-3578L));
      assertEquals((-3578L), long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("getintValue", (-1.0));
      JSONObject jSONObject1 = jSONObject0.optJSONObject("Expected '");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.108341314531592
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("mA9<>%#4sVt)5I-DK&", object0);
      try { 
        jSONObject1.getBoolean("mA9<>%#4sVt)5I-DK&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mA9<>%#4sVt)5I-DK&\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.2806483581169434
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(87);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("gD?i5LD\b;=~!jo`\"");
      JSONObject jSONObject1 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1L));
      jSONObject1.optDouble("gD?i5LD\b;=~!jo`\"", (-1.9863293809364408));
      jSONObject1.isNull("<,Bv+~f{+BQ:FPK0\"7");
      jSONObject1.toString(42, 1810);
      Boolean boolean0 = new Boolean("14Yv");
      JSONObject.testValidity(integer0);
      JSONObject jSONObject2 = jSONObject0.put("<,Bv+~f{+BQ:FPK0\"7", (-1182.7368581));
      Integer integer1 = new Integer(32);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.valueToString(jSONObject2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.2022413954579148
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(5, 5);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.474353691762369
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object1);
      jSONObject0.toString((-69));
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-1528), (-1528));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4027358953926081
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) " yh1#ZR");
      jSONObject0.toString(4);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("!", "!");
      JSONObject.valueToString(jSONObject0, (-10400458), (-10400458));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.753440343014635
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-1427), (-1427));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float((double) 44L);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.9027058216721646
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("joi", 82);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("M XGuc?p]n7a[X", (-1094539715));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(31.7076512303476);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("31.7076512303476");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.85441987781001
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject.quote("Sq!#nPjvo~@)7x");
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      Object object0 = jSONObject0.opt("\"Sq!#nPjvo~@)7x\"");
      assertNull(object0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      String[] stringArray0 = new String[0];
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.remove("9^gm5H#Fq");
      assertNull(object0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 28;
      jSONObject0.toString(28, 114);
      String string0 = "h!no`ZG5>\\}t^G";
      jSONObject0.has("h!no`ZG5>}t^G");
      try { 
        Short.valueOf("h!no`ZG5>}t^G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"h!no`ZG5>}t^G\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.7046360973492382
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.1411212857848825
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte byte1 = new Byte((byte)0);
      Byte.toUnsignedInt((byte)43);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.put(".gjM:9T`:VFX2WUdcLY", 0.0);
      JSONObject.valueToString("$Qd8EGTdm;8I");
      boolean boolean0 = jSONObject1.has(".gjM:9T`:VFX2WUdcLY");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.6530606978913271
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("eE6/9f7W%f'2?j");
      try { 
        jSONObject0.get("\"eE6/9f7W%f'2?j\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"eE6/9f7W%f'2?j\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("L#Hd'V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L#Hd'V\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 0L);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("E[u22{:%");
      assertEquals("\"E[u22{:%\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("isdecode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdecode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("^mKVD;F2sm");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("`Ii?Qs9x");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of `Ii?Qs9x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
