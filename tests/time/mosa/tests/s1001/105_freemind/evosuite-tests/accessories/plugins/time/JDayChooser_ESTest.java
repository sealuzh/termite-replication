/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 15:49:48 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.InvocationEvent;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.Locale;
import java.util.Stack;
import javax.swing.ActionMap;
import javax.swing.JButton;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import javax.swing.MenuSelectionManager;
import javax.swing.plaf.PanelUI;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.rowio.RowInputBinary;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton jButton0 = new JButton((String) null);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setMonth(12);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2401997224773753
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseListeners();
      jDayChooser0.isValidateRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Stack<GVTAttributedCharacterIterator.TextAttribute> stack0 = new Stack<GVTAttributedCharacterIterator.TextAttribute>();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      databaseConnectionHook0.getUpdateThread();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.SMALL_CAPS;
      InvocationEvent invocationEvent0 = new InvocationEvent(jDayChooser0, (Runnable) null, integer0, false);
      jDayChooser0.dispatchEvent(invocationEvent0);
      JTable jTable0 = new JTable(stack0, stack0);
      Color color0 = jTable0.getSelectionForeground();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.maxDayCharacters = 90;
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getSundayForeground();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(90, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1287034557083793
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 3230;
      jDayChooser0.setMonth(33);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(430);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 430, 430, (-1750), 220, '0');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 4304, 23760000000L, 404, 39, '0');
      jDayChooser0.keyPressed(keyEvent1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 190, 190, 2112, 37, '[');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.146044367327359
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.weeks = null;
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setDay(4095);
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(4095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.896987831782037
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters((-1));
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1), false, jDayChooser1);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-84), (-84), 40, 40, '5');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(1083L);
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.decorationBackgroundColor;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 16, 0L, 38, 38, 'b');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(430);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1750), (-1750), 430, 40, '0');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAlignmentY();
      jDayChooser0.setMaxSelectableDate((Date) null);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.BLACK;
      jDayChooser0.sundayForeground = color0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 1567L, 38, 38, 'd');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.695552336533544
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2120361183845745
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+{rHErF2#;+9m/{hBZ");
      jDayChooser1.setMonth((-3810));
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.initDecorations();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2354574617411997
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(3);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Locale locale0 = jDayChooser1.getLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.firePropertyChange("day", 890, 0);
      jDayChooser0.setMonth(26);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      InputEvent.getModifiersExText(36);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1543), 65535L, 63737, (-1543), 'U');
      keyEvent0.setKeyCode(36);
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = Color.ORANGE;
      assertEquals(200, color0.getGreen());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8969911136663633
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2851, 2851, 2851, 34, '\"');
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0966290068221545
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.setDecorationBordersVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 33, 33, 33, '&');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3756504837018326
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(44);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setEnabled(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2747, 44, 214, (-753), 'X');
      InputEvent.getModifiersExText((-2777));
      keyEvent0.setKeyCode(35);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.setDay(4095);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4095, 4095, 4095, 4095, '(');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(4095);
      jDayChooser0.setMonth(4095);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1390181868851026
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis(2160L);
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.BLACK;
      jDayChooser0.getDecorationBackgroundColor();
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext_GraphicContextDefaults0.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1070155606793213
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 7, 7, 7, 7, '1');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear((-1561));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.80166428268097
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent("day", 50, "day", 50);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getClientProperty(jDayChooser0);
      actionEvent0.setSource((Object) null);
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(271, 271, 271);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.235799669234131
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.097469316004617
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setForeground((Color) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8009669700166993
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      MenuSelectionManager.defaultManager();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      fopImage_ImageInfo0.str = "day";
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      jDayChooser0.setEnabled(false);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9832989327462007
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      MenuSelectionManager.defaultManager();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      Color color0 = new Color(0, 0, 0, 0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      jDayChooser0.setEnabled(false);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.keyReleased((KeyEvent) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.142605034309789
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.updateUI();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      System.setCurrentTimeMillis((-8L));
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.forLanguageTag("day");
      jDayChooser0.setLocale(locale0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.801680933862038
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = jDayChooser1.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setMonth((-1));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAncestorListeners();
      jDayChooser0.initDecorations();
      jDayChooser0.transferFocusBackward();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1271));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1771809251269194
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.addListeners(12);
      jDayChooser0.setMaxDayCharacters(4);
      int int0 = jDayChooser0.getDay();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(boolean0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setMonth(35);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695552336533544
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.getMaxDayCharacters();
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.getParent();
      jDayChooser0.setActionMap((ActionMap) null);
      jDayChooser0.setDay(532);
      MenuSelectionManager menuSelectionManager1 = MenuSelectionManager.defaultManager();
      assertSame(menuSelectionManager1, menuSelectionManager0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8009015913105437
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MenuSelectionManager.defaultManager();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-590), false, jDayChooser0);
      focusEvent0.setSource((Object) null);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(2);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.202152517155533
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~}95X5zoYzaCGA{;");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(164, color0.getBlue());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.getColor("day", (-728));
      jDayChooser0.setWeekdayForeground(color0);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-626), "day", (-5));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.initDecorations();
      jDayChooser0.setFocus();
      jDayChooser0.setDayBordersVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 6, 0L, 6, 1311, 'V');
      keyEvent0.consume();
      jDayChooser0.keyTyped(keyEvent0);
      Locale locale0 = Locale.UK;
      locale0.getDisplayName();
      jDayChooser0.setLocale(locale0);
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      // Undeclared exception!
      try { 
        Result.read(rowInputBinary0, rowInputBinary0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.lib.HsqlByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9840185503208607
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDayBordersVisible(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDayBordersVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser1.setMaxDayCharacters((-293));
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6090497473625858
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(14);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9840089837197787
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.isPaintingTile();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.initDecorations();
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      jDayChooser0.getDaysInMonth();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.983200165146363
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.isPaintingTile();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setSundayForeground(color0);
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setMaxDayCharacters(731);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getSelectedDay();
      String[] stringArray0 = new String[7];
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-1114));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale.forLanguageTag("day");
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
