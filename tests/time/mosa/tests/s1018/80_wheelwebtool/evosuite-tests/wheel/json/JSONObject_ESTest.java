/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 28 01:13:46 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-206), 1511);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray(")<uRue3h/):");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")<uRue3h/):\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{&MB{`?^M3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {&MB{`?^M3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("has");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of has
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9830877585747856
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Integer integer0 = new Integer((-452));
      hashMap0.put((Float) null, integer0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("H!&_F?A]-3gj{", "H!&_F?A]-3gj{");
      Object object0 = jSONObject1.remove("H!&_F?A]-3gj{");
      assertEquals("H!&_F?A]-3gj{", object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "[e.dolRgni");
      jSONObject0.put("[e.dolRgni", (-385));
      long long0 = jSONObject0.optLong("[e.dolRgni");
      assertEquals(4, jSONObject0.length());
      assertEquals((-385L), long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", 1.0);
      int int0 = jSONObject0.optInt("");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.put("8m2ce9C+?", (-62164681));
      int int0 = jSONObject1.optInt("8m2ce9C+?");
      assertEquals(4, jSONObject0.length());
      assertEquals((-62164681), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("m%I{@pMw}Y>+xq", 0L);
      double double0 = jSONObject0.optDouble("m%I{@pMw}Y>+xq");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("joi", 617L);
      double double0 = jSONObject0.optDouble("joi");
      assertEquals(617.0, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("wheel.json.JSONException", (Object) hashMap0);
      HashMap hashMap1 = (HashMap)jSONObject0.opt("wheel.json.JSONException");
      assertEquals(0, hashMap1.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "x{ZtqS+C41z//a[");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ": ");
      JSONObject jSONObject1 = jSONObject0.put(": ", false);
      jSONObject1.has(": ");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("^i\"!y", "^i\"!y");
      String string0 = jSONObject0.getString("^i\"!y");
      assertNotNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7326587201992074
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Fl", float0);
      long long0 = jSONObject1.getLong("Fl");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", (-1L));
      long long0 = jSONObject1.getLong("0");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject0.put("getoptJSONObject", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("getoptJSONObject");
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("co", 913);
      double double0 = jSONObject1.getDouble("co");
      assertEquals(913.0, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-89));
      JSONObject jSONObject1 = jSONObject0.accumulate("^i\"!y", byte0);
      double double0 = jSONObject1.getDouble("^i\"!y");
      assertEquals((-89.0), double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("com", true);
      boolean boolean0 = jSONObject0.getBoolean("com");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ": ");
      JSONObject jSONObject1 = jSONObject0.put(": ", false);
      boolean boolean0 = jSONObject1.getBoolean(": ");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.put("getsplit", object0);
      Object object1 = jSONObject0.get("getsplit");
      assertSame(object1, object0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("isput", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 101, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      String string0 = JSONObject.valueToString(hashMap0, 0, 30);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-3977), (-3977));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.testValidity(stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("KO0iC**i@yGeVafv", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", false);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      jSONObject0.put("", (Map) hashMap0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("=`|Xl' iBc00", (Collection) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("m%I{@pMw}Y>+xq", 0L);
      int int0 = jSONObject1.getInt("m%I{@pMw}Y>+xq");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("", 10);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", 0.0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Xa95?'(", 833.486541544371);
      long long0 = jSONObject1.getLong("Xa95?'(");
      assertEquals(833L, long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("-[", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString((String) null, "getintern");
      assertEquals("getintern", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(23);
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = jSONObject0.optString("] is not a number.", (String) null);
      assertEquals(1, jSONObject0.length());
      assertNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("", "lo");
      assertEquals("lo", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("qu", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-1469L));
      assertEquals((-1469L), long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      long long0 = jSONObject0.optLong("?.-dYEcB", 1L);
      assertEquals(2, jSONObject0.length());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("getjoin", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 1384);
      assertEquals(1384, int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6423651354584372
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      int int0 = jSONObject0.optInt("", 7);
      assertEquals(7, int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("ismax", 1832.5780391);
      assertEquals(1832.5780391, double0, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      double double0 = jSONObject0.optDouble("", (-1577.931));
      assertEquals((-1577.931), double0, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6423651354584372
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.opt("");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.has((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5358551955461082
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Z");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5358551955461082
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("^i\"!y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^i\\\"!y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.310686555367963
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.append((String) null, linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)5001);
      JSONObject jSONObject1 = jSONObject0.append("", short0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.accumulate("", boolean0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 16, (-1021));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put((Object) null, "-z%oS}");
      jSONObject0.put("OyF0LKA+M&eU", (Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject0, (-62164681), (-62164681));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7682192157531085
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double double0 = new Double((-641.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(8448, 34);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put((Object) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(3695, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.9430096637858085
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"'~QDbYk9<+b\"");
      // Undeclared exception!
      jSONObject0.toString(1291);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.9503376403027994
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      hashMap0.put((Boolean) null, (Boolean) null);
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-1725));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.2779914688584595
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      linkedList0.add((Boolean) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-827));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Byte byte0 = new Byte((byte)55);
      hashMap0.put(byte0, "gethashCode");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5358551955461082
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5358551955461082
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{N7-|~t<p5ukY%");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {N7-|~t<p5ukY%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("vK ]ieV\"T^xn{.WH]", "vK ]ieV\"T^xn{.WH]");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0, (-1725), (-1725));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.8835205291162307
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ": ");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 539, 3505);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7375471543741023
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("8;/?o$!gyTZR", (Object) null);
      String string0 = jSONObject0.toString((-662), (-662));
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.784617558418788
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(7, 7);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.7760222510077253
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString((-1725));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ": ");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.6583656821534862
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(3, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float float0 = Float.valueOf(245.6694F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0851886129676505
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Float float0 = new Float(967.31F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Double double0 = new Double((-2110.36));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.quote("</Bd0ET_nAl");
      assertEquals("\"<\\/Bd0ET_nAl\"", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.6423651354584372
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      long long0 = jSONObject0.optLong("", 3453L);
      assertEquals(3, jSONObject0.length());
      assertEquals(3453L, long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("JSONArray[", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.5229550675313182
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{\"java.lang.Float@0000000003\": java.lang.Integer@0000000004}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("g0", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ": ");
      jSONObject0.put(": ", false);
      jSONObject0.optString(": ");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      jSONObject0.put("{\"java.lang.Float@0000000003\": java.lang.Integer@0000000004}", (Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("{\"java.lang.Float@0000000003\": java.lang.Integer@0000000004}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("8;/?o$!gyTZR", (Object) null);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("8;/?o$!gyTZR");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("", (-1555L));
      double double0 = jSONObject0.optDouble("");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1555.0), double0, 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Long long0 = new Long(1959L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("U;#)N LW5J>", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("U;#)N LW5J>");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[3y;jRnd<#@V", (-371));
      try { 
        jSONObject1.getJSONObject("[3y;jRnd<#@V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[3y;jRnd<#@V\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject1 = jSONObject0.append("jo", byte0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("jo");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("H!&_F?A]-3gj{", "H!&_F?A]-3gj{");
      try { 
        jSONObject1.getJSONArray("H!&_F?A]-3gj{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H!&_F?A]-3gj{\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("m{C>TRwjf:8", 137);
      int int0 = jSONObject0.getInt("m{C>TRwjf:8");
      assertEquals(4, jSONObject0.length());
      assertEquals(137, int0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Fp.;{", "Fp.;{");
      try { 
        jSONObject0.getInt("Fp.;{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Fp.;{\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0L);
      double double0 = jSONObject0.getDouble("");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.776053131855733
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ": ");
      jSONObject0.put(": ", false);
      long long0 = jSONObject0.optLong(": ");
      assertEquals(4, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("#Ya(D0#THJ#uDmK5", true);
      boolean boolean0 = jSONObject1.optBoolean("#Ya(D0#THJ#uDmK5");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Fp.;{", "Fp.;{");
      boolean boolean0 = jSONObject1.optBoolean("Fp.;{", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.5680137834405823
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-89));
      jSONObject0.accumulate("^i\"!y", byte0);
      boolean boolean0 = jSONObject0.optBoolean("^i\"!y", false);
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1595.2561);
      assertEquals("1595.2561", string0);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-62164681));
      assertEquals("-6.2164681E7", string0);
  }

  /**
  //Test case number: 173
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("6BJZfj{=$(:,^", jSONArray0);
      jSONObject0.append("6BJZfj{=$(:,^", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 176
  /*Coverage entropy=1.5312646501273104
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.accumulate("<0y3@GQ9>}X=c^L", "<0y3@GQ9>}X=c^L");
      try { 
        jSONObject0.append("<0y3@GQ9>}X=c^L", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[<0y3@GQ9>}X=c^L] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 177
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("ZYUMy", "ZYUMy");
      jSONObject0.accumulate("ZYUMy", "ZYUMy");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 178
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("wheel.json.JSONException", (Object) hashMap0);
      Object object0 = new Object();
      jSONObject0.accumulate("wheel.json.JSONException", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 179
  /*Coverage entropy=1.8768448811808436
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.toString((-1993), (-1993));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 180
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("com", (Map) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 181
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 182
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 183
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~={yErJ5xC-R)s*iCl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~={yErJ5xC-R)s*iCl
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 184
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("Substring bounds error", object0);
      boolean boolean0 = jSONObject1.isNull("Substring bounds error");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 185
  /*Coverage entropy=1.5358551955461084
  */
  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ": ");
      jSONObject0.put(": ", false);
      boolean boolean0 = jSONObject0.isNull(": ");
      assertEquals(4, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 186
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getlength");
      int int0 = jSONObject0.optInt("getlength", (-567));
      assertEquals((-567), int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 187
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ": ");
      jSONObject0.put(": ", 541);
      long long0 = jSONObject0.optLong(": ");
      assertEquals(4, jSONObject0.length());
      assertEquals(541L, long0);
  }

  /**
  //Test case number: 188
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n       \"java.lang.String@0000000004\": [\n              java.lang.Byte@0000000016,\n              java.lang.Byte@0000000017,\n              java.lang.Byte@0000000018\n       ],\n       \"java.lang.String@0000000013\": \"java.lang.Class@0000000014\",\n       \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 189
  /*Coverage entropy=1.8718787807934385
  */
  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Long long0 = new Long(1959L);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 190
  /*Coverage entropy=1.1580510496905323
  */
  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("", (-1780.602));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 191
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.remove("");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 192
  /*Coverage entropy=1.1752045970807579
  */
  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Integer integer0 = new Integer(23);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 193
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("8;/?o$!gyTZR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8;/?o$!gyTZR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 194
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
