/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 03:43:02 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.634139202379014
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 265L, 4294967309L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      assertTrue(linkedList0.contains(range0));
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3299020857780706
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2284L, 2284L);
      Range.of(2284L);
      Range range1 = Range.of(1516L);
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.440014200405378
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(2147483664L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483664L, 2147483664L);
      Range.of((-2275L));
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3256L, 9223372036854743062L);
      Range.of((-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3888792205827323
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(9223372036854775805L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775805L, 9223372036854775805L);
      range0.equals(range1);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      List<Range> list1 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.198458602377725
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(32752L, 32752L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-2089L));
      linkedList0.add(range1);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range2 = Range.ofLength(32752L);
      Iterator<Long> iterator0 = range2.iterator();
      range0.complement(range2);
      Iterator<Long> iterator1 = range0.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6892880693997117
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 65553L, (-422L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8906488959867764
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 265L, 4294967309L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967309L, 4294967309L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 266 .. 4294967310 ]/RB", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(32752L, 9223372036854775807L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals(">^}Hf^sBk^WSA7CAlI");
      assertFalse(boolean0);
      
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.421596549709448
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range2 = Range.of(1L);
      Range range3 = Range.of(1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range3);
      assertFalse(range0.equals((Object)range2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-8L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6383505834326493
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-1569L));
      Range.Builder range_Builder0 = new Range.Builder((-1569L), 3398L);
      Range range1 = range_Builder0.build();
      Range.ofLength(0L);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1328844901090855
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(9223372036854775153L);
      Object object0 = new Object();
      range1.equals((Object) null);
      Range range2 = range0.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.134992288964852
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(975L, 65535L);
      Range.of(65535L);
      Range range1 = Range.of(1398L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 265L, 4294967309L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.204824394650597
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(9223372036854775806L, 9223372036854775807L);
      range0.intersection(range0);
      Range.of(9223372036854775806L);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775806L, (-4355L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4355 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.807721140081049
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      Range range1 = Range.of(127L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147488190L), 2147483646L);
      Range range1 = Range.of((-2147488190L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8936935921261018
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      range0.asRange();
      Range range2 = Range.of(4294967295L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      range0.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.parallelStream();
      linkedList0.toArray();
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2712833989228884
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 265L, 4294967331L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6754083277024434
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(65535L);
      range2.equals((Object) null);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range2, range0);
      
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range3 = range_Builder1.build();
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0618894818800415
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift(32767L);
      range_Builder0.build();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-772L), (-772L));
      range0.complement(range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2028955619269524
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long((-1857L));
      Range range0 = Range.of((-9223372036854775808L));
      range0.equals((Object) null);
      Range.of((-1857L));
      Range.Builder range_Builder0 = new Range.Builder((-2235L), (-1857L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854774573L, (-672L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-2147488190L));
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5879368632962025
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.of(2147483647L, 9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      range1.equals(range0);
      Range.CoordinateSystem.values();
      Range range2 = Range.of(9223372036854775807L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-1569L));
      Range range1 = Range.of((-239L));
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.394956370235134
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(1883L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 1883L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.690731070842713
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(32752L);
      Range range0 = Range.ofLength(64548L);
      Range range1 = Range.ofLength(32752L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6804354735855034
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(975L, 65535L);
      Range range1 = Range.of(65535L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4409907033043714
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.329213344056216
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range0.iterator();
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("max cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.max cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      assertFalse(range1.isEmpty());
      
      Long long0 = new Long(2147483647L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-2147488190L), 5728L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.6333665563546815
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 2147483647L;
      long long1 = 9223372036854775807L;
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      range1.isSubRangeOf(range2);
      range0.isEmpty();
      range2.iterator();
      range2.toString();
      Range.of(9223372036854775807L, 9223372036854775807L);
      range2.spliterator();
      // Undeclared exception!
      try { 
        range2.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.7940824800394175
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483647L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1857L), 2147483647L);
      Long.valueOf(2147483647L);
      Long.compare(82L, 2147483647L);
      range0.isEmpty();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2674340830645234
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4135501314628676
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.ofLength(9223372036854775805L);
      Range range0 = Range.ofLength(9223372036854775805L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775805L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -7 would make range [9223372036854775805 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.of(9223372036854775805L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967309L, 9223372036854775805L);
      Object object0 = new Object();
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775805L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.6419494608184455
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem.values();
      long long0 = (-2650L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), (-2650L));
      Range range1 = Range.of(9223372036854775807L);
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.979856144737496
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.intersects(range1);
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1327282156912077
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range1.getLength();
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(2147483664L, 2147483664L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.589141312673904
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.getLength();
      Range.of(1L);
      Long long0 = new Long(1L);
      Range range1 = Range.ofLength(1L);
      range1.equals(long0);
      long long1 = 9223372036854775807L;
      Range range2 = Range.of(1L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-662L), 630L);
      range2.intersection(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.780537948231957
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.ofLength(33L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertFalse(range0.isEmpty());
      assertEquals((-2L), long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(32752L);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.546194005824665
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L), 2147483647L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 326L, 326L);
      Range range1 = Range.of(326L, 1508L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-2L));
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.ofLength(65535L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.5611168310670225
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.ofLength(1L);
      List<Range> list0 = range1.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range1));
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.ofLength(9223372036854775805L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775805L, (-2057L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2057 would make range [9223372036854775805 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854774833L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854774833 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(1414L, 2147483664L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(1898L, 9223372036854774617L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(2147483646L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(2147483646L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.6296238866684463
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-230L), 4274L);
      Range range1 = Range.of((-230L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(boolean1);
      
      Range range2 = Range.of(range_CoordinateSystem0, (-230L), 4274L);
      Range range3 = range2.asRange();
      assertNotSame(range3, range1);
      assertSame(range3, range0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.equals((Object) null);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      long long1 = range0.getLength();
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775805L);
      Long long0 = new Long(9223372036854775805L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.139963758275124
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.getLength();
      long long0 = range0.getBegin();
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2 .. 2 ]/RB", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.754240261412811
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-1L));
      range0.getEnd();
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 0 .. 0 ]/RB");
      // Undeclared exception!
      try { 
        Range.of(2135L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.1811998830306742
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.4405019712924245
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(1234L);
      Range range1 = Range.of(1970L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4125630205852895
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-3246L));
      Range range1 = Range.of((-1L), (-1L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-128L), 248L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.01305655056235
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.1344336383395626
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(1585L);
      Range range1 = Range.ofLength(1585L);
      boolean boolean0 = range1.endsBefore(range1);
      boolean boolean1 = range1.endsBefore(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.69405564290511
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-1354L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1354L), (-1354L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.676621165591499
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder1.build();
      Long long0 = new Long(0L);
      range2.equals(long0);
      range_Builder0.expandEnd(0L);
      List<Range> list0 = range0.complement(range2);
      range0.complementFrom(list0);
      range1.isEmpty();
      range1.isSubRangeOf(range0);
      Range range3 = Range.of((-2084L), 1L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      long long0 = 1196L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3394L, 1196L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4424934538746115
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 327L, 327L);
      Range range1 = Range.of(range_CoordinateSystem0, 327L, 65535L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4501312458491458
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775805L);
      Range range1 = Range.of(516L, 9223372036854775805L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2003466361653903
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 327L, 327L);
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854774659L, 9223372036854774659L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.389024049001286
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(975L, 975L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4424469472939303
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 327L, 327L);
      Range range1 = Range.of(range_CoordinateSystem0, 327L, 327L);
      range1.complement(range0);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.634153733355423
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2474L);
      Range range1 = Range.ofLength(1059L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.4430691161527416
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-155L));
      Range range1 = Range.of((-155L));
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-378L));
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(23L, 23L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32740L, 4294967293L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.9352332410684303
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1498L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.505305350746804
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.272519479752591
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(32767L);
      List<Range> list0 = range0.split(202L);
      assertEquals(163, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.3876093269569383
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-2L));
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.602566880268591
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(1026L);
      Range range1 = Range.ofLength(1026L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(1026L, 1026L);
      Range range3 = range0.intersection(range2);
      assertSame(range3, range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-32784L), (-32784L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.of((-955L));
      Range range0 = Range.of((-955L), 65758L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(2L);
      range_Builder0.contractEnd(2L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.793494183903136
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-31L));
      long long0 = range0.getBegin();
      assertEquals((-31L), long0);
      
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      boolean boolean1 = range0.equals(range0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.116276228907978
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(327L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 326 ]/0B", string0);
      
      long long0 = range0.getBegin();
      Long long1 = new Long(327L);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.1341068345657535
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(32752L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 32753 .. 32753 ]/RB", range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.991510297345487
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractBegin(0L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(9223372036854775795L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.2675871151461036
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(2147483664L, 2147483664L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.3235437321314656
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      String string0 = range0.toString();
      assertEquals("[ 1 .. 1 ]/0B", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.9848941644582636
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-32767L), long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.415398842602481
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(2147483670L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(1779L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.294500921910773
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(1961L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.178897475595653
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Long long0 = new Long(255L);
      Range range0 = Range.ofLength(32752L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals(long0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-2147483637L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.990532780238937
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.038951288708
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder(1060L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(3408L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.3911765450520486
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(0L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = (-128L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.840727885115826
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-311L));
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-188L), (-188L));
      range0.getLength();
      range_CoordinateSystem0.getAbbreviatedName();
      String string0 = ",v#[";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(",v#[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.,v#[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.241711887398469
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-2L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-2L), long1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775805L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-6L), (-6L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.9905327802389374
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift(0L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147480603L), (-2147480603L));
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1022L, 1022L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32752L, 1304L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(65758L, (-2637L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(2192L, 2192L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.1156141964683886
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 1 ]/SB", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("bwpgj*-.+", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse bwpgj*-.+ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.1328844901090855
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(65535L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of(2147483625L, 2147483625L);
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.7169453229376965
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(694L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertFalse(list1.contains(range0));
      assertTrue(list1.equals((Object)list0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.02327080398501
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 327L, 327L);
      List<Range> list0 = range0.split(327L);
      assertTrue(list0.contains(range0));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.1343204521482777
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Long long0 = new Long((-32768L));
      Range range0 = Range.of(1857L);
      Range range1 = Range.ofLength(1584L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.4411277208882947
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775805L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      List<Range> list0 = range0.split(342L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of((-2L));
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.442023520229242
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of(65731L, 65731L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.4921351512518326
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range range0 = Range.of(2148919572L);
      Range range1 = Range.of(2148921174L, 2148921174L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.201200886033717
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      Range range1 = Range.of(255L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.20490554701416
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of(9223372036854775805L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of((-2L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.4145644662987675
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(20L, 20L);
      Range range0 = Range.ofLength(20L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=3.358336026559191
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range range0 = Range.of(2147483670L, 9223372036854775807L);
      range0.getEnd();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range range0 = Range.ofLength(103L);
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 169
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("x6zYC{9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse x6zYC{9 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=2.93523324106843
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandEnd((-474L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range range0 = Range.of((-1556L));
      assertFalse(range0.isEmpty());
  }
}
