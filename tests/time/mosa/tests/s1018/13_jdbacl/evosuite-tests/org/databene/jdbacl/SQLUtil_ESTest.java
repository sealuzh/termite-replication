/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 03:56:33 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.List;
import java.util.Vector;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.SQLChar;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBClob;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DBSchema dBSchema0 = new DBSchema(" as ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter seHsionselect into,", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " as ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter seHsionselect into,", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("-P2/|)e", "delete");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter2.append((CharSequence) "delete");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals(49L, file0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("3%1>r9*1#d7,n5N", (DBTable) null, (-315), "3%1>r9*1#d7,n5N");
      defaultDBColumn0.setDefaultValue("drop materialized viewselect intoremembering join strategy");
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.removeComments("3%1>r9*1#d7,n5N");
      assertEquals("3%1>r9*1#d7,n5N", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[10];
      SQLUtil.join("FORCE", "FORCE", stringArray0, "alter tablentp{+*+x_nsgoa", "alter tablentp{+*+x_nsgoa", stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("FORCE join alter tablentp{+*+x_nsgoa as alter tablentp{+*+x_nsgoa on FORCE.null = alter tablentp{+*+x_nsgoa.null and FORCE.null = alter tablentp{+*+x_nsgoa.null and FORCE.null = alter tablentp{+*+x_nsgoa.null and FORCE.null = alter tablentp{+*+x_nsgoa.null and FORCE.null = alter tablentp{+*+x_nsgoa.null and FORCE.null = alter tablentp{+*+x_nsgoa.null and FORCE.null = alter tablentp{+*+x_nsgoa.null and FORCE.null = alter tablentp{+*+x_nsgoa.null and FORCE.null = alter tablentp{+*+x_nsgoa.null and FORCE.null = alter tablentp{+*+x_nsgoa.null", stringArray0);
      // Undeclared exception!
      SQLUtil.mutatesStructure(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("RANDOM");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "b";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("b", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("executenot null");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("b", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 46, "");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, 46, "r6\":aB$VR2o0Ck\"H07^");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select into,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      DBDataType dBDataType0 = DBDataType.getInstance(3538, "select into,");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select into,", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      defaultDBTable0.isIdentical((DBObject) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into,");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("execuse");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jup5e=u";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("%&G*d:JX_~'t+h_mx_");
      SQLChar sQLChar0 = new SQLChar(jdbcClob0);
      String string0 = SQLUtil.renderValue(sQLChar0);
      assertNull(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(":18(BBP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: :18(BBP
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4964927399410195
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "org.apache.derby.impl.sql.execute.CreateConstraintConstantAction");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("org.apache.derby.impl.sql.execute.CreateConstraintConstantAction");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "drop index";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode";
      stringArray0[2] = "drop tablentp{+*+x_nsgoa";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop tablentp{+*+x_nsgoa", false, dBPrimaryKeyConstraint0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.CreateConstraintConstantAction", defaultDBTable0, 46, "org.apache.derby.impl.sql.execute.CreateConstraintConstantAction");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.CreateConstraintConstantAction", defaultDBTable0, 46, "org.apache.derby.impl.sql.execute.CreateConstraintConstantAction");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(1437, "org.apache.derby.impl.sql.compile.BinaryComparisonOperatorNode");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable1, dBDataType0);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(defaultDBColumn2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = Boolean.FALSE;
      FromVTI fromVTI0 = new FromVTI();
      // Undeclared exception!
      SQLUtil.isQuery("8[>[Nb/*+.o3gyk(");
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.lxecute.CreateConstraintConstantAction");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.lxecute.CreateConstraintConstantAction", defaultDBTable0, 46, "org.apache.derby.impl.sql.lxecute.CreateConstraintConstantAction");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.apache.derby.impl.sql.lxecute.CreateConstraintConstantAction", defaultDBTable0, 46, "org.apache.derby.impl.sql.lxecute.CreateConstraintConstantAction");
      SQLUtil.parseColumnTypeAndSize("org.apache.derby.impl.sql.lxecute.CreateConstraintConstantAction");
      StringBuilder stringBuilder0 = new StringBuilder(1088);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("ORG.APACHE.DERBY.IMPL.SQL.LXECUTE.CREATECONSTRAINTCONSTANTACTION", stringBuilder0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = SQLUtil.normalize("A_Q@Qd(A<o", false);
      assertEquals("A_Q @ Qd (A < o", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execuse");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("execuse");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.CreateConstraintConstantAction", defaultDBTable0, 1, "org.apache.derby.impl.sql.execute.CreateConstraintConstantAction");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" qKs++4hwN-");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " qKs++4hwN-", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionexecuse");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(420);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5688999753452237
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable(" as ");
      DBDataType dBDataType0 = DBDataType.getInstance(862, " as ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CHECK ", defaultDBTable0, dBDataType0, integer0, (Integer) null);
      defaultDBColumn0.toString();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("+0T]JDW@^~$BN3Q");
      assertNull(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("selectcallo");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "~i m#A\"v[l-#";
      stringArray0[1] = "selectcallo";
      stringArray0[2] = "~i m#A\"v[l-#";
      stringArray0[3] = "~i m#A\"v[l-#";
      stringArray0[4] = "selectcallo";
      stringArray0[5] = "~i m#A\"v[l-#";
      stringArray0[6] = "b|";
      stringArray0[7] = "~i m#A\"v[l-#";
      stringArray0[8] = "selectcallo";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "selectcallo", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("aler materialized viewt6jb$__h8");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.ensureCapacity((-626278057));
      constraintDescriptorList0.add((Object) "aler materialized viewt6jb$__h8");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7419688116652399
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.isDDL("?%1r9*1#d7n5N");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?%1r9*1#d7n5N");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "callo";
      stringArray0[1] = "?%1r9*1#d7n5N";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("174b");
      assertNull(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[e628SSG??1^mz", (DBSchema) null);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "[e628SSG??1^mz";
      stringArray0[2] = "[e628SSG??1^mz";
      stringArray0[3] = "*s{-Ie?1J#Q{0S~a";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(90054);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      int int0 = (-2);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-2), 90054);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("sZ#\"^1,g[ndU9zkiW(T", defaultDBTable0, 2533, "ALTER TABLE ");
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("ALTER TABLE ", defaultDBTable0, (-1952532104), "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" #:", (DBSchema) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable0, "1");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1", false, (String[]) null);
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("renameexecute%r91#d7n5n");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLUtil.normalize("faPh>XUdy>lj=>3wOiC", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3ff\"4 HLm?NK$nz8");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#4ye[]", defaultDBTable0, 438, "3ff\"4 HLm?NK$nz8");
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NtP{+*+X_nSgOa");
      mockPrintWriter0.append((CharSequence) "NtP{+*+X_nSgOa");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("org.apache.derby.impl.sql.execute.DropSequenceConstantAction");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, "org.apache.derby.impl.sql.execute.DropSequenceConstantAction");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TOGl|1");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "TOGl|1", false, stringArray0);
      StringBuilder stringBuilder1 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "alter indexfaph > xudy > lj = > 3woic";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("derby.__rt.database.classpath");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "derby.__rt.database.classpath";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter indexfaph > xudy > lj = > 3woic", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoremembering join strategy");
      assertFalse(boolean0);
      
      SQLUtil.isQuery("select intoremembering join strategy");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/+\"Or<|;", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT /+\"Or<|; FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("aler materialized viewt6jb$__h8");
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("8[>[Nb/*+.o3gyk(");
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(", name.hashCode()=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" NOT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NOT", defaultDBTable0, 952, " NOT");
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null. NOT", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("A_Q@Qd(A<o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: A_Q@Qd(A<o
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updateAsciiStream(int, InputStream)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.570544868816941
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("unaligned write ");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.innerJoin("unaligned write ", stringArray0, "unaligned write ", "-hu_ChK+pNoq*Y", stringArray1);
      assertEquals("unaligned write  as -hu_ChK+pNoq*Y on ", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("-hu_ChK+pNoq*Y");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execuse");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execselect into,");
      assertNull(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("o");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tableo", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(1990, "}\"KFhY0*u$r%pfeBTW");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("}\"KFHY0*U$R%PFEBTW(3)", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intoremembering join strategy");
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select intoremembering join strategy");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intoremembering join strategy", defaultDBTable0, (-17), "80000012-00d0-fd77-3ed8-000a0a0b1900");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("80000012-00D0-FD77-3ED8-000A0A0B1900", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = SQLUtil.normalize("updateAsciiStream(int, InputStream)", true);
      assertEquals("updateAsciiStream (int, InputStream)", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~i m#A\"v[l-#");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~i m#A\"v[l-#";
      stringArray0[2] = "~i m#A\"v[l-#";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "~i m#A\"v[l-#", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.parseColumnTypeAndSize("[ZNVH_l\"tEJqV [^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[ZNVH_l\"tEJqV [^");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.hsqldb`jdbc.jdbcCallableStatement", true, stringArray0);
      StringBuilder stringBuilder0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.006961364732055
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ErrorMessages errorMessages0 = new ErrorMessages();
      SQLUtil.mutatesStructure("updateAsciiStream(int, InputStream)");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("updateAsciiStream(int, InputStream)", true, "updateAsciiStream(int, InputStream)", "updateAsciiStream(int, InputStream)");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.parseColumnTypeAndSize("|6*+B");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop materialized viewhh:mm:ss", 35);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|6*+B");
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`U}^{pKFzc8*<W");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "|6*+B";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "`U}^{pKFzc8*<W", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT `U}^{pKFzc8*<W ", stringBuilder0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SQLUtil.isQuery("select");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnListWithTableName("[q4QTFe;7t:", stringArray0);
      assertEquals("[q4QTFe;7t:.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("BIT VARYING");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[q4QTFe;7t:");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("BIT VARYING", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string1 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT \"BIT VARYING\" FOREIGN KEY () REFERENCES [q4QTFe;7t:()", string1);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"BIT VARYING\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("?%1r9*1#d7n5N");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "u3c!TcB,[bk}-)=_q";
      stringArray0[2] = "?%1r9*1#d7n5N";
      stringArray0[3] = ")";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, u3c!TcB,[bk}-)=_q, ?%1r9*1#d7n5N, )) REFERENCES null(, u3c!TcB,[bk}-)=_q, ?%1r9*1#d7n5N, ))", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3456585482626247
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = SQLUtil.normalize("meEVWbo@6_;r/'#", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("meEVWbo@6_;r/'#");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "meEVWbo@6_;r/'#", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("T%Kg{$`|:W", true, "deletea", "deletea");
      dBCheckConstraint0.setName("T%Kg{$`|:W");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT T%Kg{$`|:W CHECK deletea", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("\nRemembering join strategy ");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\nRemembering join strategy ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"\nRemembering join strategy \" PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FBClob fBClob0 = new FBClob();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" DEFAULT ", true, defaultDBTable0, "- 0");
      dBCheckConstraint0.setOwner(defaultDBTable0);
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \" DEFAULT \" ", string1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.455005600113097
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" predicates.");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isDML("deletealter sehsionselect into,");
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " predicates.";
      stringArray0[1] = "<m|wNmzQIb";
      stringArray0[2] = " predicates.";
      String string0 = SQLUtil.renderColumnListWithTableName(" predicates.", stringArray0);
      assertEquals(" predicates.. predicates.,  predicates..<m|wNmzQIb,  predicates.. predicates.", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "aler materialized viewt6jb$__h8=");
      StringBuilder stringBuilder1 = stringBuilder0.append("aler materialized viewt6jb$__h8=");
      SQLUtil.addOptionalCondition("aler materialized viewt6jb$__h8=", stringBuilder1);
      assertEquals("aler materialized viewt6jb$__h8=aler materialized viewt6jb$__h8= or aler materialized viewt6jb$__h8=", stringBuilder1.toString());
      assertEquals("aler materialized viewt6jb$__h8=aler materialized viewt6jb$__h8= or aler materialized viewt6jb$__h8=", stringBuilder0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("n", stringBuilder0);
      assertEquals("n", stringBuilder0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("br mgxxv]4UpXMIhC ", true, "FNRCE", "kRs%Fd>Nz");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"br mgxxv]4UpXMIhC \" ", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9159499322696136
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null\" UNIQUE (, , , , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("XSAM5.S", "XSAM5.S", (String[]) null, "XSAM5.S", "XSAM5.S", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("T%Kg{$`|:W", true, "deletea", "deletea");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT T%Kg{$`|:W ", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("T%Kg{$`|:W", true, "deletea", "deletea");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT T%Kg{$`|:W CHECK deletea", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("call", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("REPLACE_JAR");
      assertFalse(boolean0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("REPLACE_JAR", false, "REPLACE_JAR", "REPLACE_JAR");
      dBCheckConstraint0.toString();
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK REPLACE_JAR", string0);
      
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execuse", false, "create materialized viewselect into,", "execuse");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK execuse", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop table");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create table");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1530116670092565
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncateexecutealter mtrialize view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      TableContainer tableContainer0 = new TableContainer("truncateexecutealter mtrialize view");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container truncateexecutealter mtrialize view", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("updatHAsciiStea(int, InputStrea/)");
      tableContainer0.getTable("create materialized viewupdathasciistea(int, inputstrea/)");
      DBDataType dBDataType0 = DBDataType.getInstance((-159), "updatHAsciiStea(int, InputStrea/)");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updatHAsciiStea(int, InputStrea/)", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn0.toString();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updatHAsciiStea(int, InputStrea/)");
      assertNull(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLUtil.mutatesStructure(" o ");
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = SQLUtil.normalize("DpPMki)Nr:-:[ZT", false);
      assertEquals("DpPMki) Nr : - : [ ZT", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.normalize(",Pq|M2)\"", false);
      assertEquals(", Pq | M2) \"\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("getCurrentUserId", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("alter index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = SQLUtil.normalize("m>KEVWbo@6_;r/'#", false);
      assertEquals("m > KEVWbo @ 6_ ; r / '#'", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[16];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null";
      stringArray1[1] = "{wo[rib@";
      stringArray1[2] = "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null";
      stringArray1[3] = "org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory";
      stringArray1[4] = "{wo[rib@";
      stringArray1[5] = "org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("{wo[rib@", stringArray0, "org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("VIDq='|.Ye2h");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "VIDq='|.Ye2h";
      String string0 = SQLUtil.leftJoin("VIDq='|.Ye2h", stringArray0, "delete", "VIDq='|.Ye2h", stringArray0);
      assertEquals("left join delete as VIDq='|.Ye2h on VIDq='|.Ye2h.VIDq='|.Ye2h = VIDq='|.Ye2h.VIDq='|.Ye2h", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Tk2AO41g7u5zgs9w";
      String string0 = SQLUtil.leftJoin("updatHAsciiSteam(int, InputStrea/)", stringArray0, "Tk2AO41g7u5zgs9w", "Tk2AO41g7u5zgs9w", stringArray0);
      assertEquals("left join Tk2AO41g7u5zgs9w as Tk2AO41g7u5zgs9w on updatHAsciiSteam(int, InputStrea/).Tk2AO41g7u5zgs9w = Tk2AO41g7u5zgs9w.Tk2AO41g7u5zgs9w", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("\nRemembering join strategy ");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("\nRemembering join strategy ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\nRemembering join strategy ";
      stringArray0[1] = "\nRemembering join strategy ";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter index42y41";
      stringArray0[1] = "alter index42y41";
      stringArray0[2] = "alter index42y41";
      stringArray0[3] = "alter index42y41";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("alter index42y41", stringArray0, (String) null, "CONSTRAINT ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = SQLUtil.renderValue("org.hsqldb.jdbc.jdbcCallableStatement");
      assertEquals("'org.hsqldb.jdbc.jdbcCallableStatement'", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLUtil.normalize("+", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("7{v]AB`6,v|f eW");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?%1r9*1#d7n5N", (DBTable) null, (-327), "?%1r9*1#d7n5N");
      defaultDBColumn0.toString();
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.removeComments("?%1r9*1#d7n5N");
      assertEquals("?%1r9*1#d7n5N", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("REPLACE_JAR");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(2497, "REPLACE_JAR");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("REPLACE_JAR", defaultDBTable0, dBDataType0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("REPLACE_JAR");
      assertNull(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("execuse");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\nRememberig oin strategy ";
      stringArray0[1] = "\nRememberig oin strategy ";
      stringArray0[2] = "\u0001%\u000B\uFFFF\n%\u0007\uFFFF\u0012%\u0001\u0227\u0007%\u0004\uFFFF\u0001%\u0001\uFFFF\u001A%";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "\nRememberig oin strategy ";
      // Undeclared exception!
      try { 
        SQLUtil.join("\nRememberig oin strategy ", "\u0001%\u000B\uFFFF\n%\u0007\uFFFF\u0012%\u0001\u0227\u0007%\u0004\uFFFF\u0001%\u0001\uFFFF\u001A%", stringArray0, "{|BGh:", ",conglomerate=", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1214796043032684
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLUtil.normalize("\nRememberig oin strategy ", false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\nRememberig oin strategy ";
      stringArray0[1] = "\nRememberig oin strategy ";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "Rememberig oin strategy";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Rememberig oin strategy", stringArray0, "\nRememberig oin strategy ", "\nRememberig oin strategy ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">YL*6exL";
      // Undeclared exception!
      try { 
        SQLUtil.join("\nRememberig oin strategy ", "\nRememberig oin strategy ", (String[]) null, "l7,>^gW&{D<QH{U", ">YL*6exL", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = SQLUtil.normalize("Wp#Ggp\b#*\" sW", false);
      assertEquals("Wp # Ggp \b # * \" sW\"", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.impl.sql.execute.CreateTriggerConstantAction", true);
      assertEquals("org.apache.derby.impl.sql.execute.CreateTriggerConstantAction", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("updatHAsciiSteam(int, InputStrea/)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("create table null (\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (double) 0);
      SQLUtil.addRequiredCondition("org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder1);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("trormrNLSA.ioK");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.4168185977125947
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[16];
      SQLUtil.join("\"NIagANo+'JT", "\"NIagANo+'JT", stringArray0, "\"NIagANo+'JT", "5e;*dRJx", stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("5e;*dRJx");
      assertNull(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, (String) null, "alter index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[16];
      SQLUtil.join("FNRCE", "FNRCE", stringArray0, "alter tablentp{+*+x_nsgoa", "alter tablentp{+*+x_nsgoa", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("seleIt");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("seleIt");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "seleIt";
      stringArray0[1] = "seleIt";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM seleIt WHERE seleIt = 'seleIt' AND seleIt = 'seleIt'", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("bgY3so", stringArray0, "CI 4[.lcfy??B,k):R", "CI 4[.lcfy??B,k):R", stringArray0);
      assertEquals("CI 4[.lcfy??B,k):R as CI 4[.lcfy??B,k):R on ", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("", "", stringArray0, "", "}+L7!g[,=%hGk58au", stringArray0);
      assertEquals(" as }+L7!g[,=%hGk58au on ", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = SQLUtil.normalize("c&4}'cogt)K'z[m7r'", true);
      assertEquals("c & 4 } 'cogt)K' z [ m7r ''", string0);
      
      Object object0 = new Object();
      Character character0 = new Character(']');
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("']'", string1);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesStructure("G");
      SQLUtil.substituteMarkers("", "~VZOkH", boolean0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("G");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(".", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1180, ".");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("G", dBTable0, dBDataType0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("42622", "drop index", "42622");
      assertEquals("42622", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.5419879996659676
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter seHsionselect into,");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
