/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 27 12:24:08 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.112251040213321
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-2147483646L), (-2147483646L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483646L), (-403L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem1);
      assertFalse(range1.equals((Object)range0));
      assertEquals((-2147483646L), long0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.03251891494976
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 24L, 24L);
      range0.getBegin();
      Range range1 = Range.of(24L);
      range0.equals(range1);
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 25 .. 25 ]/RB", string0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0837154503575945
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long((-1372L));
      Range range0 = Range.of((-1372L), (-1372L));
      Range range1 = Range.of((-1372L));
      Long long1 = new Long((-1372L));
      Range range2 = Range.of((-1489L), (-1372L));
      boolean boolean0 = range2.equals(range0);
      assertSame(range0, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.423016060778414
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.ofLength(43L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      Range range3 = Range.of((-1L));
      boolean boolean0 = range0.equals(range3);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1 .. -1 ]/RB", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7878762280875944
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5069997290764516
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-22L), 127L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-22L), 127L);
      Range.of((-534L));
      range1.complement(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.075220548054372
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.toString();
      range0.split(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("[ 2147483647 .. 2147483646 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.319584899212019
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L);
      range0.complement(range0);
      Range range1 = Range.of((-2147483673L));
      range1.toString();
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483673 would make range [9223372036854775801 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.321080113076378
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Long long0 = new Long(400L);
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Range.of(400L, 658L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.178624913410437
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(149L, 149L);
      Range.of(9223372034707292128L);
      Range range1 = Range.ofLength(149L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.447198256822004
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 15525L, 9223372036854775548L);
      Range range1 = Range.of((-1539L), 876L);
      Long.getLong("nTTk~");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9867954750916335
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775554L);
      Object object0 = new Object();
      range0.spliterator();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.173768833930095
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3795L), (-3347L));
      Range range1 = Range.of((-3993L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2548591174204087
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.of((-2233L), (-2233L));
      Range range0 = Range.of(4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.173768833930095
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Object object0 = new Object();
      Range range2 = Range.of((-1L));
      range0.equals(range2);
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      boolean boolean0 = range2.equals((Object) null);
      boolean boolean1 = range2.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9264175554979963
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-22L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.766074222097404
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775779L);
      long long0 = range0.getLength();
      assertEquals(9223372036854775779L, long0);
      
      Range range1 = Range.ofLength(9223372036854775779L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.263668997693055
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775801L);
      range0.complement(range0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775801L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -15 would make range [9223372036854775801 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8850829812280656
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 15525L, 9223372036854775573L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7685072768947623
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range0.toString();
      // Undeclared exception!
      try { 
        range0.split((-1696L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.902823587955807
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertSame(range0, range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1760828146595905
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Long long0 = new Long((-1372L));
      Range range0 = Range.of((-1372L));
      Range range1 = Range.of((-1372L));
      Long long1 = new Long((-1372L));
      Range range2 = Range.of((-1489L), (-1372L));
      boolean boolean0 = range1.equals(range2);
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.214496050675049
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-4342L), 250L);
      Range range1 = Range.of((-4342L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9785084205272367
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-1226L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.737140718477016
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483637L, 2147483637L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6722551274267974
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1885L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1885L), 2147483647L);
      range0.isSubRangeOf(range1);
      range0.complement(range1);
      long long1 = 32767L;
      range1.split(long1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7477418055719953
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.939099261288858
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(302L, 4294967306L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.993611130206723
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1881L, 1881L);
      Object object0 = new Object();
      Range range1 = Range.of(1881L, 1881L);
      Object object1 = new Object();
      List<Range> list0 = range0.split(1881L);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.043137604749473
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1881L, 1881L);
      Object object0 = new Object();
      Range range1 = Range.of(1881L, 1881L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(1882L, long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9361204069980924
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.972845711672121
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(32767L, 4294967295L);
      Range range1 = Range.of(range_CoordinateSystem0, 1851L, 4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.950391601025311
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9606885123462443
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(15525L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9683918915419634
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(302L, 302L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.190531662605923
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      range0.equals((Object) null);
      range0.toString();
      List<Range> list0 = range0.split(9223372036854775801L);
      range0.complementFrom(list0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0870423502280255
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3475L), 4294967295L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8389889331546985
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2895L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2895L), (-2895L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.93706654550099
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(32807L, 4294967295L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.93706654550099
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(302L, 4294967306L);
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7730363048778623
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 252L, 252L);
      Object object0 = new Object();
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.439655099597376
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(255L);
      range0.isSubRangeOf(range1);
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range range2 = Range.of((-588L));
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = 27L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range_Builder1.copy();
      Range range0 = null;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.912023005428145
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of((-1241L), 32767L);
      long long1 = 69L;
      List<Range> list0 = range0.split(69L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = (-532L);
      Range range1 = Range.of(range_CoordinateSystem0, (-532L), 1460L);
      range0.complement(range1);
      // Undeclared exception!
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1045204658906624
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.of(32767L, 4294967295L);
      Range.of((-922L), 32767L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.5098215102652612
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 288L, 32767L);
      List<Range> list0 = range0.split(1970L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 288 .. 32767 ]/SB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range range1 = Range.ofLength(1119L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list1.size());
      assertEquals(17, list0.size());
      assertFalse(list1.contains(range0));
      
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-1372L), (-1372L));
      Range.of((-1372L));
      Long long0 = new Long((-1372L));
      Range range1 = Range.of((-1372L), (-1372L));
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3326582208562296
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854774934L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.Builder range_Builder0 = new Range.Builder(1705L, 9223372036854774934L);
      range_Builder0.expandEnd(9223372036854774934L);
      Range range1 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 127L, 127L);
      boolean boolean0 = range2.endsBefore(range0);
      assertTrue(range2.isEmpty());
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      range1.toString(range_CoordinateSystem1);
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ -1 .. 0 ]/SB", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.93706654550099
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.788626037967039
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(4294967327L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.908318357393279
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-2147483638L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.6267050051529828
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-34L), 27L);
      Range range1 = Range.of((-34L));
      Range range2 = Range.ofLength(27L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-34L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range2);
      linkedList0.add(range0);
      List<Range> list0 = range2.complementFrom(linkedList0);
      assertFalse(list0.contains(range0));
      assertEquals(2, list0.size());
      
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      Object object0 = new Object();
      range0.equals(object0);
      range2.complement(range1);
      List<Range> list1 = range0.complement(range1);
      assertFalse(list1.contains(range0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.7985045625517033
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-34L), 27L);
      Range range1 = Range.of((-34L));
      Range range2 = Range.ofLength(27L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-34L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      linkedList0.add(range2);
      linkedList0.add(range0);
      assertTrue(linkedList0.contains(range0));
      
      range2.complementFrom(linkedList0);
      Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      Object object0 = new Object();
      range0.equals(object0);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-22L), (-22L));
      Range range1 = Range.of((-22L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854774878L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.0979446749710853
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.ofLength(65535L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 65535 .. 65535 ]/0B", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2210325327761833
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775805L), (-9223372036854775805L));
      List<Range> list0 = range0.complement(range0);
      boolean boolean0 = range0.equals(list0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7782254130184443
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(9223372036854773957L);
      Range range1 = Range.of(9223372036854773957L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.3194193019520934
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-32768L), 2147483647L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5478792367012026
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967330L);
      range0.split(4294967330L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967330L, 4294967330L);
      range0.intersects(range1);
      range0.toString();
      Range range2 = Range.parseRange("[ 0 .. 4294967330 ]/RB", range_CoordinateSystem1);
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.797252318469134
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775779L, 9223372036854775779L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775779L, (-2303L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2304 would make range [9223372036854775779 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1760828146595914
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L, 9223372036854775801L);
      range0.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775801L, (-9223372036854775808L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854775801 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.93706654550099
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.871649625135927
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getLength();
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(0L);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4926152625239095
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1322L);
      Range range1 = Range.of(1322L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(2342L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.201912755325046
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(4294967295L);
      boolean boolean1 = range2.equals(range0);
      assertFalse(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.491386704217048
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967330L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967330L, 9223372036854774934L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(2, list0.size());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.283990502025464
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      
      Range.of(399L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.7914209200851943
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9170466349593704
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 252L, 252L);
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      
      range0.spliterator();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.7685072768947623
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 278L, 278L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.8966379195843395
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.4444240449171186
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range range1 = Range.parseRange("[ 0 .. 0 ]/0B");
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.0594891092421146
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-2068L), (-962L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.823416998397392
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(9223372036854774934L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.9856309198952307
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(172L, 172L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(29837L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.1224245983330623
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Object object0 = new Object();
      Range range1 = Range.of((-1L));
      range0.endsBefore(range1);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.7410716301609974
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.313850366829765
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775805L), (-9223372036854775805L));
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9689526668537134
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(32767L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 4294967295L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.4003668186306633
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-22L), 173L);
      Range range1 = Range.of((-22L));
      range0.complement(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.078014567747475
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.941616952644221
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(471L, 471L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8938957824220086
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(4294967286L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8850829812280656
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854775801L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8096782340777837
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(10208L);
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.199090175967633
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 13L, 13L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(13L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(13L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(2147483647L, 2147483647L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.8114194983013423
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getEnd();
      String string0 = range0.toString();
      assertEquals("[ -128 .. -128 ]/0B", string0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.097865394722286
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(4360L);
      Range range1 = Range.of(4360L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1188834054892975
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of((-23L), 954L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.059354848590835
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(2691L);
      List<Range> list0 = range0.split(2691L);
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.431369070377998
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775801L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.5553480614894135
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.complement(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.99150146857535
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(4L, 4L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.split(4L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.9868414280236792
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.of((-1L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.0967875911748948
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-1946L), 9223372036853928830L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1521L), (-1521L));
      Range range1 = Range.ofLength(357L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.7284075400342904
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(4294967327L);
      range0.getEnd();
      Object object0 = new Object();
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.897932597473466
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.getEnd();
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.parseRange("9]0HKzrK$NHm@%Qk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 9]0HKzrK$NHm@%Qk into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.060287092608695
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Object object0 = new Object();
      Range range0 = Range.of((-1L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9470047701612976
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 598L, 598L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(598L, long0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 189L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.0431376047494716
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-22L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1435434635177
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L);
      List<Range> list0 = range0.complement(range0);
      Object object0 = new Object();
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertFalse(list1.isEmpty());
      
      Range range1 = Range.of(9223372036854775801L);
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.7782254130184443
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(9223372036854774934L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.444608270755516
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("6\"DBWF'~sy3rh.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 6\"DBWF'~sy3rh. into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.8712202522291124
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967330L, 4294967330L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967330L, 4294967330L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.0870423502280255
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-2757L), (-2757L));
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.2463841835536593
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(255L, 255L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.9786447802782234
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.0351972967827754
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-1945L), 33690L);
      range0.getLength();
      Object object0 = new Object();
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.4965075614664793
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(4360L);
      Range range1 = Range.of(4360L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(2147483647L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.411977298926773
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(0L);
      Range range1 = Range.of(658L, 658L);
      Range range2 = range1.intersection(range0);
      Object object0 = new Object();
      range0.equals(object0);
      List<Range> list0 = range0.complement(range2);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.9552088755878527
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(2147483647L, 2147483647L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775286L), (-9223372036854775286L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2466L, (-1622L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.649158683274018
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.ofLength(4360L);
      Range.of(4360L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1140L, 2147484789L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1140L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.072411518778937
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.of(9223372036854775779L, 9223372036854775779L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(9223372036854775779L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(0L, 0L);
      Object object0 = new Object();
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.9761388013384353
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(0L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.7709738809556863
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(4360L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 4360 ]/RB", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.031514648030985
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(9223372036854775779L, 9223372036854775779L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.0758406137347563
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(9223372036854774880L, 9223372036854774880L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-128L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.728352370092261
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.ofLength((-247L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.6635616461296423
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.startsBefore(range0);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.871649625135927
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.99150146857535
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      List<Range> list0 = range0.split(1L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.0870423502280255
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-2147485273L));
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.split((-2147485273L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.1709395301969012
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775801L);
      Range range1 = Range.of(9223372036854775801L, 9223372036854775801L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.8647385121905686
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.spliterator();
      range_Builder0.expandEnd(1705L);
      Range range0 = Range.of((-3234L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-2946L), (-2946L));
      String string0 = range0.toString();
      assertEquals("[ -2946 .. -2946 ]/0B", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Z*", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Z* into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(27L);
      range_Builder0.copy();
      range_Builder0.shift(27L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(27L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = range0.getBegin();
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getBegin();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("(d+)s*,s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.(d+)s*,s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1680L, 1680L);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.9412316867217543
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-32769L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of((-1788L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((-203L), (-2632L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
