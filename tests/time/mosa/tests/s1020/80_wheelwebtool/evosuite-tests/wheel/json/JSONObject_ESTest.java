/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 05:15:23 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = Double.NaN;
      Double double1 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double1, 64, (-3159));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7111733022888664
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Float float1 = new Float((double) 0.0F);
      JSONObject jSONObject1 = new JSONObject(float1, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("spl", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("spl");
      assertNotSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9577159647729863
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getadd");
      jSONObject0.toString();
      jSONObject0.optDouble("getadd", 152.88151348718034);
      JSONArray jSONArray0 = jSONObject0.names();
      String string0 = jSONObject0.toString(100, 100);
      JSONObject jSONObject1 = jSONObject0.accumulate("{\"java.lang.String@0000000004\":[java.lang.Byte@0000000022,java.lang.Byte@0000000023,java.lang.Byte@0000000024,java.lang.Byte@0000000025,java.lang.Byte@0000000026,java.lang.Byte@0000000027],\"java.lang.String@0000000019\":\"java.lang.Class@0000000020\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}", jSONArray0);
      jSONObject0.put("getadd", (-18603977));
      jSONObject1.getLong("getadd");
      try { 
        jSONObject0.getJSONArray(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n                                                                                                                                                                                                        \\\"java.lang.String@0000000004\\\": [\\n                                                                                                                                                                                                                                                                                                            java.lang.Byte@0000000030,\\n                                                                                                                                                                                                                                                                                                            java.lang.Byte@0000000031,\\n                                                                                                                                                                                                                                                                                                            java.lang.Byte@0000000032,\\n                                                                                                                                                                                                                                                                                                            java.lang.Byte@0000000033,\\n                                                                                                                                                                                                                                                                                                            java.lang.Byte@0000000034,\\n                                                                                                                                                                                                                                                                                                            java.lang.Byte@0000000035\\n                                                                                                                                                                                                        ],\\n                                                                                                                                                                                                        \\\"java.lang.String@0000000019\\\": \\\"java.lang.Class@0000000020\\\",\\n                                                                                                                                                                                                        \\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003\\n                                                                                                    }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2838229612915466
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("9@[,qqosh1A@", true);
      JSONObject jSONObject2 = jSONObject1.put("9@[,qqosh1A@", true);
      jSONObject2.optDouble("9@[,qqosh1A@", (-3295.058499634012));
      jSONObject2.optDouble("9@[,qqosh1A@");
      jSONObject2.keys();
      jSONObject2.keys();
      jSONObject2.optJSONObject("9@[,qqosh1A@");
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      jSONObject0.put("A:dA;[fhm>9I`1w2", (Collection) linkedList1);
      jSONObject0.put("<l#X2VWi#Hp+A", (Collection) linkedList0);
      jSONObject0.optBoolean("9@[,qqosh1A@");
      try { 
        jSONObject1.getJSONObject(" m.k.iI4*{x6V~*Gr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" m.k.iI4*{x6V~*Gr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{n]+OK&\u0007md_FuO");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {n]+OK&\u0007md_FuO
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      hashMap0.put((Integer) null, (Integer) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("*A%>_t", (Collection) null);
      jSONObject0.toString((-1769), 123);
      jSONObject1.accumulate("*A%>_t", "*A%>_t");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("*A%>_t");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Boolean.valueOf("_Sf]5Waq");
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(boolean0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5223033237643797
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-1232L));
      jSONObject0.getInt("");
      String string0 = jSONObject0.toString((-475), (-475));
      assertNotNull(string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.963600009496439
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_{OC~+</IRNzCK";
      stringArray0[1] = "fD`(\"uXC.'JxllVf";
      stringArray0[2] = "KzZ6qG";
      stringArray0[3] = "getmin";
      stringArray0[4] = "kGf'U,K/EW\tiB";
      stringArray0[5] = "lU &[(";
      stringArray0[6] = "getmin";
      stringArray0[7] = "wheel.json.JSONTokener";
      stringArray0[8] = "Expected a ',' or '}'";
      JSONObject jSONObject1 = new JSONObject(long0, stringArray0);
      String string0 = JSONObject.quote("_{OC~+</IRNzCK");
      assertEquals("\"_{OC~+<\\/IRNzCK\"", string0);
      
      int int0 = jSONObject1.optInt("get");
      assertEquals(0, int0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3708442865626544
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-20633121));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "nu";
      stringArray0[1] = "getgetJSONObject";
      stringArray0[2] = "1<wud$;/GcLG%2ce";
      stringArray0[3] = ".0eu*ZzW.qA5Jz?/M";
      stringArray0[4] = "JSONArray[";
      stringArray0[5] = "Expected a ',' or '}'";
      JSONObject jSONObject1 = new JSONObject(integer0, stringArray0);
      jSONObject0.putOpt("1<wud$;/GcLG%2ce", "JSONArray[");
      String string0 = JSONObject.quote("getoptJSONObject");
      assertEquals("\"getoptJSONObject\"", string0);
      
      String string1 = JSONObject.doubleToString((-20633121));
      assertEquals("-2.0633121E7", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2962254658226184
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("000", "000");
      jSONObject1.optInt("000", 264);
      jSONObject1.optInt("000", (-2167));
      Byte byte0 = new Byte((byte)49);
      try { 
        jSONObject1.getBoolean("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2020732677842774
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-36));
      JSONObject jSONObject1 = jSONObject0.putOpt("9@[,qqosh1A@", byte0);
      JSONObject.doubleToString((short) (-538));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.putOpt("9@[,qqosh1A@", jSONArray0);
      jSONObject0.has("9@[,qqosh1A@");
      try { 
        jSONObject0.getString("-538");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-538\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4630877585747855
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("0", (Collection) null);
      jSONObject1.getString("0");
      try { 
        jSONObject1.getBoolean("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.568413258053965
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 54);
      int int0 = jSONObject1.optInt("A JSONArray text must start with '['");
      assertEquals(54, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.addFirst(integer0);
      String string0 = JSONObject.valueToString(linkedList0, 1, 70);
      assertNotNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.836469002593375
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Double.sum((-808.740537146904), (-808.740537146904));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      Byte byte0 = new Byte((byte)123);
      JSONObject jSONObject3 = jSONObject0.putOpt("issubList", byte0);
      jSONObject3.optBoolean("", false);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject4 = new JSONObject();
      jSONObject0.opt("");
      Byte byte1 = new Byte((byte)45);
      Float float0 = new Float((double) (byte)123);
      JSONObject.getNames((Object) float0);
      jSONObject2.optString("gettoArray", "");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5909846675318025
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-36));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("getclear", object0);
      String string0 = JSONObject.doubleToString((byte) (-36));
      Object object1 = JSONObject.NULL;
      JSONObject.getNames(object1);
      jSONObject0.isNull("getclear");
      String string1 = jSONObject1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.quote((String) null);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put("to", jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.getJSONObject("to");
      jSONObject2.optBoolean("}z`T^=/I+?}fG");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject3 = jSONObject1.put("\"\"", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject3);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject.quote((String) null);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put((String) null, (JSONObject) null);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject1.names();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4399326695582015
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("' and instead saw '", false);
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("' and instead saw '", 1817L);
      long long0 = jSONObject1.getLong("' and instead saw '");
      assertEquals(1817L, long0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4968112396557927
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("000", "000");
      jSONObject1.opt("000");
      Byte byte0 = new Byte((byte)9);
      jSONObject1.getLong("000");
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject1.getBoolean("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4497927527284427
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      int int0 = jSONObject1.getInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1868601258864917
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("W1J(*L^.JK", jSONArray1);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iscompare", (-480.6765753102719));
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getJSONObject("iscompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iscompare\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0366739742537465
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.284717215706928
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("3$u", false);
      JSONObject jSONObject2 = jSONObject1.put("9@[,qqosh1A@", true);
      double double0 = jSONObject2.optDouble("3$u", (-3295.058499634012));
      assertEquals((-3295.058499634012), double0, 0.01);
      
      jSONObject2.keys();
      jSONObject2.keys();
      jSONObject2.optJSONObject("9@[,qqosh1A@");
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      jSONObject0.put("A:dA;[fhm>9I`1w2", (Collection) linkedList1);
      jSONObject0.put("<l#X2VWi#Hp+A", (Collection) linkedList0);
      jSONObject2.toString((int) (short) (-1782), 505);
      boolean boolean0 = jSONObject0.optBoolean("3$u");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4403155898639302
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.putOpt("{}", boolean0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = jSONObject1.getBoolean("{}");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0093994817375425
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2007.2701982443905);
      String string0 = "FOrB<;|";
      JSONObject jSONObject1 = jSONObject0.putOpt("FOrB<;|", "FOrB<;|");
      try { 
        jSONObject1.getInt("FOrB<;|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FOrB<;|\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6022805041885344
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put(".u6cV4T>", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getnames", "getnames");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("isnames", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.append("isnames", linkedList0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.125311919071928
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      jSONObject1.optDouble("", (-1.0));
      Double.sum(2006.6138068361, (-809.0));
      JSONObject.quote(")h_a7bhH@wT~w");
      jSONObject1.put(")h_a7bhH@wT~w", (Collection) null);
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.552013861431253
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("'");
      assertEquals(0, int0);
      
      jSONObject0.put("'", 1762.2359965895967);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      
      double double0 = jSONObject0.optDouble("'");
      assertEquals(1762.2359965895967, double0, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iscopyValueOf", (-2442));
      JSONObject jSONObject2 = jSONObject1.accumulate("iscopyValueOf", jSONObject0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8526451698735795
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = (-6429.50860992);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "";
      Double double1 = new Double(Double.NaN);
      try { 
        jSONObject1.putOpt("m$lon`@OKE2XBRd", double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.076184082387888
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.keys();
      boolean boolean0 = jSONObject0.optBoolean("%oA");
      assertFalse(boolean0);
      
      jSONObject0.remove("%oA");
      Short.toUnsignedInt((short)58);
      JSONObject jSONObject1 = new JSONObject();
      Long long0 = new Long(58);
      JSONObject jSONObject2 = jSONObject0.putOpt("%oA", long0);
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(1, stringArray0.length);
      
      Byte byte0 = new Byte((byte)69);
      Boolean boolean1 = Boolean.valueOf("9@[,qqosh1A@");
      JSONObject jSONObject3 = jSONObject2.append("'WP+M20wMnvGmqeF", boolean1);
      long long1 = jSONObject0.optLong("%oA");
      assertEquals(58L, long1);
      
      jSONObject3.toString((int) (short)58);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.286646862731373
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-36));
      Object object0 = new Object();
      jSONObject0.putOpt("JSON does not allow non-finite numbers.", object0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("<,KS'Q{Zy]GL'", (Collection) linkedList0);
      // Undeclared exception!
      jSONObject0.toString((-2319), 8192);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4672066516557623
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("9@[,qqosh1A@", short0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      Double.isFinite((byte)69);
      jSONObject1.getDouble("9@[,qqosh1A@");
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0, stringArray0);
      jSONObject2.optBoolean("9@[,qqosh1A@");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7862471159089246
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Byte byte0 = new Byte((byte)31);
      jSONObject0.optDouble("\r", (double) (byte)31);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      jSONObject0.names();
      Short short0 = new Short((short)20);
      jSONObject0.append("] is not a number.", "!`Uh}97m/vYr");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("] is not a number.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6157969380138257
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject.doubleToString(281.1);
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "281.1";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("281.1", (Collection) linkedList0);
      jSONObject2.put("#fQo{04mH)+`z%t*", true);
      JSONArray jSONArray0 = jSONObject2.optJSONArray("281.1");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.421847739438074
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("P$[_+^R", true);
      jSONObject0.get("P$[_+^R");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.283284892956868
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.doubleToString((-1.0));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.toString((int) (short) (-5086), (-1247));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      jSONObject2.optBoolean("4MFlV");
      Float float0 = new Float((-885.4178F));
      jSONObject1.accumulate("!LwZ|PQw-6s&E+oB5Zo", "!LwZ|PQw-6s&E+oB5Zo");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{mV,PKN9GwQX(wd");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {mV,PKN9GwQX(wd
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.127107941237697
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      int int0 = jSONObject0.optInt("isreverseBytes");
      assertEquals(0, int0);
      
      JSONObject jSONObject1 = jSONObject0.put("isreverseBytes", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6935944542363104
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("9@[,qqosh1A@", short0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optLong("9@[,qqosh1A@");
      boolean boolean0 = jSONObject1.optBoolean("9@[,qqosh1A@");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", (-764L));
      long long0 = jSONObject0.optLong("false", (-1513L));
      assertEquals((-764L), long0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.004186849033182
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "cu&L2ioo R0");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5719152144530921
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject1 = new JSONObject();
      Short short0 = new Short((short) (-1782));
      jSONObject1.putOpt("", short0);
      JSONObject.getNames(jSONObject0);
      Byte byte0 = new Byte((byte)63);
      JSONObject jSONObject2 = jSONObject1.append("9@[,qqosh1A@", "9@[,qqosh1A@");
      jSONObject1.optLong("");
      StringWriter stringWriter0 = new StringWriter((byte)63);
      jSONObject2.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8377001360170975
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.putOpt("Ex.>n#vs^NHz", "Ex.>n#vs^NHz");
      try { 
        jSONObject2.getDouble("Ex.>n#vs^NHz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ex.>n#vs^NHz\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.281534933207205
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Short.compare((short)57, (short)57);
      jSONObject0.putOpt("9@[,qqosh1A@", "9@[,qqosh1A@");
      JSONObject.doubleToString((-1.0));
      JSONObject.getNames((Object) "9@[,qqosh1A@");
      jSONObject0.isNull("9@[,qqosh1A@");
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.3459473867940948
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("spl", hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      String string0 = jSONObject0.toString(92, (-38489319));
      String string1 = JSONObject.valueToString("{\"java.lang.String@0000000002\": {}}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject.valueToString(hashMap0, 92, 92);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        Float.valueOf("{}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject((String) null);
      jSONObject0.has("F.R<1L$z62kIo7n\"");
      boolean boolean0 = jSONObject0.optBoolean("u5tKRZ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("getcopyValueOf", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6028169608189446
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("=b#5P)b\"T%", 1L);
      assertEquals(1L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7463572623338592
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("isdoubleToLongBits");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.4041468301368762
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "opt");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("opt", (Collection) linkedList0);
      jSONObject0.toString(10, 10);
      jSONObject1.toString();
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8136605216916037
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Y{a*w?l*(7U__!(", "Y{a*w?l*(7U__!(");
      String string0 = jSONObject1.toString(2800, 2800);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0276242004980904
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[10];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      Byte byte0 = new Byte((byte)65);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~up");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~up
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Integer integer0 = new Integer((-732));
      jSONObject0.accumulate("par", hashMap0);
      Integer integer1 = Integer.getInteger("", integer0);
      hashMap0.put((Boolean) null, integer1);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      jSONObject0.put("HE", false);
      Long long0 = new Long(1785L);
      JSONObject jSONObject2 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject3 = jSONObject1.append("oiBL4WBTp]tTJT<}", "n2-MR 5S");
      // Undeclared exception!
      try { 
        jSONObject3.toString(1227);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("spl", hashMap0);
      JSONObject.getNames((Object) hashMap0);
      try { 
        jSONObject0.getLong("spl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"spl\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.append("quo", "quo");
      int int0 = jSONObject0.optInt("quo");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.testValidity(jSONObject1);
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.468942224565462
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.get("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.275544458504218
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(1015, (-822));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1316), 730);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = new Double((-1857.168000190734));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-909), 300);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.6432374577951014
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      // Undeclared exception!
      jSONObject0.toString(4955);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.2165277589696515
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "B>/8kir6q  0MBVN:");
      jSONObject0.toString((-12473307), (-12473307));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.2821021481816806
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.doubleToString((-1.0));
      Double.sum(0.0, 0.0);
      JSONObject jSONObject1 = jSONObject0.put("-1", (Collection) null);
      JSONObject.doubleToString((-1.0));
      JSONObject.getNames(object0);
      jSONObject1.getJSONArray("-1");
      jSONObject1.optLong("-1", 0L);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject.quote("");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "\b");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("is", (-1026L));
      assertEquals((-1026L), long0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("min", 0L);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = JSONObject.quote("vst[``l^&");
      assertEquals("\"vst[``l^&\"", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.4726145613275863
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      jSONObject0.toString(50);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0, 533, 68);
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.0538466947145944
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedInt((short) (-1782));
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Float float0 = new Float((-574.43F));
      jSONObject0.accumulate("9@[,qqosh1A@", float0);
      jSONObject0.optString("9@[,qqosh1A@", "] is not a number.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("0<fIMhJS");
      assertEquals("\"0<fIMhJS\"", string0);
      
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      String string1 = jSONObject1.optString("\"0<fIMhJS\"", "0<fIMhJS");
      assertEquals("0<fIMhJS", string1);
      
      String string2 = jSONObject0.toString();
      assertEquals("{}", string2);
      assertNotNull(string2);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.6673223188492536
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("spl", hashMap0);
      JSONObject.getNames(jSONObject1);
      jSONObject0.optString("spl");
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject.testValidity(jSONObject2);
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate(".Is9I ", object0);
      jSONObject1.putOpt(".Is9I ", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "tIFRAO[oP0+/9p{J[B");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      jSONObject0.put("R+E^EMWrSLk", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 3461, 3461);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.181790355871698
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject.quote("4^]n2D:*j+5mkE");
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      hashMap0.put((JSONObject) null, "JSONArray initial value should be a string or collection or array.");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\"4^]n2D:*j+5mkE\"", (Map) hashMap0);
      JSONObject.doubleToString(669.3292);
      // Undeclared exception!
      try { 
        jSONObject0.toString(1865, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("sp", (-176));
      assertEquals((-176), int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.quote("vW/~A3udto;mdsV+U-/");
      assertEquals("\"vW/~A3udto;mdsV+U-/\"", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Byte byte0 = new Byte((byte)91);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("isput");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.2761809225159486
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("000", "000");
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.remove("000");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.push("FcXKVMfA1vkC/yMi");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Missing value", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      Object object0 = JSONObject.NULL;
      String string0 = jSONObject0.toString((-25));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getwait", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("._u;+L?>av%'mQk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"._u;+L?>av%'mQk\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.append((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.accumulate("WDc37RmrJ", "WDc37RmrJ");
      try { 
        jSONObject0.append("WDc37RmrJ", writer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[WDc37RmrJ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.quote("B>/8kir6q  0MBVN:");
      assertEquals("\"B>/8kir6q  0MBVN:\"", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 51, 414);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.quote("M,1Y\"jxs;_");
      assertEquals("\"M,1Y\\\"jxs;_\"", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("gettoLowerCase");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Long long0 = new Long((-22L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("RSBFwv:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RSBFwv:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("`jlXz%PJ5Z{1`4");
      assertEquals("", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Byte byte0 = new Byte((byte)91);
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("?=q7aRN q_epV\"(", true);
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("isintern", false);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("spl", hashMap0);
      Byte byte0 = new Byte((byte)49);
      try { 
        jSONObject0.getBoolean("spl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"spl\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double((-1830.2));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a JSONArray.", (Object) "] is not a JSONArray.");
      JSONObject.valueToString(jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("] is not a JSONArray.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.put("{}", 7);
      assertEquals(1, jSONObject0.length());
      
      int int0 = jSONObject0.getInt("{}");
      assertEquals(7, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, 2757.9784516);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "'%c0");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("'%c0", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("B>/8kir6q  MBxVNl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of B>/8kir6q  MBxVNl
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null, 1783);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float((double) 9);
      String string0 = JSONObject.valueToString(float0, 9, 9);
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-1559), (-1559));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-475), (-475));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("$e)2q>3d+O}k!");
      assertEquals("\"$e)2q>3d+O}k!\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = jSONObject0.isNull("ueWF#");
      assertTrue(boolean0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(".c|&_");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
