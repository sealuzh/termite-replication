/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 05:31:11 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SGDText;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.pmml.consumer.SupportVectorMachineModel;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.DiscreteEstimator;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2768982671214757
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.numFalsePositives(99);
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.iterator();
      Instances instances1 = new Instances(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1506.59685);
      SparseInstance sparseInstance0 = new SparseInstance((-1506.59685), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.2000000029802322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6377910078115865
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedRecall();
      evaluation1.numFalseNegatives(1);
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation1.falseNegativeRate(1963);
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.sizeOfPredictedRegions();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.KBInformation();
      evaluation0.numTrueNegatives((-2));
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBInformation();
      Utils.SMALL = (double) (-1);
      evaluation0.numTrueNegatives((-1));
      evaluation0.toSummaryString(" seconds", false);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1090), 45.39076351288792);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1090
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.946194024344661
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      double double0 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.evaluateModelOnce(0.9189385332046728, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.285062537731162
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2861.272));
      evaluation0.pctCorrect();
      int int0 = (-2719);
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(1748);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.289344010290857
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      evaluation0.numFalseNegatives(400);
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.falseNegativeRate(1);
      evaluation0.toClassDetailsString("@data");
      evaluation1.falsePositiveRate((-1869));
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5248577577845075
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation1.setPriors(instances0);
      evaluation0.unclassified();
      evaluation0.toSummaryString(false);
      evaluation0.correlationCoefficient();
      // Undeclared exception!
      try { 
        evaluation1.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.49738219895287955
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation0.m_SumSqrErr;
      String string0 = Evaluation.getGlobalInfo(m5Rules0);
      assertEquals("\nSynopsis for weka.classifiers.rules.M5Rules:\n\nGenerates a decision list for regression problems using separate-and-conquer. In each iteration it builds a model tree using M5 and makes the \"best\" leaf into a rule.\n\nFor more information see:\n\nGeoffrey Holmes, Mark Hall, Eibe Frank: Generating Rule Sets from Model Trees. In: Twelfth Australian Joint Conference on Artificial Intelligence, 1-12, 1999.\n\nRoss J. Quinlan: Learning with Continuous Classes. In: 5th Australian Joint Conference on Artificial Intelligence, Singapore, 343-348, 1992.\n\nY. Wang, I. H. Witten: Induction of model trees for predicting continuous classes. In: Poster papers of the 9th European Conference on Machine Learning, 1997.", string0);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      double double2 = evaluation3.errorRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.311990244572817
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString("TipText", false);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9469944186292576
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      evaluation0.toSummaryString();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBInformation();
      evaluation0.SFPriorEntropy();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0281155268740174
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 487;
      doubleArray0[1] = (double) 487;
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0207938716603193
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      // Undeclared exception!
      try { 
        evaluation2.weightedFalsePositiveRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.717020786717215
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      CostMatrix costMatrix0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation1.updateStatsForClassifier((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.610674681242842
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toClassDetailsString();
      double double0 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      double double1 = evaluation1.m_MissingClass;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      evaluation0.updateMargins(doubleArray1, 6, 0.0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.796373229516646
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.m_SumSqrErr;
      testInstances1.getRelationalClassFormat();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation2 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[6][3];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 6;
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = (double) (-2);
      doubleArray1[4] = 4.9E-324;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) (-2);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) 487;
      doubleArray2[2] = 4.9E-324;
      doubleArray2[3] = (double) (-2);
      doubleArray2[4] = 1908.9177170132518;
      doubleArray2[5] = (double) (-1);
      doubleArray2[6] = (double) (-2);
      doubleArray2[7] = (double) (-2);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = 100.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (double) 6;
      doubleArray5[1] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (double) 487;
      doubleArray6[2] = 4.9E-324;
      doubleArray0[5] = doubleArray6;
      evaluation2.m_ConfusionMatrix = doubleArray0;
      evaluation2.falsePositiveRate(105);
      assertEquals(0.7378209293413972, evaluation2.weightedFalsePositiveRate(), 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.KBRelativeInformation();
      evaluation0.areaUnderROC(0);
      double double2 = evaluation0.unclassified();
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6292635125013324
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falsePositiveRate(0);
      testInstances0.setClassIndex(0);
      evaluation1.trueNegativeRate((-2));
      evaluation0.matthewsCorrelationCoefficient(0);
      double[] doubleArray0 = new double[6];
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.331379633350042
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Incorrectly Classified|dnstances   ";
      String[] stringArray1 = new String[0];
      Evaluation.main(stringArray1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("Incorrectly Classified|dnstances   ");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      textDirectoryLoader0.getStructure();
      evaluation0.numFalsePositives(1899);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      SGDText sGDText0 = new SGDText();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation2 = new Evaluation(instances0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".arff", arrayList0, 1899);
      try { 
        evaluation2.crossValidateModel((Classifier) sGDText0, instances1, 62, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1526254461503207
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Unclassified = (-1.0E-9);
      evaluation0.numFalsePositives(459);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        Evaluation.handleCostOption("E$-f'(i<x", (-639));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.264731562125173
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falsePositiveRate(0);
      evaluation1.numFalseNegatives((-147));
      evaluation1.makeDistribution(1);
      try { 
        evaluation0.evaluateModelOnce((Classifier) gaussianProcesses0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9397329988692418
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.numFalseNegatives(497);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = evaluation2.makeDistribution(1.1000000014901161);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostMatrix costMatrix0 = null;
      int int0 = 487;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.falsePositiveRate(0);
      try { 
        evaluation2.evaluateModel((Classifier) gaussianProcesses0, instances0, (Object[]) gaussianProcesses0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1));
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.KBInformation();
      evaluation0.numTrueNegatives((-1));
      evaluation0.toSummaryString(" seconds", false);
      evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4268903753039166
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      Evaluation evaluation1 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      evaluation0.kappa();
      evaluation1.coverageOfTestCasesByPredictedRegions();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray1, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1738903444680315
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      String[] stringArray0 = new String[4];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation.main(stringArray0);
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.m_ClassIsNominal = false;
      evaluation1.SFMeanSchemeEntropy();
      try { 
        evaluation2.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9354449440001988
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation0.m_SumSqrErr;
      evaluation1.setPriors(instances0);
      double double2 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.SFMeanSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_MissingClass = (-1.0);
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      double double0 = evaluation0.SFMeanEntropyGain();
      evaluation0.confusionMatrix();
      double double1 = evaluation0.weightedRecall();
      assertEquals(double1, double0, 0.01);
      
      Integer integer0 = new Integer(101);
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumSqrPredicted;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      try { 
        evaluation1.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7638558576407304
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "graph");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives(494);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 494);
      evaluation0.pctCorrect();
      double double0 = evaluation1.weightedRecall();
      double double1 = evaluation1.numFalseNegatives(490);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.equals((Object) null);
      double double2 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      gaussianProcesses0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      evaluation0.areaUnderROC(1);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.822308707956764
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      double double0 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double double2 = evaluation1.precision(1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = testInstances0.generate(".arff");
      instances1.removeAll(instances0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.toString();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-338.1));
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = testInstances0.generate(".arff");
      instances1.removeAll(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation2.SFMeanSchemeEntropy();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = evaluation1.KBMeanInformation();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation2.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.3099760230105293
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation0.numFalseNegatives(485);
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6832751137819613
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation.getGlobalInfo(randomCommittee0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString();
      evaluation0.sizeOfPredictedRegions();
      evaluation1.KBInformation();
      try { 
        evaluation0.updateStatsForPredictor(Double.NaN, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.numFalsePositives((-963));
      try { 
        evaluation0.toMatrixString("@data");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9410068610812892
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "graph");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives(494);
      Evaluation evaluation2 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation2.evaluationForSingleInstance((Classifier) adaBoostM1_0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation3.crossValidateModel("weightThresholdTipText", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: weightThresholdTipText
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.49056603773584906
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.makeDistribution((-2));
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.157059858867681
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.iterator();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.SFEntropyGain();
      double double1 = evaluation0.numFalsePositives(0);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray0 = evaluation0.makeDistribution(4.9E-324);
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.605177508522958
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      evaluation0.weightedMatthewsCorrelation();
      try { 
        evaluation0.evaluateModelOnce((double) (-1), (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.340234055942502
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation.getGlobalInfo(randomCommittee0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.precision(2);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "seedTipText");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.sizeOfPredictedRegions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.weightedRecall();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      ArrayDeque<Object> arrayDeque1 = arrayDeque0.clone();
      arrayDeque1.clone();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.deleteStringAttributes();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1829));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1829
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.190529379512825
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("XOW\\)k,1\\B");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "distributionForInstance");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.SFEntropyGain();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(104);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toClassDetailsString("V2N;L");
      evaluation1.numFalsePositives(2);
      evaluation0.toMatrixString(".arff");
      try { 
        Evaluation.handleCostOption("XOW)k,1B", 2413);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numFalsePositives((-2680));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.correct();
      double double2 = evaluation1.precision((-1031));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.incorrect();
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7289398113804864
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.KBInformation();
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.weightedFalseNegativeRate();
      double double2 = evaluation0.weightedFalsePositiveRate();
      double double3 = evaluation0.weightedPrecision();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.iterator();
      testInstances0.toString();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numFalsePositives(5);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.unweightedMacroFmeasure();
      double double3 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.correct();
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(textDirectoryLoader1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.pctCorrect();
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.errorRate();
      assertEquals(double1, double0, 0.01);
      assertTrue(evaluation2.equals((Object)evaluation0));
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.4807234818382575
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.KBInformation();
      evaluation0.numTrueNegatives((-1));
      double double3 = evaluation0.trueNegativeRate(1025);
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.m_SumAbsErr;
      double double5 = evaluation0.areaUnderPRC(1025);
      assertEquals(double5, double1, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_MissingClass = (-1.0);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      
      double double0 = evaluation0.SFMeanEntropyGain();
      evaluation0.confusionMatrix();
      double double1 = evaluation0.weightedRecall();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      try { 
        evaluation0.updateStatsForPredictor((-2), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.883591658417188
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      String string0 = evaluation1.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.setPriors(instances0);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      String string0 = Evaluation.getGlobalInfo(randomCommittee0);
      assertEquals("\nSynopsis for weka.classifiers.meta.RandomCommittee:\n\nClass for building an ensemble of randomizable base classifiers. Each base classifiers is built using a different random number seed (but based one the same data). The final prediction is a straight average of the predictions generated by the individual base classifiers.", string0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string1 = evaluation1.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation1.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.m_Unclassified;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.truePositiveRate(0);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double[] doubleArray0 = evaluation2.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(Double.NaN, evaluation2.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = (-1.0);
      evaluation0.m_MissingClass = (-1.0);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.107031000443304
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedRecall();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      evaluation0.weightedMatthewsCorrelation();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.m_SumPriorAbsErr;
      evaluation2.falsePositiveRate(0);
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.trueNegativeRate((-2));
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(0, charArray0, 110);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      double double1 = evaluation0.numFalsePositives((-759));
      assertEquals(double1, double0, 0.01);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)9;
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '~';
      charArray0[2] = '\"';
      charArray0[3] = 'k';
      charArray0[4] = 'U';
      String string0 = evaluation0.num2ShortID(26, charArray0, (byte)9);
      assertEquals("       U~", string0);
      
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte)100;
      byteArray0[8] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.KBInformation();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      DatabaseLoader databaseLoader1 = new DatabaseLoader();
      databaseLoader1.getNextInstance(instances0);
      double double4 = evaluation0.precision(880);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numFalsePositives((-1));
      ArrayList<SupportVectorMachineModel> arrayList0 = new ArrayList<SupportVectorMachineModel>();
      instances0.retainAll(arrayList0);
      evaluation0.getRevision();
      double double1 = evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.m_SumPriorEntropy;
      evaluation0.SFSchemeEntropy();
      double double3 = evaluation0.weightedFMeasure();
      assertEquals(double3, double1, 0.01);
      
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      String string0 = Evaluation.getGlobalInfo(filteredClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.FilteredClassifier:\n\nClass for running an arbitrary classifier on data that has been passed through an arbitrary filter. Like the classifier, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      double double0 = evaluation1.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.totalCost();
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.areaUnderROC(27);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5212022523213995
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      double double0 = evaluation0.m_Correct;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.truePositiveRate(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 1;
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-542.0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.5762328026233137
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      instances0.iterator();
      testInstances1.toString();
      Instances instances2 = new Instances(instances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalSizeOfRegions = (double) (-2);
      evaluation0.SFEntropyGain();
      evaluation0.numFalsePositives((-2));
      evaluation0.toSummaryString();
      evaluation0.sizeOfPredictedRegions();
      double double0 = evaluation0.KBInformation();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.sizeOfPredictedRegions(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.numFalsePositives((-586));
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double2, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(textDirectoryLoader1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2716.4436849735, doubleArray0);
      RandomForest randomForest0 = new RandomForest();
      randomForest0.setNumFeatures(6);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) randomForest0, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6576044965456926
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation1.sizeOfPredictedRegions();
      double double1 = evaluation1.m_SumPriorEntropy;
      double double2 = evaluation1.SFSchemeEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedFMeasure();
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      String string1 = Evaluation.getGlobalInfo(filteredClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.FilteredClassifier:\n\nClass for running an arbitrary classifier on data that has been passed through an arbitrary filter. Like the classifier, the structure of the filter is based exclusively on the training data and test instances will be processed by the filter without changing their structure.", string1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      int int0 = 2;
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(480);
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores((double[]) null, (double[]) null, 494);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      LinkedHashSet<TechnicalInformationHandlerJavadoc> linkedHashSet0 = new LinkedHashSet<TechnicalInformationHandlerJavadoc>();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      linkedHashSet0.add(technicalInformationHandlerJavadoc0);
      Instances instances0 = testInstances0.generate("Whether to delete empty bins after discretization.");
      instances0.removeAll(linkedHashSet0);
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      double double0 = evaluation1.m_SumPriorEntropy;
      double[][] doubleArray0 = evaluation2.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.confusionMatrix();
      evaluation0.areaUnderROC(100000);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7281676106082857
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.iterator();
      testInstances0.toString();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numFalsePositives(5);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.sizeOfPredictedRegions();
      evaluation0.KBInformation();
      double double2 = evaluation0.SFPriorEntropy();
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedTruePositiveRate();
      double double4 = evaluation0.weightedAreaUnderROC();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      evaluation0.numFalsePositives((-1));
      evaluation0.sizeOfPredictedRegions();
      evaluation0.KBInformation();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 0.0;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1));
      evaluation0.numFalsePositives((-272));
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.weightedRecall();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6051896643658932
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.weightedAreaUnderPRC();
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation1.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double2 = evaluation1.pctUnclassified();
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4657809345925379
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      double double0 = evaluation1.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(487);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.falsePositiveRate(0);
      try { 
        Evaluation.handleCostOption("@relation", (-7));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.numFalsePositives((-586));
      String string0 = evaluation0.toMatrixString(" ");
      assertEquals(" \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.GaussianProcesses:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -L <double>
         // \tLevel of Gaussian Noise wrt transformed target. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "seedTipText";
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.clear();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2680);
      doubleArray0[1] = (double) (-2680);
      doubleArray0[2] = (double) (-2680);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, (-2680), (-2680.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2680
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.654446531125524
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "seedTipText";
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      stringArray0[1] = "X2`Q`7";
      stringArray0[3] = "seedTipText";
      stringArray0[5] = "seedTipText";
      double double1 = evaluation0.numFalsePositives(2);
      assertEquals(0.0, double1, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.KBInformation();
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(508);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_TotalSizeOfRegions = (double) (-1);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins((double[]) null, 17, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4302705392332347
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.sizeOfPredictedRegions();
      double double1 = evaluation0.KBInformation();
      double double2 = evaluation0.numTrueNegatives(966);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      String string0 = evaluation0.toSummaryString("@data", true);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
      
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.641213097556974
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.KBInformation();
      String string0 = evaluation0.toSummaryString("@data", false);
      assertEquals("@data\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.numFalsePositives(1803);
      String string0 = evaluation0.toMatrixString("Relation: Testdata\nSeed: 1\n# Instances: 20\nClassType: 1\n# Classes: 2\nClass index: -1\n# Nominal: 1\n# Nominal values: 2\n# Numeric: 0\n# String: 0\n# Date: 0\n# Relational: 0\n  - # Nominal: 1\n  - # Nominal values: 2\n  - # Numeric: 0\n  - # String: 0\n  - # Date: 0\n  - # Instances: 10\nMulti-Instance: false\nWords: quick,brown,fox,jumps,over,the,lazy,dog\nWord separators:  \n");
      assertEquals("Relation: Testdata\nSeed: 1\n# Instances: 20\nClassType: 1\n# Classes: 2\nClass index: -1\n# Nominal: 1\n# Nominal values: 2\n# Numeric: 0\n# String: 0\n# Date: 0\n# Relational: 0\n  - # Nominal: 1\n  - # Nominal values: 2\n  - # Numeric: 0\n  - # String: 0\n  - # Date: 0\n  - # Instances: 10\nMulti-Instance: false\nWords: quick,brown,fox,jumps,over,the,lazy,dog\nWord separators:  \n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation0.weightedAreaUnderROC();
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.numInstances();
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      String string0 = Evaluation.getGlobalInfo(randomCommittee0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_NumTrainClassVals = (-2183);
      evaluation1.pctUnclassified();
      Evaluation.getGlobalInfo(randomCommittee0);
      Evaluation evaluation2 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, "@relation");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.9025325686415733
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      double double1 = evaluation0.numTrueNegatives(460);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_MissingClass;
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.getRevision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      try { 
        Evaluation.handleCostOption("@data", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      textDirectoryLoader0.setCharSet("-i\n");
      String[] stringArray0 = new String[2];
      instances0.deleteAttributeType(0);
      stringArray0[0] = "-i\n";
      stringArray0[1] = " -1       0    \n";
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation.getGlobalInfo(gaussianProcesses0);
      evaluation0.weightedPrecision();
      evaluation0.unweightedMacroFmeasure();
      try { 
        evaluation0.crossValidateModel((Classifier) gaussianProcesses0, instances0, 494, (Random) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      instances1.setRelationName(".arff");
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      textDirectoryLoader0.getStructure();
      double double0 = evaluation1.SFPriorEntropy();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      evaluation1.getHeader();
      double double2 = evaluation1.truePositiveRate(2);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RandomCommittee randomCommittee0 = new RandomCommittee();
      String string0 = Evaluation.getGlobalInfo(randomCommittee0);
      assertEquals("\nSynopsis for weka.classifiers.meta.RandomCommittee:\n\nClass for building an ensemble of randomizable base classifiers. Each base classifiers is built using a different random number seed (but based one the same data). The final prediction is a straight average of the predictions generated by the individual base classifiers.", string0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.setRelationName("Incorrectly Classified|dnstances   ");
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      SGDText sGDText0 = new SGDText();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) sGDText0, instances0, 1899, (Random) mockRandom0, (Object[]) sGDText0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      SGDText sGDText0 = new SGDText();
      MockRandom mockRandom1 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) sGDText0, instances0, 1, (Random) mockRandom0, (Object[]) sGDText0.TAGS_SELECTION);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CostMatrix costMatrix0 = null;
      DiscreteEstimator discreteEstimator0 = new DiscreteEstimator(873, 873);
      Capabilities capabilities0 = discreteEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("8H?|Aj");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double double0 = evaluation1.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(instances0);
      try { 
        Evaluation.handleCostOption(".arff", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.rootMeanPriorSquaredError();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = evaluation0.m_SumClassPredicted;
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.confusionMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.updateNumericScores((double[]) null, (double[]) null, 100000);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.1468025731695666
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-2), (-1));
      evaluation0.pctUnclassified();
      Evaluation evaluation1 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      double double0 = evaluation1.m_MissingClass;
      try { 
        Evaluation.handleCostOption(".bsi", 454);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.1786487773278904
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double double1 = Evaluation.MIN_SF_PROB;
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      evaluation0.falsePositiveRate((-2));
      double double3 = evaluation0.areaUnderROC(34);
      assertNotEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      capabilities0.disableAllAttributes();
      evaluation0.SFEntropyGain();
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption((String) null, 0);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      TestInstances testInstances0 = new TestInstances();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.KBInformation();
      evaluation0.numTrueNegatives((-2));
      GaussianProcesses.main(testInstances0.DEFAULT_WORDS);
      assertEquals(0, testInstances0.getNumNumeric());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.3183056868918186
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      evaluation1.numFalsePositives((-1));
      evaluation0.meanPriorAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(4.9E-324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-1), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.sort(501);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.numFalsePositives(2);
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.setDiscardPredictions(false);
      assertEquals(Double.NaN, evaluation1.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string1 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      
      evaluation0.sizeOfPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(true);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.correct();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numTrueNegatives(0);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_MissingClass;
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      textDirectoryLoader0.setCharSet("@relation");
      instances0.deleteWithMissingClass();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.fMeasure(1);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.iterator();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.SFEntropyGain();
      evaluation0.numFalsePositives(5);
      evaluation0.meanPriorAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.precision(2);
      try { 
        Evaluation.handleCostOption(".bsi", 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.289113966582552
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toClassDetailsString();
      double double0 = evaluation0.m_Unclassified;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.pctUnclassified();
      LogitBoost logitBoost0 = new LogitBoost();
      double double0 = evaluation0.truePositiveRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, evaluation2.pctUnclassified(), 0.01);
      
      double double1 = evaluation0.m_SumPredicted;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.pctUnclassified();
      LogitBoost logitBoost0 = new LogitBoost();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string1 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.5884082070354566
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("r6tmY308<E#l%");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("r6tmY308<E#l%");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        Evaluation.handleCostOption("@data", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      double double1 = evaluation1.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toCumulativeMarginDistributionString();
      ConverterUtils.DataSource.read(".arff");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 2;
      Instance instance0 = BallNode.calcCentroidPivot(499, 0, intArray0, instances0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, instance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.toMatrixString();
      double double1 = evaluation1.SFMeanSchemeEntropy();
      evaluation1.setPriors(instances0);
      double double2 = evaluation1.m_Unclassified;
      double double3 = evaluation0.meanAbsoluteError();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.setPriors(instances0);
      evaluation1.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.sizeOfPredictedRegions();
      double double2 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.unweightedMicroFmeasure();
      try { 
        Evaluation.handleCostOption(".arff", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String string0 = Evaluation.makeOptionString(gaussianProcesses0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      String string0 = Evaluation.makeOptionString(adaBoostM1_0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      String string0 = Evaluation.makeOptionString(cVParameterSelection0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Capabilities capabilities0 = principalComponents0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
