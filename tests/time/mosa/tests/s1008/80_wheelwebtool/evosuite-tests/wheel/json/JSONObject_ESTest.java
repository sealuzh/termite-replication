/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 20:56:31 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(39, 39);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3791235169376774
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("eNPkY", false);
      boolean boolean0 = jSONObject0.isNull("eNPkY");
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject1);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(35);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("Null pointer", object0);
      jSONObject1.append("Null pointer", "Null pointer");
      String[] stringArray0 = new String[7];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6332004508871008
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      Integer integer0 = new Integer(27);
      hashMap0.put((JSONArray) null, integer0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 27, 54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8656213747914947
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = new Double(0.0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      Double double1 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("get", double1);
      jSONObject0.toString();
      jSONObject1.optInt("{\"java.lang.String@0000000003\":java.lang.Double@0000000004}");
      jSONObject1.toString(0, 0);
      JSONObject.valueToString(double1, 1, 1);
      boolean boolean0 = jSONObject1.has("get");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0471642653442537
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = JSONObject.quote("Ja}shKM2ul0|>-~}(7K");
      assertEquals("\"Ja}shKM2ul0|>-~}(7K\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("Ja}shKM2ul0|>-~}(7K");
      jSONObject0.optJSONObject("\"Ja}shKM2ul0|>-~}(7K\"");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      double double0 = jSONObject0.optDouble("ik#^G/TSTZl,Kx");
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = jSONObject0.optBoolean("Ja}shKM2ul0|>-~}(7K");
      assertFalse(boolean0);
      
      jSONObject1.optBoolean("=wkWG;De#@oF~`8", true);
      jSONObject1.optString("getoptJSONArray", (String) null);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.put("Ja}shKM2ul0|>-~}(7K", (-3792));
      Long long0 = new Long((-3792));
      JSONObject.numberToString(long0);
      jSONObject1.toString((-3792));
      JSONObject jSONObject3 = jSONObject1.putOpt("\"Ja}shKM2ul0|>-~}(7K\"", (Object) null);
      assertEquals(1, jSONObject3.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4312896930889447
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = null;
      JSONObject.quote((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Jj/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {Jj/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9826173833107026
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Long long0 = new Long((-21L));
      JSONObject jSONObject1 = jSONObject0.putOpt("ite", long0);
      jSONObject1.toString();
      jSONObject0.optInt("ite");
      jSONObject0.toString((-21), (-21));
      jSONObject1.names();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "E*W*`Sp^u#j";
      JSONObject jSONObject1 = jSONObject0.put("E*W*`Sp^u#j", (Object) "E*W*`Sp^u#j");
      try { 
        jSONObject0.append("E*W*`Sp^u#j", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[E*W*`Sp^u#j] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.904192693434481
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("issplit", 1L);
      Long long0 = new Long(0L);
      Byte byte0 = new Byte((byte)15);
      jSONObject0.putOpt("issplit", byte0);
      jSONObject0.optInt("issplit");
      jSONObject0.toString(1164, 15);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000003\": java.lang.Byte@0000000004}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.228676119124695
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("ite", 1L);
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("ite", long0);
      jSONObject0.optInt("FO");
      jSONObject0.toString(0, 0);
      JSONObject jSONObject2 = jSONObject0.append("{\n\"java.lang.String@0000000005\": java.lang.Long@0000000006,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}", "{\n\"java.lang.String@0000000005\": java.lang.Long@0000000006,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      jSONObject2.toString(0, 0);
      jSONObject2.put("ite", (-3708L));
      jSONObject1.toString();
      jSONObject1.keys();
      jSONObject1.optJSONObject("ite");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{YI|lx+}AQn53&x)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {YI|lx+}AQn53&x)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6379940485425777
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-2102), (-2102));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.56056192073146
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      JSONObject.valueToString(jSONObject0, (-623), (-623));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000048,\njava.lang.Byte@0000000049,\njava.lang.Byte@0000000050,\njava.lang.Byte@0000000051,\njava.lang.Byte@0000000052,\njava.lang.Byte@0000000053,\njava.lang.Byte@0000000054,\njava.lang.Byte@0000000055,\njava.lang.Byte@0000000056,\njava.lang.Byte@0000000057,\njava.lang.Byte@0000000058,\njava.lang.Byte@0000000059,\njava.lang.Byte@0000000060,\njava.lang.Byte@0000000061,\njava.lang.Byte@0000000062,\njava.lang.Byte@0000000063,\njava.lang.Byte@0000000064,\njava.lang.Byte@0000000065,\njava.lang.Byte@0000000066\n],\n\"java.lang.String@0000000045\": \"java.lang.Class@0000000046\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      jSONObject0.toString((-623), (-623));
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 692, (-623));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote(",\n");
      jSONObject0.optLong("\",\n\"");
      jSONObject0.putOpt("^nI_rR0nJOaCGs@~", ",\n");
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("] is not a JSONObject.", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "{e:-dJA@bfG?T]";
      JSONTokener jSONTokener0 = new JSONTokener("{e:-dJA@bfG?T]");
      jSONTokener0.toString();
      jSONTokener0.syntaxError("isreplaceAll");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 15 of {e:-dJA@bfG?T]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2514646960719626
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-2973));
      jSONObject0.optInt("i", (int) (short) (-2973));
      Double double0 = new Double((short) (-2973));
      Double double1 = new Double((-2973));
      JSONObject jSONObject1 = jSONObject0.put("i", (Object) double1);
      jSONObject1.getDouble("i");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("4", (Object) null);
      jSONObject1.keys();
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4350630195518828
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2409);
      Short.toUnsignedLong((short)2409);
      jSONObject0.optInt("[", (int) (short)2409);
      Double double0 = new Double((short)2409);
      JSONObject jSONObject1 = jSONObject0.put("i", (Object) "i");
      JSONObject jSONObject2 = jSONObject0.accumulate("[", jSONObject1);
      JSONObject.testValidity(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-896.9F));
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("isaddLast", "isaddLast");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.accumulate("toS", jSONObject0);
      jSONObject1.getJSONObject("toS");
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("null", true);
      try { 
        jSONObject1.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5120749256009907
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      JSONObject.valueToString("Ja}shKM2ul0|>-~}(7K");
      JSONObject.quote("\"java.lang.String@0000000047\"");
      jSONObject0.toString((-638), (-638));
      // Undeclared exception!
      jSONObject0.toString(370, 113);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put(jSONArray0, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("' and instead saw '", "' and instead saw '");
      Object object0 = jSONObject1.get("' and instead saw '");
      assertFalse(object0.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.142183513315372
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(59);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      
      jSONObject0.accumulate("s^|j_<uf) ", jSONArray1);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Expected a ',' or ']'", (-411.25513539));
      assertEquals((-411.25513539), double0, 0.01);
      
      String string0 = jSONObject0.toString((-125), 102);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject.valueToString(linkedList0, (-630), (-630));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{_M~^mO`d.k;B3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {_M~^mO`d.k;B3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(hashMap0, 27, 54);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.418173281991714
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Short short0 = new Short((short)2292);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("z*#q_U.\"?v0", (Collection) linkedList0);
      jSONObject0.optBoolean("z*#q_U.\"?v0", false);
      jSONObject0.optLong("z*#q_U.\"?v0");
      jSONObject0.get("z*#q_U.\"?v0");
      jSONObject0.opt("z*#q_U.\"?v0");
      JSONObject jSONObject1 = jSONObject0.put("null", (int) (short)2292);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2409);
      Short.compare((short)2409, (short)46);
      jSONObject0.append("[", short0);
      Short.toUnsignedLong((short)2409);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("[");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8239329813080194
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("\"", (-622.648315881));
      jSONObject0.optLong("\"");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "\f");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("\f", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("-", (Collection) linkedList0);
      Boolean boolean0 = new Boolean("-");
      JSONArray jSONArray0 = jSONObject2.optJSONArray("-");
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject3 = new JSONObject(jSONObject2);
      assertEquals(1, jSONObject3.length());
      
      Object object0 = JSONObject.NULL;
      String[] stringArray1 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2343545839532437
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.put(",:]}/\"[{;=#", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      String string0 = jSONObject0.toString((-1368));
      assertNotNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8160500079520578
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "] not found.";
      stringArray0[1] = "] not found.";
      JSONObject jSONObject0 = new JSONObject("] not found.", stringArray0);
      jSONObject0.optDouble("] not found.");
      jSONObject0.put("] not found.", false);
      try { 
        jSONObject0.getLong("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(67);
      JSONObject jSONObject1 = jSONObject0.put("[", 1653L);
      JSONObject jSONObject2 = jSONObject0.accumulate("[", jSONObject1);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-573), (-573));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.quote((String) null);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, object0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9750191719753953
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.quote("Ja}shKM2ul0|>-~}(7K");
      assertEquals("\"Ja}shKM2ul0|>-~}(7K\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}(7K");
      JSONObject.valueToString("Ja}shKM2ul0|>-~}(7K");
      jSONObject0.optJSONObject("\"Ja}shKM2ul0|>-~}(7K\"");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      double double0 = jSONObject0.optDouble("ik#^G/TSTZl,Kx");
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = jSONObject0.optBoolean("Ja}shKM2ul0|>-~}(7K");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
      
      String string1 = jSONObject1.optString("getoptJSONArray", (String) null);
      assertNull(string1);
      
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.put("Ja}shKM2ul0|>-~}(7K", (-3792));
      Long long0 = new Long((-3792));
      JSONObject.numberToString(long0);
      jSONObject1.toString(8);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("il", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.960779945649541
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("ite", 0L);
      Long long0 = new Long(0L);
      jSONObject0.putOpt("ite", long0);
      jSONObject0.optInt("ite");
      jSONObject0.toString(0, 0);
      jSONObject0.append("{\n\"java.lang.String@0000000005\": java.lang.Long@0000000006,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}", "{\n\"java.lang.String@0000000005\": java.lang.Long@0000000006,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      JSONObject jSONObject1 = new JSONObject(long0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.getInt("ite");
      jSONObject0.toString(0, 0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("getmax");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.4620975966507315
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      Boolean.logicalAnd(false, true);
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Z";
      stringArray0[1] = "Z";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Short short0 = new Short((short)901);
      JSONObject jSONObject1 = jSONObject0.putOpt("Z", short0);
      long long0 = jSONObject1.getLong("Z");
      assertEquals(901L, long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.688946123179314
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Ja}shKM2ul0|>-~}77K");
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9611163672996992
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("}*W*`;p^u#j", object0);
      try { 
        jSONObject1.getBoolean("}*W*`;p^u#j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}*W*`;p^u#j\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1638535163257586
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject2 = jSONObject1.put("-", (Collection) linkedList0);
      jSONObject2.optBoolean("-");
      JSONObject jSONObject3 = jSONObject1.put("-", 0);
      jSONObject3.optDouble("-", (double) 0);
      StringWriter stringWriter0 = new StringWriter(3039);
      stringWriter0.close();
      linkedList0.add(jSONObject3);
      JSONObject jSONObject4 = new JSONObject(jSONObject1);
      jSONObject2.optDouble("-");
      stringWriter0.append((CharSequence) "-");
      JSONObject jSONObject5 = null;
      try {
        jSONObject5 = new JSONObject("-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of -
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7487996480217514
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject.quote("%4-Gmr");
      JSONObject jSONObject0 = new JSONObject((Object) "%4-Gmr");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.toString((-638), (-638));
      JSONObject.quote("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000025,\njava.lang.Byte@0000000026,\njava.lang.Byte@0000000027,\njava.lang.Byte@0000000028,\njava.lang.Byte@0000000029,\njava.lang.Byte@0000000030\n],\n\"java.lang.String@0000000019\": \"java.lang.Class@0000000020\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      jSONObject0.optLong("\"%4-Gmr\"");
      JSONObject.valueToString("%4-Gmr");
      // Undeclared exception!
      jSONObject0.toString(905);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("getrotateRight");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getrotateRight\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("'LnUK<", "'LnUK<");
      try { 
        jSONObject0.getBoolean("'LnUK<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'LnUK<\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("V>Jv)V0", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      jSONObject0.accumulate("V>Jv)V0", jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("", float0);
      long long0 = jSONObject0.getLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.4137799280836787
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.accumulate((String) null, stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("va", (-547));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.723817908205213
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2409);
      JSONObject jSONObject1 = jSONObject0.append("[", short0);
      jSONObject1.getString("[");
      jSONObject1.remove("d*'|5icfRTKa|\"}L,");
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.quote("wheel.json.JSONArray@0000000002");
      jSONObject0.optString("istoString", "getmerge");
      jSONObject1.optLong((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = " u1^%v*J1/1h20xoS";
      stringArray0[1] = "istoString";
      stringArray0[2] = "istoString";
      stringArray0[3] = "E$77+N4";
      stringArray0[4] = "getmerge";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.opt((String) null);
      JSONObject jSONObject3 = jSONObject1.put("getputIfAbsent", (int) (short)2409);
      JSONObject jSONObject4 = new JSONObject(jSONObject3, stringArray0);
      assertEquals(0, jSONObject4.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("ik#^G/TSTZl,Kx");
      Float float0 = new Float(603.66259951);
      JSONObject jSONObject1 = jSONObject0.putOpt("ik#^G/TSTZl,Kx", float0);
      jSONObject1.optString("ik#^G/TSTZl,Kx", "JB3Ph*/(}&7g\u0000S&");
      try { 
        jSONObject0.getString("1p}U<)7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1p}U<)7\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.803669424288547
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("FB@@>N4YQ:z`", 3061.841231127077);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = jSONObject1.getString("FB@@>N4YQ:z`");
      String string1 = jSONObject0.optString("FB@@>N4YQ:z`");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = JSONObject.quote("-/|=^(t}j-~*=p");
      assertEquals("\"-/|=^(t}j-~*=p\"", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("V", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.095924398920587
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("'LnUK<", "'LnUK<");
      Object object0 = JSONObject.NULL;
      jSONObject0.optLong("'LnUK<");
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.4370338247793026
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("\b", linkedList0);
      jSONObject0.toString((-968), (-968));
      jSONObject1.optJSONArray("{\n\"java.lang.String@0000000007\": [[]],\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 118, 118);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of []
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.6579511543833134
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optInt(")49Vgj", 806);
      Double.isFinite((-269.37));
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", 2851L);
      jSONObject1.remove("wheel.json.JSONObject");
      jSONObject1.optDouble(")49Vgj");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject0.put("Expected a ',' or ']'", (Collection) linkedList0);
      linkedList0.addLast("istoUpperCase");
      jSONObject1.optLong("IA='[a*", (-695L));
      String string0 = "5el]vJ]75\"fK?h4";
      try { 
        jSONObject2.put((String) null, 1689.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7468721985154558
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.poll();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("vK6?`O<<ax", (Object) null);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.2745180899177098
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("sum");
      assertFalse(boolean0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("sum", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "OE";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject1.put("OE", (Collection) linkedList0);
      Boolean boolean0 = new Boolean("OE");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("OE");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5508047679198604
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong(")AhA m6?(n", 670L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.getJSONArray("HI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HI\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~BOJ];x,00`*\"D%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~BOJ];x,00`*\"D%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.2943974934684848
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)2399);
      JSONObject jSONObject1 = jSONObject0.append("[", short0);
      jSONObject0.optInt("[", (int) (short)2399);
      Short.toUnsignedInt((short)2313);
      jSONObject0.optString("-q6AW]MZ[/+kQ/Sl.g", "");
      Float float0 = new Float((double) (short)2313);
      jSONObject1.putOpt("'B?8ke", "[");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("B]3<4p", (Map) hashMap0);
      try { 
        jSONObject1.getInt("B]3<4p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B]3<4p\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.9740866340645037
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.putOpt("6z\u0006a6X", "6z\u0006a6X");
      try { 
        jSONObject0.getDouble("6z\u0006a6X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6z\\u0006a6X\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9974995112475309
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("com", 292.0079506959667);
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.670792086347495
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.quote((String) null);
      Byte byte0 = new Byte((byte)50);
      try { 
        jSONObject0.put((String) null, (Object) byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("7fs>m", "7fs>m");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Short short0 = new Short((short)2292);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optBoolean("z*#q_U.\"?v0", false);
      jSONObject0.optLong("z*#q_U.\"?v0");
      jSONObject0.opt("z*#q_U.\"?v0");
      JSONObject jSONObject1 = jSONObject0.put("null", (int) (short)2292);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("1", "1");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.54746333538558
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("9K$w6&6IB>", 1574);
      jSONObject1.optDouble("9K$w6&6IB>", (-1.0));
      double double0 = jSONObject0.optDouble("9K$w6&6IB>", 1.0);
      assertEquals(1574.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.07204998061416
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject.doubleToString((-1.233070276283791));
      Float float0 = new Float(3910.17F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte)71);
      jSONObject0.accumulate("-1.233070276283791", byte0);
      double double0 = jSONObject0.optDouble("-1.233070276283791");
      assertEquals(4, jSONObject0.length());
      assertEquals(71.0, double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("wheel.json.JSONObject@0000000001");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(880, 880);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4154978294893135
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Long long0 = new Long(259L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.1904885611243943
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(32, (-246));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.532367161919659
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] not found.");
      jSONObject0.toString((-1479));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.quote("\t");
      assertEquals("\"\\t\"", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.271990924723642
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0, 1618, 1618);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 27, 36);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("1i8qpPR;|v(,!6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1i8qpPR;|v(,!6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 345, 345);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.281955547659427
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-961), (-961));
      jSONObject0.put("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", (long) (-961));
      JSONObject.valueToString("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      boolean boolean0 = jSONObject0.optBoolean("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      jSONObject0.put(string0, false);
      boolean boolean0 = jSONObject0.optBoolean(string0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("3XQ@E-6bm");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3XQ@E-6bm
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.getDouble("|OKIhc;/oN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|OKIhc;/oN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float((-3010.267F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("-T:/;iww* d5nc:|FP?", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("getget", 0.0);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("4 @CsR|*", false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5769793654632012
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("Sxr/)eZf|/3g", true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("S\"0", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("-1.2330702762837910", (-1260L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("] is not a number.", 192);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong((String) null, 0L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", float0);
      jSONObject1.optInt("", 32);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("sp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.9673706568028466
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject.quote("[{JqU72\"FW=/");
      JSONObject jSONObject0 = new JSONObject((Object) "\"[{JqU72\"FW=/\"");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("\"[{JqU72\"FW=/\"", (Collection) linkedList0);
      jSONObject0.getString("\"[{JqU72\"FW=/\"");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("S0U(]Y_?");
      jSONObject0.optString("\"S0U(]Y_?\"", "n=6tk;Ql'Q");
      Double double0 = new Double((-1.0));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"S0U(]Y_?\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"S0U(]Y_?\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double((-3010.267F));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote("4Gmr");
      assertEquals("\"4Gmr\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      String string1 = jSONObject0.optString("wheel.json.JSONObject@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getString("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("[<:<R=#2t_pvtT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[<:<R=#2t_pvtT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("*=y>m+7", "*=y>m+7");
      try { 
        jSONObject0.getJSONArray("*=y>m+7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*=y>m+7\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("[jJqU72\"VW=/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[jJqU72\\\"VW=/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("gethashCode");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      String string0 = JSONObject.valueToString(byte0, (byte)0, (byte)0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
