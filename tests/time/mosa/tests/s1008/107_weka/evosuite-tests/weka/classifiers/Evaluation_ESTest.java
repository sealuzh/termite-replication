/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 21:07:32 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.OneR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.REPTree;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.FarthestFirst;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.435023563572053
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelationalClassFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.numTruePositives((-1));
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.m_Correct = (-1.0E100);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.trueNegativeRate(37);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numFalsePositives(0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelationalClassFormat(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.numTruePositives((-1));
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.m_Correct = (-1.0E100);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[1] = (-532.4686645881);
      evaluation0.updateMargins(doubleArray0, 0, 0.0);
      evaluation0.falsePositiveRate(1258);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertFalse(testInstances0.getNoClass());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8941122637730392
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (double) 2;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2;
      doubleArray0[6] = (double) 0;
      evaluation0.m_ComplexityStatisticsAvailable = true;
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      instances0.add(1, (Instance) denseInstance0);
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8942254499643238
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setClassType(0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1432643375077234
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.numTruePositives((-1));
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass((-712.3866979), 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-1085.33416369304));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.unweightedMicroFmeasure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier1.getOnDemandDirectory();
      textDirectoryLoader0.setDirectory(file0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumPriorEntropy;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-2));
      try { 
        evaluation1.evaluateModelOnce((-1284.46573), (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1284
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1878840226652085
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (double) 2;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) 1;
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      instances0.add(1, (Instance) denseInstance0);
      evaluation0.setPriors(instances0);
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      instances0.deleteStringAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      Evaluation.getGlobalInfo(classifier0);
      MockRandom mockRandom1 = new MockRandom();
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = '%';
      charArray0[2] = '9';
      charArray0[3] = '1';
      charArray0[4] = '*';
      charArray0[5] = 's';
      String string0 = evaluation0.num2ShortID(5200, charArray0, 981);
      assertEqualss%*", string0);
      
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, doubleArray0, (-896.74823));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0310717721837928
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      // Undeclared exception!
      try { 
        evaluation0.numTrueNegatives(1643);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4920665010799827
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-2);
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        evaluation1.falseNegativeRate(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3484043036091773
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      capabilities0.dependencies();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9k4(drQa1Y");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double double0 = evaluation0.correlationCoefficient();
      assertEquals(Double.NaN, double0, 0.01);
      
      OneR oneR0 = new OneR();
      OneR oneR1 = new OneR();
      evaluation0.trueNegativeRate(0);
      double double1 = evaluation0.numFalsePositives((-1842177144));
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.879627694453224
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.toSummaryString(true);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction((Classifier) naiveBayesMultinomial0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[0][2];
      evaluation0.m_ConfusionMatrix = doubleArray0;
      double[] doubleArray1 = evaluation0.m_ClassPriors;
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.186941047756663
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation0.correlationCoefficient();
      OneR oneR0 = new OneR();
      int int0 = 2138;
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate(2138);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8913143237326153
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation1.numTrueNegatives(4124);
      evaluation1.matthewsCorrelationCoefficient((-4052));
      evaluation1.weightedFalsePositiveRate();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 2147483645, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.useNoPriors();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString(" ", true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) (-1);
      instances0.getRevision();
      doubleArray0[8] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1852106726234373
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 0;
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      evaluation1.makeDistribution(2.0);
      // Undeclared exception!
      try { 
        evaluation1.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1881966855104402
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation0.correlationCoefficient();
      OneR oneR0 = new OneR();
      OneR oneR1 = new OneR();
      evaluation0.SFMeanSchemeEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.426247966497983
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (double) 2;
      testInstances0.setWordSeparators(".bsi");
      int[] intArray0 = new int[1];
      intArray0[0] = (-2);
      evaluation0.numTrueNegatives((-7));
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate((-2368));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.49206349206349204
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (double) 2;
      testInstances0.setWordSeparators(".bsi");
      int[] intArray0 = new int[1];
      intArray0[0] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, (-2));
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3743147528693496
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(0.17499999701976776, doubleArray0);
      instances0.add(0, (Instance) denseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7813719133938317
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.precision((-2));
      testInstances0.setWordSeparators((String) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2052.39096), intArray0, 120);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        evaluation1.updateStatsForPredictor(120.0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      JRip jRip0 = new JRip();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      double double1 = evaluation0.m_SumClassPredicted;
      String string0 = evaluation0.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      MockRandom mockRandom1 = new MockRandom(0L);
      MockRandom mockRandom2 = new MockRandom();
      evaluation0.equals(instances0);
      evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.297141676796891
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.numTruePositives((-1));
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      BallNode ballNode0 = new BallNode((-2251));
      CSVLoader cSVLoader0 = new CSVLoader();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.SFMeanPriorEntropy();
      double double2 = evaluation2.rootMeanPriorSquaredError();
      assertEquals(double2, double1, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      double double3 = evaluation3.numFalseNegatives(0);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      double double0 = evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      instances0.deleteStringAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double1 = evaluation0.numTruePositives(2);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.relativeAbsoluteError();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNumeric(99);
      evaluation0.numFalsePositives((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      
      double double3 = evaluation0.kappa();
      assertEquals(1.0, double3, 0.01);
      
      double double4 = evaluation0.falseNegativeRate((-537));
      assertEquals(0.0, double4, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.toString();
      evaluation0.priorEntropy();
      Evaluation evaluation2 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation2.updateStatsForPredictor(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8795375182085867
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.precision(1);
      testInstances0.setWordSeparators(".arff");
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.171417801900708
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.precision((-2));
      testInstances0.setWordSeparators((String) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2052.39096), intArray0, 120);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.252172561646713
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      String string0 = Evaluation.getGlobalInfo(linearRegression0);
      assertEquals("\nSynopsis for weka.classifiers.functions.LinearRegression:\n\nClass for using linear regression for prediction. Uses the Akaike criterion for model selection, and is able to deal with weighted instances.", string0);
      
      MockRandom mockRandom1 = new MockRandom();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4347240733919024
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      textDirectoryLoader0.listOptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.toString();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      CSVLoader cSVLoader0 = new CSVLoader();
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation1.SFMeanPriorEntropy();
      double double2 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation1.numFalseNegatives(42);
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.numInstances();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4946236559139785
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (double) 2;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 2;
      CostMatrix costMatrix0 = null;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation1.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0766937356927615
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@data");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Integer integer0 = new Integer((-2));
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.precision((-2639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2639
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 115;
      doubleArray0[2] = (double) 115;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0926535191911904
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      textDirectoryLoader0.listOptions();
      evaluation0.SFMeanSchemeEntropy();
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      BallNode ballNode0 = new BallNode(2);
      double double1 = Evaluation.MIN_SF_PROB;
      double double2 = evaluation0.fMeasure(2);
      evaluation0.numTrueNegatives(24);
      double double3 = evaluation0.matthewsCorrelationCoefficient(0);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.weightedFalsePositiveRate();
      assertNotEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(4124);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = evaluation0.avgCost();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7116062465483837
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(0);
      evaluation0.matthewsCorrelationCoefficient(598);
      evaluation0.weightedFalsePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(4369);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4369
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5895213795772005
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumNominal(117);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumClass;
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.addNumericTrainClass(2097.208599870847, 1);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.272539375087381
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomial naiveBayesMultinomial2 = new NaiveBayesMultinomial();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.SFSchemeEntropy();
      testInstances0.setMultiInstance(false);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-684);
      intArray0[2] = 1;
      intArray0[3] = (-1);
      intArray0[4] = 2;
      intArray0[5] = (-2);
      intArray0[6] = (-2);
      intArray0[7] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0, intArray0, (-1));
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 115, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 1488, 661.568210266242);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6280113863891765
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      textDirectoryLoader0.getDirectory();
      evaluation0.numTrueNegatives(11);
      // Undeclared exception!
      try { 
        evaluation1.matthewsCorrelationCoefficient(2049);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7905058231471243
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      textDirectoryLoader0.listOptions();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      BallNode ballNode0 = new BallNode(576);
      double double1 = Evaluation.MIN_SF_PROB;
      double double2 = evaluation0.fMeasure(2);
      evaluation0.fMeasure(0);
      evaluation0.setPriors(instances0);
      MockRandom mockRandom0 = new MockRandom((-1));
      evaluation0.SFMeanEntropyGain();
      double double3 = evaluation0.weightedRecall();
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4864864864864865
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = true;
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      textDirectoryLoader0.getOptions();
      Evaluation evaluation2 = new Evaluation(instances0);
      BallNode ballNode0 = new BallNode(199);
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation2.addNumericTrainClass(199, 0);
      evaluation3.unweightedMacroFmeasure();
      evaluation3.equals(evaluation0);
      evaluation1.precision(0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 199;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 199;
      intArray0[8] = 1;
      Instance instance0 = BallNode.calcCentroidPivot((-1), (-1127281206), intArray0, instances0);
      try { 
        evaluation2.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, instance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lnFactorial");
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      LWL lWL0 = new LWL();
      String string0 = Evaluation.getGlobalInfo(lWL0);
      assertEquals("\nSynopsis for weka.classifiers.lazy.LWL:\n\nLocally weighted learning. Uses an instance-based algorithm to assign instance weights which are then used by a specified WeightedInstancesHandler.\nCan do classification (e.g. using naive Bayes) or regression (e.g. using linear regression).\n\nFor more info, see\n\nEibe Frank, Mark Hall, Bernhard Pfahringer: Locally Weighted Naive Bayes. In: 19th Conference in Uncertainty in Artificial Intelligence, 249-256, 2003.\n\nC. Atkeson, A. Moore, S. Schaal (1996). Locally weighted learning. AI Review..", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.654367510100588
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.SFEntropyGain();
      BallNode ballNode0 = new BallNode((-1619880364));
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.addNumericTrainClass((-1619880364), 20.0);
      evaluation0.unweightedMacroFmeasure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation4 = new Evaluation(instances0, costMatrix1);
      String string0 = evaluation4.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation2.trueNegativeRate(102261132);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LogitBoost logitBoost0 = new LogitBoost();
      LWL lWL0 = new LWL();
      DecisionTable decisionTable0 = new DecisionTable();
      lWL0.getClassifier();
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
      
      MockRandom mockRandom1 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3114318075911946
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.addNumericTrainClass((-2), (-1));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.falsePositiveRate((-2));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertFalse(testInstances0.getMultiInstance());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.priorEntropy();
      double double1 = evaluation0.precision((-2639));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.78122772050302
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      textDirectoryLoader0.getDirectory();
      evaluation1.setPriors(instances1);
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      // Undeclared exception!
      try { 
        evaluation1.recall((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4953271028037384
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      textDirectoryLoader0.getDirectory();
      evaluation1.setPriors(instances1);
      JRip jRip0 = new JRip();
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      Evaluation.getGlobalInfo(naiveBayesMultinomial1);
      MockRandom mockRandom0 = new MockRandom((-3793L));
      CostMatrix costMatrix0 = CostMatrix.parseMatlab("<~YZm)n\"{lv8B\"]ejG7");
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances1, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation.makeOptionString(naiveBayesMultinomial0, false);
      double double1 = evaluation1.m_SumClass;
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.totalCost();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinkedHashSet<TestInstances> linkedHashSet0 = new LinkedHashSet<TestInstances>();
      instances0.removeAll(linkedHashSet0);
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, sparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "t3^al[[C BW";
      stringArray0[1] = "seedTipText";
      stringArray0[2] = "seedTipText";
      stringArray0[3] = "seedTipText";
      TextDirectoryLoader.main(stringArray0);
      textDirectoryLoader0.setCharSet("seedTipText");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval((-12));
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-10.0));
      String[] stringArray1 = new String[2];
      stringArray1[0] = "seedTipText";
      stringArray1[1] = "@relation";
      Instances.test(stringArray1);
      evaluation0.toSummaryString(".arff", false);
      evaluation0.unweightedMicroFmeasure();
      textDirectoryLoader0.setRetrieval((-195225789));
      evaluation0.toClassDetailsString("globalInfo");
      DecisionStump decisionStump0 = new DecisionStump();
      DenseInstance denseInstance0 = new DenseInstance((-12), (double[]) null);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) decisionStump0, (Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 115;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(115, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double0 = evaluation1.m_SumPriorSqrErr;
      evaluation1.SFPriorEntropy();
      RandomTree randomTree0 = new RandomTree();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) randomTree0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5895213795772005
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation0.correlationCoefficient();
      OneR oneR0 = new OneR();
      OneR oneR1 = new OneR();
      capabilities0.setOwner(simpleKMeans0);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.toSummaryString();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9973089657437755
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("   * @param args the commandline arguments\n");
      evaluation0.m_ComplexityStatisticsAvailable = true;
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1443.09294;
      doubleArray0[1] = (-924.314);
      doubleArray0[2] = (-3042.1525108523706);
      doubleArray0[3] = (-2443.0050876357927);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.507370451038839
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toClassDetailsString(".arff");
      SystemInUtil.addInputLine("@relation");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 4298.880002779549;
      SparseInstance sparseInstance0 = new SparseInstance(818.11, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1887993544729887
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      textDirectoryLoader0.getDirectory();
      evaluation1.setPriors(instances1);
      DenseInstance denseInstance0 = new DenseInstance(0);
      instances1.add((Instance) denseInstance0);
      MockRandom mockRandom0 = new MockRandom((-2));
      evaluation1.relativeAbsoluteError();
      evaluation1.addNumericTrainClass((-2), Double.NaN);
      // Undeclared exception!
      try { 
        evaluation1.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.391869032254135
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString();
      evaluation0.SFMeanSchemeEntropy();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      AbstractClassifier.runClassifier(naiveBayesMultinomial0, testInstances0.DEFAULT_WORDS);
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      FarthestFirst farthestFirst0 = new FarthestFirst();
      Capabilities capabilities0 = farthestFirst0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9430772544560302
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation2.areaUnderPRC(1418);
      String[] stringArray0 = new String[0];
      double[] doubleArray0 = evaluation1.getClassPriors();
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.287988646743151
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      TestInstances testInstances0 = new TestInstances();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      BallNode ballNode0 = new BallNode(77);
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass(77, 4543.040459126);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unweightedMacroFmeasure();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 77;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 1095;
      intArray0[6] = (-1);
      intArray0[7] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3617.13), intArray0, 0);
      try { 
        evaluation1.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6884178598236237
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      textDirectoryLoader0.getDirectory();
      evaluation1.setPriors(instances1);
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Evaluation.getGlobalInfo(naiveBayesMultinomial0);
      // Undeclared exception!
      try { 
        evaluation1.kappa();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.numTrueNegatives(4124);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      testInstances0.setClassType(58);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      CoverTree coverTree0 = new CoverTree();
      evaluation0.SFMeanSchemeEntropy();
      BallNode ballNode0 = new BallNode((-2));
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      double double0 = 5016.1711987;
      evaluation1.addNumericTrainClass((-3042.1525108523706), 5016.1711987);
      evaluation1.unweightedMacroFmeasure();
      try { 
        evaluation0.toClassDetailsString(".arff");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1884742833636837
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      textDirectoryLoader0.getDirectory();
      evaluation1.setPriors(instances1);
      MockRandom mockRandom0 = new MockRandom((-1280L));
      try { 
        evaluation1.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7257539307223926
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.numTruePositives(1910);
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-8);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.addNumericTrainClass(141.810158778816, 1510.48);
      evaluation1.unweightedMacroFmeasure();
      evaluation1.trueNegativeRate((-1060150160));
      evaluation1.numFalsePositives((-2));
      evaluation1.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(102261132, (char[]) null, (-1060150160));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.7233088153062086
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(4124);
      evaluation0.matthewsCorrelationCoefficient((-2));
      evaluation0.weightedFalsePositiveRate();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.weightedMatthewsCorrelation();
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.248329864628005
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toSummaryString(".bsi", false);
      Evaluation.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.9803545043333943
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      SystemInUtil.addInputLine(".arff");
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      IBk iBk0 = new IBk((-2));
      MockRandom mockRandom0 = new MockRandom(2);
      evaluation1.weightedMatthewsCorrelation();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation2 = new Evaluation(instances1);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      MockRandom mockRandom1 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOutputFilename(true);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances1);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = evaluation0.m_TotalCost;
      evaluation0.sizeOfPredictedRegions();
      evaluation0.relativeAbsoluteError();
      testInstances0.setNumNumeric((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double1 = evaluation0.m_SumPriorSqrErr;
      double double2 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      RandomTree randomTree0 = new RandomTree();
      ArffLoader arffLoader0 = new ArffLoader();
      double double3 = evaluation1.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.4153829230142665
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      MockRandom mockRandom1 = new MockRandom();
      Object object0 = new Object();
      Object object1 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      LogitBoost logitBoost0 = new LogitBoost();
      MockRandom mockRandom2 = new MockRandom();
      evaluation0.SFMeanEntropyGain();
      try { 
        Evaluation.handleCostOption("e2L9q#'", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.595722115257705
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      double double1 = evaluation0.m_SumClass;
      String string0 = evaluation1.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.4357059689399976
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Evaluation.main(stringArray0);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double double0 = evaluation0.correlationCoefficient();
      assertEquals(Double.NaN, double0, 0.01);
      
      OneR oneR0 = new OneR();
      OneR oneR1 = new OneR();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      String string0 = Evaluation.getGlobalInfo(lWL0);
      assertEquals("\nSynopsis for weka.classifiers.lazy.LWL:\n\nLocally weighted learning. Uses an instance-based algorithm to assign instance weights which are then used by a specified WeightedInstancesHandler.\nCan do classification (e.g. using naive Bayes) or regression (e.g. using linear regression).\n\nFor more info, see\n\nEibe Frank, Mark Hall, Bernhard Pfahringer: Locally Weighted Naive Bayes. In: 19th Conference in Uncertainty in Artificial Intelligence, 249-256, 2003.\n\nC. Atkeson, A. Moore, S. Schaal (1996). Locally weighted learning. AI Review..", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.falseNegativeRate((-2));
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      MockRandom mockRandom1 = new MockRandom();
      IBk iBk0 = new IBk();
      iBk0.setKNN((-2));
      Evaluation evaluation2 = new Evaluation(instances0);
      BallNode ballNode0 = new BallNode(2);
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation3 = new Evaluation(instances0);
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation2.addNumericTrainClass(1, 0);
      evaluation4.unweightedMacroFmeasure();
      evaluation1.weightedFalseNegativeRate();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, double0, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      LWL lWL0 = new LWL();
      DecisionTable decisionTable0 = new DecisionTable();
      Classifier classifier0 = lWL0.getClassifier();
      String string0 = Evaluation.getGlobalInfo(classifier0);
      assertEquals("\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", string0);
      
      MockRandom mockRandom1 = new MockRandom();
      double double1 = evaluation0.falseNegativeRate(1);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      DecisionTable decisionTable0 = new DecisionTable();
      lWL0.getClassifier();
      String string0 = Evaluation.getGlobalInfo(lWL0);
      assertEquals("\nSynopsis for weka.classifiers.lazy.LWL:\n\nLocally weighted learning. Uses an instance-based algorithm to assign instance weights which are then used by a specified WeightedInstancesHandler.\nCan do classification (e.g. using naive Bayes) or regression (e.g. using linear regression).\n\nFor more info, see\n\nEibe Frank, Mark Hall, Bernhard Pfahringer: Locally Weighted Naive Bayes. In: 19th Conference in Uncertainty in Artificial Intelligence, 249-256, 2003.\n\nC. Atkeson, A. Moore, S. Schaal (1996). Locally weighted learning. AI Review..", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.falseNegativeRate((-1935));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation2 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation2.recall(1142);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1142
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9354046201849306
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setWordSeparators(":Pj1t(u5r2$wJyD:");
      Instances.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = evaluation1.equals(instances0);
      assertFalse(boolean0);
      
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertTrue(evaluation0.equals((Object)evaluation1));
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation1.priorEntropy();
      assertEquals(Double.NaN, evaluation1.coverageOfTestCasesByPredictedRegions(), 0.01);
      assertEquals(0.9940302114769565, double0, 0.01);
      
      evaluation0.equals((Object) null);
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setWordSeparators(":Pj1t(u5r2$wJyD:");
      int[] intArray0 = new int[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2576.2, intArray0, (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2576.2;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      double[] doubleArray0 = new double[2];
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[1];
      intArray0[0] = 115;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4896.0, intArray0, 115);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      textDirectoryLoader0.listOptions();
      CoverTree coverTree0 = new CoverTree();
      Evaluation.makeOptionString(naiveBayesMultinomial0, false);
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      instances0.getRevision();
      double double0 = evaluation1.m_SumPriorSqrErr;
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (double) 2;
      doubleArray0[3] = (double) (-1);
      evaluation0.updateMargins(doubleArray0, 0, (-1.0E100));
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(1258);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 115;
      doubleArray0[1] = (double) 115;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 120, 115.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 120
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(1216);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      boolean boolean0 = evaluation1.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4709091397207432
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom1 = new MockRandom();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(14);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.trueNegativeRate(109);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numFalsePositives((-1));
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.883501065030505
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation1.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SystemInUtil.addInputLine("@relation");
      evaluation1.falseNegativeRate(2);
      evaluation1.correct();
      assertEquals(Double.NaN, evaluation1.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.5973827295793104
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelationalClassFormat(instances0);
      Instances instances1 = testInstances0.generate("Ol");
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      IBk iBk0 = new IBk();
      iBk0.setKNN((-700));
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.m_MissingClass;
      double double1 = evaluation1.numTruePositives(1);
      Evaluation evaluation2 = new Evaluation(instances0);
      String string0 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      double double3 = evaluation0.fMeasure((-2913));
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.734278702986467
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives(4124);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.truePositiveRate(0);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.4836148606239035
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@relation");
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      instances0.toSummaryString();
      double double0 = Evaluation.MIN_SF_PROB;
      // Undeclared exception!
      try { 
        evaluation1.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances instances0 = new Instances("CVParametersTipText", arrayList0, 821);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1852106726234373
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.getOptions();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      // Undeclared exception!
      try { 
        evaluation1.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteStringAttributes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.unweightedMicroFmeasure();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = true;
      MockRandom mockRandom0 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5957551458109667
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      evaluation0.KBInformation();
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.kappa();
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.KBMeanInformation();
      BallNode ballNode0 = new BallNode(77);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.toClassDetailsString(".arff");
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.KBRelativeInformation();
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        Evaluation.handleCostOption(".arff", 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Object object1 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.makeOptionString(cVParameterSelection0, false);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.m_SumClass;
      double double1 = evaluation1.m_SumSqrPredicted;
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      instances0.stratify(1003);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rFL%Ekw");
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      evaluation0.setDiscardPredictions(false);
      evaluation0.toMatrixString("getAutoBuild");
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom1 = new MockRandom((-2));
      double double0 = evaluation0.weightedMatthewsCorrelation();
      MockRandom mockRandom2 = new MockRandom();
      System.setCurrentTimeMillis(1L);
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      double double2 = evaluation0.pctCorrect();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Object object1 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) naiveBayesMultinomial0, instances0, objectArray0);
      Sourcable sourcable0 = null;
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "@relation");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      evaluation0.KBMeanInformation();
      evaluation0.errorRate();
      evaluation0.SFMeanSchemeEntropy();
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      try { 
        evaluation0.crossValidateModel((Classifier) simpleLinearRegression0, instances0, (-1), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      textDirectoryLoader0.listOptions();
      evaluation0.SFMeanSchemeEntropy();
      String string0 = Evaluation.makeOptionString(naiveBayesMultinomial0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.makeOptionString(logitBoost0, false);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString("@data");
      assertEquals("@data\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double double0 = new Integer((-2));
      double[] doubleArray0 = evaluation0.m_TrainClassVals;
      MockRandom mockRandom0 = new MockRandom();
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      evaluation0.getRevision();
      assertEquals(1.0, evaluation0.kappa(), 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.KBMeanInformation();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      double double0 = evaluation0.errorRate();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_SumClass;
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Object object1 = new Object();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) instances0;
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) mockRandom0;
      Object object2 = new Object();
      objectArray0[3] = object2;
      try { 
        evaluation0.evaluateModel((Classifier) naiveBayesMultinomial0, (Instances) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0570719867240714
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial1 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 115, (Random) mockRandom0, (Object[]) linearRegression0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.truePositiveRate(115);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.pctUnclassified();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = Evaluation.MIN_SF_PROB;
      double double4 = evaluation0.numInstances();
      assertEquals(0.0, double4, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5103090061340354
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockRandom0;
      objectArray0[1] = (Object) instances0;
      evaluation0.pctIncorrect();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 100, (Random) mockRandom1, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockRandom cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.KBMeanInformation();
      BallNode ballNode0 = new BallNode(77);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.addNumericTrainClass(0, 0);
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      BallNode ballNode0 = new BallNode((-2));
      CSVLoader cSVLoader0 = new CSVLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1.0), Double.NaN);
      ArffLoader arffLoader0 = new ArffLoader();
      assertEquals("Reads a source that is in arff (attribute relation file format) format. ", arffLoader0.globalInfo());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      try { 
        Evaluation.handleCostOption("getTechnicalInformation", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.883404187709486
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toClassDetailsString("@relation");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      OneR oneR0 = new OneR();
      oneR0.buildClassifier(instances0);
      String string1 = Evaluation.wekaStaticWrapper(oneR0, ".arff");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 116);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      J48 j48_0 = new J48();
      int int0 = (-1929);
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "    ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Object object0 = new Object();
      Object object1 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) cVParameterSelection0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object object0 = new Object();
      Object object1 = new Object();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Object[] objectArray0 = new Object[9];
      evaluation0.evaluateModel((Classifier) cVParameterSelection0, instances0, objectArray0);
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "8lpjNpq0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation.main(stringArray0);
      try { 
        Evaluation.evaluateModel("", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1L);
      try { 
        evaluation0.crossValidateModel("@relation", instances0, 201, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      textDirectoryLoader0.getDirectory();
      JRip jRip0 = new JRip();
      double double1 = evaluation1.kappa();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(1.0, double1, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.307469757346369
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.areaUnderROC(115);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_SumPredicted;
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.m_ClassPriorsSum;
      evaluation0.truePositiveRate(115);
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
      
      double double3 = evaluation0.recall(4);
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.941440681433638
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.numTruePositives((-1));
      LogitBoost logitBoost0 = new LogitBoost();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom1 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 2402, (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8834372182627477
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@relation");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertFalse(testInstances0.getMultiInstance());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.numTrueNegatives((-1112551771));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.SFEntropyGain();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      evaluation0.KBMeanInformation();
      try { 
        Evaluation.handleCostOption(".bsi", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_Incorrect = 2576.2;
      evaluation0.numTrueNegatives((-715));
      evaluation0.SFEntropyGain();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 483;
      try { 
        Evaluation.handleCostOption("RH", 483);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Instances instances0 = null;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Evaluation.handleCostOption("", 483);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(483);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setPriors(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertArrayEquals(new double[] {12.0, 10.0}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getRevision();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      MockRandom mockRandom2 = new MockRandom();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[2];
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances0, 115, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
