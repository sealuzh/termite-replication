/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 23:50:16 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2404100793262947
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      stringArray0[3] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("\b", false);
      boolean boolean0 = jSONObject0.isNull("kEo");
      boolean boolean1 = jSONObject0.optBoolean("");
      assertFalse(boolean1 == boolean0);
      
      jSONObject0.has("YL");
      JSONObject jSONObject2 = jSONObject1.put("", 1.0);
      double double0 = jSONObject2.optDouble("\b", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = jSONObject2.optInt("");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.648691437650585
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(46, (Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[46] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3577429090142707
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2812;
      jSONArray0.put(2812, 0.0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 10, 69);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8378573729485126
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(2922.28F);
      jSONObject0.toString((-1779));
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONException", float0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getInt("wheel.json.JSONException");
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000002\":java.lang.Float@0000000003}", (-452));
      String[] stringArray0 = JSONObject.getNames(jSONObject2);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0, (-350), 888);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(" of ", jSONArray0);
      jSONObject1.append(" of ", " of ");
      assertEquals(1, jSONArray0.length());
      
      boolean boolean0 = jSONObject0.isNull(" of ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.06294802539496
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = new Double(366.24916027873);
      Double.isFinite(1201.04709516);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getgetBytes", double0);
      jSONObject0.optLong("getgetBytes", 1L);
      jSONObject0.getDouble("getgetBytes");
      JSONObject.getNames(jSONObject1);
      jSONObject1.putOpt("getgetBytes", "getgetBytes");
      jSONObject0.optInt("getgetBytes", 1400);
      jSONObject0.keys();
      Double.sum((-1756.2340563384), 1L);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject.getNames(jSONObject0);
      jSONObject1.optBoolean("gettoUpperCase");
      jSONObject0.toString();
      try { 
        jSONObject1.getDouble("isreplaceFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplaceFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("PV49H", "PV49H");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote(".Yqz>}</H<)[J0Q>{TB");
      assertEquals("\".Yqz>}<\\/H<)[J0Q>{TB\"", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1569877743224177
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.~son.JSON%xception", "wheel.~son.JSON%xception");
      JSONObject.valueToString(jSONObject1);
      jSONObject1.isNull("wheel.~son.JSON%xception");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("wheel.~son.JSON%xception");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4999138335216076
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", 0.0);
      jSONObject0.names();
      long long0 = jSONObject1.getLong("Missing value");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.~son.JSON%xcepion", "wheel.~son.JSON%xcepion");
      Float float0 = new Float(1.0F);
      jSONObject1.accumulate("wheel.~son.JSON%xcepion", float0);
      boolean boolean0 = jSONObject0.isNull("wheel.~son.JSON%xcepion");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      jSONObject0.putOpt("is", object1);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      jSONObject0.put("{", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.getJSONObject("{");
      int int0 = jSONObject0.optInt("is");
      assertEquals(2, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4918032786885246
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getBoolean("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.735159750654875
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject.doubleToString(1233.21713404601);
      JSONObject jSONObject0 = new JSONObject((Object) "1233.21713404601");
      // Undeclared exception!
      jSONObject0.toString(2391);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.038009341005529
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5936617936186046
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "isdecode");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000004\":[java.lang.Byte@0000000026,java.lang.Byte@0000000027,java.lang.Byte@0000000028,java.lang.Byte@0000000029,java.lang.Byte@0000000030,java.lang.Byte@0000000031,java.lang.Byte@0000000032,java.lang.Byte@0000000033],\"java.lang.String@0000000023\":\"java.lang.Class@0000000024\",\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6847854169135204
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("g`ethashCode", (-37L));
      jSONObject1.optInt("g`ethashCode");
      JSONObject jSONObject2 = jSONObject1.put("isvalueOf", false);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      jSONObject0.put("Null key.", 2407.101318852306);
      long long0 = jSONObject0.getLong("Null key.");
      assertEquals(2407L, long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, 1215);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8315604048768774
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString();
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\":\"java.lang.Class@0000000004\"}");
      Integer integer0 = new Integer(2147483645);
      JSONObject.getNames((Object) integer0);
      String string0 = JSONObject.doubleToString(2147483645);
      assertEquals("2.147483645E9", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4999138335216076
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", 0.0);
      jSONObject1.names();
      int int0 = jSONObject1.getInt("] not found.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5394863401021275
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject.quote("wheel.json.JSONTokener");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Ur8Mi{", "wheel.json.JSONTokener");
      jSONObject1.optBoolean("Ur8Mi{", true);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      jSONObject0.optDouble("\"wheel.json.JSONTokener\"", 0.0);
      jSONObject1.optString("Ur8Mi{", "\"wheel.json.JSONTokener\"");
      try { 
        jSONObject0.getInt("b;[~TBA(['s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b;[~TBA(['s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.777881086074754
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = Double.valueOf((-1.0));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "false";
      stringArray0[1] = "getformat";
      stringArray0[2] = "gettoString";
      stringArray0[3] = "@d;";
      Double.sum(1.0, 0.0);
      Double.min((-1453.0), 1008.719);
      stringArray0[4] = ",\n";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.put("tri", 1008.719);
      JSONObject jSONObject1 = jSONObject0.put("false", 0L);
      jSONObject1.toString(54);
      jSONObject0.optDouble("tri");
      try { 
        jSONObject0.get("re");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"re\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float((-1829.49651731443));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gethashCode", (-1443));
      double double0 = jSONObject0.optDouble("gethashCode", 0.0);
      assertEquals((-1443.0), double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      stringArray0[2] = "\b";
      stringArray0[4] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      boolean boolean0 = false;
      jSONObject0.put("\b", false);
      String string0 = "{g]!X^?oMgZ3YTBBD";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{g]!X^?oMgZ3YTBBD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {g]!X^?oMgZ3YTBBD
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = 637.288193;
      String string0 = "{$eDnC/X[F<zaI[l<dv";
      JSONTokener jSONTokener0 = new JSONTokener("{$eDnC/X[F<zaI[l<dv");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {$eDnC/X[F<zaI[l<dv
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1071024035889305
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("0..", "0..");
      Boolean boolean0 = new Boolean("0..");
      try { 
        jSONObject1.getBoolean("0..");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0..\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      long long0 = jSONObject0.optLong("aVT?}Lv`", (-2717L));
      assertEquals((-2717L), long0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6175416027956206
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-3486.92976299902));
      jSONObject0.put("true", (Object) double0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject0.toString();
      long long0 = jSONObject0.optLong("true");
      assertEquals((-3486L), long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.684050056823537
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      jSONObject0.keys();
      jSONObject0.optString("", "");
      Object object1 = new Object();
      JSONObject.getNames(jSONObject0);
      Object object2 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("Null pointer", object2);
      jSONObject1.optBoolean("[2_*6?/V", false);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      jSONObject0.put("getdecode", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONObject("getdecode");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      hashMap0.put((Byte) null, double0);
      JSONObject.valueToString(hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gethashCode", (-37L));
      long long0 = jSONObject0.getLong("gethashCode");
      assertEquals((-37L), long0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8778338785620066
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.toString();
      jSONObject1.optInt("yz] AlHkmj.Jd7", 0);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.put("yz] AlHkmj.Jd7", (Object) hashMap0);
      Object object2 = new Object();
      Short short0 = new Short((short) (-764));
      JSONObject.getNames((Object) short0);
      jSONObject2.toString((-1703), 0);
      jSONObject1.has("yz] AlHkmj.Jd7");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.7539479937314992
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null key.");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.putOpt("Null key.", boolean0);
      try { 
        jSONObject1.append("Null key.", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Null key.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("T>fw&=o!ywTIjatu;_", 2025.96534707);
      Object object0 = jSONObject0.opt("T>fw&=o!ywTIjatu;_");
      assertEquals(2025.96534707, object0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9186921450736087
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(438L);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      hashMap0.getOrDefault(jSONObject0, long0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.toString();
      jSONObject1.optInt("yz] AlHkmj.Jd7", 0);
      Long long1 = new Long(438L);
      hashMap0.put((Integer) null, long1);
      Float float0 = new Float((double) 438L);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.put("yz] AlHkmj.Jd7", (Object) hashMap0);
      jSONObject2.putOpt("nC@Im{vxFCAfRLzA", long0);
      Object object2 = new Object();
      Short short0 = new Short((short) (-764));
      JSONObject.getNames((Object) short0);
      // Undeclared exception!
      try { 
        jSONObject2.toString((-1703), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("g`ethashCode", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.836521786753116
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Long long0 = new Long(350L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.optJSONArray("va");
      jSONObject0.optBoolean((String) null);
      jSONObject0.optString((String) null, (String) null);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = null;
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9722580181544476
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.toString();
      jSONObject1.optInt("yz] AlHkmj.Jd7", 0);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.put("yz] AlHkmj.Jd7", (Object) hashMap0);
      Object object2 = new Object();
      Short short0 = new Short((short) (-764));
      JSONObject.getNames((Object) short0);
      jSONObject2.optInt("{\"java.lang.String@0000000003\":\"java.lang.Class@0000000004\"}");
      String string0 = jSONObject2.toString(0);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("_V`:n/$$*/pi:i", (-666.7144));
      assertEquals((-666.7144), double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.accumulate("", jSONArray0);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      Object object0 = jSONObject0.opt("getintValue");
      assertNull(object0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(hashMap0, (-2338), 17);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(25);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 10, 69);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(hashMap0, 0, 0);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(1, jSONArray2.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|BhF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |BhF
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("gethashCode");
      JSONObject jSONObject1 = jSONObject0.accumulate("gethashCode", "gethashCode");
      try { 
        jSONObject1.getJSONArray("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.~son.JSON%xcepion", "wheel.~son.JSON%xcepion");
      jSONObject1.getJSONArray("wheel.~son.JSON%xcepion");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9853278202731631
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ";H\"?k");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4999138335216076
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (-1876.3));
      jSONObject1.names();
      String string0 = jSONObject1.optString("Missing value");
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.4437350832047358
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", 0.0);
      double double0 = jSONObject1.getDouble("Missing value");
      assertEquals(0.0, double0, 0.01);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7895928692359226
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      jSONObject0.put("[", (-139.036875692));
      double double0 = jSONObject0.getDouble("[");
      assertEquals((-139.036875692), double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("w9'U-:T#@-q", 3601.306839);
      String string0 = jSONObject1.getString("w9'U-:T#@-q");
      assertNotNull(string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      jSONObject0.put("JQ3A_R:dlXI0mso+", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4574653869995418
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.~son.JSON%xcepion", "wheel.~son.JSON%xcepion");
      jSONObject0.isNull("wheel.~son.JSON%xcepion");
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get("wheel.~son.JSON%xcepion");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6447011798877047
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6888133206245313
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      String string0 = ",\n";
      Integer integer0 = new Integer(520);
      Integer.min(520, 520);
      Long long0 = new Long(520);
      hashMap0.put(integer0, long0);
      JSONObject.doubleToString(71.589293);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = "getaccumulate";
      String string2 = "gettoJSONArray";
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.379123516937678
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(">zuzgdGO43 C2;gKkD", true);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = jSONObject0.putOpt((String) null, jSONObject1);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getgetBytes", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6237180760658338
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject.quote("AM");
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getoptJSONArray", true);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.getBoolean("getoptJSONArray");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.887237495149786
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject("nC@Im{vxFCAfRLzA", stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("nC@Im{vxFCAfRLzA", false);
      jSONObject0.toString();
      jSONObject2.getBoolean("nC@Im{vxFCAfRLzA");
      jSONObject1.optInt("va", 0);
      jSONObject2.isNull("va");
      jSONObject1.optJSONArray("nC@Im{vxFCAfRLzA");
      jSONObject1.optBoolean((String) null);
      jSONObject1.optBoolean((String) null, false);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(0);
      Long long1 = new Long((-1L));
      Long.getLong(",kW3nv^ aQN_ ZB\"VS.", long1);
      JSONObject.getNames((Object) long0);
      Double double0 = new Double(0);
      JSONObject.quote((String) null);
      JSONObject jSONObject3 = jSONObject1.optJSONObject("M>i,zk&6b2g");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 915, (-5207));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 0, 0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A(X=v3/I#oQ", (Object) "A(X=v3/I#oQ");
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-2338), 43);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.2050510283746196
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.~son.JSON%xcepion", "wheel.~son.JSON%xcepion");
      jSONObject0.isNull("wheel.~son.JSON%xcepion");
      try { 
        jSONObject1.getInt("wheel.~son.JSON%xcepion");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.~son.JSON%xcepion\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(" at character ", false);
      jSONObject0.toString(1, 59);
      boolean boolean0 = jSONObject0.optBoolean(" at character ");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("get", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.327701700803115
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("wheel.~son.JSON%xcepion", "wheel.~son.JSON%xcepion");
      jSONObject0.isNull("wheel.~son.JSON%xcepion");
      try { 
        jSONObject0.getJSONObject("wheel.~son.JSON%xcepion");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.~son.JSON%xcepion\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 111, (-3440));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("getformat", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("l.L3nw_pm$NC", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(0.0);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.1045261287948605
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.~son.JSON%xcepion";
      JSONObject jSONObject1 = jSONObject0.append("wheel.~son.JSON%xcepion", "wheel.~son.JSON%xcepion");
      try { 
        jSONObject1.getDouble("wheel.~son.JSON%xcepion");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.~son.JSON%xcepion\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.476941678592489
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("\b", true);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "EJN2G/,+j3Q<WIU(W");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.testValidity(jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.put("vE.`t8p|X", (Object) null);
      String string0 = jSONObject1.toString(48, 48);
      assertEquals(0, jSONObject0.length());
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("getoptJSONObject");
      long long0 = jSONObject0.optLong("getoptJSONObject");
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("getoptJSONObject", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getoptJSONArray", (-37L));
      jSONObject1.remove("getoptJSONArray");
      try { 
        jSONObject0.getBoolean("getoptJSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getoptJSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("gVj ONcs2", 320.05102);
      assertEquals(320.05102, double0, 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("gettoString");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.9206095188252168
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Object object0 = new Object();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      int int0 = jSONObject0.optInt("{}", 0);
      assertEquals(0, int0);
      
      String string1 = jSONObject0.toString((-108916131), 0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.7098678211741523
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A>pu$MvW55PxQ", 5639.654255653955);
      jSONObject1.optInt("A>pu$MvW55PxQ", 64);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float(3729.158887);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("%|^", "%|^");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.quote("42Snsnv2^jR6KFC\"");
      assertEquals("\"42Snsnv2^jR6KFC\\\"\"", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.027242060013438
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(">", 93);
      assertEquals(93, int0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("", (-1963));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.9828215546090028
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("wheel.json.JSONException", (Collection) linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7591946055597467
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject.getNames((Object) "Nul, poinrteb");
      JSONObject jSONObject0 = new JSONObject((Object) "Nul, poinrteb");
      Object object0 = new Object();
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.1884181677496533
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray1);
      jSONObject0.toString((-2338), (-2338));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-1240), (-1240));
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.2001248812718097
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject1, (-70125688), 4);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.2090137701606987
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "A JSONObject text must end with '}'");
      // Undeclared exception!
      jSONObject0.toString(942, 942);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".", true);
      try { 
        jSONObject0.getLong(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("wheel.~son.JSON%xception", "wheel.~son.JSON%xception");
      int int0 = jSONObject0.optInt("wheel.~son.JSON%xception");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("XpgHE>$kd;r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"XpgHE>$kd;r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(")XDShi./");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of )XDShi./
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("wQ^zK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wQ^zK
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("/A?*m[`m7,", (-8L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("wr", 1L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.quote("i}Et,OT_h;4/G");
      assertEquals("\"i}Et,OT_h;4/G\"", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("for");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Short, Object> hashMap0 = new HashMap<Short, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("3?EKc_emZ>@", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("EJN2G/,+j3Q<WIU(W");
      assertEquals("\"EJN2G/,+j3Q<WIU(W\"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Short short0 = new Short((short) (-548));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Byte byte0 = new Byte((byte)123);
      String string0 = JSONObject.valueToString(byte0, (byte)123, (byte)123);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = JSONObject.quote("Unclosed comment");
      assertEquals("\"Unclosed comment\"", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("rev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rev\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gethashCode", (-37L));
      try { 
        jSONObject1.getBoolean("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "sN2zDG[rg");
      try { 
        jSONObject0.getJSONArray("sN2zDG[rg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sN2zDG[rg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.384892433099771
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      Float float0 = new Float(71.589293);
      String string0 = JSONObject.doubleToString(71.589293);
      assertEquals("71.589293", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.optString("getaccumulate", "gettoJSONArray");
      assertEquals("gettoJSONArray", string1);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.5301062555592586
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject.getNames((Object) null);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      jSONObject0.keys();
      jSONObject0.optString("", "");
      Object object1 = new Object();
      String string0 = JSONObject.quote("wheel.json.JSONArray");
      assertEquals("\"wheel.json.JSONArray\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(",");
      assertEquals("", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("&VF3;$o}D]X.k2[");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }
}
