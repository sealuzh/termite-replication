/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 23:33:24 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.397603323545265
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372032559808513L, 9223372032559808513L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 9223372032559808513 .. 9223372032559808513 ]/0B", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(293L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3878076553320624
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(255L);
      range1.equals("^NI5i#s4=Hqaz3fJTu<");
      assertFalse(range1.isEmpty());
      
      Range.of(205L, 4294967295L);
      Range range2 = Range.ofLength(4294967295L);
      range2.toString();
      range0.equals(range2);
      String string0 = range2.toString();
      assertFalse(range2.equals((Object)range1));
      assertEquals("[ 0 .. 4294967294 ]/0B", string0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372032559808513L, 9223372032559808513L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4782050915015486
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L), 737L);
      range1.endsBefore(range0);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6453343851127387
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808513L);
      Range range1 = Range.of(9223372032559808513L);
      Range range2 = Range.of(205L, 9223372032559808513L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      
      String string0 = range2.toString();
      assertEquals("[ 205 .. 9223372032559808513 ]/0B", string0);
      
      String string1 = range1.toString();
      assertEquals("[ 9223372032559808513 .. 9223372032559808513 ]/0B", string1);
      
      Range range3 = Range.parseRange("[ 205 .. 9223372032559808513 ]/0B");
      assertSame(range3, range2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.770528390092953
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775805L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3719087675164676
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-1004L), (-1004L));
      Range range1 = Range.of((-2327L), (-2327L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      String string0 = range1.toString();
      assertEquals("[ -2327 .. -2327 ]/0B", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-1004L), (-1004L));
      Range range1 = Range.of((-1004L), 737L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(2123L);
      Range.of(2123L, 2123L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2218323709355956
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(83L);
      Long long0 = new Long((-4279L));
      Range range1 = Range.of(37L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854773680L);
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1320150760941314
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(497L, 9223372036854775740L);
      range0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(89L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(1196L, 9223372036854773665L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854773680L);
      boolean boolean0 = range0.equals("The first parameter in the comparison is null.");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1359517395531467
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.of(1558L);
      Range range0 = Range.of(1558L);
      Range.of(1558L);
      Range range1 = Range.of(1558L, 3273L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.892632114903634
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L), 737L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1032L, 9223372036854773680L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(293L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L), (-32768L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1021L, 1021L);
      Long long0 = new Long((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(89L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 89L, 89L);
      range1.equals((Object) null);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(9223372036854775750L);
      range0.equals((Object) null);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775750L, long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0538382463504266
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(3867L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3867L, 3867L);
      boolean boolean0 = range0.equals(range_Builder1);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6988395821358204
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(9223372034707292161L, 9223372034707292161L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372034707292161 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4946186878078884
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.add(range0);
      assertTrue(linkedList0.contains(range0));
      
      range0.complementFrom(linkedList0);
      Range range1 = Range.ofLength(0L);
      range0.intersects(range1);
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(2147483651L);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long(2147483651L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.388794470829919
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-1652L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775804L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(9223372036854775804L);
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Long long0 = new Long((-3989L));
      Object object0 = new Object();
      Range range0 = Range.of((-3989L), 32767L);
      boolean boolean0 = range0.equals("org.jcvi.jillion.internal.core.util.Cahes$SoftReferenceCache");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(2147483669L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(3853L);
      Range range0 = range_Builder0.build();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.40006131039348
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(80L, 65535L);
      Long long0 = new Long(1L);
      Range range1 = Range.ofLength(80L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(89L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 89L, 89L);
      Long long0 = new Long(89L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(89L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 89L, 89L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2915860976209297
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-1004L), (-1004L));
      Range range1 = Range.of((-884L), (-884L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long((-884L));
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Long long0 = new Long(9223372036854770334L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1L);
      range0.equals((Object) null);
      Range range1 = Range.of(9223372036854770334L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4009736500810246
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 3830L, 32767L);
      Range.of(range_CoordinateSystem0, 2426L, 3830L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      range0.split(1L);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.7997829992122876
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(455L);
      List<Range> list0 = range0.split(455L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      
      range0.isEmpty();
      Range range1 = Range.ofLength(1L);
      List<Range> list2 = range1.split(1L);
      //  // Unstable assertion: assertTrue(list2.contains(range1));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.ofLength(9223372032559808513L);
      Range.of(9223372032559808513L);
      long long0 = (-1773L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-1773L), 9223372032559808513L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-532L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.387266167834053
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-7L), (-7L));
      Range.of((-2822L), 21L);
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 238L);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2965L, 2965L);
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(89L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-7L), (-7L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Long long0 = new Long(2606L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.UTF-8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.7558977362257764
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(455L);
      Range range1 = Range.ofLength(455L);
      List<Range> list0 = range0.split(455L);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775808L), (-169L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -170 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.81332843217249
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775805L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.offer(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775805L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -7 would make range [9223372036854775805 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.470713849179491
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(3853L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(380L, 2147483647L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = 9223372036854775740L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775740L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854775739 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0632544422073003
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1968824804758986
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.of((-9223372036854775808L), (-9223372036854775808L));
      Long long0 = new Long(301L);
      Range range0 = Range.of(301L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.519309874334139
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(2147483631L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483631L, 2147483631L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.of(9223372036854773680L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854773680L, (-2147483647L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483647 would make range [9223372036854773680 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3267198375627096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.of(167L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(167L);
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.4101865964806213
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-3L), 127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-3L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1106L), (-1106L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Long long0 = new Long((-9223372036854775808L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(9223372036854775750L, 9223372036854775750L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1126512729537206
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.634124352915451
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.542280285257054
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854773680L);
      List<Range> list0 = range0.split(9223372036854773680L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3277188385617107
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(2128L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2128L, 2128L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      range1.complement(range0);
      assertTrue(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.180683087165041
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(2128L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(89L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 89L, 89L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3012758672923317
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(127L);
      range_Builder0.build();
      Range range0 = Range.ofLength(127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(2128L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(2128L, 9223372036691986868L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = 2128L;
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.of((-2147483648L));
      Range range0 = Range.of((-2147483648L), 4294967295L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.572198828574344
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 89L, 89L);
      Range range1 = Range.of(89L);
      range0.isSubRangeOf(range1);
      Long long0 = new Long(89L);
      assertEquals(89L, (long)long0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.3778379642763916
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(9223372036854771942L, 9223372036854771942L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.9847361845052114
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(3853L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(3852L, long0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(1571L);
      Range range1 = Range.of(1571L);
      Long long0 = new Long((-2726L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(167L);
      List<Range> list0 = range0.split(167L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3884109735824395
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(1620L, 1620L);
      Range range1 = Range.of(1620L, 1620L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.206821699873709
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L);
      Range range1 = Range.of(9223372032559808513L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(2128L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(2128L, 2147483664L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.1360633176392105
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(9223372036854775805L, 9223372036854775805L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.2702889050819355
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854775719L);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 9223372036854775719 ]/0B", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.184864138808694
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(9223372032559808513L);
      Range range1 = Range.of(9223372032559808513L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range1));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.386371757896165
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-3454L));
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.3268842301321655
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(2130L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2130L, 2130L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.1663220963871312
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(455L);
      long long0 = range0.getBegin();
      assertEquals(455L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(2130L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-13L));
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.773748879364773
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(2128L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2128L, 2128L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = 2128L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder1 = new Range.Builder((-1L), 2128L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1348556489429895
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775750L);
      Range range1 = Range.of(9223372036854775750L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(9223372036854775750L);
      range0.equals(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.4455414218236373
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(89L);
      Range range1 = Range.of(65535L, 65535L);
      Object object0 = new Object();
      range1.equals(object0);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967296L, 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.8655893453448336
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1732L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ -1733 .. 2147483646 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, (-1732L), (-1732L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2120L);
      Range range1 = Range.ofLength(2120L);
      range_Builder0.contractBegin(0L);
      String string1 = range1.toString(range_CoordinateSystem2);
      assertEquals("[ 1 .. 2120 ]/RB", string1);
      
      range0.iterator();
      range_Builder0.expandBegin((-1732L));
      range_Builder1.contractBegin(251L);
      Range range2 = range_Builder1.build();
      range0.getBegin();
      range0.isEmpty();
      range_Builder1.shift((-1732L));
      range_Builder0.expandEnd(25L);
      Range range3 = Range.parseRange("[ 1 .. 2120 ]/RB", range_CoordinateSystem0);
      range1.getBegin();
      range1.equals(range_CoordinateSystem0);
      range1.iterator();
      range_CoordinateSystem1.getAbbreviatedName();
      List<Range> list0 = range2.complement(range1);
      assertSame(range1, range3);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(1201L);
      range0.getBegin();
      Range range1 = Range.of((-1020L), 1201L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L));
      long long0 = range1.getBegin();
      assertEquals((-2147483648L), long0);
      
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(167L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.386722122859669
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(89L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 89L, 89L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.6318970936269914
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(9223372032559808513L, 9223372032559808513L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(32767L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.135560826118755
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.486782992255533
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(293L, 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.4782050915015486
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L), 737L);
      boolean boolean0 = range1.endsBefore(range0);
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(9223372036854775750L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      List<Range> list0 = range0.split(255L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-1106L), (-1106L));
      boolean boolean0 = range0.equals("The first parameter in the comparison is null.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.457663386901383
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of((-2956L), (-2956L));
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.equals(consumer0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(9223372036854775670L, 9223372036854775670L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.9782399831213344
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775805L);
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.2573961657836517
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.shift(3853L);
      Range range0 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.536769844477609
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-610L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of((-1L), 1485L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.0264899304042587
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = 3853L;
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(3853L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(3853L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.256312154943543
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(3853L);
      range_Builder0.shift(3853L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2120L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.8922698206242154
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(2128L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2128L, 2128L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range0.intersects(range1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.3268842301321655
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.194115787089186
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775382L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.441951287470698
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of((-1L), 1485L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.21083946213453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(9223372036854775750L, 9223372036854775750L);
      Range range1 = Range.of(485L, 9223372036854775750L);
      range1.startsBefore(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.4432044112652056
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(3853L);
      Range range1 = Range.of(1591L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.5468637782851586
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(1592L);
      Range range1 = Range.ofLength(1592L);
      Range range2 = Range.of(1592L, 4294967295L);
      Range range3 = Range.ofLength(1592L);
      boolean boolean0 = range2.intersects(range1);
      assertSame(range1, range3);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(2128L, 2128L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(2128L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.0581000423930447
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(2128L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2L), (-2L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(42L);
      range_Builder0.shift(42L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1732L);
      long long1 = 2147483647L;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 4294967318L);
      range0.toString(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.4470602449153285
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483647L), long0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.232007481296918
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      long long0 = range0.getEnd();
      assertEquals((-32768L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.2059199195317634
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertSame(range0, range1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long((-1L));
      range0.equals(long0);
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      linkedList0.push((Range) null);
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.443239938399054
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808513L);
      Range range1 = Range.of(9223372032559808513L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      assertTrue(list0.contains(range1));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.5406464687311736
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(2222L, 2222L);
      Range range1 = Range.ofLength(2839L);
      range1.endsBefore(range0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      String string1 = range_CoordinateSystem0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.189445966850307
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      String string0 = range0.toString();
      assertEquals("[ -32768 .. -32768 ]/0B", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.889123342973809
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-13L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -12 .. -12 ]/RB", string0);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-32768L));
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.202758091420238
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(167L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(168L, long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(2128L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2129L, long0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.5888003008919465
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-1L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.371598757697741
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(9223372036854773680L, 9223372036854773680L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.200113693165702
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.589001637031784
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.ofLength(9223372032559808513L);
      Range range1 = Range.ofLength(9223372032559808513L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.130285399790697
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of(98L, 98L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.0618047033734874
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of(9223372036854775750L, 9223372036854775750L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of(2124L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((-1L), (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of(9223372036854775740L, 9223372036854775740L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854774904L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=3.63080331763158
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.of((-2171L));
      Range.of((-2171L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of((-2076L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.2227634799363307
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.of((-529L), 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.797208748908024
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range range0 = Range.of(2128L);
      range0.startsBefore(range0);
      range0.endsBefore(range0);
      Range range1 = Range.of(2128L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=3.313269429363784
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-1509L));
      range_Builder0.expandBegin(3853L);
      range_Builder0.shift(3853L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 169
  /*Coverage entropy=3.0264899304042587
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long long0 = 3853L;
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(3853L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-2822L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Range range0 = Range.of((-21L), (-21L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 172
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2147483645L, 2147483645L);
      assertFalse(range0.isEmpty());
  }
}
