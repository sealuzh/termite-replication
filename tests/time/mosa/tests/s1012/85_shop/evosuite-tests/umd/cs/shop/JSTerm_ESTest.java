/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 23:33:26 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.109371696038921
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = jSTerm0.elementAt(0);
      jSSubstitution1.add(object0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.109331777855455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.elementAt(0);
      jSSubstitution1.add((Object) jSTerm1);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm0);
      JSJshopVars.rightPar = 0;
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      jSTerm1.isGround();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("(zr(vk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4458602039948794
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object0 = jSTerm0.elementAt(0);
      jSSubstitution1.add(object0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      StringReader stringReader0 = new StringReader("y\t$QS\"@sF3@7l':");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSJshopVars.equalT = 42;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.431221593578345
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.elementAt(0);
      jSSubstitution1.add((Object) null);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.matches(jSTerm0);
      jSSubstitution1.add((Object) jSTerm0);
      StringReader stringReader0 = new StringReader("y\t$QS\"@sF3@7l':");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSSubstitution1.add((Object) jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.equals(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1032191624484695
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 633;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      int int0 = 42;
      JSJshopVars.colon = 42;
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      jSTerm0.stream();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9615009269277652
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("N^-vby%|u(EIK:n6^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.equals(jSTerm0);
      jSTerm0.isGround();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      StringReader stringReader0 = new StringReader("gE}o\"^=J}gxi{n");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.instance(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isConstant());
      
      JSJshopVars.verticalL = (-847);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertEquals(1, jSTerm2.size());
      
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm3, jSTerm0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3713578200646475
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      jSSubstitution0.add((Object) jSSubstitution1);
      JSJshopVars.leftBrac = 0;
      // Undeclared exception!
      try { 
        jSTerm2.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.488312269837143
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.print();
      jSTerm1.isGround();
      jSTerm1.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.cloneS();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.940759005065727
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm4.matches(jSTerm2);
      jSTerm3.isVariable();
      assertTrue(jSTerm3.isVariable());
      
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      JSJshopVars.verticalL = (-1);
      jSTerm3.makeConstant();
      jSTerm5.equals(jSTerm4);
      jSTerm2.print();
      assertFalse(jSTerm2.equals((Object)jSTerm0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4374355727841266
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.print();
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.isVariable();
      jSTerm1.equals(jSTerm0);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm3);
      jSTerm2.print();
      assertTrue(jSTerm0.isEval());
      assertTrue(jSTerm2.isEval());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3926412330263362
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.print();
      jSTerm0.isGround();
      jSTerm2.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.cloneS();
      stringReader0.reset();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.print();
      assertTrue(jSTerm2.isEval());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0698217928266307
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      jSTerm0.isGround();
      jSTerm1.makeEval(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.cloneS();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = 'f';
      stringReader0.read(charArray0);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.clear();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5467864208112987
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.isFunction();
      jSTerm1.makeEval(true);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm2.makeConstant();
      boolean boolean0 = jSTerm3.isConstant();
      assertTrue(jSTerm1.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4361062274866856
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isFunction();
      jSTerm2.makeEval(true);
      assertTrue(jSTerm2.isEval());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.makeConstant();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.makeEval(true);
      boolean boolean0 = jSTerm3.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.isConstant();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeEval(true);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSTerm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.168599339177026
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSJshopVars.leftBrac = 0;
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      boolean boolean0 = jSTerm1.isConstant();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6898839590099803
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      JSJshopVars.exclamation = 2041;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.resetSyntax();
      jSSubstitution0.addAll((Collection) jSTerm0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.287334690466993
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = jSTerm4.matches(jSTerm2);
      JSTerm jSTerm5 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm5);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.matches(jSTerm3, jSSubstitution0);
      assertEquals(2, jSSubstitution0.size());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4297811167972485
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.matches(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4152865982873655
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = (JSTerm)jSTerm2.remove(0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("([(this Collection)] )", stringBuffer0.toString());
      
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1);
      assertTrue(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm3, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.436476186791162
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.isFunction();
      assertTrue(jSTerm1.isVariable());
      
      jSTerm2.makeEval(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm1.makeConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertFalse(jSTerm1.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      jSTerm0.cloneT();
      JSJshopVars.rightPar = 1;
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.spliterator();
      jSTerm1.makeConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7695120854656476
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm4.matches(jSTerm1, jSSubstitution0);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.573112427755785
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      jSTerm0.isGround();
      jSTerm1.makeEval(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.cloneS();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm2.matches(jSTerm0);
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm1.equals(jSTerm0);
      jSTerm1.standardizerTerm();
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.284717215706928
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      ListIterator listIterator0 = jSTerm2.listIterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm2.print();
      jSSubstitution1.add((Object) listIterator0);
      assertEquals(2, jSSubstitution1.size());
      
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm0);
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSTerm> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm0.removeIf(predicate0);
      jSTerm0.iterator();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("l#\"B;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2801315622513108
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.cloneT();
      jSTerm1.matches(jSTerm0);
      StringReader stringReader0 = new StringReader("HTY0G.^*!\"H");
      StringReader stringReader1 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.059354619737041
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEval();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7|c2PM)w!e4SS*Dek;}");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      StringReader stringReader0 = new StringReader(":5d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2826685601371457
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.remove(0);
      jSTerm0.call();
      jSTerm2.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.cloneT();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeEval(true);
      StringReader stringReader1 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isFunction());
      
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      assertTrue(jSTerm3.isFunction());
      
      jSTerm0.isVariable();
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      assertFalse(jSTerm0.isEval());
      
      StringReader stringReader2 = new StringReader("crO");
      StringReader stringReader3 = new StringReader("n^U$yF\"f0");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = jSTerm3.call();
      assertFalse(jSTerm4.isFunction());
      assertEquals("[nil]", jSTerm2.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.listIterator();
      jSTerm0.print();
      jSTerm0.isVariable();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertTrue(jSSubstitution0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2801315622513108
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm0.matches(jSTerm2);
      assertTrue(jSTerm0.isVariable());
      
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
      
      boolean boolean0 = jSTerm3.isConstant();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isVariable());
      assertFalse(boolean0);
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6685138072865224
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm2.makeConstant();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.spliterator();
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      assertTrue(jSTerm2.isConstant());
      
      boolean boolean0 = jSTerm3.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7359262060495704
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      jSTerm0.isGround();
      jSTerm0.equals(jSTerm1);
      jSTerm1.isVariable();
      jSTerm0.makeEval(true);
      jSTerm1.matches(jSTerm0);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm1.matches(jSTerm0);
      jSTerm1.makeEval(false);
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      boolean boolean0 = jSTerm0.isGround();
      jSTerm1.makeEval(false);
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertEquals(1, jSSubstitution1.size());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2806483581169434
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.remove(0);
      assertEquals("[(this Collection)]", jSTerm0.toString());
      
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.toStr();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2, jSSubstitution0);
      assertNotSame(jSSubstitution0, jSSubstitution1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      StringReader stringReader1 = new StringReader("?i9@<{I/4wH0H");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.toStr();
      jSTerm1.makeConstant();
      jSTerm3.isConstant();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.271759469228055
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SdX&+*e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.clone();
      jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
