/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 09:41:38 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.983741702840421
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2615L, 2615L);
      long long0 = 65535L;
      Range range0 = Range.of(2615L, 65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.of(range_CoordinateSystem0, 30L, 2615L);
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem.values();
      range1.intersection(range0);
      String string0 = "cluster distance can not be negative";
      // Undeclared exception!
      try { 
        Range.parseRange("cluster distance can not be negative", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cluster distance can not be negative into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6218116086330965
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.ofLength(9223372036854774541L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 205L, 255L);
      Range range0 = Range.of(9223372036854774541L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Object object0 = new Object();
      range_Builder0.expandEnd(9223372036854774541L);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2534 would make range [9223372036854774541 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.939713297641644
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(65598L, 65598L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 65599 .. 65599 ]/RB", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-1024L), 4294967295L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      Range range2 = Range.parseRange("[ 65599 .. 65599 ]/RB");
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.386825658605385
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(1708L);
      range0.getBegin();
      Range range1 = Range.of(1708L);
      range1.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("c4;L3-8c 3\u0004", range_CoordinateSystem0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3294539455599756
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-724L), 4294967322L);
      Range range1 = Range.of((-724L));
      Range range2 = Range.of((-724L));
      range2.iterator();
      range1.equals(range2);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.isEmpty());
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Long long0 = new Long((-1L));
      Object object0 = new Object();
      range0.equals(object0);
      range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2714122516515456
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774541L, 9223372036854774541L);
      Range range1 = Range.of(9223372036854774541L);
      Object object0 = new Object();
      range0.equals(object0);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4368525347745678
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(1679L, 1679L);
      Range range1 = Range.of(4548L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.420923825499276
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = Range.of((-1L));
      range1.equals(range0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertSame(range1, range2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775794L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854775794 ]/0B", string0);
      
      boolean boolean0 = range0.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(148L, 148L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 148L, 148L);
      range1.equals(range1);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.717682507445764
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of((-1130L));
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      range0.getLength();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.of((-2252L));
      range0.forEach(consumer0);
      range2.iterator();
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 0 .. 3747 ]/0B", string0);
      
      range0.iterator();
      Range range3 = range1.intersection(range0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer1);
      Range.ofLength(2147483647L);
      range3.endsBefore(range2);
      range3.equals((Object) null);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string1 = range2.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ -2251 .. -2251 ]/RB", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.589001637031784
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1190L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range1 = Range.of(range_CoordinateSystem1, (-3761L), 1190L);
      range0.complement(range1);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 1190 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 1190 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.589001637031784
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1190L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      //  // Unstable assertion: assertEquals("[ 0 .. 1190 ]/RB", string0);
      
      Range range1 = Range.of(range_CoordinateSystem1, (-3761L), 1190L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3268842301321655
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      Range.of(32768L);
      range0.equals((Object) null);
      Range range1 = range0.asRange();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.5515041854828477
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range range0 = Range.of(1093L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(489L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(489L);
      long long0 = range0.getLength();
      assertEquals(9223372036854775319L, long0);
      
      range0.equals((Object) null);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967322L, 4294967322L);
      Range range1 = Range.of(4294967322L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2855453054602215
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(65578L, 65578L);
      Range range1 = Range.of(65578L, 4294967295L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774541L, 9223372036854774541L);
      Range range1 = Range.of(9223372036854774541L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of((-488L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854710229L, 9223372036854774541L);
      Range range1 = Range.of(9223372036854710229L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("offset must be >= 0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse offset must be >= 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9799561547384963
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(65536L, 65536L);
      Range range1 = Range.of(65536L, 4294967322L);
      boolean boolean0 = range1.endsBefore(range0);
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(65578L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1360270265849555
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-2147483714L));
      Range range1 = Range.of((-2147483714L));
      range1.intersection(range0);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774541L, 9223372036854774541L);
      Range range1 = Range.of(9223372036854774541L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-724L), 4294967322L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32762L, 32762L);
      range0.equals("Zh;['bRo^%2,(c`@o[");
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774541L, 9223372036854774541L);
      Range range1 = Range.of(9223372036854774541L);
      boolean boolean0 = range1.equals((Object) null);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.461545012183783
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.toString();
      // Undeclared exception!
      try { 
        range1.split(9223372036854775518L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -581 would make range [9223372036854775518 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.7360833161796227
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-4378L), 290L);
      Range range1 = Range.of((-4378L));
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9812029460842977
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(1216L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
      //  // Unstable assertion: assertSame(range2, range0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.857707032018354
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(244L);
      Range range1 = Range.ofLength(65536L);
      Range range2 = Range.of(1647L, 65536L);
      range2.endsBefore(range1);
      Range.of(127L, 401L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      List<Range> list0 = range2.split(127L);
      // Undeclared exception!
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4404389791664403
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(3481L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2029L, 3481L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range2 = range_Builder0.build();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(1679L, 1679L);
      Range range1 = Range.of(4548L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3846246314593835
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.of(65536L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(65536L);
      Range range2 = range1.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.449983210184962
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(148L, 148L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 149 .. 149 ]/RB", string0);
      
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 149 .. 149 ]/RB", range_CoordinateSystem1);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774541L, 9223372036854774541L);
      Range range1 = Range.ofLength(9223372036854774541L);
      boolean boolean0 = range1.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-2147483682L));
      Long long0 = new Long((-2147483682L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      long long1 = range0.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6680366057816833
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      long long1 = (-128L);
      Range range1 = Range.of((-128L));
      List<Range> list0 = range0.complement(range0);
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      Range range1 = Range.of(32768L);
      assertFalse(range1.isEmpty());
      
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774541L, 9223372036854774541L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.134470173651956
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(148L, 148L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 149 .. 149 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 149 .. 149 ]/RB", range_CoordinateSystem1);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L, 255L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2573961657836517
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1190L, 1190L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(1189L, long0);
      
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2662596083157305
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(4294967322L, 9223372036854775807L);
      Range range1 = Range.of(4548L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2674340830645234
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(1687L);
      range0.spliterator();
      Range range1 = Range.of(487L, 487L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5426L), (-5426L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.7425386699258447
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin(9223372036854775807L);
      Range range1 = range_Builder0.build();
      Range range2 = Range.of((-124L), (-124L));
      range2.toString();
      // Undeclared exception!
      try { 
        range2.complement(range1);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -124 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.of((-2107L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.710413759593567
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(401L);
      long long0 = range0.getLength();
      assertEquals(401L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long1);
      
      Range range1 = Range.of((-2L));
      Object object0 = new Object();
      range1.equals(object0);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.2450110626720554
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(65578L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of(65578L);
      boolean boolean1 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.134470173651956
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(148L, 148L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 149 .. 149 ]/RB", string0);
      
      Range range1 = Range.parseRange("[ 149 .. 149 ]/RB", range_CoordinateSystem0);
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5411679612190445
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range range1 = Range.of(0L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      long long0 = range0.getLength();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(489L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(9223372036854775807L);
      long long0 = range0.getLength();
      assertEquals(9223372036854775319L, long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(255L, 1292L);
      Range.of(1292L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.4922357700574875
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(1676L, 1676L);
      Range range1 = Range.of(4548L);
      range1.equals(range0);
      Range range2 = range1.intersection(range0);
      Range range3 = range1.intersection(range2);
      assertFalse(range0.equals((Object)range1));
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5714678660776142
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      List<Range> list0 = range0.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(1679L, 9223372036854710230L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.556221135385905
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(0L, 0L);
      Range range2 = range0.intersection(range1);
      range2.getEnd();
      long long0 = 255L;
      // Undeclared exception!
      try { 
        Range.of(65557L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.344292841368524
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(65578L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1347095035283017
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      range0.toString(range_CoordinateSystem0);
      Range.of(255L, 255L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(1111L);
      range_Builder0.expandEnd((-9223372034707292156L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.130860608303783
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775795L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775795L, 9223372036854775795L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = new LinkedList<Range>();
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.1325082701028597
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Long long0 = new Long(4294967295L);
      range0.equals(long0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(1707L);
      Range range1 = Range.of(1707L, 2147483647L);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.058455850968031
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      range_Builder0.contractBegin(2147483647L);
      Range range1 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3880020896497194
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(65598L, 65598L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.439933762811385
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.of(65536L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 65536L, 9223372036854775807L);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.7887293112718643
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 127L);
      Range range0 = Range.of(127L, 127L);
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 128 .. 128 ]/RB");
      Range.of((-32768L), 127L);
      Range range1 = Range.of((-32768L), 2147483647L);
      range1.startsBefore(range0);
      Range range2 = Range.parseRange("[ 128 .. 128 ]/RB");
      range2.getEnd(range_CoordinateSystem0);
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("RB", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3545344305579152
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(65536L);
      Range range1 = Range.ofLength(65536L);
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1503L), 32768L);
      Range range1 = Range.of((-1503L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1828770318776343
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(65535L, long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.444326846401246
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 290L, 5107L);
      List<Range> list0 = range0.split(290L);
      //  // Unstable assertion: assertEquals(17, list0.size());
      
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(17, list0.size());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.7866508939172063
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      Range range1 = Range.of(32768L);
      boolean boolean0 = range1.intersects(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      range1.toString();
      range0.getLength();
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range2, range0);
      
      Range range3 = Range.parseRange("[ 32768 .. 32768 ]/0B");
      //  // Unstable assertion: assertSame(range3, range2);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.3844894049549885
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of(2147483647L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = 1190L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 1190L, 1190L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-2207L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      boolean boolean0 = range0.equals("4yvoIb}G|wqCCD");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.646301108295016
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 32761L;
      Range range0 = Range.of(range_CoordinateSystem0, 32761L, 32761L);
      Range range1 = Range.of(32761L, 65557L);
      range0.intersects(range1);
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.of(32761L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.3786714673496716
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(1679L);
      Range range1 = Range.of(4548L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.614172784527839
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object object0 = new Object();
      Range.of(1833L);
      Range range0 = Range.of((-127L), 127L);
      Range range1 = range0.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.3556476030996594
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(1622L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(4548L, 9223372036854774129L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
      
      range_Builder0.contractBegin(1L);
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.9758922637026153
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Long long0 = new Long(733L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.3850486095423418
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range range1 = Range.ofLength(3745L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.5893702125556386
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(65536L, 65536L);
      Range range1 = Range.of(65536L, 4294967322L);
      Range range2 = Range.of(4294967322L);
      assertFalse(range2.isEmpty());
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.205091621220553
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.5003643558599493
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      List<Range> list0 = range0.split(32768L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(32769L, long0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(402L);
      List<Range> list0 = range0.split(402L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.3880676104307272
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(65536L, 65536L);
      List<Range> list0 = range0.split(65536L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(4294967305L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.3285404468599546
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(1736L, 1736L);
      Range range1 = Range.ofLength(1736L);
      range1.equals(range0);
      range1.endsBefore(range0);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.368942435106186
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      Object object0 = new Object();
      Range range1 = Range.of(32768L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(65526L);
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-223L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -223 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-978L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -978 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(2L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.2018510619417797
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.3558994987792694
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(1679L, 1679L);
      Long long0 = new Long(1679L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.9381245389810915
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-724L), 9223372036854710230L);
      range0.getEnd();
      Range range1 = Range.of(2147483647L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-32797L), (-32797L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(5981L, 5981L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.704485178861126
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(2272L, 2272L);
      Range range1 = Range.ofLength(2272L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      range1.intersection(range0);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.251012303813305
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      String string0 = range1.toString();
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range range1 = Range.ofLength(3745L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(65536L, 65536L);
      Range range1 = Range.of(65536L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(690580L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(65536L, 65536L);
      Range range1 = Range.of(65536L, 65536L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of((-2147483660L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.4921351512518326
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(5107L, 5107L);
      Range range1 = Range.of(748L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.0574866708943733
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.1396664047217486
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(1L);
      String string0 = range0.toString();
      assertEquals("[ 1 .. 1 ]/0B", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.3545344305579152
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-127L), long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.4413333891043285
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5426L), (-5426L));
      Range range1 = Range.of((-5426L), (-5426L));
      range0.complement(range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(127L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.getBegin();
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.1708830666115264
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      range0.getBegin();
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.3112067964217005
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.ofLength(32768L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.of(32768L);
      boolean boolean0 = range1.isSubRangeOf(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.2872591712264168
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-183L));
      Range.Builder range_Builder1 = range_Builder0.contractBegin(584L);
      range_Builder1.build();
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775806 ]/0B", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.5614032980858816
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32768L, 32768L);
      Range range1 = Range.of(32768L);
      Range range2 = Range.of(207L, 32768L);
      boolean boolean0 = range2.startsBefore(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(range0, range1);
      //  // Unstable assertion: assertTrue(range0.equals((Object)range1));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(3745L, 3745L);
      Range range1 = Range.ofLength(3745L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.393683714160681
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-2187L));
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-1898L), (-1898L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.1430281706049414
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(3481L);
      Range range1 = Range.ofLength(3481L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of(32768L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.976709928476526
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. -9223372036854775808 ]/SB", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.ofLength(4294967322L);
      Range range1 = Range.of(4294967322L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-2212L), (-2212L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.2000428065800537
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals("hGazjC");
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.3012758672923317
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of(1L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.117734440816303
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.of((-128L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775806L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.3880020896497194
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of(2272L, 2272L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(789L);
      Range range0 = range_Builder0.build();
      String string0 = range0.toString();
      assertEquals("[ 0 .. 788 ]/0B", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775796L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-9223372036854775796L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.49326347011603
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.of((-168L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-424L), 246L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.ofLength(3748L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483646L, 2303L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 290L, 290L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range.of(1679L, 1679L);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 168
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-1585L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
