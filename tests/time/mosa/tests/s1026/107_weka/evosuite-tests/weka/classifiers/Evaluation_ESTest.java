/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 10:13:44 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import java.util.NoSuchElementException;
import java.util.Random;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.pmml.consumer.TreeModel;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.RandomForest;
import weka.clusterers.EM;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.Loader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.pmml.MiningSchema;
import weka.estimators.NormalEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8404427248166062
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.getWords();
      TestInstances testInstances2 = new TestInstances();
      Instances instances0 = testInstances2.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(2278);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Classifier classifier0 = AbstractClassifier.makeCopy(naiveBayes0);
      try { 
        evaluation0.crossValidateModel(classifier0, instances0, 11, (Random) null, (Object[]) testInstances2.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2357933625158832
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumPriorAbsErr;
      double double2 = evaluation0.m_WithClass;
      SMO sMO0 = new SMO();
      Evaluation evaluation1 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      NormalEstimator normalEstimator0 = new NormalEstimator(1000.0);
      Capabilities capabilities0 = normalEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      AbstractClassifier.makeCopy((Classifier) null);
      mockRandom0.nextGaussian();
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances1, 923, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Attribute attribute0 = new Attribute("", instances0, 95);
      instances0.setClass(attribute0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 95, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1759380310637435
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.precision(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AbstractClassifier.makeCopy((Classifier) null);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) null, instances0, 1722, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.m_SumPriorAbsErr;
      double double2 = evaluation0.m_WithClass;
      SMO sMO0 = new SMO();
      Evaluation evaluation1 = new Evaluation(instances0);
      boolean boolean0 = evaluation1.equals(evaluation0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9324929479967472
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      try { 
        evaluation1.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.375117265526805
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      C45Loader c45Loader0 = new C45Loader();
      Instances instances1 = testInstances0.getData();
      instances1.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, (int[]) null, 115);
      // Undeclared exception!
      try { 
        evaluation0.recall(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3576556876582675
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      Enumeration enumeration0 = instances0.enumerateInstances();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.relativeAbsoluteError();
      SMO sMO0 = new SMO();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) sMO0;
      objectArray0[1] = (Object) sMO0;
      objectArray0[2] = (Object) enumeration0;
      objectArray0[4] = (Object) sMO0;
      objectArray0[5] = (Object) "=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n";
      objectArray0[6] = (Object) sMO0;
      objectArray0[7] = (Object) textDirectoryLoader0;
      objectArray0[8] = (Object) evaluation0;
      evaluation0.recall(3125);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode("@data");
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances0, (MiningSchema) null);
      RandomForest randomForest0 = new RandomForest();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(700.0, 700.0);
      assertEquals(Double.NaN, evaluation0.pctIncorrect(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1916014530643806
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.confusionMatrix();
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0960888518550855
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation0.m_ClassPriorsSum;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "\n\nGeneral options:\n\n");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.49645390070921985
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.615123245450866
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.trueNegativeRate(1);
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.weightedAreaUnderROC();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.getClassifier();
      AbstractClassifier.makeCopy(sGDText0);
      evaluation0.matthewsCorrelationCoefficient(5);
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9186781131879074
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        evaluation0.trueNegativeRate((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (-1575.217364386206);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-2.0), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4709091397207432
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      instances0.enumerateInstances();
      EM eM0 = new EM();
      Capabilities capabilities0 = eM0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances1, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.06075971812573
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.sizeOfPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.49640287769784175
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = (double) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation1.setPriors(instances0);
      double double0 = evaluation1.falseNegativeRate((-2));
      double double1 = evaluation0.correlationCoefficient();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7158462344182226
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8`qyB-8M8");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-2.0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.125);
      evaluation0.SFSchemeEntropy();
      evaluation0.avgCost();
      evaluation1.falseNegativeRate((-2));
      evaluation1.toSummaryString(false);
      // Undeclared exception!
      try { 
        evaluation1.weightedFalseNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.496551724137931
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8`9yB-_Ma");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-2.0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.125);
      evaluation0.SFSchemeEntropy();
      double double0 = evaluation0.m_SumPredicted;
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1432136814444385
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateInstances();
      Evaluation.k_MarginResolution = (-432);
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.areaUnderPRC(4588);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.numFalsePositives(4);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      int[] intArray0 = new int[2];
      Instance instance0 = BallNode.calcCentroidPivot(1, (-1), intArray0, instances0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, instance0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.064012472468008
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Double double0 = new Double(0.0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.toMatrixString();
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      DecisionTable decisionTable0 = new DecisionTable();
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-1618.85557946);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(17);
      try { 
        evaluation0.evaluateModelOnce(1.0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5891783264039585
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities1 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      try { 
        evaluation0.toClassDetailsString("zN.gcmQb!ZdT");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.matthewsCorrelationCoefficient((-2));
      double double2 = evaluation0.pctIncorrect();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.falseNegativeRate((-2));
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5915700351469828
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.areaUnderPRC((-1));
      evaluation1.weightedMatthewsCorrelation();
      evaluation0.numFalsePositives(40);
      evaluation2.SFEntropyGain();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation2.evaluateModelOnceAndRecordPrediction((Classifier) randomCommittee0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_CoverageStatisticsAvailable = true;
      evaluation1.SFMeanSchemeEntropy();
      evaluation1.sizeOfPredictedRegions();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(instance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) zeroR0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.495049504950495
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8`9yB-_Ma");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (-2.0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation1.matthewsCorrelationCoefficient((-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.327031557066465
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-2);
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = (double) (-2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray1[4] = (double) (-2);
      doubleArray1[5] = (double) (-2);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) (-2);
      doubleArray1[8] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 95.7953);
      evaluation0.SFSchemeEntropy();
      evaluation0.avgCost();
      evaluation0.unclassified();
      double double0 = evaluation0.m_SumSqrErr;
      evaluation1.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-1));
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.776171210175013
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      Enumeration enumeration0 = instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      SMO sMO0 = new SMO();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.equals(enumeration0);
      evaluation0.weightedRecall();
      evaluation0.priorEntropy();
      evaluation1.getHeader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      try { 
        evaluation0.evaluateModelOnce((Classifier) decisionTable0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1846726042887588
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("Nl");
      Evaluation evaluation1 = new Evaluation(instances1);
      textDirectoryLoader0.getRevision();
      MockRandom mockRandom0 = new MockRandom();
      CSVLoader cSVLoader0 = new CSVLoader();
      evaluation0.weightedAreaUnderROC();
      // Undeclared exception!
      try { 
        evaluation1.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getEstimator");
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      double double1 = evaluation0.correct();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.595847248200831
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation0.falseNegativeRate(300);
      evaluation1.toSummaryString(true);
      double double1 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      Evaluation.handleCostOption("", (-1));
      evaluation0.KBInformation();
      double double1 = evaluation0.unweightedMicroFmeasure();
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.106126654155955
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-2.0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.125);
      evaluation0.avgCost();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unclassified();
      double double0 = evaluation0.m_SumSqrErr;
      evaluation1.errorRate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(2, testInstances0.getNumNominalValues());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5960742176021196
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (-2.0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.125);
      evaluation0.SFSchemeEntropy();
      evaluation0.avgCost();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unclassified();
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.m_SumSqrPredicted;
      Evaluation evaluation3 = new Evaluation(instances0);
      try { 
        evaluation3.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6759217956598995
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(true);
      double double0 = evaluation1.m_ClassPriorsSum;
      evaluation0.numFalseNegatives((-440));
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_SumPredicted;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.SFMeanSchemeEntropy();
      evaluation2.setNumericPriorsFromBuffer();
      evaluation1.getDiscardPredictions();
      double double3 = evaluation0.matthewsCorrelationCoefficient((-440));
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      double double1 = evaluation0.falseNegativeRate(3);
      assertEquals(0.0, double1, 0.01);
      
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.globalInfo();
      double double2 = evaluation0.unweightedMicroFmeasure();
      double double3 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation1.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.rootRelativeSquaredError();
      evaluation0.unclassified();
      double double1 = evaluation1.weightedTrueNegativeRate();
      double double2 = evaluation1.errorRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5913659118565153
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-2);
      evaluation2.updateNumericScores(doubleArray0, doubleArray0, 0.95);
      evaluation1.SFSchemeEntropy();
      evaluation0.avgCost();
      evaluation1.unclassified();
      // Undeclared exception!
      try { 
        evaluation1.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.330091187063569
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(false);
      double double0 = evaluation1.m_ClassPriorsSum;
      double double1 = evaluation0.numFalseNegatives((-440));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.KBRelativeInformation();
      double double3 = evaluation0.m_SumPredicted;
      Evaluation evaluation2 = new Evaluation(instances0);
      double double4 = evaluation1.SFMeanSchemeEntropy();
      assertEquals(double4, double2, 0.01);
      assertFalse(evaluation1.getDiscardPredictions());
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(40);
      RandomForest randomForest0 = new RandomForest();
      Evaluation.makeOptionString(randomForest0, true);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getStructure();
      RandomForest randomForest1 = new RandomForest();
      double double1 = evaluation1.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.m_ClassPriorsSum;
      evaluation1.trueNegativeRate((-5691));
      String string0 = evaluation1.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double3 = evaluation0.SFPriorEntropy();
      assertEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1840562714690361
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.generate();
      Instances instances0 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.numFalsePositives((-1882097014));
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.falseNegativeRate((-2));
      evaluation0.makeDistribution(0.0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.438661885759941
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(40);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      evaluation0.numFalsePositives((-1));
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(double1, double0, 0.01);
      
      CostMatrix costMatrix0 = new CostMatrix(4);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.makeDistribution(Double.NaN);
      double double2 = evaluation1.numTrueNegatives(6);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.confusionMatrix();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      evaluation2.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation2.SFSchemeEntropy();
      evaluation1.avgCost();
      evaluation1.unclassified();
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation2.evaluateModelOnce((Classifier) zeroR0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.182036069448834
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.trueNegativeRate(17);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string0);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9739419852951057
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = textDirectoryLoader0.getStructure();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(".arff");
      TreeModel treeModel0 = new TreeModel(iIOMetadataNode0, instances1, (MiningSchema) null);
      String string0 = Evaluation.getGlobalInfo(treeModel0);
      assertEquals("\nSynopsis for weka.classifiers.pmml.consumer.TreeModel:\n\n", string0);
      
      RandomForest randomForest0 = new RandomForest();
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = '%';
      String string1 = evaluation0.num2ShortID(34, charArray0, 34);
      assertEquals("                             CC%CC", string1);
      
      evaluation0.setPriors(instances1);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setCharSet((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("Cu*ss");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.49640287769784175
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.setPriors(instances0);
      double double0 = evaluation1.falseNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = evaluation1.makeDistribution(0.0);
      assertEquals(1, doubleArray1.length);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1878840226652085
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        Evaluation.handleCostOption("@relation", 32);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.699352761357792
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.rootRelativeSquaredError();
      double double1 = evaluation1.weightedFMeasure();
      double double2 = evaluation0.truePositiveRate(0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.24347589702288
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(40);
      evaluation0.areaUnderPRC(27);
      double double0 = evaluation0.numTruePositives(24);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numTrueNegatives(0);
      evaluation0.setNumericPriorsFromBuffer();
      double double2 = evaluation0.incorrect();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.6023049567114573
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = 1267;
      evaluation0.sizeOfPredictedRegions();
      evaluation0.setDiscardPredictions(true);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.numFalseNegatives(10001);
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.722453324894
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      double double1 = evaluation0.weightedAreaUnderPRC();
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(".arff");
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-1725072707));
      evaluation0.weightedAreaUnderPRC();
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-511), charArray0, 4224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setDiscardPredictions(true);
      LinearRegression linearRegression0 = new LinearRegression();
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9489486659250668
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = 1267;
      evaluation0.sizeOfPredictedRegions();
      int int0 = (-567);
      int[] intArray0 = new int[3];
      intArray0[0] = (-567);
      intArray0[1] = (-567);
      intArray0[2] = 3973;
      // Undeclared exception!
      try { 
        evaluation0.falsePositiveRate(1512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.595722115257705
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-2));
      String string0 = evaluation0.toClassDetailsString(").)1In|H");
      assertEquals(").)1In|H\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.30045221348672
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.enumerateInstances();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numFalsePositives(468);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.39815953884902
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate();
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      Evaluation evaluation1 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation1.equals(additiveRegression0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.m_SumSqrPredicted;
      double double2 = evaluation0.m_SumPredicted;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.5919655050134534
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMacroFmeasure();
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      RandomForest randomForest0 = new RandomForest();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedPrecision();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9946341857340077
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives(24);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      double double1 = evaluation1.incorrect();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string0);
      
      evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.1447816624013005
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC(0);
      evaluation0.numTruePositives((-1147));
      evaluation0.numFalseNegatives(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) decisionTable0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.061889481880042
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-2063));
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(false);
      evaluation0.toClassDetailsString(".bsi");
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1136903108), (char[]) null, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNoClass(true);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, (int[]) null, 3);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) decisionTable0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      SGD sGD0 = new SGD();
      sGD0.getLossFunction();
      SGDText sGDText0 = new SGDText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@data";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@data";
      try { 
        Evaluation.evaluateModel((Classifier) sGDText0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(25);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(25, (char[]) null, 25);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9487605215810104
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      MockRandom mockRandom1 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader1);
      MockRandom mockRandom2 = new MockRandom();
      LWL lWL0 = new LWL();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      
      evaluation0.m_SumClassPredicted = (double) 5;
      double double0 = evaluation0.numTrueNegatives(5);
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray1 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.949214111787081
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives((-1));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numFalsePositives((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      
      double double1 = evaluation1.m_ClassPriorsSum;
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      String string0 = Evaluation.makeOptionString(bayesNet0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.2731738319283363
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.toSummaryString(".arff", false);
      double double0 = Evaluation.MIN_SF_PROB;
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.1133905679419227
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString("@relation", true);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(1.1500000059604645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "getPrintTrees");
      try { 
        CostMatrix.parseMatlab(string0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation1.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC(484);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.numTrueNegatives(484);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3813327519834604
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), intArray0, 5126);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        evaluation0.setPriors(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.8812159512456312
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation1.falseNegativeRate((-1));
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[0];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      MockRandom mockRandom1 = new MockRandom();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader1);
      MockRandom mockRandom2 = new MockRandom();
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      AbstractClassifier.makeCopy(lWL0);
      evaluation0.evaluateModel(classifier0, instances0, (Object[]) stringArray0);
      Evaluation evaluation1 = new Evaluation(instances1);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.61527637088619
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.m_SumSqrErr;
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double1 = evaluation0.avgCost();
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.truePositiveRate(6);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b c d   <-- classified as\n 0 0 0 0 | a = class1\n 0 0 0 0 | b = class2\n 0 0 0 0 | c = class3\n 0 0 0 0 | d = class4\n", string0);
      
      double double1 = evaluation0.pctUnclassified();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.4407696753202024
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.fMeasure(5);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      try { 
        evaluation0.evaluateModel((Classifier) decisionTable0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.numTruePositives(12);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.numFalsePositives(468);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.enumerateInstances();
      MockRandom mockRandom0 = new MockRandom(2006L);
      try { 
        evaluation0.crossValidateModel(".arff", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .arff
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      Evaluation.main(stringArray0);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.fMeasure(3);
      try { 
        evaluation0.evaluateModel((Classifier) decisionTable0, instances0, (Object[]) decisionTable0.TAGS_EVALUATION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "c");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.378926789336329
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionTable decisionTable0 = new DecisionTable();
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString("(XCqv `mYxDT$]nU", false);
      assertEquals("(XCqv `mYxDT$]nU\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation1.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      instances0.spliterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      double double0 = evaluation0.m_SumSqrErr;
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double1 = evaluation0.avgCost();
      evaluation0.useNoPriors();
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.truePositiveRate(476);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double4, double2, 0.01);
      
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(" -1       0    \n", string1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      MockRandom mockRandom0 = new MockRandom((-1));
      AbstractClassifier.makeCopy((Classifier) null);
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, (-1), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[1];
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.trueNegativeRate(8);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.toMatrixString();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.areaUnderPRC((-2));
      evaluation0.numTruePositives(25);
      evaluation0.numFalseNegatives(2428);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      int int0 = 472;
      SparseInstance sparseInstance0 = new SparseInstance(472);
      try { 
        evaluation0.evaluateModelOnce((double) 472, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 472
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instance instance0 = BallNode.calcCentroidPivot(39, (-1238), (int[]) null, instances0);
      instances0.add(instance0);
      double double0 = evaluation0.m_SumSqrClass;
      Bagging bagging0 = new Bagging();
      String string0 = Evaluation.getGlobalInfo(bagging0);
      assertEquals("\nSynopsis for weka.classifiers.meta.Bagging:\n\nClass for bagging a classifier to reduce variance. Can do classification and regression depending on the base learner. \n\nFor more information, see\n\nLeo Breiman (1996). Bagging predictors. Machine Learning. 24(2):123-140.", string0);
      
      double double1 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.SFEntropyGain();
      double double1 = evaluation0.KBMeanInformation();
      double double2 = evaluation0.trueNegativeRate(1);
      assertNotEquals(double2, double1, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      capabilities0.getRevision();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      double double1 = evaluation0.numFalseNegatives((-440));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.KBRelativeInformation();
      double double3 = evaluation0.m_Unclassified;
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double4 = evaluation2.SFMeanSchemeEntropy();
      assertEquals(double4, double2, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      boolean boolean0 = evaluation1.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 83.236135356814);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falsePositiveRate(25);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives(25);
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.m_SumPredicted;
      double double3 = evaluation0.avgCost();
      assertEquals(Double.NaN, double3, 0.01);
      
      double[] doubleArray0 = evaluation1.makeDistribution(Double.NaN);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedPrecision();
      C45Loader c45Loader0 = new C45Loader();
      try { 
        Evaluation.handleCostOption("f&cpk ", 'x');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7130415601881177
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      evaluation0.truePositiveRate((-1796));
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(1468.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1468
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      textDirectoryLoader0.getDataSet();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      try { 
        Evaluation.handleCostOption("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", (-2460));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = zeroR0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanSchemeEntropy();
      evaluation1.sizeOfPredictedRegions();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 873.879041;
      doubleArray0[1] = 873.879041;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.9432101794503156
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      instances0.enumerateAttributes();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.m_TotalSizeOfRegions;
      evaluation0.weightedMatthewsCorrelation();
      double double2 = evaluation0.m_SumPriorAbsErr;
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.toClassDetailsString("@data");
      double double3 = evaluation1.m_SumPriorAbsErr;
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.sizeOfPredictedRegions();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      LWL lWL0 = new LWL();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      AbstractClassifier.makeCopy((Classifier) null);
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.deleteAttributeType(107);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_ClassPriorsSum;
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption((String) null, 113);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(500);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor(6, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.106735209731398
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.toClassDetailsString(" ");
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-437.40765);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(873.879041, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.8847746042809848
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toClassDetailsString(".bsi");
      double double0 = evaluation0.m_SumPriorAbsErr;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.281614436899083
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2237);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMacroFmeasure();
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double0 = evaluation0.precision(2);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      evaluation0.numFalseNegatives(25);
      evaluation0.areaUnderPRC((-2));
      evaluation0.numTruePositives(25);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 25;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.5781872059492414
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Capabilities capabilities0 = cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderPRC((-2));
      evaluation0.weightedAreaUnderROC();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.numTruePositives((-2));
      evaluation0.KBRelativeInformation();
      RandomForest randomForest0 = new RandomForest();
      assertEquals("The number of trees to be generated.", randomForest0.numTreesTipText());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      instances0.enumerateInstances();
      DecisionTable decisionTable0 = new DecisionTable();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Instance instance0 = BallNode.calcCentroidPivot(39, (-1238), (int[]) null, instances0);
      instances0.add(instance0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((-618));
      try { 
        evaluation0.updateStatsForPredictor(0.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      cfsSubsetEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Evaluation.handleCostOption("", 1005);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Vote vote0 = new Vote();
      String string0 = Evaluation.makeOptionString(vote0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      SMO sMO0 = new SMO();
      try { 
        Evaluation.evaluateModel((Classifier) sMO0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SMO:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \tTurning them off assumes that data is purely numeric, doesn't
         // \tcontain any missing values, and has a nominal class. Turning them
         // \toff also means that no header information will be stored if the
         // \tmachine is linear. Finally, it also assumes that no instance has
         // \ta weight equal to 0.
         // \t(default: checks on)
         // -C <double>
         // \tThe complexity constant C. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -L <double>
         // \tThe tolerance parameter. (default 1.0e-3)
         // -P <double>
         // \tThe epsilon for round-off error. (default 1.0e-12)
         // -M
         // \tFit logistic models to SVM outputs. 
         // -V <double>
         // \tThe number of folds for the internal
         // \tcross-validation. (default -1, use training data)
         // -W <double>
         // \tThe random number seed. (default 1)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
