/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 09:51:24 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5757133154026173
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.valueToString((Object) null);
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      Long long0 = Long.getLong("null", 0L);
      JSONObject.valueToString(long0, (-2418), 526);
      JSONObject jSONObject1 = jSONObject0.put("null", true);
      jSONObject1.getBoolean("null");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("null", (Collection) linkedList0);
      jSONObject1.toString(59, (-2418));
      jSONObject0.toString();
      try { 
        jSONObject0.getString("{\n\"java.lang.String@0000000018\": [],\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000042,\njava.lang.Byte@0000000043,\njava.lang.Byte@0000000044,\njava.lang.Byte@0000000045\n],\n\"java.lang.String@0000000015\": \"java.lang.Class@0000000016\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000018\\\": [],\\n\\\"java.lang.String@0000000004\\\": [\\njava.lang.Byte@0000000042,\\njava.lang.Byte@0000000043,\\njava.lang.Byte@0000000044,\\njava.lang.Byte@0000000045\\n],\\n\\\"java.lang.String@0000000015\\\": \\\"java.lang.Class@0000000016\\\",\\n\\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "gettoUnsignedLong";
      try { 
        jSONObject0.get(".</=A:Pcw^aZ7S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".<\\/=A:Pcw^aZ7S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2058391669860955
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("bGx", 118);
      jSONObject1.isNull("6_73:g@EJ");
      String string0 = JSONObject.valueToString(float0, 93, 284);
      assertNotNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5684132580539654
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      jSONObject0.put("_CunjE=7", 13);
      Object object0 = jSONObject0.remove("_CunjE=7");
      assertEquals(13, object0);
      
      boolean boolean0 = jSONObject0.isNull("] is not a Boolean.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long((-749L));
      JSONObject.getNames((Object) long0);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.keys();
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject1 = jSONObject0.put("is", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("is");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.toString((-989), (-989));
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.put("[]", (-2349));
      String string0 = JSONObject.valueToString(linkedList0, (-989), 219);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5038210681170283
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("Y}bq");
      Float float0 = new Float(1330.3638828431651);
      JSONObject.getNames((Object) float0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("[{!tjm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of [{!tjm
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0417139030612184
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      hashMap0.clone();
      jSONObject0.put("HD.F6Foj`", (Map) hashMap0);
      jSONObject0.optJSONObject("HD.F6Foj`");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.2785785400069094
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("HD.F6Foj`", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.533050249608278
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("#Si=c5*(6L%tD`V[&", (Map) hashMap0);
      jSONObject1.toString(11, 125);
      try { 
        jSONObject1.getInt("#Si=c5*(6L%tD`V[&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#Si=c5*(6L%tD`V[&\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.733572555639476
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      linkedList0.add(double0);
      JSONObject jSONObject1 = jSONObject0.put("L/] m3P3", (Collection) linkedList0);
      Iterator iterator0 = jSONObject1.keys();
      JSONObject jSONObject2 = jSONObject1.accumulate("L/] m3P3", jSONObject0);
      jSONObject2.append("L/] m3P3", object0);
      Float float0 = new Float((-3720.518653942173));
      JSONObject jSONObject3 = new JSONObject();
      JSONObject.doubleToString((-3720.518653942173));
      JSONObject.quote("] is not a Boolean.");
      JSONObject.valueToString(iterator0);
      int int0 = 12;
      try { 
        jSONObject0.toString(12, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("] is not a JSONObject.");
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.put("isequals", (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", true);
      jSONObject0.accumulate("null", "7X)z6");
      JSONObject jSONObject1 = jSONObject0.append("null", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      jSONObject0.put("opt", 0.0);
      int int0 = jSONObject0.optInt("opt", 1601);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.22370235660896
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.put("90dQU>x=.O", (-3190));
      jSONObject0.isNull("90dQU>x=.O");
      int int0 = jSONObject1.getInt("90dQU>x=.O");
      assertEquals(2, jSONObject0.length());
      assertEquals((-3190), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.879627694453224
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("d`KZ*Fm+1*b)8D~", 59);
      jSONObject1.toString();
      assertEquals(4, jSONObject0.length());
      
      JSONObject.getNames((Object) "d`KZ*Fm+1*b)8D~");
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000008\":java.lang.Integer@0000000009,\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\"}");
      String string0 = JSONObject.quote("d`KZ*Fm+1*b)8D~");
      assertEquals("\"d`KZ*Fm+1*b)8D~\"", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6883569797160494
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float.sum(0.0F, 83.583F);
      Float.sum(0.0F, 83.583F);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean.logicalXor(true, true);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("m", (-1135));
      jSONObject1.optLong("m");
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("m", object0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.767447904928158
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("getreplaceFirst", (-416.591917));
      jSONObject0.toString();
      jSONObject1.getLong("getreplaceFirst");
      jSONObject1.names();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6959289416235723
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject0.put("getreplaceFirst", 1682.824);
      jSONObject0.toString();
      jSONObject2.getLong("getreplaceFirst");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.790289224387993
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("getreplaceFirst", 0.0);
      jSONObject1.toString();
      jSONObject0.getLong("getreplaceFirst");
      jSONObject0.names();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(384.938261);
      String string0 = jSONObject0.toString(48);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject1.names();
      jSONObject0.length();
      jSONObject1.length();
      jSONObject0.optLong((String) null);
      Boolean boolean0 = new Boolean("di");
      Boolean.logicalXor(false, false);
      String string1 = JSONObject.valueToString(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(384.938261);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("{9xzr1Afk:>M@g(~", "{9xzr1Afk:>M@g(~");
      String string0 = JSONObject.quote("{9xzr1Afk:>M@g(~");
      assertEquals("\"{9xzr1Afk:>M@g(~\"", string0);
      
      jSONObject0.put("{9xzr1Afk:>M@g(~", 384.938261);
      long long0 = jSONObject0.optLong("{9xzr1Afk:>M@g(~");
      assertEquals(384L, long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.399883111592736
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("gD.F6Foj`", (Map) hashMap0);
      // Undeclared exception!
      jSONObject1.toString(2955, 2955);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("\f");
      try { 
        jSONObject0.put("\f", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Float float0 = new Float((-1235.71895476085));
      JSONObject.numberToString(float0);
      String string0 = "[]C\"VhW}ksZD/M ";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{U_eR\"hzaI{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {U_eR\"hzaI{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.787162189078149
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-12));
      JSONObject jSONObject1 = jSONObject0.put("true", 2);
      jSONObject1.optLong("true", (long) 2);
      String string0 = "u[q";
      Integer.getInteger("u[q", integer0);
      jSONObject1.accumulate("is", jSONObject0);
      Object object0 = new Object();
      JSONObject.getNames((Object) integer0);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 2, (-12));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5820183568770028
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", 34);
      jSONObject1.optLong("] is not a JSONArray.", 323L);
      jSONObject0.isNull("] is not a JSONArray.");
      try { 
        jSONObject0.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("2cJ[+", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("2cJ[+");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4", (-1.0));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.accumulate("4", jSONArray0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.521319020435778
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("t%yrZ]", jSONArray0);
      jSONObject0.toJSONArray(jSONArray0);
      // Undeclared exception!
      jSONObject0.toString(3532, 3532);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double double0 = new Double(0.2768482341236671);
      JSONObject jSONObject0 = new JSONObject(double0);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject();
      String string0 = jSONObject1.toString();
      assertEquals("{}", string0);
      
      JSONObject jSONObject2 = new JSONObject("{}");
      String string1 = JSONObject.quote("d`Z*Fm+1*b8D~");
      assertEquals("\"d`Z*Fm+1*b8D~\"", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(object0, 92, 92);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.565083011200772
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("5SP%#%i$");
      Integer integer0 = new Integer((-12));
      JSONObject jSONObject1 = jSONObject0.accumulate("5SP%#%i$", integer0);
      jSONObject1.optInt(": ", (-12));
      jSONObject0.optInt("5SP%#%i$");
      jSONObject0.optDouble("iscompare", (-1.0));
      boolean boolean0 = jSONObject0.has("5SP%#%i$");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      jSONArray0.put((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, 98);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3464460127930025
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = 5267.15F;
      Float float1 = new Float(5267.15F);
      JSONObject.numberToString(float1);
      Boolean boolean0 = new Boolean("java.lang.Float@0000000001");
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      Byte byte0 = new Byte((byte) (-17));
      hashMap0.put(byte0, "java.lang.Float@0000000001");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("java.lang.Float@0000000001");
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Byte cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("'", false);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getJSONArray("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.999703381818536
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double((-1135.4024320273));
      JSONObject jSONObject0 = new JSONObject((Object) "not");
      StringWriter stringWriter0 = new StringWriter(7);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.686430129918812
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.optInt("");
      jSONObject0.toString((-1322), (-1322));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2050510283746196
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("5SP%#%i$");
      Integer integer0 = new Integer((-12));
      jSONObject0.accumulate("5SP%#%i$", integer0);
      JSONObject.valueToString("tg[s?Y)Z0BwP'aC");
      jSONObject0.optString("5SP%#%i$", "]3gL");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "tg[s?Y)Z0BwP'aC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.4611954310384956
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Map) hashMap0);
      String string0 = jSONObject1.toString((-1322), 10);
      String string1 = jSONObject0.optString("] is not a JSONArray.");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1907816945139427
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float float1 = new Float(5267.15F);
      Float.sum(5267.15F, 5267.15F);
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(")SEjpU");
      Double double0 = new Double(5267.15F);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")SEjpU";
      stringArray0[1] = "U.zt";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Short short0 = new Short((short)0);
      JSONObject jSONObject1 = jSONObject0.putOpt("Expected a ':' after a key", short0);
      double double1 = jSONObject1.getDouble("Expected a ':' after a key");
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6053200402908283
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = new Boolean("{9xzr1Afk:>M@g(~");
      Integer integer0 = new Integer(2);
      JSONObject jSONObject1 = jSONObject0.accumulate("000", integer0);
      JSONObject.valueToString(integer0);
      jSONObject1.put("000", 1046.4598792834);
      jSONObject1.optInt("000");
      jSONObject1.optDouble("par", 61.73);
      try { 
        jSONObject1.getInt("Yza2EQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Yza2EQ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0003654142581255
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.accumulate("vkU@tG>oR5", double0);
      StringWriter stringWriter0 = new StringWriter(976);
      jSONObject1.write(stringWriter0);
      jSONObject1.optDouble("vkU@tG>oR5", 0.0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5684132580539654
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("TU$e3XRK", 59);
      double double0 = jSONObject1.optDouble("TU$e3XRK");
      assertEquals(59.0, double0, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0366739742537465
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject.quote("9qG=)7eOE (_sv-H");
      JSONObject.quote("5`'");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.has("{76m?lZ!C+");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.973435020072849
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1534.0700481918345));
      Double double0 = new Double((-230.3));
      try { 
        jSONObject0.accumulate((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2801315622513108
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("5SP%#%i$");
      Integer integer0 = new Integer((-12));
      JSONObject jSONObject1 = jSONObject0.accumulate("5SP%#%i$", integer0);
      JSONObject.valueToString("tg[s?Y)Z0BwP'aC");
      Boolean boolean0 = new Boolean(false);
      jSONObject1.optInt("5SP%#%i$");
      double double0 = jSONObject1.optDouble("5SP%#%i$", 67.0);
      assertEquals(1, jSONObject0.length());
      assertEquals((-12.0), double0, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("mi", 32);
      boolean boolean0 = jSONObject1.isNull("mi");
      assertFalse(boolean0);
      
      int int0 = jSONObject1.getInt("mi");
      assertEquals(32, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.723296143691395
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", (Object) null);
      StringWriter stringWriter0 = new StringWriter(976);
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
      
      double double0 = jSONObject1.optDouble("] is not a JSONObject.", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.4711353554430557
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.write(writer0);
      jSONObject0.append("getgetJSONObject", double0);
      try { 
        jSONObject0.getDouble("getgetJSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetJSONObject\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "<b/ m3%pP";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("<b/ m3%pP", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("<b/ m3%pP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<b/ m3%pP\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G86";
      double double0 = jSONObject0.optDouble("Unclosed commen", (-399.351057117493));
      assertEquals((-399.351057117493), double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      jSONObject0.optString("", "");
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("QpSdUjh,BlZ`wQ", 3552.2669893032);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("istrim", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.1074113250805873
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Byte byte0 = new Byte((byte) (-31));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optJSONObject("ybe\"a9");
      JSONObject jSONObject1 = jSONObject0.put("", (-837L));
      Byte.toUnsignedInt((byte) (-31));
      JSONObject.getNames((Object) jSONObject1);
      JSONObject.quote("ybe\"a9");
      jSONObject1.opt("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("QD/F4OS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of QD/F4OS
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String string1 = JSONObject.valueToString("\",\n\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.107657749980941
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("isnotifyAll", 1261);
      JSONObject.valueToString(double0);
      jSONObject0.isNull("M");
      double double1 = jSONObject0.getDouble("isnotifyAll");
      assertEquals(4, jSONObject0.length());
      assertEquals(1261.0, double1, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("R>!3TPP%gtC5", 67);
      jSONObject0.get("R>!3TPP%gtC5");
      jSONObject0.keys();
      Boolean boolean0 = new Boolean("R>!3TPP%gtC5");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5015265966161353
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float(384.938261);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("@zxx7jJ;m", 2835L);
      jSONObject0.put("{9xzr1Afk:>M@g(~", 175);
      jSONObject0.toString();
      Object object0 = new Object();
      Byte.toUnsignedInt((byte) (-16));
      JSONObject.getNames(object0);
      JSONObject.quote("] not found.");
      Object object1 = jSONObject0.opt((String) null);
      assertNull(object1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.0332653667861926
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      Object object1 = jSONObject1.opt("Bad value from toJSONString:");
      assertNull(object1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.5781473891350672
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", 4);
      jSONObject1.isNull("] is not a JSONArray.");
      jSONObject1.get("] is not a JSONArray.");
      String string0 = jSONObject0.getString("] is not a JSONArray.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.accumulate("L;D", "L;D");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("d`KZ*Fm+1*b)8D~", 96);
      String string0 = jSONObject0.toString();
      JSONObject.getNames((Object) "d`KZ*Fm+1*b)8D~");
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\":java.lang.Integer@0000000003}");
      String string1 = JSONObject.quote("{\"java.lang.String@0000000002\":java.lang.Integer@0000000003}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "{9xzr1Afk:>M@g(~";
      double double0 = 384.938261;
      Float float0 = new Float(384.938261);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{9xzr1Afk:>M@g(~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 16 of {9xzr1Afk:>M@g(~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.7595614660651
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(5267.15F);
      Float.sum(0.0F, 5267.15F);
      Float.sum(0.0F, 5267.15F);
      JSONObject.numberToString(float0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Long long0 = new Long((-1316L));
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONTokener";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.putOpt("wheel.json.JSONTokener", jSONArray0);
      jSONObject2.optJSONArray("wheel.json.JSONTokener");
      jSONObject1.optString("java.lang.Float@0000000001", "wheel.json.JSONTokener");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "for";
      JSONObject jSONObject1 = jSONObject0.accumulate("for", "for");
      try { 
        jSONObject1.getJSONObject("for");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"for\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.quote("C5Jz?//dTDQF\"5Y");
      assertEquals("\"C5Jz?//dTDQF\\\"5Y\"", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.583141748207673
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-794));
      JSONObject jSONObject0 = new JSONObject(integer0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\t", (Object) null);
      assertEquals(0, jSONObject1.length());
      
      String string0 = JSONObject.quote("\t");
      assertEquals("\"\\t\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8242969543219085
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\t";
      JSONObject jSONObject1 = jSONObject0.put("\t", (Object) "\t");
      try { 
        jSONObject1.getBoolean("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = "mi";
      JSONObject jSONObject1 = jSONObject0.put("mi", 32);
      try { 
        jSONObject1.getBoolean("mi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mi\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.2293495789482387
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", 4);
      jSONObject1.isNull("] is not a JSONArray.");
      boolean boolean0 = jSONObject1.optBoolean("] is not a JSONArray.");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("D[h. b4%N'", "D[h. b4%N'");
      jSONObject0.optBoolean("D[h. b4%N'");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Short, String> hashMap0 = new HashMap<Short, String>();
      hashMap0.remove((Object) jSONArray0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1325), 2862);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1415), (-1415));
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Double double0 = new Double((-857.81));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.2391997573006275
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("ma");
      try { 
        jSONObject0.getBoolean("ma");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ma\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3336889061514894
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-492), (-492));
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float float0 = new Float(1215.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(9, 9);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject.quote("Null pointer");
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString();
      jSONObject0.put("Null pointer", (Map) hashMap0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("#$!;%B", "#$!;%B");
      jSONObject1.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("e. ITZ_E<NZD[DL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"e. ITZ_E<NZD[DL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("Z6=e>4&#Ju*~q{ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z6=e>4&#Ju*~q{ \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.769651963103364
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, object0);
      assertEquals(1, jSONObject1.length());
      
      String string0 = JSONObject.quote("wb^9Y~_OWHc");
      assertEquals("\"wb^9Y~_OWHc\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.4498393993877396
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getDouble("^<W\",D+VWt-~Hi2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^<W\\\",D+VWt-~Hi2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("kN4=M+`gh$ P$,(8n.", 1696);
      Long.getLong("wheel.json.JSONArray");
      JSONObject jSONObject1 = jSONObject0.putOpt("kN4=M+`gh$ P$,(8n.", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("{9xzr1Afk:>M@g(~");
      assertFalse(boolean0);
      
      jSONObject0.optString("{9xzr1Afk:>M@g(~", "{9xzr1Afk:>M@g(~");
      boolean boolean1 = jSONObject0.has("QGU_aI");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray(".");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.7361913436761691
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("HD.F6Foj`");
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("HD.F6Foj`", (Map) hashMap0);
      jSONObject1.toString(12, 160);
      JSONObject.valueToString(hashMap0, (-1775), 12);
      int int0 = jSONObject1.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7306193280574447
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("isaddFirst", 0L);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.6457928323748754
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("#)>D[H}6}ty", (-319));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("", 59);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.2002025435261348
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("] is not a JSONArray.", true);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", 4);
      boolean boolean0 = jSONObject1.isNull("] is not a JSONArray.");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(")%]");
      assertEquals("", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("[");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("[", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.9891373440826869
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getaccumulate");
      try { 
        jSONObject0.getString("getaccumulate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getaccumulate\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("B~O>iJ\"", (-326L));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5689575096320332
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalOr(false, false);
      JSONObject.valueToString(boolean0);
      Boolean.logicalAnd(false, false);
      Boolean.compare(true, false);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      jSONObject0.keys();
      jSONObject0.remove("");
      JSONObject.valueToString((Object) null);
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(2500);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(boolean0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6533952666106284
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Object) "C5Jz?/p/dTDQF\"5Y");
      jSONObject0.put("#||f", (Map) hashMap0);
      jSONObject0.toString(35, 35);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = JSONObject.doubleToString(384.938261);
      Float float0 = new Float(384.938261);
      String string1 = JSONObject.valueToString(float0, (-134), (-134));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("\b");
      assertNull(object0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("\b");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote("hrMyZ#~Mc:>3?~Z\"");
      assertEquals("\"hrMyZ#~Mc:>3?~Z\\\"\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("no", 3931L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (-2311));
      jSONObject0.isNull("] is not a JSONArray.");
      try { 
        jSONObject1.append("] is not a JSONArray.", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.9749540746744716
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("C5Jz?//odDQF\"5Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C5Jz?//odDQF\\\"5Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.1958378231092612
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long long0 = new Long((-1322));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toString((-1322), 356);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.101876770954294
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(8);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = JSONObject.valueToString(hashMap0, (-32), (-32));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 2, 2);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1929, 1929);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("@.tVf%!~n-", (Object) "@.tVf%!~n-");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getInt("mugZ5la=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mugZ5la=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("uoNdMtTr0Nk<UN7gM$");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of uoNdMtTr0Nk<UN7gM$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Double double0 = new Double((-2843.210056107087));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float(384.938261);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" ]m!{RK)<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of  ]m!{RK)<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("+n2*{U#Ep2Li", false);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("o@f8%!(uH~%m;XQC2q*");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.5094656225315988
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "is";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = JSONObject.quote("QD/F4OS");
      assertEquals("\"QD/F4OS\"", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.0276242004980904
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(">e$2^@~Brm");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.append("q(w#mb<}Sz", linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }
}
