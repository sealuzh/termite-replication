/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 28 08:22:52 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.976328931291211
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONObject@0000000001");
      JSONObject jSONObject1 = jSONObject0.append("dec", "dec");
      JSONObject.valueToString(jSONObject1, (-1), (-1));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.quote("C#/j'YWWs]8Vrnszzi");
      assertEquals("\"C#/j'YWWs]8Vrnszzi\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("xE{kDf-_w|fM");
      jSONTokener0.nextValue();
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of xE{kDf-_w|fM
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-3Nke_|c$]EGc|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of -3Nke_|c$]EGc|
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4533502136279033
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float(Double.NaN);
      hashMap0.putIfAbsent(float0, float0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-2217L));
      jSONObject0.append("K67[<YH\"$ZwTR>UwNZ", long0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("K67[<YH\"$ZwTR>UwNZ");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\r", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not found.", (-2447));
      long long0 = jSONObject0.optLong("] not found.");
      assertEquals((-2447L), long0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 1L);
      int int0 = jSONObject0.optInt("");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7405117043237692
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("] is not a JSONObject.", (-2447));
      int int0 = jSONObject0.optInt("] is not a JSONObject.");
      assertEquals(2, jSONObject0.length());
      assertEquals((-2447), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = Float.valueOf(0.0F);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Object) float0);
      double double0 = jSONObject1.optDouble("wheel.json.JSONException");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-3955.30", (-459));
      double double0 = jSONObject1.optDouble("-3955.30");
      assertEquals((-459.0), double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("&vto8pM5y)te+", true);
      Object object0 = jSONObject1.opt("&vto8pM5y)te+");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Short short0 = new Short((short)4);
      JSONObject jSONObject0 = new JSONObject(short0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.put("khx", (Object) boolean0);
      boolean boolean1 = jSONObject0.isNull("khx");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ntrue", (Object) "ntrue");
      boolean boolean0 = jSONObject1.has("ntrue");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nrue", (Object) "nrue");
      String string0 = jSONObject1.getString("nrue");
      assertNotNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.791759469228055
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("0", double0);
      long long0 = jSONObject0.getLong("0");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("@3Am", (-2892.9154408));
      long long0 = jSONObject0.getLong("@3Am");
      assertEquals((-2892L), long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject(",:]}/\"[{;=#");
      assertNotSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("in", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("in");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)30);
      jSONObject0.put("\f", (Object) short0);
      int int0 = jSONObject0.getInt("\f");
      assertEquals(30, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("06wXIxV~~A6W^L<[", (double) 86);
      double double0 = jSONObject1.getDouble("06wXIxV~~A6W^L<[");
      assertEquals(86.0, double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ntrue", (Object) "ntrue");
      Object object0 = jSONObject1.get("ntrue");
      assertEquals("ntrue", object0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("cl", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean boolean0 = new Boolean("getsubstring");
      String string0 = JSONObject.valueToString(boolean0, (-77), 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 0, (-77));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, (-1774));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.849817938409554
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-3454));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject.testValidity("-2275.7031");
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("", "");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("8|,", (-1784L));
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4'", 0L);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 1L);
      long long0 = jSONObject0.getLong("");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not found.", 0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      jSONObject0.put(">Wb011)hQ", 3066);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-1482));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 3504.4645383574807);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      String string0 = jSONObject0.optString("4o\"", stringArray0[0]);
      assertNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.optString("iJp6dx]O-V/?-UO", "");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      String string0 = jSONObject0.optString((String) null, "gethashCode");
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(">?N):Gs,X]", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("true", (long) (-1482));
      assertEquals((-1482L), long0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", (-1489L));
      assertEquals((-1489L), long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("toJ", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5936174605927702
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      int int0 = jSONObject0.optInt((String) null, (-831));
      assertEquals((-831), int0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      int int0 = jSONObject0.optInt(">Wb011)hQ", 3066);
      assertEquals(3, jSONObject0.length());
      assertEquals(3066, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 800);
      assertEquals(800, int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("0", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("lphv1d,o|A~&.*", 2460.51008);
      assertEquals(2460.51008, double0, 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      double double0 = jSONObject0.optDouble("", 2077.42844);
      assertEquals(2077.42844, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Null pointer", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer(43);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5146861055007865
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.accumulate("istoString", jSONObject0);
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.936535968552064
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (-2447));
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONObject$Null", (double) (-2447));
      // Undeclared exception!
      JSONObject.valueToString(jSONObject2, 3847, 3847);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      hashMap0.put((JSONArray) null, "z$x^B?#^*5oR?ZvgIP");
      jSONObject0.put("] not found.", (Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject0, 102, 102);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.8884699676219987
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "XT4Z9FP#k;QX{P$");
      // Undeclared exception!
      jSONObject0.toString(4881, 0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double(426.747548262131);
      hashMap0.put((String) null, double0);
      jSONObject0.put("KyrG", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-3214), 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt(";H`nke818jf1", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-2880));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      Integer integer0 = Integer.valueOf(120);
      hashMap0.put(integer0, (JSONObject) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("<4~=~Nuvs(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<4~=~Nuvs(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("istoUnsignedInt", "istoUnsignedInt");
      StringWriter stringWriter0 = new StringWriter(27);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7280868748471145
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 1926, (-30));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      String string0 = JSONObject.valueToString(hashMap0, (-46608889), (-1));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 2769, 2769);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-62353066), 67);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8008293981022103
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-3Nke_|c$]EGc|");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.9541367104496457
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (-2447));
      jSONObject1.toString((-2447), 67);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.9536870968261045
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("3=cnCk\"&b{Nw</8<Ud");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.4277456633953713
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getLong("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n                                                                   }");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000004\\\": java.lang.Integer@0000000005,\\n\\\"java.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\"\\n                                                                   }\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1894736293243366
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\b");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.7833836094401962
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4708084763221114
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("hArue", true);
      boolean boolean0 = jSONObject0.optBoolean("hArue");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.put("", false);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ntrue", (Object) "ntrue");
      String string0 = jSONObject1.optString("ntrue");
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("~>N]Lz{[u");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("&Z_!*Weuu$Kor+-", jSONObject0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("&Z_!*Weuu$Kor+-");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.090583306816482
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Double double0 = new Double(867.6);
      JSONObject jSONObject0 = new JSONObject(double0);
      Long long0 = new Long(558L);
      jSONObject0.append("dec", long0);
      // Undeclared exception!
      jSONObject0.toString(6094);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.3730039128771998
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.4562909245092568
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JfSONObject[", (double) 102);
      long long0 = jSONObject1.optLong("JfSONObject[");
      assertEquals(102L, long0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("getoptLong", (Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("getoptLong");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("khx", (Object) "khx");
      try { 
        jSONObject0.getJSONObject("khx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"khx\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("val", (Object) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("val");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ntrue", (Object) "ntrue");
      try { 
        jSONObject1.getJSONArray("ntrue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ntrue\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("06wXIxV~~A6W^L<[", 0.0);
      double double0 = jSONObject1.getDouble("06wXIxV~~A6W^L<[");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.580649125069464
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.put("kcPL+", (Object) boolean0);
      int int0 = jSONObject1.optInt("kcPL+");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.679204331602707
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("true", (Object) "true");
      boolean boolean0 = jSONObject0.optBoolean("true", false);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.put("kcPL+", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("kcPL+");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ntrue", (Object) "ntrue");
      boolean boolean0 = jSONObject0.optBoolean("ntrue", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) boolean0);
      boolean boolean1 = jSONObject1.optBoolean("", false);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-62353066));
      assertEquals("-6.2353066E7", string0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = JSONObject.doubleToString(23.019);
      assertEquals("23.019", string0);
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ntrue", (Object) "ntrue");
      try { 
        jSONObject1.append("ntrue", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ntrue] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("getcompare", "getcompare");
      JSONObject jSONObject2 = jSONObject0.append("getcompare", "getcompare");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ntrue", (Object) "ntrue");
      JSONObject jSONObject2 = jSONObject1.accumulate("ntrue", jSONObject0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("@N,GnXn`NI]X%wGoBq", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("e", "e");
      Integer integer0 = new Integer(8448);
      JSONObject jSONObject1 = jSONObject0.accumulate("e", integer0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.631107479158123
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Float float0 = new Float(1311.21310268);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.optJSONArray("Substring bounds error");
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 176
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 177
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Yx3wXN$)4|X3eusuS3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 19 of {Yx3wXN$)4|X3eusuS3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 178
  /*Coverage entropy=2.0613392562224555
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONObject@0000000001");
      String string0 = JSONObject.valueToString(jSONObject0, (-1), (-1));
      JSONObject jSONObject1 = new JSONObject(string0);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 179
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 180
  /*Coverage entropy=1.475076311054695
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-1), (-1));
      JSONObject jSONObject1 = new JSONObject(string0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 181
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("isparseBoolean", object0);
      boolean boolean0 = jSONObject0.isNull("isparseBoolean");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 182
  /*Coverage entropy=1.7165164469072212
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("nrue", object0);
      boolean boolean0 = jSONObject0.optBoolean("nrue");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 183
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (-2447));
      int int0 = jSONObject1.getInt("] is not a JSONObject.");
      assertEquals(2, jSONObject0.length());
      assertEquals((-2447), int0);
  }

  /**
  //Test case number: 184
  /*Coverage entropy=1.6792706702716655
  */
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      long long0 = jSONObject0.optLong((String) null, 1968L);
      assertEquals(1, jSONObject0.length());
      assertEquals(1968L, long0);
  }

  /**
  //Test case number: 185
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 186
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 187
  /*Coverage entropy=1.5406465859104317
  */
  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", 2933.3350617);
      double double0 = jSONObject0.optDouble("{\"java.lang.String@0000000004\":java.lang.Integer@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      assertEquals(2, jSONObject0.length());
      assertEquals(2933.3350617, double0, 0.01);
  }

  /**
  //Test case number: 188
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Boolean@0000000001");
      jSONObject0.remove("");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 189
  /*Coverage entropy=1.2092536248090335
  */
  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.put((String) null, (long) 2134);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 190
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("in", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("in");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"in\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 191
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Boolean boolean0 = new Boolean("] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 192
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }
}
