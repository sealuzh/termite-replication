/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 08:58:43 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O34[S`JIdBMV>F");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O34[S`JIdBMV>F", defaultDBTable0, (-387), "jMFJln4!?;bANO");
      genericDescriptorList0.add((Object) defaultDBColumn0);
      genericDescriptorList0.add((DBColumn) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index9j-nu)q&x");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "insert", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("calincorrct trasction isolation leve.", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getDoc());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "oh8");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.substituteMarkers("x", "x", stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.523448480499437
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean.valueOf("create materialized view");
      DBDataType dBDataType0 = DBDataType.getInstance(1761, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewalter tableorg.ap", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "OQO)D";
      stringArray0[5] = "create materialized view";
      stringArray0[6] = "alter materialized viewalter tableorg.ap";
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultDBColumn0;
      objectArray0[1] = (Object) "OQO)D";
      objectArray0[2] = (Object) "create materialized view";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) dBDataType0;
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      assertEquals("SELECT * FROM null WHERE  = alter materialized viewalter tableorg.ap :  AND  = 'OQO)D' AND  = 'create materialized view' AND  = '' AND OQO)D = '' AND create materialized view = '' AND alter materialized viewalter tableorg.ap = ", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[18];
      byte[] byteArray0 = new byte[3];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.join("NCLOB", "NCLOB", stringArray0, "insert", "TABLE_SCHEM", stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)88, "NCLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB join insert as TABLE_SCHEM on NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null and NCLOB.null = TABLE_SCHEM.null", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.toString();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      System.setCurrentTimeMillis(67108864L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3291016900199226
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "interna";
      stringArray0[1] = "";
      stringArray0[2] = "rename";
      stringArray0[3] = "hz|]d+";
      stringArray0[4] = "h%e+w,V<(8)TpO";
      stringArray0[5] = ", C$?";
      stringArray0[6] = "}('\"";
      stringArray0[7] = " DEFAULT ";
      stringArray0[8] = " join ";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "rename";
      objectArray0[1] = (Object) "rename";
      objectArray0[2] = (Object) " join ";
      objectArray0[3] = (Object) ", C$?";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(@8Nv'=il*\"~:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (@8Nv'=il*\"~:
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2008, "alter tableorg.ap");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tableorg.ap", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(65, rowOutputBinary0.size());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2009, "alter tableorg.ap");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tableorg.ap", defaultDBTable0, dBDataType0, integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((byte[]) null);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.lib.HsqlByteArrayOutputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alte^ t(ableorg.ap", defaultDBTable0, (DBDataType) null, integer0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
      assertEquals("alte^ t(ableorg.ap", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Kh_)rzoz/|-iH(3S)C");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3S\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLUtil.isQuery("setBlob(String, InputStream, long)");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setBlob(String, InputStream, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5440494500188797
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = stringArray0[0];
      stringArray0[3] = "inner";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "inner";
      SQLUtil.join("inner", (String) null, stringArray0, (String) null, "C}=v9i9", stringArray0);
      SQLUtil.mutatesDataOrStructure("alter session}%z");
      System.setCurrentTimeMillis((-1070L));
      SQLUtil.renderColumnListWithTableName("select into", stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("null as C}=v9i9 on null.null = C}=v9i9.null and null.null = C}=v9i9.null and null.null = C}=v9i9.null and null.inner = C}=v9i9.inner and null.null = C}=v9i9.null and null.null = C}=v9i9.null and null.inner = C}=v9i9.inner");
      assertNull(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("callalte = 'alte' and alte = 'alte' and alte = 'alte' and alte = 'alte' and ^/\"*<g%b!vnnzcp = '^/\"*<g%b!vnnzcp'");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("callalte = 'alte' and alte = 'alte' and alte = 'alte' and alte = 'alte' and ^/\"*<g%b!vnnzcp = '^/\"*<g%b!vnnzcp'");
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "'ON'";
      stringArray0[2] = "callalte = 'alte' and alte = 'alte' and alte = 'alte' and alte = 'alte' and ^/\"*<g%b!vnnzcp = '^/\"*<g%b!vnnzcp'";
      stringArray0[3] = "callalte = 'alte' and alte = 'alte' and alte = 'alte' and alte = 'alte' and ^/\"*<g%b!vnnzcp = '^/\"*<g%b!vnnzcp'";
      stringArray0[4] = null;
      stringArray0[5] = "f?0Y3V@W";
      stringArray0[6] = null;
      stringArray0[7] = "slect intod:;@1\"";
      stringArray0[8] = "drop indexalte = 'alte' and alte = 'alte' and alte = 'alte' and alte = 'alte' and ^/\"*<g%b!vnnzcp = '^/\"*<g%b!vnnzcp'";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((-1456L));
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("callalte = 'alte' and alte = 'alte' and alte = 'alte' and alte = 'alte' and ^/\"*<g%b!vnnzcp = '^/\"*<g%b!vnnzcp'-1456", stringBuilder0.toString());
      assertEquals("callalte = 'alte' and alte = 'alte' and alte = 'alte' and alte = 'alte' and ^/\"*<g%b!vnnzcp = '^/\"*<g%b!vnnzcp'-1456", stringBuilder1.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "alter tabeprimay kHy";
      String string1 = "left";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "alter tabeprimay kHy";
      stringArray0[1] = "left";
      stringArray0[2] = "left";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "left");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      StringBuilder stringBuilder3 = stringBuilder2.append("alter tabeprimay kHy");
      // Undeclared exception!
      try { 
        stringBuilder3.replace(357, 9, "left");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tabEeorg.p");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8545330956972883
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("E}){p7!_! KEy~XEE");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "D~c";
      stringArray0[1] = "E}){p7!_! KEy~XEE";
      SQLUtil.join(" ADD ", "Q]MMO#$JC[", stringArray0, "org.hsqldb.rowio.RowInputText", "E}){p7!_! KEy~XEE", stringArray0);
      SQLUtil.mutatesDataOrStructure("D~c");
      Character character0 = Character.valueOf('Y');
      SQLUtil.renderValue(character0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("call");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("View", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Character character0 = Character.valueOf('5');
      boolean boolean0 = SQLUtil.isProcedureCall(".OF\"Y5z?QT9!3A1\"u");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("selectcalincorrct trasction isolation leve.", ".OF\"Y5z?QT9!3A1\"u", character0);
      assertEquals("selectcalincorrct trasction isolation leve.", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder("alter tableprimary key");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("sov+");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "alter tableprimary key";
      stringArray0[1] = "'ON'";
      stringArray0[2] = "alter tableprimary key";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("slect intod:;@1\"", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(1L);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("alter tableprimary keyCONSTRAINT \"slect intod:;@1\"\" 1CONSTRAINT \"slect intod:;@1\"\" ", stringBuilder1.toString());
      assertEquals("alter tableprimary keyCONSTRAINT \"slect intod:;@1\"\" 1CONSTRAINT \"slect intod:;@1\"\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "SELECT * FROM ";
      SQLUtil.isQuery("SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      StringWriter stringWriter0 = new StringWriter(1773);
      SQLUtil.isQuery("SELECT * FROM ");
      String[] stringArray0 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4699913100731523
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.normalize("", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      SQLUtil.join((String) null, (String) null, stringArray0, stringArray0[1], (String) null, stringArray0);
      DBSchema dBSchema0 = new DBSchema("null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z`>ZNI)J_x", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", (String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(">c?`Z?yGp(#]E;>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: >c?`Z?yGp(#]E;>
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7022665265566461
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("call", true);
      assertEquals("call", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("call");
      assertTrue(boolean0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "call";
      stringArray0[1] = "call";
      stringArray0[2] = "call";
      stringArray0[3] = "call";
      stringArray0[4] = "call";
      stringArray0[5] = "call";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("call = 'call' AND call = 'call' AND call = 'call' AND call = 'call' AND call = 'call' AND call = 'call'", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = SQLUtil.normalize("-<-", false);
      assertEquals("- < -", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5979710500990563
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesStructure("$`>laBYLEXCCxt@P4[");
      SQLUtil.normalize(",zCst@zr}*u:.3pmCsv", true);
      DBDataType dBDataType0 = DBDataType.getInstance(39, "drop table");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("q{7d", defaultDBTable0, dBDataType0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "drop table";
      stringArray0[1] = "$`>laBYLEXCCxt@P4[";
      stringArray0[2] = "$`>laBYLEXCCxt@P4[";
      stringArray0[3] = "q{7d";
      stringArray0[4] = "q{7d";
      stringArray0[5] = "$`>laBYLEXCCxt@P4[";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(",zCst@zr}*u:.3pmCsv", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = null;
      String string1 = "callca";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" vj:]0C2l", true, "renamecalincorrct trasction isolation leve.", "callca");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "fve$e");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-152061286);
      // Undeclared exception!
      try { 
        stringBuilder1.replace((-152061286), (-152061286), "NON_UNIQUE BIT");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -152061286
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Boolean boolean0 = new Boolean("alter materialized viewtable nul");
      SQLUtil.isProcedureCall("alter materialized viewtable nul");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" AND ", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3327503268502556
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tabEeorg.p");
      assertNull(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean1);
      assertNotNull(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLUtil.isQuery("SELECT *Y= FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT *Y= FROM ");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table SELECT *Y= FROM  (\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insert");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "update";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "alter materialized viewselect";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("update", stringArray0, stringArray0[0], "alter materialized viewselect", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = new Integer(378);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((-227631258), "B3B*zA0");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^/\"*<g%B!VNNZcP", (DBTable) null, dBDataType0, integer2, integer0);
      defaultDBColumn0.toString();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("fileName", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[20];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("calincorrct trasction isolation leve.", (DBTable) null, (-712), "calincorrct trasction isolation leve.");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("calincorrct trasction isolation leve.", (DBTable) null, (-731), "calincorrct trasction isolation leve.");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("calincorrct trasction isolation leve.", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("A", (String[]) null, "A", "A", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer integer0 = new Integer((-19));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.DefaultDBTable cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tableprimary key");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = SQLUtil.normalize("^/\"*<g%B!VNNZcP", false);
      assertEquals("^ / \"*<g%B!VNNZcP\"", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("update");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , )", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7091273935142133
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLUtil.isProcedureCall("alter tableprimary key");
      StringBuilder stringBuilder0 = new StringBuilder("FUTURE3");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FUTURE3");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FUTURE3";
      stringArray0[1] = "alter tableprimary key";
      stringArray0[2] = "alter tableprimary key";
      stringArray0[3] = "alter tableprimary key";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter tableprimary key", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.addRequiredCondition("alter tableprimary key", stringBuilder1);
      assertEquals("FUTURE3 and alter tableprimary key", stringBuilder1.toString());
      assertEquals("FUTURE3 and alter tableprimary key", stringBuilder0.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.492957834421075
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("delete");
      DBSchema dBSchema0 = new DBSchema("delete");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "%VCOh6%0eL>", true, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(615);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT %VCOh6%0eL> ", stringBuilder0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.531445182452139
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("-xJ00/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-xJ00/");
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-xJ00/", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("-xJ00/", stringBuilder1.toString());
      
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("-xJ00/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-xJ00/");
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-xJ00/", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("-xJ00/CONSTRAINT -xJ00/ ", stringBuilder0.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create materialized view-xj00/");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "internal_st", "internal_st", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("internal_sGopslYve", false, "internal_sGopslYve", "internal_sGopslYve");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK internal_sGopslYve", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("select", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.659491107247209
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("//a:O;rbwL?y^M7A", true);
      SQLUtil.mutatesDataOrStructure("");
      SQLUtil.parseColumnTypeAndSize("$gEOAlcT");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = SQLUtil.normalize("dKop ondet</]`x w(2i<", false);
      assertEquals("dKop ondet < / ] ` x w (2i <", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SQLUtil.renderColumnListWithTableName(">WC4_Iy_M<4", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "oT0paQIaX(ed10q";
      // Undeclared exception!
      try { 
        SQLUtil.join(">WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null", ">WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null, >WC4_Iy_M<4.null", stringArray0, " NOT NULL", " NOT NULL", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec$`>labylexccxt@p4[");
      assertNull(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = SQLUtil.normalize("a)<oter tblH", true);
      assertEquals("a) < oter tblH", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("segmentId");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table segmentId", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5688999753452237
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(253, "_sx");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_sx", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("_sx");
      assertNull(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncatcalncorrct trasctidnqisolation leve.", (DBTable) null, 272, "truncatcalncorrct trasctidnqisolation leve.");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "NCHAR2");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("NCHAR2", stringBuilder0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("NCHAR2 and NCHAR2TRUNCATCALNCORRCT TRASCTIDNQISOLATION LEVE.", stringBuilder1.toString());
      assertEquals("NCHAR2 and NCHAR2TRUNCATCALNCORRCT TRASCTIDNQISOLATION LEVE.", stringBuilder0.toString());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = SQLUtil.normalize("seleFUcy,c:_", false);
      assertEquals("seleFUcy, c : _", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-766), "truncatefilename");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fileName", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("TRUNCATEFILENAME(2,2)", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-802), "XCL13.S");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XCL13.S", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("XCL13.S", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.join("C/3H{^uu[zb%I.%G`>", "C/3H{^uu[zb%I.%G`>", (String[]) null, "encryptionKey", "encryptionKey", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7072731044346217
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(stringArray0[4], stringArray0, "Leco.", "null = null AND null = null AND null = null AND null = null AND null = null", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[2] = "internal_stopslave";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("internal_stopslave");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "internal_stopslave", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , internal_stopslave, , , , , )", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.innerJoin("NCLOB", stringArray0, "fyi_WtD*sNc)[]Y)", (String) null, stringArray0);
      assertEquals("fyi_WtD*sNc)[]Y) as null on NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(65552, "alter tableorg.ap");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tableorg.ap", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER TABLEORG.AP(3)", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("RIGHTS", (String[]) null, "KZqF~X}qMm\"L'uZr", " WHERE ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ui{");
      SQLUtil.addOptionalCondition("ui{", stringBuilder0);
      assertEquals("ui{ or ui{", stringBuilder0.toString());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("^<", stringBuilder0);
      assertEquals("^<", stringBuilder0.toString());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin(") AS BINARY", stringArray0, "execselecl_t ; fr%m", ") AS BINARY", stringArray0);
      assertEquals("left join execselecl_t ; fr%m as ) AS BINARY on ", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", true, "SELECT * FROM ", "SELECT * FROM ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" ", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "SELECLY,C:_T ; FR%M ", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = SQLUtil.normalize(")!l/}|'aPqu?", false);
      assertEquals(") ! l / } | 'aPqu?'", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = SQLUtil.normalize(")!l/}|'aPqu?", true);
      assertEquals(") ! l / } | 'aPqu?'", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X2", defaultDBTable0, 1902, "X2");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("X2 X2 NULL", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("fve$e", false, "fve$e", "fve$e");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT fve$e ", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "tj*pI", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , , , )", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SQLUtil.renderValue((Object) null);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.3238614379613667
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("aser tableprimary#ey");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("drop materialized viewdelete", "]W8RtcBv/LxE9(~,(", "drop materialized viewdelete");
      assertEquals("drop materialized viewdelete", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("selectsetblob(string, blob)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4223665577792008
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.leftJoin("null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null", "SYNONYM", stringArray0);
      assertEquals("left join null = null AND null = null AND null = null AND null = null as SYNONYM on null = null AND null = null AND null = null AND null = null.null = SYNONYM.null and null = null AND null = null AND null = null AND null = null.null = SYNONYM.null and null = null AND null = null AND null = null AND null = null.null = SYNONYM.null and null = null AND null = null AND null = null AND null = null.null = SYNONYM.null", string1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.0081371475869743
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("calincorrct trasaction isolation level.");
      String string0 = SQLUtil.renderValue(boolean0);
      assertEquals("false", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = SQLUtil.renderValue("select");
      assertEquals("'select'", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("^G", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("fve$e", true, "fve$e", "fve$e");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT fve$e CHECK fve$e", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("fve$ae", false, "fve$ae", "fve$ae");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT fve$ae ", stringBuilder0.toString());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.6152804042395514
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = SQLUtil.renderColumnListWithTableName("execr*3'vwx!ku", stringArray0);
      assertEquals("execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execr*3'vwx!ku");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null, execr*3'vwx!ku.null", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , , , ) REFERENCES execr*3'vwx!ku(, , , , , , , , , )", string1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("-xJ00/");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-xJ00/");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-xJ00/";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-xJ00/", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT -xJ00/ FOREIGN KEY (-xJ00/) REFERENCES -xJ00/(-xJ00/)", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("&!.`US7/#!", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.9387281743103264
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("F#ifHj?Xjq)d", dBCatalog0);
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.F#ifHj?Xjq)d", string1);
      
      boolean boolean0 = SQLUtil.isProcedureCall("Mkb]");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("fleNae");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("~(+DF.=J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ~(+DF.=J
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("h2.functionsInSchema");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = SQLUtil.removeComments("z[C64<5}2");
      assertEquals("z[C64<5}2", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter table");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("q^2Wl", stringBuilder0);
      assertEquals("q^2Wl", stringBuilder0.toString());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog("Uv){cGna");
      assertEquals("Uv){cGna", dBCatalog0.getName());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("d(+#F.OJ", "d(+#F.OJ", (String[]) null, "d(+#F.OJ", "d(+#F.OJ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("getColumnCount");
      assertNull(boolean0);
  }
}
