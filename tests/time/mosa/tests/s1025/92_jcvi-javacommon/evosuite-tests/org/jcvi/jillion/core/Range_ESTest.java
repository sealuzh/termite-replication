/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 09:16:41 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.891228606131704
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5001L), (-5001L));
      Range range1 = Range.of(range_CoordinateSystem0, (-5001L), (-5001L));
      boolean boolean0 = range1.equals(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2237L));
      Range range1 = range_Builder0.build();
      range0.equals(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.35269295126233
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-2119L));
      Range range1 = range_Builder1.build();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5001L), (-5001L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3331792895657566
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.of(0L, 431L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1259L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1259 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.20405020110221
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      range0.equals((Object) null);
      Object object0 = new Object();
      long long0 = 719L;
      Range.of(1073L);
      Object object1 = new Object();
      range0.equals(object1);
      // Undeclared exception!
      try { 
        Range.of(2475L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.633563713998648
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(3504447L);
      boolean boolean0 = range0.equals((Object) null);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range1 = Range.ofLength(3504447L);
      String string0 = range1.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 3504446 ]/0B", string0);
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-646L), 3504447L);
      range0.equals((Object) null);
      Range range1 = Range.ofLength(3504447L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5879368632962025
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1703L);
      range_Builder0.contractBegin(1703L);
      Range range0 = range_Builder0.build();
      range0.isEmpty();
      Range range1 = Range.of(1703L);
      Range.of(range_CoordinateSystem0, 3082L, 3082L);
      range0.equals((Object) null);
      Range range2 = Range.of((-1L), 3082L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2052L, 2052L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      Range range1 = Range.of(2857L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3939721614666483
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(2464L, 9223372036854775753L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2464L);
      range_Builder1.shift(2464L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854773399 would make range [7392 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.329337375063968
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(2464L, 9223372036854775753L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2464L);
      Range range1 = range_Builder1.build();
      Range range2 = Range.ofLength(32766L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(2464L, 9223372036854775753L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2464L);
      Range range1 = range_Builder1.build();
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3860982536226607
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1703L);
      range_Builder0.contractBegin(1703L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.isEmpty();
      Range range1 = Range.of(1703L);
      Range range2 = Range.of(range_CoordinateSystem0, 3082L, 3082L);
      boolean boolean1 = range0.equals(range2);
      //  // Unstable assertion: assertNotSame(range0, range1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.386554964003035
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(0L, 9223372036854774647L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(55L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(868L, 4294967304L);
      boolean boolean0 = range0.equals("_V");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7974561695016638
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(2147483647L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 2147483646 ]/0B", string0);
      
      Range range2 = Range.ofLength(2147483647L);
      assertSame(range2, range0);
      
      Range range3 = Range.of(32767L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 2149L, 32767L);
      List<Range> list0 = range4.complement(range3);
      assertTrue(list0.contains(range4));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.listIterator();
      linkedList0.add((Range) null);
      linkedList0.add((Range) null);
      Range range0 = Range.ofLength(255L);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3117896114619447
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(3504462L, 4294967304L);
      // Undeclared exception!
      range0.split(2090L);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(2464L, 9223372036854775753L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775753L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2464L);
      Range range1 = range_Builder1.build();
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9804021452834966
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(2464L, 9223372036854775753L);
      Range range1 = Range.of(2464L, 9223372036854775753L);
      range1.isSubRangeOf(range0);
      range1.equals(range0);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8922772952702807
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.552622444065053
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(2464L, 9223372036854775753L);
      Object object0 = new Object();
      Range range1 = Range.of(1684L);
      List<Range> list0 = range1.split(1L);
      assertFalse(list0.contains(range0));
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4325559529114655
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2237L), 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin((-2809L));
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(3504447L, 3504447L);
      Range.ofLength(3504447L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(2464L, 9223372036854775753L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-6097L), (-6097L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5745946447597423
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(255L, 255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6043233296846062
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range range1 = Range.of((-5001L), (-5001L));
      range1.iterator();
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range range1 = Range.of((-5001L));
      range1.equals(range0);
      List<Range> list0 = new LinkedList<Range>();
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range range1 = Range.of((-5001L), (-2119L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.626852407706491
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-32768L), 32767L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.627065536860054
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.540818734019718
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 9223372036854774632L);
      boolean boolean0 = range0.equals("end of file after only %d bytes read (expected %d)");
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2041131932281943
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(405L, 405L);
      Range range1 = Range.of(405L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 543L, 2405L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0600949885294986
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-2119L), (-2119L));
      Range.Builder range_Builder0 = new Range.Builder((-2119L), 9223372036854773659L);
      Range range1 = Range.of((-2119L), 9223372036854773659L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3246L), 51048L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.of(3504447L, 3504447L);
      Range range0 = Range.ofLength(3504447L);
      boolean boolean0 = range0.equals("");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2683870415675123
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(3504447L, 3504447L);
      Range range1 = Range.ofLength(3504447L);
      Range range2 = Range.ofLength(3504447L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(range2.equals((Object)range0));
      assertTrue(boolean0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3346959524909843
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = (-9223372036854765818L);
      Range range0 = Range.of((-9223372036854765847L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.633006653740095
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.isEmpty();
      Object object0 = new Object();
      Range.of(0L);
      Range.ofLength(1995L);
      Range.of(1995L);
      long long0 = 9223372036854772533L;
      Range.of(0L, 9223372036854772533L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 911L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L), (-128L));
      range1.equals(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.443210477937939
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774632L);
      Range range1 = Range.of(9223372036854774578L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.676788007563136
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 39L, (-9223372036854775808L));
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.6760617984754362
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(405L, 4294967318L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967318L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2380188789437025
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 313L, 313L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-141L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -141 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.060187452699633
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range range1 = Range.of(9223372036854774578L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2119 would make range [9223372036854774578 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.9792907100418677
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(127L);
      Range.ofLength(127L);
      Range range1 = Range.ofLength(1046L);
      Range range2 = Range.of((-2091L), 1L);
      Range range3 = Range.of(127L);
      List<Range> list0 = range3.complement(range1);
      //  // Unstable assertion: assertTrue(list0.isEmpty());
      
      range1.toString();
      boolean boolean0 = range2.startsBefore(range3);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range4 = range2.intersection(range1);
      //  // Unstable assertion: assertTrue(range4.equals((Object)range0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(4294967304L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.588529890544244
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      range0.toString(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-128L));
      range1.toString(range_CoordinateSystem0);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-2091L), 1L);
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-128L), long1);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      range2.intersection(range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.8658367855507336
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-2425L), 0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
      
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774596L);
      Range range1 = Range.of(9223372036854774578L);
      range1.equals(range0);
      List<Range> list0 = new LinkedList<Range>();
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      range0.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-537L), (-537L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(405L, 405L);
      Range range1 = Range.of(327L);
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(431L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3012218614051063
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967304L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-474L), 4294967304L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2003578934099024
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.439559745008296
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(3504447L, 3504447L);
      range0.getEnd();
      range0.toString();
      Range range1 = Range.ofLength(3504447L);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range range1 = Range.of((-2119L), (-2119L));
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.ofLength(255L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(20L, 20L);
      Range range1 = Range.of(20L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.1352405357221285
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(0L, 0L);
      Range range2 = Range.of(55L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      
      boolean boolean1 = range2.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.5968141772275795
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.142657388254181
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(2881L);
      Range range1 = Range.ofLength(2881L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertFalse(range1.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(851L);
      Range range1 = Range.ofLength(0L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.of((-128L), (-2275L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4943069462133787
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      boolean boolean0 = range0.equals("end of file after only %d bytes read (expected %d)");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3867213250577715
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-127L), long0);
      
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.867245441998968
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder((-1698L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range_Builder0.contractBegin((-2155L));
      range_Builder0.copy();
      boolean boolean0 = range0.equals(range_Builder0);
      boolean boolean1 = range1.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      
      range0.getEnd();
      Range range2 = range0.asRange();
      range1.isEmpty();
      Range range3 = Range.ofLength(2351L);
      List<Range> list0 = range3.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range3));
      
      Range.Builder range_Builder1 = new Range.Builder(1L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      range3.toString(range_CoordinateSystem0);
      range0.intersection(range3);
      List<Range> list1 = range0.split(2175L);
      assertFalse(list1.equals((Object)list0));
      
      range3.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.parseRange("[ 0 .. 2350 ]/0B", range_CoordinateSystem2);
      long long0 = range4.getEnd();
      assertEquals(2349L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem3);
      assertEquals("[ 1 .. 1 ]/RB", string0);
      assertSame(range1, range2);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("S)S3-0ZX-.8}*2vr", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.0616813836053285
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3504462L, 3504462L);
      range0.toString();
      long long0 = range0.getBegin();
      //  // Unstable assertion: assertEquals(3504462L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 3504462L, 3504462L);
      Range range2 = Range.parseRange("[ 3504461 .. 3504461 ]/0B");
      //  // Unstable assertion: assertTrue(range2.equals((Object)range1));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.1356559690710406
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(1703L);
      Range range1 = Range.of(1703L, 1703L);
      Range range2 = Range.of(1703L, 1703L);
      range1.equals(range2);
      boolean boolean0 = range2.isSubRangeOf(range2);
      assertSame(range2, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(1543L, 1543L);
      boolean boolean0 = range0.equals("or.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774615L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.2508568486506437
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(0L);
      Range range2 = Range.of(269L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.8656347004183655
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.ofLength(1599L);
      List<Range> list0 = range1.complement(range1);
      assertEquals(0, list0.size());
      
      range1.iterator();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(1357L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.3277188385617107
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(9223372036851271360L);
      range_Builder0.shift(0L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(3581L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.2705479059132507
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.contains(range0));
      
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      long long1 = range0.getEnd();
      assertTrue(range0.isEmpty());
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.633689161777525
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      List<Range> list0 = range0.split(65535L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 65535 ]/RB", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2119L), (-2119L));
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.688750001065033
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-873L));
      String string0 = range0.toString();
      assertEquals("[ -873 .. -873 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-873L), long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.152991288216747
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(3504447L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(20L, 20L);
      Range.of(55L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.268939087203285
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(1176L);
      List<Range> list0 = range0.split(745L);
      assertEquals(2, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.1458139335061333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of(1177L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.316903253349764
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(2485L, 9223372036854775753L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(9223372036854774632L, 9223372036854774632L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.4987704282390175
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(20L, 20L);
      Range range1 = Range.of(59L);
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.9780573347195083
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(1000L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-2147483645L), (-2147483645L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(3504447L, 3504447L);
      Range range1 = Range.ofLength(3504447L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4947609244436726
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-2119L), (-2119L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), 1207L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.4410832744684536
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.isEmpty();
      Object object0 = new Object();
      Range range1 = Range.of(2147483647L);
      range0.equals(range1);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      range_CoordinateSystem0.toString();
      range1.iterator();
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("end of file after only %d bytes read (expected %d)", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse end of file after only %d bytes read (expected %d) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.35944788412389
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-3590L), (-3590L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -3590 .. -3589 ]/SB", string0);
      
      long long0 = range0.getBegin();
      assertEquals((-3590L), long0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.365643922890749
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("k9Y#%hrIB)Jq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse k9Y#%hrIB)Jq into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.6746981256499596
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(327L);
      Range range1 = Range.of(327L, 327L);
      range1.iterator();
      assertFalse(range1.equals((Object)range0));
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-2240L));
      // Undeclared exception!
      try { 
        range0.split((-2240L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1113L, 1113L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-5001L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-1807L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-5001L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.459392892262849
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.of((-2119L), (-2119L));
      Range.Builder range_Builder0 = new Range.Builder((-2119L), 9223372036854773659L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2119L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.117392856642673
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(2710L);
      String string0 = range0.toString();
      assertEquals("[ 2710 .. 2710 ]/0B", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.388244098321697
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      Range range1 = Range.of((-5218L), (-2119L));
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.6442804757487854
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      range0.getLength();
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.307243725856191
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.ofLength(255L);
      boolean boolean0 = range0.endsBefore(range0);
      assertSame(range0, range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.9845056874784586
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(299L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(3505094L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.2068156332009754
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(234L, 234L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-1L));
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.0538382463504266
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Object object0 = new Object();
      range0.equals(object0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2546L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(94L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(255L, long0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.117073877376325
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(2938L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2939 .. 2939 ]/RB", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of((-5030L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 3504462L, 3504462L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.5409049058777575
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(0L, long0);
      
      Range range1 = Range.of((-2366L));
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertSame(range2, range0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(2748L, 2748L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.4617762548420483
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(1176L);
      long long0 = range0.getEnd();
      assertEquals(1175L, long0);
      
      List<Range> list0 = range0.split(1176L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.269042622949001
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.expandBegin(4294967295L);
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.split(4294967295L);
      assertEquals(2, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.6330311617419575
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(453L);
      List<Range> list0 = range0.split(453L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(297L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.058282690794871
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      //  // Unstable assertion: assertSame(range1, range0);
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.135297931119018
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L), (-32768L));
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of(32772L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.8918711764128284
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(3811L);
      Range range1 = range_Builder1.build();
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483655L, 2147483655L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.5532681897747
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(312L);
      Range range1 = Range.of(312L, 312L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.059573013375516
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(1176L);
      List<Range> list0 = range0.split(1176L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.481384094577418
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(2464L, 9223372036854775753L);
      Range range1 = Range.ofLength(9223372036854775753L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Object object0 = new Object();
      range0.equals(object0);
      //  // Unstable assertion: assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.373988788255377
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-127L), (-127L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
      
      Range range2 = Range.of(0L, 0L);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.384639820579644
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(2663L, 2663L);
      Range range1 = Range.ofLength(2563L);
      range0.intersects(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.067996766631831
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5001L), (-5001L));
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-2119L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775752L, 9223372036854775752L);
      boolean boolean0 = range0.intersects(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.691730071841714
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.ofLength(3504447L);
      Range range1 = Range.ofLength(3504447L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-83L), (-83L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.of((-104L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long long0 = 978L;
      Long long1 = new Long(978L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.of(3504447L, 3504447L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.of(3504447L, 3504447L);
      Range range1 = Range.ofLength(3504447L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of((-858L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of(3504462L);
      assertFalse(range0.isEmpty());
  }
}
