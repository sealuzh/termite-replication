/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 09:19:20 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7111733022888664
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject1 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject1.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long((-1201L));
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long1 = new Long((-16L));
      Long.max((-16L), (-831L));
      hashMap0.put(long0, long1);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4735491916010586
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.quote("-2s0");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 102, 2340);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.499836814939153
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject1 = jSONObject0.put("mnPN''jY2#T'rp>IF2>", (Map) hashMap0);
      jSONObject1.accumulate("mnPN''jY2#T'rp>IF2>", (Object) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("mnPN''jY2#T'rp>IF2>", hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("mnPN''jY2#T'rp>IF2>", (-704L));
      assertEquals(1, jSONObject3.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1530604874709436
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer((-973));
      JSONObject jSONObject0 = new JSONObject();
      Integer integer1 = new Integer((-280));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Object) integer1);
      jSONObject1.optLong("] is not a Boolean.");
      try { 
        jSONObject1.getBoolean("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0874902611030515
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Long long0 = new Long((-1L));
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(long0, jSONArray1, biFunction0);
      JSONObject jSONObject1 = jSONObject0.putOpt("jo", float0);
      jSONObject0.getInt("jo");
      try { 
        jSONObject1.getLong("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8013495969207924
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "a,VdU/");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject0.toString((-46615950), (-46615950));
      assertEquals(3, jSONObject0.length());
      
      JSONObject.quote("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000027,\njava.lang.Byte@0000000028,\njava.lang.Byte@0000000029,\njava.lang.Byte@0000000030,\njava.lang.Byte@0000000031,\njava.lang.Byte@0000000032,\njava.lang.Byte@0000000033\n],\n\"java.lang.String@0000000021\": \"java.lang.Class@0000000022\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      String string0 = JSONObject.doubleToString((-46615950));
      assertEquals("-4.661595E7", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONObject0.optString("?]vu1p;_h>A6", "");
      assertEquals("", string0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string1 = JSONObject.valueToString((Object) null, 96, 96);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6640909830321795
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      String string0 = ";";
      JSONObject jSONObject1 = jSONObject0.put(";", (Map) hashMap0);
      Short short0 = new Short((short)1814);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";";
      JSONObject jSONObject2 = new JSONObject(short0, stringArray0);
      jSONObject0.optDouble("' and instead saw '");
      jSONObject1.accumulate("] is not a number.", jSONObject2);
      String string1 = "Vi7{CyC";
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("Unterminated string", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4677479993462206
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\t";
      stringArray0[1] = "\t";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject0.optDouble("isappend");
      String string0 = null;
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject3.putOpt("] is not a JSONObject.", long0);
      JSONTokener jSONTokener0 = new JSONTokener("{j\" ;2\rGh_S>ct~n");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {j\" ;2\rGh_S>ct~n
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (-646), 10);
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      String string1 = JSONObject.valueToString(hashMap0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.293986035833278
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("JSON does not allow non-finite numbers.", "JSON does not allow non-finite numbers.");
      jSONObject1.accumulate("isnumberToString", jSONObject0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, (-4157), (-4157));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.23886772587276
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Integer integer1 = new Integer(32);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", object0);
      jSONObject1.put("] is not a Boolean.", false);
      jSONObject0.getBoolean("] is not a Boolean.");
      Double double0 = new Double(32);
      JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2353493827191704
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Double double0 = new Double(1.0);
      hashMap0.put((Boolean) null, double0);
      jSONObject0.put("<4 T8/Ns&$oOWA", (Map) hashMap0);
      jSONObject0.put("+u", (Object) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-46615937), (int) (byte)90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1175542363881745
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Short short0 = new Short((short)0);
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONObject text must end with '}'", short0);
      jSONObject0.optDouble("A JSONObject text must end with '}'");
      JSONObject.testValidity(short0);
      try { 
        jSONObject1.getJSONArray("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.109206323735629
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject1 = jSONObject0.put("8;", (Map) hashMap0);
      jSONObject1.optInt("8;");
      Integer integer0 = new Integer(0);
      Byte byte0 = new Byte((byte)90);
      jSONObject1.put("getnotify", (Object) jSONObject0);
      JSONObject jSONObject2 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject1.write(stringWriter0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("pDVn)C%wUS{DYX0HW", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.255774057691124
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject1 = jSONObject0.put(";", (Map) hashMap0);
      jSONObject1.optInt(";");
      Integer integer0 = new Integer(0);
      byte byte0 = (byte)90;
      Byte byte1 = new Byte((byte)90);
      JSONObject jSONObject2 = jSONObject0.put("su", (Object) hashMap0);
      try { 
        jSONObject2.getInt("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8801527409758556
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", (-13L));
      jSONObject0.getInt("isvalueOf");
      jSONObject0.toString((-13));
      Boolean.logicalOr(true, false);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.doubleToString((-1227.730022239));
      assertEquals("-1227.730022239", string0);
      
      String string1 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1701777738179753
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject.quote("");
      Float float0 = new Float(1.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("", 1.0);
      JSONObject.quote((String) null);
      int int0 = jSONObject0.getInt("");
      assertEquals(4, jSONObject0.length());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2462248283062631
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.accumulate("getdecode", integer0);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject0.optJSONArray("");
      Double double0 = new Double((-3362.4828));
      jSONObject1.accumulate("", double0);
      JSONObject.doubleToString((-1.0));
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject1.append("", integer0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames(jSONObject2);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6682695609926674
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject1 = jSONObject0.put(";", (Map) hashMap0);
      jSONObject1.optInt(";");
      Integer integer0 = new Integer(0);
      Byte byte0 = new Byte((byte)90);
      JSONObject jSONObject2 = jSONObject0.put("su", (Object) hashMap0);
      jSONObject2.toString(34, (-2467));
      jSONObject0.toString((-46615936), (int) (byte)90);
      JSONObject jSONObject3 = jSONObject2.optJSONObject(";");
      assertNotSame(jSONObject0, jSONObject3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9726246376120724
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float(1.0);
      JSONObject.numberToString(float0);
      String string0 = jSONObject0.optString("java.lang.Float@0000000003", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6380539404674304
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("wri", (-552.51));
      jSONObject1.optDouble("wri");
      jSONObject1.toString((-46615950), (-46615950));
      JSONObject.quote("m.T");
      try { 
        jSONObject1.getInt("m.T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m.T\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2413196271736995
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "mnPN''jY2#T'rp>IF2>";
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject1 = jSONObject0.put("mnPN''jY2#T'rp>IF2>", (Map) hashMap0);
      Object object0 = null;
      try { 
        jSONObject1.getLong("mnPN''jY2#T'rp>IF2>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mnPN''jY2#T'rp>IF2>\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9689476030793267
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optInt("mpab");
      jSONObject0.keys();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Short short0 = new Short((short)630);
      linkedList0.removeFirstOccurrence(short0);
      jSONObject0.optDouble("@:NAVw7");
      jSONObject0.put("mpab", (Collection) linkedList0);
      JSONObject.getNames((Object) short0);
      jSONObject0.getJSONArray("mpab");
      try { 
        jSONObject0.getDouble("mpab");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mpab\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1L));
      jSONObject0.append("Unclosed comment", long0);
      JSONObject.getNames((Object) jSONObject0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("Unclosed comment");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.125896058966647
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      jSONObject1.put("", true);
      jSONObject1.optJSONArray("");
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.has("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("isoptLong", false);
      try { 
        jSONObject0.append("isoptLong", writer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isoptLong] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject.doubleToString(Double.NaN);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      JSONObject jSONObject1 = jSONObject0.put(";", (Map) hashMap0);
      jSONObject1.keys();
      Byte byte0 = new Byte((byte)90);
      JSONObject.getNames(jSONObject1);
      JSONObject jSONObject2 = jSONObject1.getJSONObject(";");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8596653410756951
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Short short0 = new Short((short)45);
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONArray");
      // Undeclared exception!
      jSONObject0.toString(597);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertEquals(3, stringArray0.length);
      
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("toU", 1310.7245055231099);
      String string0 = JSONObject.quote("-^gQL?</g5'jk-t|7!O");
      assertEquals("\"-^gQL?<\\/g5'jk-t|7!O\"", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3202720333065394
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer((-1252));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) (-1252));
      jSONObject0.optInt("");
      jSONObject0.put("r", (double) (-1252));
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      jSONObject1.getString("r");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4379657607399943
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject0.optJSONArray("");
      jSONObject0.optInt("Hd]iZ%tTG", 32);
      jSONObject1.optJSONObject("gettoUnsignedLong");
      boolean boolean0 = jSONObject0.optBoolean("");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("] s not a Booean.", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("] s not a Booean.");
      assertTrue(boolean1);
      
      JSONObject.valueToString(jSONObject1);
      assertTrue(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0026438375891804
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "a,VdU/");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9586101016355388
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a Boolean.";
      Object object0 = JSONObject.NULL;
      jSONObject0.put("] is not a Boolean.", object0);
      try { 
        jSONObject0.getBoolean("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoString", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("su", (Map) null);
      StringWriter stringWriter1 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertFalse(writer0.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.6237531128537372
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "a,VdU/");
      JSONObject jSONObject1 = jSONObject0.put("a,VdU/", (Object) "a,VdU/");
      JSONObject jSONObject2 = jSONObject1.put("a,VdU/", 0.0);
      jSONObject1.optDouble("a,VdU/", 0.0);
      jSONObject0.toString((-46615950), (-46615950));
      JSONObject.quote("{\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000050,\njava.lang.Byte@0000000051,\njava.lang.Byte@0000000052,\njava.lang.Byte@0000000053,\njava.lang.Byte@0000000054,\njava.lang.Byte@0000000055,\njava.lang.Byte@0000000056\n],\n\"java.lang.String@0000000031\": java.lang.Double@0000000040,\n\"java.lang.String@0000000021\": \"java.lang.Class@0000000022\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      try { 
        jSONObject2.getInt("kF%n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kF%n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.057763583604622
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(480L);
      JSONObject jSONObject1 = jSONObject0.put("VLYh", (Object) long0);
      jSONObject1.optDouble("VLYh");
      try { 
        jSONObject1.getBoolean("VLYh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VLYh\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1190812752072032
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      jSONObject0.toString();
      jSONObject1.optInt("{\"java.lang.String@0000000004\":java.lang.Double@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      jSONObject0.remove("Unclosed comment");
      assertEquals(2, jSONObject0.length());
      
      Short short0 = new Short((short)675);
      JSONObject jSONObject2 = new JSONObject(short0);
      jSONObject2.toString((int) (short)675);
      jSONObject2.length();
      JSONObject.numberToString(short0);
      JSONObject jSONObject3 = new JSONObject((Object) "java.lang.Short@000000001");
      assertEquals(3, jSONObject3.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2139520417656369
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "a^Vd");
      Float float0 = new Float((-1161.3F));
      JSONObject jSONObject1 = jSONObject0.put("tuyK", (Object) float0);
      String string0 = jSONObject1.toString((-46615950), (-46615950));
      String string1 = JSONObject.quote("{\n\"java.lang.String@0000000019\": java.lang.Float@000000002,\n\"java.lang.String@0000000004\": [\njava.lang.Byte@0000000028,\njava.lang.Byte@0000000029,\njava.lang.Byte@0000000030,\njava.lang.Byte@0000000031,\njava.lang.Byte@0000000032\n],\n\"java.lang.String@0000000017\": \"java.lang.Class@0000000018\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.725292748432978
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double double0 = new Double(340.046422);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.remove("{UTPz?:");
      jSONObject0.toString(125);
      JSONObject jSONObject1 = jSONObject0.put("wa", false);
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject2);
      boolean boolean0 = jSONObject1.isNull((String) null);
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8061805477260315
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      jSONObject0.toString();
      jSONObject1.optInt("{\"java.lang.String@0000000004\":java.lang.Double@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      JSONObject jSONObject2 = jSONObject1.put("j*N]'t68Gz<a|A0M3J", (Object) null);
      Long long0 = Long.valueOf((long) 32);
      jSONObject2.accumulate("", long0);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8104399097753396
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Byte byte0 = new Byte((byte)90);
      jSONObject0.put("+u", (Object) hashMap0);
      String string0 = jSONObject0.toString((-46615950), (int) (byte)90);
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.662651608655277
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(24);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 24);
      jSONObject0.toString();
      JSONObject jSONObject2 = jSONObject1.put("", (double) 24);
      jSONObject2.toString();
      Integer integer1 = new Integer(24);
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000004\":java.lang.Double@0000000006,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      JSONObject jSONObject3 = new JSONObject(jSONTokener0);
      jSONObject1.put("{\"java.lang.String@0000000004\":java.lang.Double@0000000006,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", (Object) jSONObject3);
      try { 
        jSONObject1.getBoolean("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.380533459685491
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-128));
      JSONObject jSONObject0 = new JSONObject((Object) "iuAhStxdV9'Tep");
      // Undeclared exception!
      jSONObject0.toString(432, 724);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte)88);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      JSONObject jSONObject1 = new JSONObject("{}");
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4395810351312623
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer integer0 = new Integer(32);
      Integer.compare(32, 32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      String string0 = jSONObject0.toString();
      jSONObject1.optInt("{\"java.lang.String@0000000004\":java.lang.Double@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      jSONObject1.put("j*N]'t68Gz<a|A0M3J", (Object) null);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000004\":java.lang.Double@0000000005,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}");
      String string1 = jSONObject2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer(32);
      Short short0 = new Short((short)675);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString((int) (short)675);
      jSONObject0.length();
      JSONObject.numberToString(short0);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{$A|pQ]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {$A|pQ]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = JSONObject.quote("/z3GMrS");
      assertEquals("\"/z3GMrS\"", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("su", (Map) null);
      jSONObject1.remove("su");
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter1);
      assertEquals("{}", stringWriter1.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.46196313812398
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.append(";<$", jSONArray0);
      jSONObject0.accumulate("?&5#", "?&5#");
      jSONObject0.optString("?&5#");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.221920904006395
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      jSONObject1.optLong("");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2031));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("3,fbM,v^sHA4GtZ$:U");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getclear", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject.getNames((Object) linkedList0);
      JSONObject.valueToString(linkedList0, 110, 110);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, 1263.3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("su", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4978916811394787
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Short short0 = new Short((short) (-1138));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      jSONObject1.toJSONArray((JSONArray) null);
      jSONObject0.optInt("wheel.json.JSONArray");
      jSONObject0.put("wheel.json.JSONArray", 0.0);
      Long long0 = new Long(1306L);
      jSONObject0.getDouble("wheel.json.JSONArray");
      JSONArray jSONArray0 = jSONObject1.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.281534933207205
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short)16);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("|V", (-2143.5));
      jSONObject1.getDouble("|V");
      jSONObject1.toString();
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("|V");
      assertEquals("\"|V\"", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.327701700803115
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", 1);
      jSONObject1.keys();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(1, jSONObject2.length());
      
      double double0 = jSONObject1.getDouble("wheel.json.JSONObject");
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("w0H,?1y%hk", "w0H,?1y%hk");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7238004602164385
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "getdoubleToString";
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("getdoubleToString", (Object) boolean0);
      try { 
        jSONObject1.getDouble("getdoubleToString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getdoubleToString\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble("isfloatToRawIntBits", (-861.1122));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.407067295164331
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("getsubstring", (Collection) linkedList0);
      jSONObject1.get("0");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      Writer writer1 = jSONObject1.write(writer0);
      assertSame(stringWriter0, writer1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0579352111535827
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.remove("] is not a number.");
      jSONObject0.accumulate("iscopyValueOf", linkedList0);
      jSONObject0.optString("iscopyValueOf", "iscopyValueOf");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.2448999724663743
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.put("+u", (Object) "+u");
      String string0 = jSONObject0.getString("+u");
      assertNotNull(string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.014221919274287
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) (-1));
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.499227554290703
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject1 = jSONObject0.put("mnPN''jY2#T'rp>IF2>", (Map) hashMap0);
      jSONObject1.accumulate("mnPN''jY2#T'rp>IF2>", (Object) null);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("mnPN''jY2#T'rp>IF2>");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Expected a ':' after a key", (-1404L));
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "a,pVU/");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("CIl]\"IV]#k`R", (Object) null);
      try { 
        jSONObject1.getJSONObject("CIl]\"IV]#k`R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CIl]\\\"IV]#k`R\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 0);
      assertEquals(0, int0);
      
      Boolean boolean0 = Boolean.valueOf("1>>\"J~Y*@kLzC897");
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", true);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0&A-th'jLoAP%5od1(", true);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.quote("a,pVU/");
      assertEquals("\"a,pVU/\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("<2n,I.!!0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<2n,I.!!0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(55, 99);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1031808349614796
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) jSONArray0);
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean((String) null);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Object) boolean0);
      Object object0 = jSONObject1.opt("] is not a JSONArray.");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 574L);
      assertEquals(574L, long0);
      
      jSONObject0.opt((String) null);
      String string0 = jSONObject0.toString(12, 264);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.0261498516858163
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("isrotateRight", (Object) jSONArray0);
      String string0 = jSONObject1.toString((-46615936), 32);
      assertNotNull(string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.0167671469262847
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getwait", (Object) "getwait");
      String string0 = jSONObject0.toString(8192, 8192);
      assertNotNull(string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("~#Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~#Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("de", false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("istoLowerCase");
      assertFalse(boolean0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(")cJGoiA", 110);
      assertEquals(110, int0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.6124078152141572
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("", (double) 32);
      jSONObject1.toString();
      jSONObject1.optInt("");
      Object object0 = JSONObject.NULL;
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", 295);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-107), (-107));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("wheel.json.JSONObject@0000000001");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("toL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("] is not a JSONObject.", "SJ");
      assertEquals("SJ", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.4323522884063935
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      
      jSONObject0.has((String) null);
      jSONObject0.toString(59, 111);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("isremoveLast", 1185.76951649);
      assertEquals(1185.76951649, double0, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("FSaO1$L3ZO,(G`8", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("wheel.json.JSONException");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONException\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-0.5798350233402216));
      assertEquals("-0.5798350233402216", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = JSONObject.quote("fe8i`\"=6$j");
      assertEquals("\"fe8i`\\\"=6$j\"", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("false", (-174));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.quote(".<&WA~nn~PDJ");
      assertEquals("\".<&WA~nn~PDJ\"", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("b");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}$I:`1u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }$I:`1u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.7574242183502784
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.names();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1909));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.778320307875554
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.append("JSONArray initial value should be a string or collection or array.", object0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("' and instead saw '", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("?_26n\"{+Xr", 334L);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Byte byte0 = new Byte((byte)47);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.0478898962208936
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) ",\n");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(",\n", stringArray0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put(",\n", 61);
      jSONObject1.getLong(",\n");
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, 12, 12);
      assertNotNull(string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 70, 70);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(long0, 1324, 1595);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.4323522884063935
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Integer integer0 = new Integer(32);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString(32);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-1268));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.2146303757773043
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Xq");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      jSONObject0.toString((-426), (-426));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      jSONObject0.put("isreverse", (Map) hashMap0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("%eAU=MB2z-");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("US]Bv;y0K", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      long long0 = jSONObject0.optLong("A JSONObject text must begin with '{'");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("GR}s|lw|");
      assertEquals("", string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float((-2283.1F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.2774737549423403
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONObject.getNames(jSONObject0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Collection) linkedList0);
      long long0 = jSONObject1.optLong("] is not a number.");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("VLYh", (Object) "VLYh");
      try { 
        jSONObject0.getBoolean("VLYh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VLYh\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("E5:}eJJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of E5:}eJJ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
