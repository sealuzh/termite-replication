/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 09:00:00 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Time;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.KeyStroke;
import javax.swing.ListModel;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.fop.pdf.PDFInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-354);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 773, 29116800000L, (-354), 34, ')');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2557656854636727
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("day", vetoableChangeListenerProxy0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy1);
      Locale locale0 = Locale.GERMAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("31", locale0);
      ParsePosition parsePosition0 = new ParsePosition(803);
      mockSimpleDateFormat0.parse("6", parsePosition0);
      jDayChooser0.defaultMaxSelectableDate = null;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 803, 4438L, 803, 40, '6');
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxSelectableDate((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.day = 135;
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      Color.getColor("West", 135);
      jDayChooser0.setForeground(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 135, 1L, (-3541), 135, '%');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(135, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.800866879935626
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-354), 36, 23, 36, 'v');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(36);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.096591278091726
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.minSelectableDate = null;
      // Undeclared exception!
      try { 
        jDayChooser0.updateUI();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.695574412319718
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(0);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.getHSBColor(0.0F, 0.0F, 0.0F);
      jDayChooser0.setSundayForeground(color0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 20, 0, 19, (byte) (-14), '4', (byte) (-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8009015913105437
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1));
      jDayChooser0.getMouseListeners();
      jDayChooser0.setYear(228);
      jDayChooser0.setMaxDayCharacters((-836));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(8869);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.69631050055377
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-631L));
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date((-631L));
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocusBackward();
      jDayChooser0.initialized = false;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setFocus();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.firePropertyChange((String) null, 'b', 'b');
      jDayChooser0.setDayBordersVisible(false);
      java.sql.Date date0 = new java.sql.Date(0L);
      // Undeclared exception!
      try { 
        date0.toInstant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5777466264255984
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMonth(0);
      Color color0 = Color.red;
      jDayChooser0.setDecorationBackgroundColor(color0);
      Time time0 = new Time(1127L);
      time0.getTime();
      jDayChooser0.setMaxSelectableDate(time0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      // Undeclared exception!
      try { 
        Font.getFont((String) null, (Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-631L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-734));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1641457782333635
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.26550320228192
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isFocusOwner();
      jDayChooser0.setMaxDayCharacters(2885);
      jDayChooser0.getDaysInMonth();
      SystemColor systemColor0 = SystemColor.menu;
      systemColor0.getColorSpace();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDayBordersVisible(false);
      JButton jButton0 = jDayChooser1.selectedDay;
      Color color0 = Color.getColor((String) null, (Color) systemColor0);
      jDayChooser0.setForeground(color0);
      jDayChooser1.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(true);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.208313128881091
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis((-631L));
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10145, 3999L, 10145, 101, 's');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.801724507796111
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.setDay(0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 35, 458752, 35, 'g', 0);
      assertEquals(1, jDayChooser0.getDay());
      
      InputEvent.getModifiersExText(458752);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser1.updateUI();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.800866879935626
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, (-1L), 37, 37, '<');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(28);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2303.5F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 4.0F;
      floatArray0[4] = 0.0F;
      systemColor0.getRGBColorComponents(floatArray0);
      jDayChooser0.decorationBackgroundColor = (Color) systemColor0;
      jDayChooser0.setFocus();
      jDayChooser0.getDayPanel();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 43, true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.096688477532829
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.801671016211596
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      systemColor0.getColorSpace();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDayBordersVisible(false);
      JButton jButton0 = jDayChooser0.selectedDay;
      jDayChooser1.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent("WCjA22AF", 9742, "WCjA22AF", 1L, 1402);
      Object object0 = new Object();
      actionEvent0.paramString();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      actionEvent0.setSource(jDayChooser_DecoratorButton0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.802124263500958
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      System.setCurrentTimeMillis((-631L));
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getDaysInMonth();
      SystemColor systemColor0 = SystemColor.menu;
      systemColor0.getColorSpace();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser1.setDayBordersVisible(false);
      JDayChooser jDayChooser3 = new JDayChooser();
      JButton jButton0 = jDayChooser3.selectedDay;
      jDayChooser0.getTreeLock();
      ActionEvent actionEvent0 = new ActionEvent("Dialog Plain 11", 31, "day", (-631L), 31);
      actionEvent0.paramString();
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser3.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.896211771114869
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocation((Point) null);
      jDayChooser0.setRequestFocusEnabled(false);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(59);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent("I_ OLF*+z e<`IMn(Sb", 0, "org.apache.xpath.operations.Div", 0, 0);
      jDayChooser0.isDecorationBackgroundVisible();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isFocusable();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3847675077753694
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isFocusOwner();
      jDayChooser0.setMaxDayCharacters(2885);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 2885, 927L, 28, 12, ',');
      keyEvent0.setKeyCode(28);
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setMaxDayCharacters(2885);
      jDayChooser0.init();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2749422186988735
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(3);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8961770597399514
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocation((Point) null);
      jDayChooser0.setRequestFocusEnabled(false);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(140, dimension0.height);
      assertEquals(223, dimension0.width);
      
      jDayChooser0.contains(59, 0);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(59);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent("I_ OLF*+z e<`IMn(Sb", 0, "org.apache.xpath.operations.Div", 0, 0);
      Object object0 = new Object();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jYearChooser0, 59, 333L, 115, 1723, 'h', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2275085370960133
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(3);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDecorationBackgroundColor((Color) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Object object0 = new Object();
      Color color0 = Color.red;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay(160);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.896153112519625
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(3);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 3, false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      basicComboBoxEditor0.focusLost(focusEvent0);
      jDayChooser0.addFocusListener(basicComboBoxEditor0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setAlwaysFireDayProperty(false);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8961770597399514
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setInheritsPopupMenu(true);
      jDayChooser0.getLocation((Point) null);
      jDayChooser0.setRequestFocusEnabled(false);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      assertEquals(140, dimension0.height);
      
      jDayChooser0.contains(59, 0);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      jDayChooser0.setMaxDayCharacters(59);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      jDayChooser0.addPropertyChangeListener("", (PropertyChangeListener) metalRootPaneUI0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.doLayout();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = new ActionEvent("I_ OLF*+z e<`IMn(Sb", 0, "org.apache.xpath.operations.Div", 0, 0);
      Object object0 = new Object();
      jDayChooser0.isDecorationBordersVisible();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0640644017093255
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener1);
      jDayChooser1.removeInputMethodListener(inputMethodListener2);
      jDayChooser1.isDecorationBackgroundVisible();
      jDayChooser1.initDecorations();
      jDayChooser0.keyTyped((KeyEvent) null);
      JList<Object> jList0 = null;
      try {
        jList0 = new JList<Object>((ListModel<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // dataModel must be non null
         //
         verifyException("javax.swing.JList", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8009015913105437
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setRequestFocusEnabled(false);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      
      jDayChooser0.contains(59, 0);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(59);
      SystemColor systemColor0 = SystemColor.menuText;
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getTransferHandler();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(false);
      FocusEvent focusEvent0 = new FocusEvent(jYearChooser0, 1, false, jDayChooser_DecoratorButton0);
      Component component0 = jDayChooser0.add((Component) jDayChooser_DecoratorButton0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FocusEvent focusEvent1 = new FocusEvent(component0, 12, true, component0);
      jDayChooser0.focusGained(focusEvent1);
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setEnabled(false);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 3, (-1616), '_');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8961408868334586
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.getWeekdayForeground();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(4);
      assertEquals(4, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date((-1974L));
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.setDay((-215));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      assertEquals(128, systemColor0.getGreen());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.896987831782037
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(false);
      JButton jButton0 = jDayChooser1.selectedDay;
      assertNull(jButton0);
      
      Object object0 = new Object();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      int int0 = jDayChooser1.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(boolean0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getComponentPopupMenu();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      JButton jButton0 = jDayChooser0.selectedDay;
      Object object0 = new Object();
      Color color0 = Color.red;
      jDayChooser0.setDecorationBackgroundColor(color0);
      Locale locale0 = jDayChooser0.locale;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 28, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.800923963425939
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "year";
      Time time0 = new Time(1);
      jDayChooser0.setMaxSelectableDate(time0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.896090218646746
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.577610039848334
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = Color.red;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      Font.getFont("2", (Font) null);
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setFocus();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      int int0 = 2671;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-534));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
