/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 18:21:07 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.compile.DeleteNode;
import org.apache.derby.impl.sql.compile.Predicate;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4699913100731523
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("POWER(0, -1)", defaultDBTable0, 25, "POWER(0, -1)");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("tL|tZ<");
      assertNull(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&O:V@k)?H_NhO9", defaultDBTable0, (-1467847546), "drop materialized viewl002");
      defaultDBTable0.addColumn(defaultDBColumn0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("&O:V@k)?H_NhO9", string0);
      
      boolean boolean0 = SQLUtil.isDML("`O:d");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "QU1+?BfdD-'UAyx", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("QU1+?BfdD-'UAyx", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("QU1+?BfdD-'UAyx", dBTable0, (-1255), "#4-F7");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("QU1+?BfdD-'UAyx");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getName());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-1521), "");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0081371475869743
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create uniPue index/-nne=]3hu");
      assertFalse(boolean0);
      
      Predicate predicate0 = new Predicate();
      String string0 = SQLUtil.renderValue(predicate0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("NOSETTINmaGS");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NOSETTINmaGS");
      mockPrintWriter0.write("NOSETTINmaGS");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("TurI/;rFLhJ].", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("NOSETTINmaGS", defaultDBTable0.getName());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(44, "inserthf|j@'}pdm");
      Integer integer0 = new Integer((-62380218));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view", (DBTable) null, dBDataType0, integer0);
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ID~ShwG>fnn", (DBTable) null, dBDataType0, integer1, integer2);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder0);
      assertEquals("INSERTHF|J@'}PDM(0,2)", stringBuilder0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumnNames();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("k", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery(" /* ");
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("", "Y4M1~+rM3", "Y4M1~+rM3");
      DBSchema dBSchema0 = new DBSchema("");
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("create unique index0*/", false);
      assertEquals("create unique index0 */", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("9K", (DBTable) null, (-1518), "9K");
      defaultDBColumn0.setDefaultValue("9K");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.normalize("delete", true);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("PR/", true, (DBTable) null, "delete");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBCheckConstraint", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CLOBRELEASELOCATOR", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("org.databene.jdbacl.SQLUtil", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6829273201267347
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("SELECT * FROM ", true);
      assertEquals("SELECT * FROM", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("SELECT * FROM ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SELECT * FROM";
      stringArray0[1] = "No function outputs were registered.";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[2] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.chars();
      Boolean.valueOf("No function outputs were registered.");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      SQLUtil.parseColumnTypeAndSize("");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (SELECT * FROM, No function outputs were registered., )", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionsetclob(inb,dreude-, long)");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view");
      String string0 = "0Dd]q|";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "0Dd]q|", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition(":", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "create tableqkrb(&sj3n");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder();
      String string0 = SQLUtil.substituteMarkers("create tableqkrb(&sj3n", "create tableqkrb(&sj3n", stringBuilder1);
      assertEquals("", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execcannot");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Character character0 = Character.valueOf('@');
      Character.highSurrogate(48);
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'@'", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = new Boolean("_|p}/JF1A");
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("<XRK]WO+<+`7{,S'+", defaultDBTable0, 2147483645, "<XRK]WO+<+`7{,S'+");
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("<XRK]WO+<+`7{,S'+ <XRK]WO+<+`7{,S'+ NOT NULL", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("<XRK]WO+<+`7{,S'+, <XRK]WO+<+`7{,S'+", string1);
      
      boolean boolean0 = SQLUtil.isDDL("<XRK]WO+<+`7{,S'+");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "qKRB(&sJ3N", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(" REFERENCES ");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("cete materialized viewt]v~.f74", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1999);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1999, "insert");
      Integer integer0 = new Integer(4);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("INSERT(4)", stringBuilder0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("e03f4017-0115-382c-08df-ffffe275b270");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("e03f4017-0115-382c-08df-ffffe275b270", defaultDBTable0, (-4649), "");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3654597361104446
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SQLUtil.renderColumnListWithTableName("alter ,+index", stringArray0);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("alter ,+index.null", stringArray0, "alter ,+index.null", "]QdZ4$r2", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vTTa'!*xec7l", defaultDBTable0, 1030, "vTTa'!*xec7l");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("*OR|j[TJl-");
      assertNull(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4642567260559776
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[14];
      String string0 = SQLUtil.join("^_y0KiS}N-m\"!5GWgs", "^_y0KiS}N-m\"!5GWgs", stringArray0, "^_y0KiS}N-m\"!5GWgs", "^_y0KiS}N-m\"!5GWgs", stringArray0);
      assertEquals("^_y0KiS}N-m\"!5GWgs join ^_y0KiS}N-m\"!5GWgs as ^_y0KiS}N-m\"!5GWgs on ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "^_y0KiS}N-m\"!5GWgs join ^_y0KiS}N-m\"!5GWgs as ^_y0KiS}N-m\"!5GWgs on ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("/-nnEAhUO", stringBuilder0);
      assertEquals("/-nnEAhUO", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(last)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"last\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized view", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("drop materialized view");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("drop materialized view");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SQLUtil.isQuery("SELECT * FROM ");
      SQLUtil.normalize("SELECT * FROM ", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      SQLUtil.removeComments("SELECT * FROM ");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DBDataType dBDataType0 = DBDataType.getInstance(6, "SELECT * FROM ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM", defaultDBTable0, dBDataType0);
      Integer integer0 = Integer.getInteger("SELECT * FROM", 6);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, dBDataType0, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create unique index");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("SELECT * FROM ", defaultDBTable0.getName());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("x(fRGgWuOIj)#6P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"fRGgWuOIj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("9K", (DBTable) null, (-1518), "9K");
      DBColumn[] dBColumnArray0 = new DBColumn[16];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = new String[14];
      String string0 = SQLUtil.join("^_y0KiS}N-m\"!5GWgs", "^_y0KiS}N-m\"!5GWgs", stringArray0, "^_y0KiS}N-m\"!5GWgs", "^_y0KiS}N-m\"!5GWgs", stringArray0);
      assertEquals("^_y0KiS}N-m\"!5GWgs join ^_y0KiS}N-m\"!5GWgs as ^_y0KiS}N-m\"!5GWgs on ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null and ^_y0KiS}N-m\"!5GWgs.null = ^_y0KiS}N-m\"!5GWgs.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("orvfy$");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("orvfy$", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT orvfy$ FOREIGN KEY (, , , , , , , , , , , , , ) REFERENCES orvfy$(, , , , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "qKRB(&sJ3N", false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(" REFERENCES ");
      SQLUtil.addRequiredCondition("cete materialized viewt]v~.f74", stringBuilder0);
      SQLUtil.mutatesDataOrStructure("qKRB(&sJ3N");
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("truncate");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLUtil.isQuery("SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop index");
      DBPackage dBPackage0 = new DBPackage("selectglt]gh", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("tV~.Fp74", dBPackage0);
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema drop index", string0);
      
      String string1 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("drop index.selectglt]gh", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = SQLUtil.normalize("F?'}2Ug/jl .</", true);
      assertEquals("F ? '}2Ug/jl .</'", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "p8WO(T nsIYJ!.{H:", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \"p8WO(T nsIYJ!.{H:\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = null;
      String[] stringArray1 = new String[1];
      stringArray1[0] = " = ";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, (String) null, " = ", stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Rendifn1 blob_id:");
      SQLUtil.addOptionalCondition("Rendifn1 blob_id:", stringBuilder0);
      assertEquals("Rendifn1 blob_id: or Rendifn1 blob_id:", stringBuilder0.toString());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cal/%3vv@qmvthx9b", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("cal/%3vv@qmvthx9b");
      mockPrintWriter0.append((CharSequence) stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.DefaultDBTable cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("r 9^nv/t\"|F1>R0FxN", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("r 9^nv/t\"|F1>R0FxN", stringBuilder1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9728551615408678
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("/-nnEA]hUO");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("/-nnEA]hUO", false);
      assertEquals("/ -  nnEA ] hUO", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\n");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "mI+t3DK9", false, (String[]) null);
      StringBuilder stringBuilder1 = new StringBuilder("- ");
      StringBuilder stringBuilder2 = new StringBuilder("mI+t3DK9");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2, nameSpec0);
      assertEquals("mI+t3DK9", stringBuilder3.toString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized view", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("create tabeqkrb(&sj3n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: create tabeqkrb(&sj3n
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "SELECT * FROM ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("INSERTPRIV");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>(122);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.4578233145223543
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, "SELECT * FROM ", "SELECT * FROM ");
      dBCheckConstraint0.setName("SELECT * FROM ");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.5849073991677757
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DeleteNode deleteNode0 = new DeleteNode();
      SQLUtil.normalize("!E", false);
      DBSchema dBSchema0 = new DBSchema(")*:B<c`OY9i`VH<`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!E", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("! E", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("Skipping HASH JOIN because optimizable is not materializable");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Skipping HASH JOIN because optimizable is not materializable";
      stringArray0[1] = "Skipping HASH JOIN because optimizable is not materializable";
      stringArray0[2] = "Skipping HASH JOIN because optimizable is not materializable";
      stringArray0[3] = "Skipping HASH JOIN because optimizable is not materializable";
      stringArray0[4] = "Skipping HASH JOIN because optimizable is not materializable";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Skipping HASH JOIN because optimizable is not materializable", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("rename", "Skipping HASH JOIN because optimizable is not materializable");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("rename", objectArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals("Skipping HASH JOIN because optimizable is not materializable", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL(".gE");
      assertFalse(boolean0);
      
      DeleteNode deleteNode0 = new DeleteNode();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(0, ".gE");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".gE", defaultDBTable0, dBDataType0, (Integer) 1, (Integer) 2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(".GE(1,2)", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.568155382556487
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("NOSETTINmaGS");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NOSETTINmaGS";
      stringArray0[1] = "NOSETTINmaGS";
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("renamedrop materialized view", stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("tV~.Fp74", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = SQLUtil.normalize("tv~.fp74", false);
      assertEquals("tv ~.fp74", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = SQLUtil.normalize("kwu\"57Y6e3fbf+eM8L", false);
      assertEquals("kwu \"57Y6e3fbf+eM8L\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[1];
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ",");
      SQLUtil.addRequiredCondition(",", stringBuilder0);
      assertEquals(", and ,", stringBuilder0.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = SQLUtil.normalize("edI*-", true);
      assertEquals("edI * -", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = SQLUtil.normalize("Tw,#q:K?G", false);
      assertEquals("Tw, # q : K ? G", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = SQLUtil.normalize("tV)*PUltPNWs", true);
      assertEquals("tV) * PUltPNWs", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = new Boolean(" orvFY$*(]+U\"}_");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1875082013334881
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.normalize("execute", true);
      assertEquals("execute", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec");
      assertNull(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("%_");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("DATE", stringBuilder0.toString());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(44, "BHz9NBnlyrvl");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c013800d-00fb-2644-07ec-000000134f30", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("BHZ9NBNLYRVL(3)", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("create unique index.ge");
      tableContainer0.getTable("create unique index.ge");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index.ge", (DBTable) null, (-1615873310), "create unique index.ge");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CREATE UNIQUE INDEX.GE", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter ");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("P.", (DBTable) null, (-1518), "P.");
      SQLUtil.renderColumn(defaultDBColumn0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("P.");
      assertNull(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      String[] stringArray0 = new String[1];
      SQLUtil.innerJoin("drop indexp.", stringArray0, "updatereferences", " (", stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = " (";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("updatereferences", stringArray1, "drop table", " (", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[11];
      String[] stringArray1 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.join("tv~.fp74", "tv~.fp74", stringArray0, (String) null, " AND ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = null;
      String[] stringArray1 = new String[1];
      stringArray1[0] = " = ";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(" = ", stringArray1, " = ", ":/6LjR=F", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized view", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \"drop materialized view\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("L002", false, "L002", "L002");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT L002 ", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK L002", string1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CREATIONTIMESTAMP", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT CREATIONTIMESTAMP UNIQUE ()", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[14];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", string0);
      
      String string1 = SQLUtil.leftJoin("iCutA^X^", stringArray0, "null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null", "iCutA^X^", stringArray0);
      assertEquals("left join null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null, null.null as iCutA^X^ on iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null and iCutA^X^.null = iCutA^X^.null", string1);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Nq", (String[]) null, "6", "6", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.5669499167988556
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SMLEBT FROM ");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("SMLEBT FROM ", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("I EbG*@~)b/_ 7s(", "fBz", "I EbG*@~)b/_ 7s(");
      assertEquals("I EbG*@~)b/_ 7s(", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.466266517864739
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Rendifng blob_id:");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " (";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" (", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.renderValue(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \" (\" FOREIGN KEY ( () REFERENCES  (( ()", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.join("update", "update", stringArray0, "update", "update", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("`VIc/= q`/ F", "`VIc/= q`/ F", (String[]) null, "alter table", "`VIc/= q`/ F", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      Integer.compare(282, 197);
      Integer.divideUnsigned(282, 282);
      SQLUtil.substituteMarkers("derby.product.external.name", "derby.product.external.name", integer0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, "SELECT * FROM ", "SELECT * FROM ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" ", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("yCOnE", false, "yCOnE", "yCOnE");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT yCOnE CHECK yCOnE", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.0894379124341
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , )", string1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("alter materialized view");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[14];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "T~]`1v", (String) null, stringArray0);
      assertEquals("T~]`1v as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[14];
      String string0 = SQLUtil.join("drop tabledeoendentfinqer", "2Uj \"JgF?z?ksH^Q2", stringArray0, "drop tabledeoendentfinqer", "drop tabledeoendentfinqer", stringArray0);
      assertEquals("drop tabledeoendentfinqer join drop tabledeoendentfinqer as drop tabledeoendentfinqer on 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null and 2Uj \"JgF?z?ksH^Q2.null = drop tabledeoendentfinqer.null", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[14];
      String string0 = SQLUtil.join("@oI$ M`", "@oI$ M`", stringArray0, "@oI$ M`", "ALTER TABLE ", stringArray0);
      assertEquals("@oI$ M` join @oI$ M` as ALTER TABLE  on @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null and @oI$ M`.null = ALTER TABLE .null", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("LfRID", "drop indexcal/%3vv@qmvthx9b", (String[]) null, "LfRID", "LfRID", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.539768652834629
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[14];
      String string0 = SQLUtil.renderColumnListWithTableName("org.apache.derby.impl.store.access.btree.LeafControlRow", stringArray0);
      assertEquals("org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null, org.apache.derby.impl.store.access.btree.LeafControlRow.null", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create uniPue index/-nne=]3hu");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = SQLUtil.normalize("E((q!}t/\r-", true);
      assertEquals("E ((q ! } t / -", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = SQLUtil.normalize("E((q!}t/\r-", false);
      assertEquals("E ((q ! } t / -", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("cV~8Fp7Y");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = SQLUtil.renderValue("insert4oltmj");
      assertEquals("'insert4oltmj'", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("into");
      assertFalse(boolean0);
  }
}
