/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 08:48:37 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3531612106143256
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float((-2424.0));
      Float.sum(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      short short0 = (short)1040;
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      jSONObject0.put("b", (Map) hashMap0);
      String string0 = jSONObject0.toString((int) (short)1040, (int) (short)1040);
      // Undeclared exception!
      JSONObject.quote(string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5530224006478592
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float((-2424.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString((int) (short)1040, (int) (short)1040);
      jSONObject0.optBoolean(string0);
      // Undeclared exception!
      jSONObject0.getLong(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.379123516937678
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      JSONObject jSONObject1 = jSONObject0.put("6'dOvAq~?^3YCx8RQ.v", (-2193));
      long long0 = jSONObject1.getLong("6'dOvAq~?^3YCx8RQ.v");
      assertEquals((-2193L), long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4522469794234416
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("{", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.append("k", jSONArray0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("{");
      assertNotSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4782246595043045
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Short short0 = new Short((short)5);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("gettoString", 3039.852114);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 3880, 3880);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9612025046791586
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) "{}");
      jSONObject1.put("{}", (-316L));
      long long0 = jSONObject0.optLong("{}");
      assertEquals((-316L), long0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9440906203747668
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("?_RJ$}.OV\"D!dsV(_<", 0.0);
      Byte byte0 = new Byte((byte)34);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("?_RJ$}.OV\"D!dsV(_<", 1269);
      boolean boolean0 = jSONObject2.has("?_RJ$}.OV\"D!dsV(_<");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.61964518929432
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("{}", jSONObject1);
      BiConsumer<JSONObject, Object> biConsumer0 = (BiConsumer<JSONObject, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object object0 = JSONObject.NULL;
      JSONObject.quote("{");
      int int0 = (-945);
      int int1 = 5;
      jSONObject2.toString(int1, int0);
      String string0 = "09vC kUQt9J?Q4Vxl";
      JSONArray jSONArray0 = new JSONArray(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Float.sum((-2805.118F), (-2805.118F));
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap0);
      jSONObject0.accumulate("{}", jSONObject1);
      BiConsumer<JSONObject, Object> biConsumer0 = (BiConsumer<JSONObject, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.quote("{");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.append("{}", jSONArray0);
      String string1 = jSONObject1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3549430779503933
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      jSONObject1.keys();
      jSONObject1.optBoolean("] is not a number.");
      Object object0 = JSONObject.NULL;
      String string0 = "A JSONObject text must begin with '{'";
      jSONObject1.optBoolean("A JSONObject text must begin with '{'");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5185066006400834
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "{aTT~<.g";
      stringArray0[1] = "{aTT~<.g";
      stringArray0[2] = "{aTT~<.g";
      stringArray0[3] = "{aTT~<.g";
      stringArray0[4] = "{aTT~<.g";
      JSONObject jSONObject0 = new JSONObject("{aTT~<.g", stringArray0);
      jSONObject0.put("{aTT~<.g", 3121.353192);
      jSONObject0.getDouble("{aTT~<.g");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{aTT~<.g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {aTT~<.g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      Object object0 = JSONObject.NULL;
      jSONObject1.getBoolean("] is not a number.");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9477445969242164
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "istoJSONObject";
      Object object0 = JSONObject.NULL;
      jSONObject0.put("istoJSONObject", object0);
      try { 
        jSONObject0.getDouble("istoJSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoJSONObject\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("wheel.json.'SONArrZ`");
      jSONObject0.put("wheel.json.'SONArrZ`", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("wheel.json.'SONArrZ`");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.401311666981295
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("{aTT~<.g", stringArray0);
      jSONObject0.put("{aTT~<.g", (-2127.55));
      jSONObject0.getDouble("{aTT~<.g");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{aTT~<.g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {aTT~<.g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONTokener", (Collection) linkedList0);
      jSONObject1.remove("wheel.json.JSONTokener");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      assertEquals(0, jSONArray1.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3080570415126394
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("{aTT~F<.g", stringArray0);
      jSONObject0.names();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("`K^jS|SF}vk1R7", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{7/6SaD^56S]Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {7/6SaD^56S]Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4035683150869844
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) null);
      try { 
        jSONObject1.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.042276215150105
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Wh<qb9&", 0.0);
      jSONObject1.getLong("Wh<qb9&");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.905189915707041
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.put("K7w^CfWO;nT", (Map) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.append("{}", object0);
      jSONObject1.toString(0, 0);
      jSONObject0.toString();
      String string0 = JSONObject.quote("{}");
      assertEquals("\"{}\"", string0);
      
      boolean boolean0 = jSONObject2.isNull("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.putIfAbsent(jSONObject0, boolean0);
      jSONObject0.put("*X/N", (Map) hashMap0);
      Byte byte0 = new Byte((byte)90);
      JSONObject jSONObject1 = jSONObject0.accumulate("*X/N", byte0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("G 83QD+", (Collection) linkedList0);
      jSONObject0.optJSONObject("b()");
      JSONObject jSONObject2 = jSONObject1.accumulate("G 83QD+", (Object) null);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.'SONArrZ`", object1);
      jSONObject1.accumulate("wheel.json.'SONArrZ`", object1);
      boolean boolean0 = jSONObject1.optBoolean("wheel.json.'SONArrZ`");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.151321357036161
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.'SONArrZ`", object0);
      boolean boolean0 = jSONObject1.optBoolean("wheel.json.'SONArrZ`");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "d([_OcUFOIz1K`");
      JSONObject jSONObject0 = new JSONObject("d([_OcUFOIz1K`", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000050", 1115);
      boolean boolean0 = jSONObject1.isNull("S)h0O^)6-m7>hVpBN");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0340188405349524
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONObject jSONObject1 = jSONObject0.put("K7w^CfWO;nT", (Map) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.append("{}", object0);
      jSONObject2.optLong("{}");
      jSONObject1.toString(0, 0);
      jSONObject0.toString();
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("{}");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("5.098187458035735.", (-192.8460620342656));
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.154965944642929
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.toString(4);
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject0.optBoolean("J*q:h:=1.<>", true);
      assertTrue(boolean0);
      
      jSONObject0.put("vnQ*xw>G Q", (Object) "vnQ*xw>G Q");
      jSONObject0.get("vnQ*xw>G Q");
      String string1 = JSONObject.quote("I@?</6UE/X/4{7B;P");
      assertEquals("\"I@?<\\/6UE/X/4{7B;P\"", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      jSONObject0.optInt("EK-</oC(:G(<c_D");
      stringArray0[0] = "EK-</oC(:G(<c_D";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3794116163096835
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", (Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.append("", hashMap0);
      String string0 = jSONObject2.toString((-949), (-949));
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("}(P4%/r>@-.g1 m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }(P4%/r>@-.g1 m
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.push((Float) null);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.2228183133807122
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2, 2);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(3, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      Float float0 = new Float((double) 2);
      JSONObject.numberToString(float0);
      jSONObject0.accumulate("java.lang.Float@0000000008", jSONArray1);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.360512683103606
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("Unclosed comment", jSONArray0);
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      jSONArray0.put(1212, (Map) hashMap0);
      // Undeclared exception!
      jSONObject1.toString((-949), 4023);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("avRO~&Rwp=H@", "avRO~&Rwp=H@");
      try { 
        jSONObject1.getInt("avRO~&Rwp=H@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"avRO~&Rwp=H@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("rcw+TM:", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(546);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "rcw+TM:");
      jSONObject1.write(stringWriter1);
      jSONObject0.put("rcw+TM:", false);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.getInt("rcw+TM:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rcw+TM:\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4044042303942765
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "{aTT~F<.g");
      JSONObject.getNames(jSONObject0);
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      jSONObject0.put("is", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4942591594420005
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "wheel.jsn'SONArrZ`");
      jSONObject1.toString(48, 48);
      assertEquals(3, jSONObject1.length());
      
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1490158255588527
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("#N` jG<^|");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("#N` jG<^|", "#N` jG<^|");
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.put("{}", (Map) null);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.append("{}", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("8rdev", (Object) "8rdev");
      try { 
        jSONObject0.append("8rdev", "8rdev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[8rdev] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = new Integer(621);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Integer integer1 = new Integer((-28746850));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer2 = new Integer(621);
      JSONObject.doubleToString((-28746850));
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.put((-28746850), (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-28746850] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2857999702857077
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("] is not a JSONObject.", jSONArray0);
      String string0 = jSONObject0.toString(1731);
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("[m=9I-FCO");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("{aT~F<.8", stringArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.append((String) null, stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("opt");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) null);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Object object0 = JSONObject.NULL;
      Object object1 = hashMap0.getOrDefault(object0, object0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(61);
      hashMap0.put((JSONObject) null, object1);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-12469282), (-12469282));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.724995394879603
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString(1150);
      jSONObject0.names();
      jSONObject0.optBoolean("4qW.Rb9n{gN^L#~", true);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8113600491074715
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject.valueToString(hashMap0, (-12469270), (-12469270));
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 2012, 1743);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.put((String) null, (long) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.990301372445725
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject.valueToString((Object) null, 621, 621);
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      boolean boolean0 = jSONObject0.isNull("Expected a ',' or ']'");
      assertTrue(boolean0);
      
      String string0 = JSONObject.doubleToString(61.0115);
      assertEquals("61.0115", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Float float0 = new Float((-1.0));
      JSONObject.numberToString(float0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("java.lang.Float@0000000001");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\"java.lang.Float@0000000001\"", linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("\"java.lang.Float@0000000001\"");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7764225285748814
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(2, 2);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("x0zxyJZO0PnN", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("x0zxyJZO0PnN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x0zxyJZO0PnN\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Yh0$`Xh=_;i0", (-1681));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)120);
      jSONObject0.putOpt((String) null, byte0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.0568301371751296
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
      
      String string1 = "f\\u";
      int int0 = jSONObject0.optInt(string1, 0);
      assertEquals(0, int0);
      
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      Integer.divideUnsigned(0, 388);
      String[] stringArray1 = JSONObject.getNames((Object) integer0);
      assertEquals(5, stringArray1.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.861640617328422
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject.valueToString((Object) null, 621, 621);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float((-2006.4552F));
      Integer integer0 = new Integer(621);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      jSONObject0.put("max", true);
      JSONObject jSONObject1 = jSONObject0.putOpt("null", "max");
      jSONObject1.optLong(")b&r?iOsNZ2YV0(\u0002Nq", 0L);
      JSONObject.valueToString(")b&r?iOsNZ2YV0(\u0002Nq", 621, 621);
      JSONObject.doubleToString(931.47);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8747271283845204
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("8rdev", (Object) "8rdev");
      try { 
        jSONObject0.getBoolean("8rdev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8rdev\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.792730704537664
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("\"yoERjOSD1vI3Puv'", (Object) hashMap0);
      try { 
        jSONObject1.getBoolean("\"yoERjOSD1vI3Puv'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"yoERjOSD1vI3Puv'\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONObject[", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null);
      try { 
        jSONObject0.put((String) null, 186);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-105));
      jSONObject0.put("zSR", false);
      Float float0 = new Float((-1340.7533F));
      StringWriter stringWriter0 = new StringWriter(919);
      jSONObject0.getString("zSR");
      JSONObject.doubleToString((-1.0));
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.154641420608782
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.names();
      jSONObject0.isNull("Expected a ',' or ']'");
      JSONObject jSONObject1 = jSONObject0.put("K7w^CfWO;nT", (Map) null);
      jSONObject1.optString("K7w^CfWO;nT", "K7w^CfWO;nT");
      String string0 = jSONObject0.toString();
      String string1 = JSONObject.quote("wheel.json.JSONObject@0000000004");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9906188255641685
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{aTT~F<.g");
      int int0 = jSONObject0.optInt("{aTT~F<.g", 120);
      assertEquals(3, jSONObject0.length());
      assertEquals(120, int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("rev", (Object) "rev");
      jSONObject1.optBoolean("rev");
      jSONObject0.optJSONObject("rev");
      String string0 = jSONObject0.optString("rev");
      assertNotNull(string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.689067872995674
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 3340, 1631);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String string0 = JSONObject.valueToString(jSONObject0, (-520), (-520));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9918959647723422
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "";
      jSONObject0.remove("");
      Float float1 = new Float(0.0F);
      String string1 = "Expected a ',' or '}'";
      Integer integer0 = new Integer(32);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", (Object) integer0);
      String string2 = "A?T@2";
      jSONObject1.optString("$Mu-UPcjLp1", "");
      Object object0 = JSONObject.NULL;
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.2049733661202946
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.remove("");
      Float float1 = new Float((-2294.8252F));
      StringWriter stringWriter0 = new StringWriter(919);
      JSONObject.doubleToString((-2294.8252F));
      jSONObject0.optString("", "");
      try { 
        jSONObject0.getJSONArray("isfloatToIntBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isfloatToIntBits\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8121790402101223
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject", jSONArray0);
      String string0 = jSONObject1.toString(2, 2);
      assertNotNull(string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-945), (-945));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.2746779218487125
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-2147), (int) (short)1040);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.2477895257753735
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float((-2424.0));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString((int) (short)1040, (int) (short)1040);
      JSONObject.quote(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.2079297593205902
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float((-2294.8252F));
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(1030, 1030);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.156016057047109
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.put("isput", true);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.046085738959629
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optString("\f", "gethashCode");
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("] is not a Boolean.");
      assertEquals("\"] is not a Boolean.\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("0");
      assertEquals("", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 56, 229);
      Byte byte0 = new Byte((byte) (-47));
      assertEquals((byte) (-47), (byte)byte0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.574413181166183
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer((-12469247));
      String string0 = JSONObject.valueToString(integer0, (-12469247), (-1769));
      assertNotNull(string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0499567067015643
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject(stringWriter0);
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("(k']n<\"vFhn(9PVZ[3", (-2418L));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("int", "int");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.quote("i/X5g}) riYOYpH5");
      assertEquals("\"i/X5g}) riYOYpH5\"", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.4352718511829727
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, 2450.355263380567);
      jSONObject1.optBoolean("J*q:h:=1.<>", true);
      JSONObject jSONObject2 = jSONObject0.put("vnQ*xw>G Q", (Object) "vnQ*xw>G Q");
      jSONObject0.get("vnQ*xw>G Q");
      Short short0 = new Short((short)4);
      JSONObject.valueToString(short0);
      jSONObject2.optInt(string0);
      try { 
        Long.parseUnsignedLong("itMkZLMA1)mw{DaDc1a");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"itMkZLMA1)mw{DaDc1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.3224106955121098
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(65);
      JSONObject jSONObject1 = jSONObject0.accumulate("on4", integer0);
      jSONObject1.getInt("on4");
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONObject1.toJSONArray(jSONArray1);
      assertNull(jSONArray2);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("rdev", (Object) "rdev");
      int int0 = jSONObject0.optInt("rdev");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("[]", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = new JSONObject("{aTT~F<.g", stringArray0);
      try { 
        jSONObject0.getDouble("{aTT~F<.g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{aTT~F<.g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Bad value from toJSONStringw ";
      try { 
        jSONObject0.get("Bad value from toJSONStringw ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONStringw \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put(";gcb)J:'am&z#p", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.get(";gcb)J:'am&z#p");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      
      JSONArray jSONArray0 = new JSONArray();
      double double0 = jSONObject0.optDouble("getequals", 291.047178);
      assertEquals(291.047178, double0, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("Unterminated string", true);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.7982372669070887
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString(0);
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, 2450.355263380567);
      jSONObject1.optBoolean("J*q:h:=1.<>", true);
      JSONObject jSONObject2 = jSONObject0.put("vnQ*xw>G Q", (Object) "vnQ*xw>G Q");
      jSONObject0.optLong("vnQ*xw>G Q");
      jSONObject0.get("vnQ*xw>G Q");
      Short short0 = new Short((short)4);
      JSONObject.valueToString(short0);
      JSONObject.valueToString("{}");
      jSONObject0.optInt("{}");
      jSONObject0.optDouble(string0, (-2219.733027271714));
      JSONObject jSONObject3 = jSONObject2.put(string0, true);
      jSONObject2.optLong(string0, (long) 0);
      JSONObject.valueToString("{}");
      String string1 = "eVs9k{A";
      try { 
        jSONObject3.getInt("eVs9k{A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"eVs9k{A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("getfloatToIntBits", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Wv=m)=s$uTDX91Fdo", false);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("Wv=m)=s$uTDX91Fdo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Wv=m)=s$uTDX91Fdo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("k");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.put("{}", (Object) "{}");
      long long0 = jSONObject0.optLong("{}");
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string0 = JSONObject.valueToString((Object) null, 125, 125);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      String[] stringArray0 = JSONObject.getNames((Object) "{}");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("G`%o>FeRra", "G`%o>FeRra");
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt(" of ");
      assertNull(object0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.4726145613275863
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Short short0 = Short.valueOf((short)3);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString((int) (short)3);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.9706758056211484
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("toS");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("val", 1L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.quote("{7/6SaD^56S]Z");
      assertEquals("\"{7/6SaD^56S]Z\"", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("eC)-Qx", (Object) jSONObject0);
      boolean boolean0 = jSONObject1.optBoolean("eC)-Qx");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("d\",Gxo=", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) ",:]}/\"[{;=#");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("val", (Object) "val");
      boolean boolean0 = jSONObject1.optBoolean("val");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", (-6L));
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("] is not a Boolean.", Double.NaN);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("", 0L);
      double double0 = jSONObject0.optDouble((String) null, (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      long long0 = jSONObject0.optLong("wheel.json.JSONObject@0000000001");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.doubleToString(39.823036771);
      assertEquals("39.823036771", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("ncJn1x1Oh!F");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ncJn1x1Oh!F
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Long long0 = new Long(1096L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Double double0 = new Double((-530.5219199077));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.0206311935050834
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("", false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("ha");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.1907131165659273
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("5>xD3f,I^*v%[a|tlp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5>xD3f,I^*v%[a|tlp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("toS");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("44M-letv?>cI:kqtr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"44M-letv?>cI:kqtr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
