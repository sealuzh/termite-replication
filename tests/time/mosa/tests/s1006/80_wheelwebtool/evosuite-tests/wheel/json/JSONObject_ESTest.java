/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 19:06:57 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6405854798746615
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      hashMap0.put((Boolean) null, (Object) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("jo");
      JSONObject jSONObject1 = jSONObject0.putOpt("jo", (Object) null);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.accumulate("*I4:663K~8U(", jSONObject2);
      String string0 = "181=~s!Sx";
      jSONObject1.put("181=~s!Sx", (Map) hashMap0);
      hashMap0.put((Boolean) null, (Object) null);
      jSONObject1.names();
      jSONObject0.toString();
      jSONObject0.put("ja]2L_l", true);
      try { 
        jSONObject0.getJSONObject("ja]2L_l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ja]2L_l\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3303466540076667
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("=OB+n>f", object0);
      boolean boolean0 = jSONObject1.isNull("=OB+n>f");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0093994817375425
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "mV7d";
      String string1 = "G0%:bj1)f>ap;l";
      jSONObject0.put("G0%:bj1)f>ap;l", 754L);
      jSONObject0.getLong("G0%:bj1)f>ap;l");
      try { 
        jSONObject0.getDouble("mV7d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mV7d\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.add(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add(jSONObject0);
      jSONArray0.optInt((-590));
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(60);
      JSONObject.valueToString(linkedList0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "[wheel.json.JSONObject@0000000001,wheel.json.JSONObject@0000000001]", (-590), 60);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.082926896215395
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      String string0 = "java.lang.Long@00000000030";
      stringArray0[0] = "java.lang.Long@00000000030";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.optDouble("java.lang.Long@00000000030");
      int int0 = 34;
      jSONObject0.toString(34);
      Integer integer0 = Integer.getInteger("Expected a ',' or ']'", 691);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Long@00000000030", integer0);
      String string1 = "ZEWu;";
      jSONObject1.putOpt("ZEWu;", integer0);
      jSONObject1.optLong("java.lang.Long@00000000030");
      jSONObject0.putOpt("wa", "{}");
      int int1 = 120;
      StringWriter stringWriter0 = new StringWriter(120);
      JSONObject.doubleToString((-1373.48));
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-1373.48", 691, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.047587589910507
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("", (-1.0));
      Short short0 = new Short((short) (-307));
      JSONObject.getNames((Object) short0);
      jSONObject2.optDouble("");
      jSONObject2.optLong("");
      Object object0 = new Object();
      jSONObject2.optInt("");
      jSONObject1.toString((-175), (-175));
      Object object1 = JSONObject.NULL;
      jSONObject1.accumulate("{\n\"java.lang.String@0000000005\": java.lang.Double@0000000006,\n\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"\n}", object1);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1327416028871298
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("[");
      assertEquals("\"[\"", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("[", true);
      boolean boolean0 = jSONObject1.optBoolean("[");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1906348157402804
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("", (-1.0));
      jSONObject2.optLong("");
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0, 46, 2805);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("<;bt~", true);
      boolean boolean0 = jSONObject1.isNull("6!Ip=szc");
      assertTrue(boolean0);
      
      boolean boolean1 = jSONObject0.has("<;bt~");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.729016714600521
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", 0L);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      jSONObject1.optInt("JSONArray[", (-2213));
      JSONObject jSONObject2 = jSONObject1.accumulate("23&.\"[Q>", object0);
      Long.compare(0L, 2493L);
      String string0 = jSONObject2.toString((-1), (-1));
      assertNotNull(string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "TxQ8I.q5J}Lz}p";
      JSONObject jSONObject1 = jSONObject0.putOpt("TxQ8I.q5J}Lz}p", "TxQ8I.q5J}Lz}p");
      jSONObject0.accumulate("TxQ8I.q5J}Lz}p", jSONObject1);
      try { 
        jSONObject0.getBoolean("getintValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getintValue\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.append("vk6_e_._jw:L<|2", object0);
      Object object1 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("vk6_e_._jw:L<|2", object1);
      JSONObject jSONObject2 = jSONObject1.append("vk6_e_._jw:L<|2", object1);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("L83{9sZN6cVuP_S", (Map) hashMap0);
      jSONObject1.getJSONObject("L83{9sZN6cVuP_S");
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9993334225140595
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      JSONObject.valueToString(",\n");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('[');
      jSONObject0.write(stringWriter1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      boolean boolean0 = jSONObject1.getBoolean("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5659322100522473
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      jSONObject1.isNull("");
      JSONObject jSONObject2 = jSONObject1.append("wQm5", jSONObject0);
      // Undeclared exception!
      jSONObject2.toString(5);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.281955547659427
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("=h\"$Z'My");
      assertEquals("\"=h\\\"$Z'My\"", string0);
      
      JSONObject.quote("getmin");
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = jSONObject0.put("getmin", (-1268L));
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.accumulate("}A>)*RZ7", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      String[] stringArray0 = JSONObject.getNames((Object) "\"getmin\"");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9144186212952499
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONArray jSONArray1 = jSONArray0.put(8, (Map) hashMap0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      jSONArray0.put(44, 44);
      jSONObject0.toJSONArray(jSONArray1);
      try { 
        jSONObject0.toJSONArray(jSONArray2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1101983788211287
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      jSONObject0.opt("");
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("true", "true");
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("yq0^jjV", false);
      boolean boolean0 = jSONObject1.getBoolean("yq0^jjV");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1687413771293675
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Collection) linkedList0);
      jSONObject1.getJSONArray(",\n");
      try { 
        jSONObject1.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float((-2054.561));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      Float.sum(0.0F, 0.0F);
      Float.isFinite((-7878.03F));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(8, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Btk>`L /sBaI(");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("Btk>`L /sBaI(", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put(",enF8AGS", (-1726.0235029998));
      try { 
        jSONObject1.getJSONArray(",enF8AGS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",enF8AGS\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8022349484090248
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("FcM=:");
      double double0 = jSONObject0.optDouble("Expected a ',' or ']'");
      assertEquals(Double.NaN, double0, 0.01);
      
      Double double1 = new Double((-1L));
      JSONObject jSONObject1 = jSONObject0.append("FcM=:", double1);
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
      
      JSONArray jSONArray0 = jSONObject1.optJSONArray("FcM=:");
      assertNotNull(jSONArray0);
      assertNotEquals((double)double1, (double)double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("pa", (String) null);
      hashMap0.put((String) null, (String) null);
      JSONObject.valueToString(hashMap0);
      Boolean boolean0 = new Boolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1868601258864917
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.accumulate("dou", jSONArray1);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONArray", (-345));
      jSONObject0.remove("wheel.json.JSONArray");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2839261335897971
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.put("pUVB", (Map) null);
      jSONObject0.write(stringWriter0);
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      jSONObject0.put("isoptLong", (Map) hashMap0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9594090592280062
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("gRc~UJ~3+", "gRc~UJ~3+");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      try { 
        jSONObject1.getDouble("gRc~UJ~3+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gRc~UJ~3+\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6401036746862037
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2098.9468F));
      assertEquals("-2098.94677734375", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-2098.94677734375", 285.246062833);
      jSONObject0.toString();
      JSONObject.quote("taKaFIL}");
      double double0 = jSONObject1.getDouble("-2098.94677734375");
      assertEquals(285.246062833, double0, 0.01);
      
      jSONObject1.optJSONArray("u|i;\"v<1A");
      String string1 = JSONObject.quote("isnotifyAll");
      assertEquals("\"isnotifyAll\"", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.7861175788307196
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object0);
      Object object1 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("isvalueOf", object1);
      try { 
        jSONObject2.append("isvalueOf", object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isvalueOf] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Byte byte0 = new Byte((byte)100);
      JSONObject.quote("taKaFIL}");
      String string0 = "{MU_[}k8+laz>KxhZ;/";
      JSONTokener jSONTokener0 = new JSONTokener("{MU_[}k8+laz>KxhZ;/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {MU_[}k8+laz>KxhZ;/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3128868859883003
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(";T=Bn", ";T=Bn");
      boolean boolean0 = jSONObject1.isNull(";T=Bn");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.637017075522702
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", (-37L));
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("(L|Sbw", "JSONArray[");
      Long.compare((-37L), 1L);
      jSONObject1.toString((-1), 33);
      try { 
        jSONObject0.getInt("(L|Sbw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(L|Sbw\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9891373440826869
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject1 = new JSONObject((Object) "A=gBb");
      jSONObject0.length();
      Short short0 = new Short((short)25);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Substring bounds error", (-300.79));
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-2460), (-2460));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      int int0 = jSONObject0.optInt("Dl4J93", (-1708));
      assertEquals((-1708), int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7461855233118375
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject.doubleToString(398.52540591);
      JSONObject jSONObject0 = new JSONObject((Object) "398.52540591");
      jSONObject0.optInt("398.52540591");
      // Undeclared exception!
      jSONObject0.toString(2748, 2748);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5875458969627134
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("(l;!g", "(l;!g");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getString("(l;!g");
      JSONObject.valueToString(jSONObject0, 3, 3);
      boolean boolean0 = jSONObject1.optBoolean("java.lang.String@0000000002");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 225, 2847);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-430), (-430));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.accumulate("m0*<.wnXUV4Zs\"|C\u001B", (Object) null);
      jSONObject0.optDouble((String) null, 0.0);
      Integer integer0 = new Integer((-42724917));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.2794443408727103
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      jSONObject0.optString(")H/,N~wz*fx");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[2];
      stringArray0[1] = stringArray0[0];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      String string0 = jSONObject0.optString("txlw!Y}W'mdB?", stringArray0[0]);
      assertNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5635409861100267
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("&`O2oM}");
      assertEquals(0, int0);
      
      Boolean boolean0 = new Boolean("&`O2oM}");
      JSONObject jSONObject1 = jSONObject0.put("jO", 15L);
      jSONObject1.getInt("jO");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      StringWriter stringWriter0 = new StringWriter(16);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "&`O2oM}");
      stringWriter1.append('`');
      String[] stringArray1 = JSONObject.getNames((Object) "&`O2oM}");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8200366390313643
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(61);
      JSONObject jSONObject2 = jSONObject1.put("", (-1.0));
      jSONObject2.optLong("");
      jSONObject2.toString(4, 4);
      Long long0 = new Long(0L);
      jSONObject1.append("{\n        \"java.lang.String@0000000005\": java.lang.Double@0000000006,\n        \"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"\n    }", long0);
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      jSONObject2.getInt("");
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3823148324686683
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 27, 27);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) 27);
      int int0 = jSONObject1.optInt("cop", 27);
      String string1 = JSONObject.quote(" of ");
      assertEquals("\" of \"", string1);
      
      int int1 = jSONObject1.optInt("{}", 3100);
      assertTrue(int1 == int0);
      assertEquals(27, int1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("KhGXiK<ZqsX*(>b`", (Collection) null);
      jSONObject1.optInt("KhGXiK<ZqsX*(>b`");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.379123516937678
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("7lp^DTI", (-1L));
      Integer integer0 = new Integer(6);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      long long0 = jSONObject0.getLong("7lp^DTI");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.3374677854994443
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      Double double0 = new Double(0L);
      JSONObject jSONObject2 = jSONObject1.append("nM9gb", double0);
      jSONObject2.getJSONArray("nM9gb");
      jSONObject2.put("] is not a JSONObject.", (double) 0L);
      JSONObject.quote("] is not a JSONObject.");
      jSONObject1.getDouble("] is not a JSONObject.");
      try { 
        jSONObject2.getJSONObject("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONArray", "");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("wheel.json.JSONArray");
      JSONObject jSONObject2 = jSONObject0.put("wheel.json.JSONArray", 0.0);
      JSONObject.quote("wheel.json.JSONArray");
      jSONObject1.toJSONArray(jSONArray0);
      long long0 = jSONObject2.getLong("wheel.json.JSONArray");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject0, 27, 27);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextTo("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject1.toString(27, 27);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Double double0 = new Double(272.3);
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.4593630702669234
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject.quote("Btk>`L /sBaI(");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Btk>`L /sBaI(", 1L);
      try { 
        jSONObject0.getBoolean("Bf3@^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bf3@^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.675565252639775
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", 0L);
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.accumulate("23&.\"[Q>", object0);
      jSONObject1.optDouble("JSONArray[");
      Long.compare(0L, 2493L);
      jSONObject2.toString((-1), (-1));
      assertEquals(2, jSONObject1.length());
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.309587601699723
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject0.getJSONArray("");
      jSONObject0.put("", (-2104.0));
      String string0 = JSONObject.quote("] is not a JSONObject.");
      assertEquals("\"] is not a JSONObject.\"", string0);
      
      double double0 = jSONObject1.optDouble("", (-309.323409004038));
      assertEquals((-2104.0), double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.39779762378767
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(10);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double((-1L));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(266, 266);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.424943714670272
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer(44);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "txlw!Y}W'mdB?";
      stringArray0[1] = "txlw!Y}W'mdB?";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Object) null);
      jSONObject1.put("txlw!Y}W'mdB?", true);
      jSONObject0.optString("txlw!Y}W'mdB?", "txlw!Y}W'mdB?");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3791235169376774
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject.getNames((Object) "?/");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("?/", 101);
      String string0 = jSONObject0.optString("?/");
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      try { 
        jSONObject0.getBoolean("put");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"put\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0389712786066236
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 27, (-313));
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject0.optBoolean("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 68, 68);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.861270863107071
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("\"\"", (-1455L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.231739065208693
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject2.put("~l!=@4k(>y| uz-og~X", 0L);
      long long0 = jSONObject3.optLong("~l!=@4k(>y| uz-og~X");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject.valueToString(hashMap0);
      Boolean boolean0 = new Boolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "=8Y";
      JSONObject jSONObject1 = jSONObject0.putOpt("=8Y", "=8Y");
      try { 
        jSONObject1.getJSONObject("=8Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=8Y\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-11), (-2438));
      try { 
        jSONObject0.put((String) null, (Object) "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      jSONArray0.put(46, (Map) hashMap0);
      jSONArray0.getJSONObject(46);
      String string0 = JSONObject.valueToString(hashMap0, 46, 46);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote("^z:Jo'P5N/H=");
      assertEquals("\"^z:Jo'P5N/H=\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9948516297969727
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double((-2054.561));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6632204806434376
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(";T=Bn", ";T=Bn");
      JSONObject.quote(";T=Bn");
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9758040107493536
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.242801636179605
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("_GGm", (-37.430542875));
      jSONObject1.toString();
      JSONObject.quote("taKaFIL}");
      double double0 = jSONObject1.getDouble("_GGm");
      assertEquals(2, jSONObject0.length());
      assertEquals((-37.430542875), double0, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      boolean boolean0 = new Boolean("");
      try { 
        jSONObject1.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.815673827222315
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("istoUpperCase", "");
      assertEquals("", string0);
      
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = new JSONObject();
      Long.compare((-3901L), 1814L);
      String string1 = jSONObject0.toString(48, (-1));
      assertEquals("{}", string1);
      
      String string2 = JSONObject.quote("\r");
      assertEquals("\"\\r\"", string2);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0222488705798685
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1215.7047406711108));
      JSONObject.getNames((Object) double0);
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote((String) null);
      try { 
        jSONObject0.put((String) null, 498);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Zx SZ(5e$Jq3|", 1.0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.275712101117219
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-306), (-306));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.330346654007667
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("true", "true");
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Object object1 = jSONObject0.get("true");
      assertEquals("true", object1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("A JSONObject text must begin with '{'", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.3924591369275605
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Byte byte0 = new Byte((byte)7);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      jSONObject0.toString((-3932));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = new Long((-1L));
      String string0 = JSONObject.valueToString(long0, 64, 64);
      assertNotNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(";T=Bn", ";T=Bn");
      jSONObject1.toString(3612, 3612);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.885488118580586
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(22);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1907131165659273
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.put("] is not a JSONArray.", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float((-1472.529F));
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("u*},,+K.v^pT.[-", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("G$zu*r`G7nGUv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G$zu*r`G7nGUv\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("OGGm", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null, false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.027242060013438
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("su", true);
      assertTrue(boolean0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("<2&w3Uc&");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("true", (Object) "true");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.opt("_GGm");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-4495));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5640100761131712
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",:]}/\"[{;=#");
      long long0 = jSONObject0.optLong(",:]}/\"[{;=#");
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = jSONObject0.put("Ro?q)UP3S", (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, (-2429), (-2429));
      JSONObject jSONObject1 = jSONObject0.put("{}", (-2429));
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote("oYo\"Bti%jml &z");
      assertEquals("\"oYo\\\"Bti%jml &z\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      JSONArray jSONArray0 = jSONObject0.getJSONArray("");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("[.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double((-31.64));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("CYA*ln8D*#K<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CYA*ln8D*#K<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(1.0);
      String string0 = jSONObject0.optString("isparseLong", "txlw!Y}W'mdB?");
      assertEquals("txlw!Y}W'mdB?", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.8148657896913192
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("0");
      assertEquals("", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("\t");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Bad value fromtoJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Bad value fromtoJSONString: 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(">?QW0");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("] not found.", 3970);
      assertEquals(3970, int0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Tt[? q#^.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      jSONObject0.length();
      boolean boolean0 = jSONObject0.has("Expected a ',' or ']'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
