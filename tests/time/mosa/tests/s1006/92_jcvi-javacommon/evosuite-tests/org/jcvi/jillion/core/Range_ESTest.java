/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 19:14:10 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.825397964498009
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(65552L);
      Range range1 = Range.of(1L, 65552L);
      range1.equals(range0);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 65552L);
      Range range3 = Range.of(65552L);
      range3.intersection(range2);
      // Undeclared exception!
      try { 
        range0.complement(range2);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.042506148788377
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of((-1L));
      range1.isSubRangeOf(range0);
      Range range2 = range0.intersection(range1);
      range2.intersection(range0);
      range1.endsBefore(range0);
      Range range3 = range0.intersection(range1);
      List<Range> list0 = range3.split(127L);
      range3.getBegin();
      range3.complementFrom(list0);
      Range.Comparators.values();
      range0.iterator();
      Range range4 = range3.intersection(range1);
      range4.isSubRangeOf(range1);
      Range.ofLength(2147483647L);
      range3.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem1);
      range3.asRange();
      String string0 = "cOc?LmPq_uw";
      // Undeclared exception!
      try { 
        Range.parseRange("cOc?LmPq_uw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cOc?LmPq_uw into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6318970936269914
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.of(860L, 4294967295L);
      Range range1 = Range.ofLength(860L);
      range1.spliterator();
      assertFalse(range1.isEmpty());
      
      long long0 = range0.getEnd();
      assertEquals(4294967295L, long0);
      
      Object object0 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.329987537604603
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775803L);
      Range range1 = Range.of(2090L, 9223372036854775803L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(9223372036854775768L);
      boolean boolean0 = range0.isSubRangeOf(range2);
      //  // Unstable assertion: assertTrue(boolean0);
      
      range0.equals(range2);
      String string0 = range2.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854775767 ]/0B", string0);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2659220555731143
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775798L, 9223372036854775798L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandEnd((-142L));
      range_Builder0.shift((-1792L));
      range0.equals((Object) null);
      range0.iterator();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5414921346931187
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967295 ]/0B", string0);
      
      Range range1 = Range.of(860L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(860L);
      range_Builder1.expandBegin(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 4294967295 .. 4294967295 ]/0B", range_CoordinateSystem0);
      boolean boolean1 = range0.equals(range2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5907265973886364
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(65552L);
      Range range1 = Range.of(1L, 65552L);
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 65552 ]/RB", string0);
      
      List<Range> list0 = range0.split(2048L);
      assertEquals(33, list0.size());
      
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      String string1 = range1.toString();
      assertFalse(range1.equals((Object)range0));
      assertEquals("[ 1 .. 65552 ]/0B", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.494608678048373
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder0.copy();
      Range range0 = Range.ofLength(9223372036854772092L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(9223372036854772092L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.129966420524349
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 65535L, 65535L);
      range_Builder1.expandBegin(65535L);
      range_Builder1.expandEnd(523L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 65535L, 65535L);
      range_Builder1.expandEnd(523L);
      range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4923765688560042
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(127L, 127L);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
      
      range2.equals("ALJB^?|[YvA");
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
      //  // Unstable assertion: assertNotSame(range2, range1);
      
      range0.iterator();
      boolean boolean0 = range0.isEmpty();
      //  // Unstable assertion: assertNotSame(range0, range2);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.675907907601165
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 845L, 4294967304L);
      Long long0 = new Long(4294967304L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      range0.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      Long long0 = new Long(7402L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3290116633839473
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(857L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.iterator();
      range0.equals("length must be >= 0");
      Range range1 = Range.parseRange("[ 857 .. 858 ]/SB");
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("length must be >= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.length must be >= 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.134384432418997
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 4294967294 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 4294967294 ]/0B");
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      range0.equals(range0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2090L, 2090L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandEnd(9223372036854775807L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(32767L);
      boolean boolean0 = range0.equals(range_Builder2);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9778643962668743
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      Range range0 = Range.of((-5178L));
      range0.equals((Object) null);
      String string0 = range0.toString();
      assertEquals("[ -5178 .. -5178 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-5177L), long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967304L, 4294967304L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967304L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.597520944524447
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(9223372036854775798L, 9223372036854775798L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036854775798 .. 9223372036854775798 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 9223372036854775798 .. 9223372036854775798 ]/0B", range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.5845227238828814
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(9223372036854775798L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(9223372036854775798L);
      String string0 = range1.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854775797 ]/0B", string0);
      
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      
      long long0 = range2.getLength();
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Long long0 = new Long(1238L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-3487L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3487 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5909801791024916
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-2084L), (-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = Range.of((-240L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-128L), 0L);
      range2.equals(range3);
      Range range4 = range_Builder0.build();
      assertSame(range4, range0);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.of(127L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1810246999429665
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775798L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775798L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6764036653314447
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.complement(range0);
      Range range1 = Range.ofLength(65535L);
      range0.equals(range1);
      range0.split(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, (-1981L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3858672533916603
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(325L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range range1 = Range.ofLength(0L);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7354753591703194
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range range1 = Range.ofLength(186L);
      Long long0 = new Long(186L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range1.getBegin(range_CoordinateSystem1);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.899087677020804
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-2639L), 4294967295L);
      Range range2 = Range.of(717L);
      range2.iterator();
      range2.startsBefore(range0);
      Range range3 = range2.intersection(range0);
      Range range4 = Range.of(0L, 774L);
      assertFalse(range4.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range5 = Range.of((-1L));
      assertFalse(range5.isEmpty());
      
      boolean boolean0 = range3.equals(range0);
      assertTrue(range3.isEmpty());
      assertFalse(range3.equals((Object)range1));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.632637073072007
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-128L), (-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-240L));
      Object object0 = new Object();
      Range range2 = Range.of((-128L), 30L);
      long long0 = range2.getBegin();
      assertNotSame(range2, range1);
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 4294967304L, 4294967304L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3L), (-3L));
      long long0 = new Long((-3L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3862395264912064
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      Range range2 = Range.ofLength(2147483647L);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
      assertSame(range1, range0);
      assertFalse(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(4294967301L);
      Range range1 = Range.of(4294967301L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2090L);
      range_Builder1.expandBegin(1914L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-1716L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9799561547384963
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-1L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.284751525387724
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4378L, 65535L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.385946979135103
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775775L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(9223372036854775775L, 9223372036854775775L);
      range1.isSubRangeOf(range0);
      range1.forEach(consumer0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      long long1 = (-1686L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range_CoordinateSystem0.toString();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.7182170633398717
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.ofLength(325L);
      Range range1 = Range.of((-534L), 584L);
      List<Range> list0 = range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      assertTrue(range2.isEmpty());
      
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(2, list1.size());
      
      Range range3 = Range.ofLength(0L);
      boolean boolean0 = range1.intersects(range3);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.9355076135036966
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.getEnd();
      range0.split(1L);
      List<Range> list0 = range0.split(2227L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range range1 = Range.ofLength(2227L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of((-1417L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3677819889889076
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-199L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -199 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.136264033525873
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.of((-1L), (-1L));
      Range range1 = Range.of((-1L));
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ -1 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1134202517557954
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4378L, 4294967295L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2672123781537596
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.8246104692645533
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(65535L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list0);
      Range range2 = Range.of(65535L, 4294967293L);
      List<Range> list2 = range2.complementFrom(list1);
      //  // Unstable assertion: assertFalse(list1.isEmpty());
      //  // Unstable assertion: assertEquals(2, list2.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      Range range3 = Range.ofLength(65535L);
      boolean boolean0 = range3.endsBefore(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      long long0 = range2.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(65536L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-537L), 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(103L);
      range_Builder0.expandBegin(0L);
      boolean boolean0 = range0.equals(range_Builder1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.342315689309426
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(9223372036854775775L, 9223372036854775775L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775775L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -66 would make range [9223372036854775775 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0577029806499434
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range0 = Range.of(9223372036854772092L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 9223372036854772092 .. 9223372036854772092 ]/0B", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.795536925992332
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.complement(range0);
      Range range1 = Range.ofLength(1L);
      range0.equals(range1);
      range0.split(2048L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-1981L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2048L, (-1981L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.7741667754701007
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      Range range1 = Range.of(32767L);
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      String string0 = range1.toString();
      //  // Unstable assertion: assertEquals("[ 32767 .. 32766 ]/0B", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3138503571055704
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775798L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775805L);
      range_Builder1.expandBegin(9223372036854775805L);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4405019712924245
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775798L);
      Range range1 = Range.of(2090L, 9223372036854775798L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(9223372036854775798L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775798L);
      range_Builder1.expandBegin(2090L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2981233258972593
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.of(4294967295L);
      Range.ofLength(4294967295L);
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange("can not remove from Range");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not remove from Range into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.204400566065714
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      UnaryOperator.identity();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 4294967295 ]/0B", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.965020595217464
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1 .. 4294967295 ]/SB", string0);
      
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.equals(range1);
      List<Range> list0 = range0.split(4294967295L);
      range_CoordinateSystem0.toString();
      Range range2 = Range.of((-1L));
      boolean boolean1 = range2.startsBefore(range1);
      assertFalse(boolean1);
      
      range2.endsBefore(range0);
      Range range3 = Range.of((-1L), 4294967293L);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(1, list1.size());
      assertTrue(list0.contains(range3));
      assertEquals(2, list0.size());
      
      Range.ofLength(4294967295L);
      boolean boolean2 = range1.intersects(range3);
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5404573970730153
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967304L, 4294967304L);
      Range range1 = Range.of(4294967304L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(9223372036854775484L);
      long long0 = range2.getEnd();
      assertEquals(9223372036854775483L, long0);
      
      Object object0 = new Object();
      range0.equals("C'");
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(3226L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(141L, 141L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2069931186497787
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(9223372036854772092L);
      Range range1 = Range.of(9223372036854772092L, 9223372036854775807L);
      range1.getLength();
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range0.complement(range2);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertSame(range2, range0);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.129966420524349
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.iterator();
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.271513453422577
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(9223372036854772092L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854772092L, 9223372036854772092L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854772092L, 9223372036854772092L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.38788419570711
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775775L);
      Range range1 = Range.of(9223372036854775775L, 9223372036854775775L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.831865001450418
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.ofLength(0L);
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.ofLength(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.567898908381118
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Range range1 = Range.of((-128L), 0L);
      range1.getEnd();
      Range range2 = Range.of(32767L);
      Range range3 = range1.intersection(range1);
      boolean boolean0 = range2.intersects(range1);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range3));
      //  // Unstable assertion: assertNotSame(range1, range3);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.228876508209778
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = 186L;
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.of(2090L, 9223372036854775798L);
      Range range0 = Range.ofLength(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd((-2147483648L));
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("&/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.&/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.7117351125127125
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775798L);
      Range range1 = range0.intersection(range0);
      range1.intersects(range0);
      range1.complement(range0);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      assertSame(range0, range1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.204564641314539
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65535L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Range.of(65535L);
      Range range2 = range0.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-829L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.6599909606670913
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Range.ofLength(4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.538791938246988
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-1L));
      Range.of(9223372036854775807L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.4407893441299437
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967295L);
      Range range2 = range_Builder0.build();
      assertSame(range0, range1);
      assertFalse(range2.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.325264169359846
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967277L, 4294967277L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(4294967278L, long0);
      
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4294967277L, long1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.205019898071907
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775798L);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775798L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -21 would make range [9223372036854775798 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.5436537372539707
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1316L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2L), 2212L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.4309025399773825
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-537L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.505858083899712
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.599847568694401
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(9223372036854775776L, 9223372036854775776L);
      range0.getEnd();
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775776 .. 9223372036854775776 ]/0B", string0);
      
      Range range1 = Range.of((-32768L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      UnaryOperator.identity();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ -1 .. 32766 ]/0B", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2027870432074734
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-32768L));
      range_Builder1.expandBegin(32767L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4410376186222225
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(4294967281L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 4294967280 ]/0B", string0);
      
      Range.of(712L, 4294967281L);
      Range range1 = Range.parseRange("[ 0 .. 4294967280 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.388774313806708
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(65524L, 65524L);
      Range range1 = Range.of(65524L, 65524L);
      range1.complement(range0);
      range1.intersection(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.540763039227181
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65535L, 65535L);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertNotSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.equals((Object)range1));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.541211179445276
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3L), 1L);
      Range range1 = Range.of(1L, 0L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.ofLength(3044L);
      boolean boolean0 = range2.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-2960L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2959L), long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.4921351512518326
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of((-795L));
      boolean boolean0 = range0.endsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5055447665605737
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-822L), 0L);
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(428L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.5843510829217764
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 32767L);
      List<Range> list0 = range0.split(32767L);
      assertEquals(2, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.of(range_CoordinateSystem0, 4378L, 4294967295L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2147483647L;
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedIntStartIntLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.3298119835119984
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      range1.iterator();
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      
      Range range2 = Range.ofLength(395L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range2.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 395 ]/SB", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.201877361596037
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854730752L, 9223372036854730752L);
      Range range0 = Range.ofLength(38911L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals("C'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 185L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.3010115481794866
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      String string0 = range0.toString();
      assertEquals("[ -128 .. -128 ]/0B", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.399221779709048
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.ofLength(9223372036854775775L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.444426507539392
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(4294967304L, 4294967304L);
      Range range1 = Range.ofLength(4294967304L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      assertTrue(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(")#!5TGRE,;Uv%^,XH$", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )#!5TGRE,;Uv%^,XH$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.5160408739226114
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.of(65535L);
      Range.of(65535L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      
      String string0 = range1.toString();
      assertEquals("[ 65535 .. 65535 ]/0B", string0);
      
      range1.isEmpty();
      assertSame(range1, range2);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.678887377664651
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-867L), (-867L));
      Range.ofLength(1644L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-867L), long0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.4785709682435075
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1599L), (-1599L));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4428103146713265
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range1.complement(range2);
      assertSame(range2, range1);
      assertSame(range1, range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967304L, 4294967304L);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(4294967304L, 4294967304L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.134152620260597
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.7946485850575375
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      long long0 = range0.getEnd();
      //  // Unstable assertion: assertEquals(2463L, long0);
      
      Range range1 = range_Builder0.build();
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854772200L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.4414086761361373
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(65577L);
      Range range1 = Range.of(4294967281L);
      Range range2 = Range.of(65577L);
      range1.intersection(range0);
      assertNotSame(range1, range2);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2688293237435406
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of(80L);
      range0.complement(range1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.4134329732922155
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.ofLength(9223372036854775798L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(9223372036854775798L);
      range0.getBegin();
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(2090L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.5709862448027176
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      range1.getLength();
      range1.getBegin();
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder();
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9971L, 968L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(860L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.139347425455401
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2 .. 2 ]/RB", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range.ofLength(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.440165474892936
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder0.expandEnd(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.toString();
      Range.ofLength(9223372036854775807L);
      range_Builder0.contractBegin(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.parseRange("JQ1T8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse JQ1T8 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.130860608303783
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(935L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(2639L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.20450410181143
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(304L, 304L);
      Range range1 = Range.of(304L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of((-829L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of((-3L));
      range0.intersects(range0);
      String string0 = "`";
      // Undeclared exception!
      try { 
        Range.parseRange("`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ` into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.6868498302861683
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.of((-245L), 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.of((-2147483648L));
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.3728240057956307
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 1 ]/SB", string0);
      assertEquals("[ 0 .. 2464 ]/SB", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(1L, 1463L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.expandBegin(2147483647L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.ofLength(325L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 60406L, 325L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-2822L), (-2822L));
      // Undeclared exception!
      try { 
        range0.split((-2822L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.3593621681045467
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.ofLength(9223372036854775798L);
      Range.ofLength(9223372036854775798L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775798L, 9223372036854775798L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-1119L), 359L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.3856988606999034
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(2464L);
      Range range1 = Range.of(range_CoordinateSystem0, 2464L, 2464L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
      
      range0.spliterator();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2465L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.of(127L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(139L);
      range0.startsBefore(range0);
      Long long0 = new Long(139L);
      assertEquals(139L, (long)long0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.4420693109199947
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(118L);
      List<Range> list0 = range0.split(118L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(1, list0.size());
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.6337021012338093
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 32766 ]/0B", string0);
      
      Range range1 = range0.intersection(range0);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.ofLength(2464L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2450L, 2450L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(2450L, long0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-1373L));
      assertFalse(range0.isEmpty());
  }
}
