/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 06:04:05 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.CoverTree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      textDirectoryLoader0.setCharSet("@relation");
      double double1 = evaluation0.numFalseNegatives((-2254));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.confusionMatrix();
      double double2 = evaluation0.incorrect();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.375117265526805
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.toString();
      textDirectoryLoader0.setOutputFilename(false);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedTrueNegativeRate();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CostSensitiveClassifier using reweighted training instances\n\nweka.classifiers.rules.ZeroR \n\nClassifier Model\nweka.classifiers.rules.ZeroR@0000000012\n\nCost Matrix\n 0\n";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      Object object0 = new Object();
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.KBMeanInformation();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation1.falsePositiveRate(2);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-10.0), 1);
      evaluation0.areaUnderPRC(1);
      double double0 = evaluation0.weightedFMeasure();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.m_Incorrect;
      evaluation1.numFalsePositives(2);
      evaluation2.matthewsCorrelationCoefficient(1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1849);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-1849);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (-0.4375);
      evaluation1.updateMargins(doubleArray0, 1, 1);
      assertEquals(0.0, evaluation1.incorrect(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 13;
      Instances instances2 = new Instances(".arff", arrayList0, 13);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-5284.5243547308), (int[]) null, 2);
      evaluation1.rootMeanPriorSquaredError();
      evaluation1.trueNegativeRate(8);
      evaluation1.numTrueNegatives(6);
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, ".bsi");
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setCharSet((String) null);
      double double1 = evaluation0.weightedAreaUnderROC();
      double double2 = new Double(Double.NaN);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double3 = evaluation0.avgCost();
      assertEquals(double3, double1, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.146802573169566
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass((-1.0), 3628.2);
      evaluation1.m_SumClass = 0.22499999403953552;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Object object0 = new Object();
      double double0 = evaluation1.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, evaluation1.rootMeanSquaredError(), 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      textDirectoryLoader0.setCharSet("@relation");
      textDirectoryLoader0.setCharSet("weightThresholdTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(1398);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTrueNegatives((-3024));
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      intArray0[4] = (-2);
      intArray0[5] = 468;
      intArray0[6] = 468;
      intArray0[7] = (-2);
      intArray0[8] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4277.4077084, intArray0, (-1));
      evaluation0.falseNegativeRate(98);
      evaluation0.useNoPriors();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4838131889990276
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toClassDetailsString((String) null);
      double double0 = evaluation1.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1815192735832012
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.pctUnclassified();
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.526287865849879
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int[] intArray0 = new int[2];
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances2 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances2);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.973252841549675
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-synopsis or -info\n";
      textDirectoryLoader0.setOptions(stringArray0);
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances2);
      evaluation0.m_TotalCost = (double) (-2);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.trueNegativeRate((-1));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(1398);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      stringArray0[3] = ".arff";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".arff";
      stringArray0[6] = "useUnsmoothedTipText";
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.setOutputFilename(true);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation2.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation.main(stringArray0);
      evaluation1.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.48837209302325585
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.m_ClassPriors;
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.trueNegativeRate(85);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int[] intArray0 = new int[2];
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances2);
      evaluation0.getRevision();
      evaluation0.getClassPriors();
      evaluation0.m_WithClass = 1.7976931348623157E308;
      double double0 = evaluation0.m_ConfLevel;
      evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, evaluation0.sizeOfPredictedRegions(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 8);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6184941846329015
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation1.errorRate();
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation3.fMeasure(116);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation4 = new Evaluation(instances1, (CostMatrix) null);
      evaluation4.setPriors(instances0);
      assertEquals(Double.NaN, evaluation4.errorRate(), 0.01);
      assertEquals(0.0, evaluation4.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.48936170212765956
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.448442309591302
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      Object object0 = new Object();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ArffLoader arffLoader0 = new ArffLoader();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.precision(2);
      evaluation1.weightedTruePositiveRate();
      evaluation1.rootRelativeSquaredError();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      assertEquals("Sets whether the minimum expected cost criteria will be used. If this is false, the training data will be reweighted according to the costs assigned to each class. If true, the minimum expected cost criteria will be used.", costSensitiveClassifier1.minimizeExpectedCostTipText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.m_Correct = 0.75;
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object object0 = new Object();
      evaluation1.SFEntropyGain();
      double double0 = evaluation1.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.391992220062193
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.generate();
      evaluation0.recall(492);
      double double0 = evaluation1.KBMeanInformation();
      double double1 = evaluation0.errorRate();
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances1);
      double double2 = evaluation2.numTruePositives(1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation2.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      textDirectoryLoader0.setCharSet("O%^qhk*f0S|47X3");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      evaluation1.weightedTrueNegativeRate();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4835839954737446
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toClassDetailsString((String) null);
      // Undeclared exception!
      try { 
        evaluation0.precision(34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8001360812705114
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNumeric((-1));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[3];
      intArray0[0] = 468;
      intArray0[2] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, (-1));
      evaluation0.falseNegativeRate(0);
      evaluation0.useNoPriors();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.costMatrixSourceTipText();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5394571115055133
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      testInstances0.generate();
      evaluation0.recall(492);
      evaluation1.KBMeanInformation();
      evaluation0.errorRate();
      evaluation0.fMeasure(20);
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7869741542901902
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.retainAll(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      Object object0 = new Object();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.toString();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = evaluation1.getClassPriors();
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      Version.MAJOR = 2;
      evaluation0.KBInformation();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.useNoPriors();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.errorRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.fMeasure(602);
      evaluation0.toSummaryString(true);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.68663658268094
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.recall(492);
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, Double.NaN);
      evaluation0.m_NumClasses = 492;
      evaluation1.meanPriorAbsoluteError();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.710027779724208
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      Evaluation.handleCostOption((String) null, 1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-963.3);
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 492;
      evaluation0.recall(492);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(492, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[2];
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(169.348, intArray0, 1699);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(1699);
      evaluation1.useNoPriors();
      evaluation0.weightedTruePositiveRate();
      evaluation1.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation1.SFPriorEntropy(), 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5954713981003263
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.handleCostOption((String) null, 1125);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBRelativeInformation();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.KBMeanInformation();
      evaluation0.areaUnderROC((-1381));
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      DecisionTable decisionTable0 = new DecisionTable();
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int[] intArray0 = new int[6];
      instances0.compactify();
      Evaluation.handleCostOption((String) null, 0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.SFPriorEntropy();
      evaluation0.unweightedMicroFmeasure();
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation0.evaluationForSingleInstance(classifier0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation1.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1116462894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1116462894
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.kappa();
      evaluation0.numInstances();
      evaluation0.priorEntropy();
      MockRandom mockRandom1 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".bsi", instances1, 4, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.01718692134263
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.m_NumTrainClassVals = (-1015);
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass(0.0, 445.1796);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1015
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.774648290236105
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int[] intArray0 = new int[2];
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances2 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances2);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.unweightedMacroFmeasure();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      AbstractClassifier.makeCopies(adaBoostM1_0, 2);
      Evaluation.makeOptionString(costSensitiveClassifier0, true);
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.599404047137316
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CoverTree coverTree0 = new CoverTree();
      RBFKernel rBFKernel0 = new RBFKernel();
      Capabilities capabilities0 = rBFKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getNormalizeDocLength");
      testInstances0.setClassType((-2280));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(1);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.toSummaryString();
      evaluation0.toSummaryString();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1645439226000835
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int[] intArray0 = new int[2];
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances2 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances2);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numFalsePositives(3592);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CoverTree coverTree0 = new CoverTree();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int[] intArray0 = new int[2];
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances2 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances2);
      double double0 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.toString();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(2, (-6.167));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), 48.9);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      Evaluation.handleCostOption("", (-99));
      Object object0 = new Object();
      M5P m5P0 = new M5P();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.pctCorrect();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.353062799903654
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumRelationalNumeric((-1));
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives((-1));
      int[] intArray0 = new int[3];
      intArray0[0] = 468;
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, (-1));
      evaluation0.useNoPriors();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_TotalCoverage;
      evaluation1.weightedTruePositiveRate();
      evaluation0.rootRelativeSquaredError();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      assertFalse(costSensitiveClassifier1.getMinimizeExpectedCost());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6673223188492536
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.relativeAbsoluteError();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[2];
      Evaluation.handleCostOption((String) null, 0);
      Object object0 = new Object();
      M5P m5P0 = new M5P();
      Evaluation.getGlobalInfo(m5P0);
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      evaluation1.equals(object0);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1228463408409746
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.retainAll(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      J48 j48_0 = new J48();
      Capabilities capabilities0 = j48_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation2 = new Evaluation(instances1);
      Evaluation evaluation3 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      evaluation0.kappa();
      evaluation3.numInstances();
      double double0 = evaluation2.priorEntropy();
      assertEquals(1.910762106246821, double0, 0.01);
      
      double double1 = evaluation2.numTrueNegatives(3);
      assertEquals(0.0, double1, 0.01);
      assertEquals(Double.NaN, evaluation2.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      double double0 = evaluation0.m_Unclassified;
      evaluation0.useNoPriors();
      DenseInstance denseInstance0 = new DenseInstance(1);
      try { 
        evaluation0.updateStatsForPredictor(1, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.getClassPriors();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.priorEntropy();
      MockRandom mockRandom0 = new MockRandom();
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBRelativeInformation();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.getGlobalInfo(zeroR0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.recall((-1389));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1389
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.getClassPriors();
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      evaluation0.SFEntropyGain();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.59928092190985
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.recall(492);
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.errorRate();
      double double3 = evaluation0.fMeasure((-2086));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.errorRate(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      Instances instances2 = textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      int[] intArray0 = new int[3];
      intArray0[0] = 476;
      intArray0[1] = 1449;
      intArray0[2] = 482;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 1449);
      instances2.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.handleCostOption("", (-99));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertNotNull(doubleArray0);
      
      double[][] doubleArray1 = evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0, doubleArray1.length);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.handleCostOption((String) null, 1125);
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
      
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost1 = new LogitBoost();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) logitBoost1, instances0, objectArray0);
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      MockRandom mockRandom0 = new MockRandom();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Object[] objectArray0 = null;
      try { 
        evaluation0.crossValidateModel((Classifier) inputMappedClassifier0, instances0, 10021, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      String[] stringArray0 = new String[3];
      stringArray0[1] = ".cost";
      stringArray0[1] = "@relation";
      Evaluation.handleCostOption((String) null, 102);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      LogitBoost.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      DecisionStump decisionStump0 = new DecisionStump();
      costSensitiveClassifier0.setClassifier(decisionStump0);
      AbstractClassifier.makeCopies(costSensitiveClassifier1, 2);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier1, instances0, 102, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7869741542901902
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.m_Header = instances1;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances1);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) testInstances0;
      char[] charArray0 = new char[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      charArray0[0] = '\u0015';
      charArray0[1] = '\u0015';
      charArray0[2] = '\u0015';
      charArray0[3] = '\u0015';
      charArray0[4] = '\u0015';
      charArray0[5] = '\u0015';
      // Undeclared exception!
      try { 
        evaluation2.num2ShortID((-1), charArray0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int[] intArray0 = new int[2];
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.weightedFMeasure();
      textDirectoryLoader0.setCharSet("globalInfo");
      evaluation0.weightedAreaUnderROC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(3088, charArray0, (-397));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.errorRate();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.handleCostOption((String) null, 1125);
      Evaluation.getGlobalInfo(logitBoost0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) logitBoost0, instances1, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      Instances instances2 = textDirectoryLoader0.getDataSet();
      Object object0 = new Object();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances2);
      evaluation0.toMatrixString();
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation1.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.842345486040718
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNumeric(1398);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTrueNegatives((-3024));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1962, 4.9E-324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1962
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6571360367520724
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.recall(1005);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBMeanInformation();
      assertNotEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(".arff", false);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.numTrueNegatives(1005);
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.correlationCoefficient();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(615.242712);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      Object object0 = new Object();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.647257746296693
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.retainAll(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      CostSensitiveClassifier.main(stringArray0);
      double double0 = evaluation1.meanPriorAbsoluteError();
      evaluation0.unweightedMacroFmeasure();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2);
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'p';
      String string0 = evaluation1.num2ShortID(2, charArray0, 29);
      assertEquals("                           XX", string0);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.m_TotalCost;
      evaluation1.toMatrixString();
      Evaluation evaluation3 = new Evaluation(instances0);
      double double2 = evaluation2.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation2.areaUnderROC(4);
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.643807030923504
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      textDirectoryLoader0.setCharSet("O%^qhk*f0S|47X3");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.unweightedMicroFmeasure();
      evaluation1.weightedTrueNegativeRate();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@data";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".arff";
      Evaluation.main(stringArray0);
      evaluation1.relativeAbsoluteError();
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.484623759003385
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      double double0 = evaluation0.correlationCoefficient();
      double double1 = evaluation0.recall(8);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.falseNegativeRate(8);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4838709677419355
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int[] intArray0 = new int[2];
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate();
      Instances instances3 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances2);
      double[] doubleArray0 = evaluation0.makeDistribution(0.0);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances3, (CostMatrix) null);
      double double0 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8466435205545344
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(10.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1698.29614);
      DenseInstance denseInstance0 = new DenseInstance((-1698.29614), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((-1698.29614), (Instance) denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1698
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.5765536505658533
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UeAb!~lK' dtR");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalNominal(4114);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1796336670464318
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.getClassPriors();
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      textDirectoryLoader0.setCharSet((String) null);
      evaluation0.weightedAreaUnderROC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[0];
      evaluation0.num2ShortID(0, charArray0, 0);
      try { 
        CostMatrix.parseMatlab("@relation");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      textDirectoryLoader0.setCharSet((String) null);
      evaluation0.weightedAreaUnderROC();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(13, charArray0, 13);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[6];
      Evaluation.handleCostOption((String) null, 0);
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      char[] charArray0 = new char[5];
      charArray0[1] = ']';
      charArray0[2] = 'Y';
      charArray0[3] = ',';
      charArray0[4] = 'r';
      evaluation0.num2ShortID(120, charArray0, 120);
      try { 
        CostMatrix.parseMatlab(".arff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.retainAll(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.meanPriorAbsoluteError();
      evaluation0.unweightedMacroFmeasure();
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = 's';
      charArray0[2] = 'O';
      evaluation0.num2ShortID(1, charArray0, 97);
      try { 
        CostMatrix.parseMatlab(".arff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.toSummaryString("getRevision", false);
      evaluation0.errorRate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-10.0), 1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.evaluateModel((Classifier) costSensitiveClassifier0, instances0, (Object[]) stringArray0);
      assertEquals(0, doubleArray0.length);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8466435205545344
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      Vote vote0 = new Vote();
      int int0 = (-548);
      try { 
        Evaluation.handleCostOption("@data", (-548));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray0.length);
      
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      Evaluation.handleCostOption((String) null, 1);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      String[] stringArray0 = new String[0];
      LogitBoost.main(stringArray0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DecisionStump decisionStump0 = new DecisionStump();
      costSensitiveClassifier0.setClassifier(decisionStump0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances1, 2, (Random) mockRandom0, (Object[]) stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      assertFalse(evaluation0.getDiscardPredictions());
      
      evaluation0.setDiscardPredictions(true);
      evaluation0.weightedPrecision();
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.truePositiveRate(262);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      Evaluation evaluation1 = new Evaluation(instances0);
      Object object0 = new Object();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.addNumericTrainClass((-1), 410.73131975);
      double double0 = evaluation1.m_Correct;
      evaluation0.weightedFMeasure();
      double double1 = evaluation1.totalCost();
      assertEquals(0.0, double1, 0.01);
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.retainAll(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.SFPriorEntropy();
      double double2 = evaluation0.KBRelativeInformation();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      Instances instances1 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives(20);
      evaluation0.m_Correct = 556.016;
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      instances0.lastIndexOf(evaluation0);
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) logitBoost0;
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.recall((-1114383320));
      try { 
        evaluation0.KBMeanInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.recall((-149));
      double double1 = evaluation0.KBMeanInformation();
      assertNotEquals(double1, double0, 0.01);
      
      evaluation0.toSummaryString(".arff", true);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      double double2 = evaluation1.SFPriorEntropy();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.3015574568421027
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC((-206797271));
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation0.meanPriorAbsoluteError();
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      Evaluation.handleCostOption((String) null, 90);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation0.toClassDetailsString("LdiYJrE]E2M_;}Bwo");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockRandom mockRandom0 = new MockRandom(4032L);
      instances0.resampleWithWeights((Random) mockRandom0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.retainAll(instances0);
      evaluation0.toSummaryString(false);
      evaluation0.toClassDetailsString(".arff");
      evaluation0.weightedFMeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, 1, (Random) mockRandom0, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 2);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.rootMeanPriorSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.retainAll(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation1.numTruePositives((-197112209));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.313117265338876
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      Version.MINOR = (-1642);
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      evaluation0.numFalseNegatives(20);
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setClassifier((Classifier) null);
      AbstractClassifier.makeCopies(logitBoost0, 1069);
      evaluation0.m_ClassIsNominal = false;
      // Undeclared exception!
      try { 
        Evaluation.makeOptionString(logitBoost0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.SingleClassifierEnhancer", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.085628388624577
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      String string1 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.toMatrixString();
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LogitBoost logitBoost0 = new LogitBoost();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopies(costSensitiveClassifier0, 2);
      String string0 = Evaluation.makeOptionString(logitBoost0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setCharSet("\n\n");
      evaluation0.numFalseNegatives((-1642));
      evaluation0.numInstances();
      LogitBoost logitBoost0 = new LogitBoost();
      AbstractClassifier.makeCopies(logitBoost0, 13);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 6, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setOutputFilename(false);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.setDiscardPredictions(false);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.truePositiveRate(510);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toSummaryString();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      Evaluation evaluation1 = new Evaluation(instances1);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.connectToDatabase();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) naiveBayesUpdateable0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      int[] intArray0 = new int[2];
      Evaluation.handleCostOption((String) null, 0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances2, (CostMatrix) null);
      evaluation0.rootRelativeSquaredError();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(670.957616, intArray0, (-2));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Logistic logistic0 = new Logistic();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) logistic0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      textDirectoryLoader0.setCharSet("makeCopies");
      double double0 = evaluation0.m_Correct;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      regressionByDiscretization0.getOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, 0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) regressionByDiscretization0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.weightedMatthewsCorrelation();
      textDirectoryLoader0.setCharSet("@relation");
      evaluation0.correlationCoefficient();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption(" ", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      LogitBoost.main(testInstances0.DEFAULT_WORDS);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DecisionStump decisionStump0 = new DecisionStump();
      costSensitiveClassifier0.setClassifier(decisionStump0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation1.m_Unclassified;
      double double1 = evaluation0.numFalsePositives((-1547));
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      OneR oneR0 = new OneR();
      String[] stringArray0 = new String[4];
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) vote0, instances0, 3, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.48484848484848486
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation0.m_Incorrect;
      evaluation2.numFalsePositives(4329);
      evaluation2.matthewsCorrelationCoefficient(2);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation2.updateMargins(doubleArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[2];
      try { 
        Evaluation.evaluateModel("6i+ ", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 6i+ .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumRelationalDate(25);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Evaluation.handleCostOption((String) null, 8);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toMatrixString((String) null);
      assertEquals("null\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      evaluation0.toMatrixString();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UeAb!~l' dtR");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      int int0 = 510;
      evaluation0.truePositiveRate(510);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.toMatrixString();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[5];
      Evaluation.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "6+ ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "6i+ ";
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "CnXLInXe\"S9Wf*>]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      textDirectoryLoader0.setCharSet(".arff");
      textDirectoryLoader0.setOutputFilename(false);
      double double1 = evaluation0.numInstances();
      assertEquals(0.0, double1, 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      Evaluation.makeOptionString(logitBoost0, false);
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CoverTree coverTree0 = new CoverTree();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.numInstances();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.8711428459683754
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      CoverTree coverTree0 = new CoverTree();
      Instances instances2 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances2);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.toSummaryString(".arff", false);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
