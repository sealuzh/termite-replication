/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 05:57:22 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(";PDUWpF{5wCLVzPWH}3", jSONObject0);
      jSONObject1.getJSONObject(";PDUWpF{5wCLVzPWH}3");
      jSONObject0.names();
      Object object0 = jSONObject0.get(";PDUWpF{5wCLVzPWH}3");
      assertSame(object0, jSONObject0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.157620387917586
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("$Rw", 2608);
      jSONObject1.optInt("$Rw");
      try { 
        jSONObject0.getJSONObject("$Rw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$Rw\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6066699893655365
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0, 8, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.353018772571043
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "1469.7911805356355.";
      JSONObject jSONObject1 = jSONObject0.put("1469.7911805356355.", (Map) hashMap0);
      String string1 = "[";
      jSONObject1.optInt("[", 106);
      JSONObject jSONObject2 = jSONObject0.put("[", 0.0);
      JSONArray jSONArray0 = null;
      hashMap0.put(jSONObject2, (JSONArray) null);
      jSONObject2.optDouble("[");
      try { 
        jSONObject2.getBoolean("7j]&MD{0eiqw]yLW$r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7j]&MD{0eiqw]yLW$r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate(",'+AJSVBb}", object0);
      String string0 = "u&t\\r=$4\\`72=qh:&";
      jSONObject1.optLong("u&t\r=$4`72=qh:&", (-1L));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        jSONObject0.getBoolean("% PwMjXp$8^4(V</");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"% PwMjXp$8^4(V<\\/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "_`Pp\\";
      String string1 = "{.MDqT`/:u";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{.MDqT`/:u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {.MDqT`/:u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7277220288438895
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      Float.isFinite(0.0F);
      JSONObject.quote("wheel.json.JSONArray");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("\"wheel.json.JSONArray\"", (Collection) linkedList0);
      jSONObject0.opt("\"wheel.json.JSONArray\"");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("\"wheel.json.JSONArray\"");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.229400362306966
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "_`Pp");
      Boolean boolean0 = new Boolean("isformat");
      JSONObject jSONObject1 = jSONObject0.accumulate("_`Pp", boolean0);
      jSONObject1.remove("iMR/%y{!]");
      jSONObject0.getBoolean("_`Pp");
      jSONObject1.optJSONArray("isformat");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2785785400069094
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      JSONObject jSONObject0 = new JSONObject(byte0);
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      jSONObject0.put("C@x(HOU0ypcaI`", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "C@x(HOU0ypcaI`");
      jSONObject0.write(stringWriter1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4323779438509274
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.accumulate("Ihp", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("Ihp");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4109771294857874
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A";
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Byte byte0 = new Byte((byte) (-98));
      hashMap0.put((Double) null, byte0);
      JSONObject jSONObject1 = jSONObject0.put("A", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONTokener", 1L);
      // Undeclared exception!
      try { 
        jSONObject2.toString((-818));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.888105079166196
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 3819, 3819);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("%$EEXkCy8${J{IaB", 3819);
      boolean boolean0 = jSONObject1.isNull("%$EEXkCy8${J{IaB");
      assertFalse(boolean0);
      
      long long0 = jSONObject1.optLong("%$EEXkCy8${J{IaB");
      assertEquals(3819L, long0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6674502614542615
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('6');
      jSONObject0.write(stringWriter0);
      jSONObject0.put("ZtFU(.R6#K{", 0.0);
      // Undeclared exception!
      jSONObject0.toString(2797);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.100665982609539
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = new Float((-2581.41798));
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.toString(32);
      JSONObject jSONObject1 = new JSONObject("{\n                                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.accumulate("tl5C}Vh,is@hO~(|]x(", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("tl5C}Vh,is@hO~(|]x(");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      jSONObject0.put("getforEach", (Map) hashMap0);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject(",\n");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("pa");
      assertEquals("\"pa\"", string0);
      
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string1 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0951521981483863
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(32);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.347349960336888
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.putOpt("", (Object) null);
      // Undeclared exception!
      jSONObject0.toString(34, 4136);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7238004602164385
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(21L);
      JSONObject jSONObject1 = jSONObject0.put("q3", (Object) long0);
      jSONObject1.getInt("q3");
      String string0 = JSONObject.quote("gettrim");
      assertEquals("\"gettrim\"", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.084670337734979
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("nBI,1+k^}=", (-241));
      jSONObject0.optDouble("nBI,1+k^}=");
      jSONObject1.remove((String) null);
      try { 
        jSONObject0.getJSONObject("nBI,1+k^}=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nBI,1+k^}=\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9499727481125522
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("o2P<P2@W2w", "o2P<P2@W2w");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject.quote("o2P<P2@W2w");
      jSONObject1.has("o2P<P2@W2w");
      JSONObject jSONObject2 = jSONObject1.put("o2P<P2@W2w", 2107.3307554);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Boolean boolean0 = Boolean.valueOf("k;r;ld~,&OBvVge=X+");
      jSONObject0.accumulate("k;r;ld~,&OBvVge=X+", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("k;r;ld~,&OBvVge=X+");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "{}");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.39779762378767
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float((-175.0F));
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("toB", (-409.797483308214));
      Float.isFinite(1.0F);
      JSONObject.valueToString(float0);
      jSONObject0.optString("java.lang.Float@000000001");
      try { 
        jSONObject0.getString("java.lang.Float@000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0093994817375425
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short) (-1642));
      JSONObject jSONObject1 = jSONObject0.accumulate("g`FPDDpH;kpL;#HuL~", short0);
      jSONObject1.remove("g`FPDDpH;kpL;#HuL~");
      try { 
        jSONObject0.getBoolean("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("] not found.", (Object) null);
      jSONObject0.accumulate("] not found.", "] not found.");
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("U^(~^d$", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~=-K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~=-K
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5700075794156847
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{";
      Integer integer0 = new Integer((-2382));
      JSONObject jSONObject1 = jSONObject0.append("{", integer0);
      jSONObject1.put("{", 637);
      JSONObject jSONObject2 = jSONObject0.put("{", (double) (-2382));
      jSONObject0.optDouble("{", (double) (-2382));
      jSONObject2.getDouble("{");
      Double double0 = new Double((-2382));
      jSONObject0.optLong("{");
      try { 
        jSONObject0.getJSONArray("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.527062838287056
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 3843, 3843);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("%$EEXkCy8${J{IaB", (-985));
      boolean boolean0 = jSONObject1.isNull("%$EEXkCy8${J{IaB");
      assertFalse(boolean0);
      
      long long0 = jSONObject1.optLong("%$EEXkCy8${J{IaB");
      assertEquals((-985L), long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0115537715672924
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(";PDUWpF{5wCLVzPWH}3", jSONObject0);
      try { 
        jSONObject1.getBoolean(";PDUWpF{5wCLVzPWH}3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";PDUWpF{5wCLVzPWH}3\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(";PDUWpF{5wCLVzPWH}3", ";PDUWpF{5wCLVzPWH}3");
      try { 
        jSONObject1.getBoolean(";PDUWpF{5wCLVzPWH}3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";PDUWpF{5wCLVzPWH}3\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9157176652911723
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Short short0 = new Short((short)1151);
      Integer integer0 = new Integer((short)1151);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject.quote("gettoUnsignedInt");
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "2Goi7b{f\"< !";
      stringArray0[1] = "toH";
      stringArray0[2] = "gettoUnsignedInt";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      jSONObject0.opt((String) null);
      Long long0 = new Long((short)1151);
      JSONObject.testValidity(long0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7890753446971144
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      Float.isFinite(0.0F);
      JSONObject.quote("wheel.json.JSONArray");
      JSONObject jSONObject1 = new JSONObject("wheel.json.JSONArray", stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("\"wheel.json.JSONArray\"", (Collection) linkedList0);
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("\"wheel.json.JSONArray\"");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0447996496441125
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",\n";
      JSONObject.quote(",\n");
      jSONObject0.accumulate(",\n", "\",\n\"");
      jSONObject0.optInt("0", 0);
      try { 
        jSONObject0.getJSONObject("isnames");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isnames\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wheel.json.JSONArray";
      stringArray0[2] = "";
      JSONObject jSONObject1 = jSONObject0.put("", 1491);
      stringArray0[3] = "";
      JSONObject jSONObject2 = jSONObject0.accumulate("", "");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject2.optBoolean(" of ");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", (Collection) linkedList0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      jSONObject1.put("isvalueOf", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("isvalueOf");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("vW58~");
      JSONObject jSONObject1 = jSONObject0.accumulate("\"vW58~\"", "\"vW58~\"");
      JSONObject jSONObject2 = jSONObject1.accumulate("\"vW58~\"", "vW58~");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Double double0 = new Double(Double.NaN);
      Double double1 = new Double(0.0);
      hashMap0.put(double1, (Byte) null);
      Byte byte0 = new Byte((byte)57);
      hashMap0.putIfAbsent(double0, byte0);
      Byte.toUnsignedInt((byte)57);
      Byte.toUnsignedInt((byte) (-5));
      hashMap0.put((Double) null, (Byte) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      try { 
        jSONObject0.get("*gCjOi\"XPUDVE9Q4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*gCjOi\\\"XPUDVE9Q4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.953093269754322
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("0.00", (-2004));
      JSONObject jSONObject1 = jSONObject0.put("0.00", (-1L));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3206053247947638
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("q3", (Object) null);
      String string0 = JSONObject.quote("q3");
      assertEquals("\"q3\"", string0);
      
      int int0 = jSONObject1.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.765976792018692
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 2195, 542);
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1868601258864917
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.doubleToString(Double.NaN);
      JSONObject jSONObject1 = jSONObject0.accumulate("null", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 2608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("vb6oX1[gfmrye", 0);
      int int0 = jSONObject1.optInt("vb6oX1[gfmrye");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "q3";
      jSONObject0.put("q3", (Object) "q3");
      try { 
        jSONObject0.getInt("q3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q3\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7116628721535387
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONArray0.put(35, (Collection) linkedList1);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1766453509367873
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("1", false);
      String string1 = jSONObject0.getString("1");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.161999775413971
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-223.0917743101));
      assertEquals("-223.0917743101", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "-223.0917743101");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("-223.0917743101", stringArray0);
      jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5663410784441736
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      jSONObject0.toString((-1147));
      try { 
        jSONObject0.getJSONObject("{\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000004\\\": \\\"java.lang.Class@0000000005\\\",\\n\\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", 2563.7214);
      Double double0 = new Double(2563.7214);
      jSONObject1.getDouble("{");
      Double double1 = new Double(2563.7214);
      try { 
        jSONObject0.getJSONArray("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9042552998214495
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.accumulate("false", object0);
      try { 
        jSONObject0.getJSONArray("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9338774676601003
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("_`Pp", double0);
      jSONObject0.optBoolean("_`Pp");
      double double1 = jSONObject1.getDouble("_`Pp");
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      String string1 = JSONObject.valueToString((Object) null, 48, 100);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 128, 128);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(42);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1147));
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.4664823546361587
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "{";
      JSONObject jSONObject1 = jSONObject0.put("{", 2563.7214);
      jSONObject1.optDouble("{");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8880096555129784
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\b", 2608);
      jSONObject1.optDouble("\b", (double) 2608);
      try { 
        jSONObject1.getJSONObject("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6908746774461216
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(3714);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 3714, 3442);
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) "{}");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8058632507364383
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 32, 32);
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject0.isNull("{}");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.6576671430417886
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 0);
      jSONObject0.names();
      String string0 = jSONObject0.optString("toJ", "");
      assertEquals("", string0);
      
      Object object0 = new Object();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      boolean boolean0 = jSONObject1.isNull("");
      assertTrue(boolean0);
      
      Boolean.valueOf(false);
      boolean boolean1 = Boolean.logicalXor(true, false);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList0, 437, (-2961));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = JSONObject.quote("t)%^e/");
      assertEquals("\"t)%^e/\"", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = JSONObject.quote("'v#DlJ:S:8st4m1/_'");
      assertEquals("\"'v#DlJ:S:8st4m1/_'\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("co", 334L);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Byte byte0 = new Byte((byte)12);
      try { 
        jSONObject0.append("co", byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[co] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6138316405582485
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optLong("Hp~<T9KWVo6Ep3QwEp", 0L);
      jSONObject0.optBoolean("Hp~<T9KWVo6Ep3QwEp", false);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>(linkedList0);
      Boolean boolean0 = new Boolean("");
      Boolean boolean1 = Boolean.valueOf(true);
      linkedList0.add(boolean1);
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject0.append("", jSONObject1);
      String string0 = "\\u";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \\u
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONArray[", "JSONArray[");
      jSONObject0.optBoolean("EV&c`*T9R8$tkUAX");
      try { 
        jSONObject1.append("JSONArray[", "JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[JSONArray[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.113184137452869
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("$Rw", 2608);
      jSONObject1.getLong("$Rw");
      jSONObject0.accumulate("$Rw", jSONObject1);
      try { 
        jSONObject0.getJSONObject("$Rw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$Rw\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("b]7ao,B8Jy^{!dp", (-835));
      JSONObject.testValidity(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      long long0 = jSONObject0.getLong("b]7ao,B8Jy^{!dp");
      assertEquals((-835L), long0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("isequals", 2382.9961304937);
      assertEquals(2382.9961304937, double0, 0.01);
      
      String string0 = JSONObject.doubleToString(2382.9961304937);
      assertEquals("2382.9961304937", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("RqIcLPhD>8n[J", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("isvalueOf");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("vj0)CqoH(xC", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("|");
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, boolean0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4825346618275639
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      try { 
        jSONObject0.get("wheel.json.JSONArray@0000000002");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray@0000000002\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float float0 = new Float(1157.46F);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.put((String) null, (-306L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null, 0.0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.3693785736953714
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject((Object) "X)#@");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1973, 1973);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      String string0 = JSONObject.valueToString(byte0, (byte)34, (byte)34);
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.2830917572860843
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1801);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      jSONObject0.toString(1801, 1801);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.2146303757773043
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "7,XC_aKr");
      jSONObject0.names();
      JSONObject.valueToString(jSONObject0, 0, 0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(",", (-1855.87554083));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.4081099650910627
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(8192);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (-530));
      boolean boolean0 = jSONObject1.isNull("{}");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("\r", 1247);
      jSONObject1.optString("\r", "\r");
      boolean boolean0 = jSONObject1.isNull("true");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.3665228173214663
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate(";PDUWpF{5wCLVzPWH}3", object0);
      jSONObject0.optBoolean(";PDUWpF{5wCLVzPWH}3");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optString(";PDUWpF{5wCLVzPWH}3");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("DH1g> aXk:", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.9975094371059428
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Short short0 = new Short((short) (-1023));
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("sh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.quote("vi,)G+@>Gd\"w7!F`0");
      assertEquals("\"vi,)G+@>Gd\\\"w7!F`0\"", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("dqz|6egP+|L ?", 0L);
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("000");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.038009341005529
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2362.07);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.3684078996179063
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
      
      String string0 = JSONObject.quote("false");
      assertEquals("\"false\"", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("w!mxpYH}if");
      assertEquals("", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double((-1.0));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.9891373440826869
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.put("0", 0.0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("$Rw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$Rw\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("istoHexString", (-1L));
      assertEquals((-1L), long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("istoHexString", 34L);
      assertEquals(34L, long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.1904885611243943
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      jSONObject1.toString(46, 46);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (-274), 79);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.5640100761131712
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString((-1147));
      try { 
        jSONObject1.getJSONObject("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000003\\\": \\\"java.lang.Class@0000000004\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-738), (-738));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("6lBFm ");
      assertEquals("\"6lBFm \"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("y&q?tjDX\r*n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y&q?tjDX\\r*n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("jSgp(Oc$+gFH$cl");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("DH1g> aXk:", "DH1g> aXk:");
      assertEquals("DH1g> aXk:", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("Unterminated string", false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.5016003431387244
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[11];
      stringArray0[0] = "wheel.json.JSONTokener";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("5");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("wC%C+_m@", "wC%C+_m@");
      try { 
        jSONObject0.getLong("wC%C+_m@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wC%C+_m@\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Unterminated string", (Object) "Unterminated string");
      try { 
        jSONObject0.getDouble("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.getDouble("pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("*y+YoO7pV!q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*y+YoO7pV!q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(";PDUWpF{5wCLVzPWH}3", jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean(";PDUWpF{5wCLVzPWH}3");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("wheel.json.JSONObject", 65);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("false");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("kI7aHSy)M2Ly)$D&=d2");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("p9W#xH('_9dOov");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p9W#xH('_9dOov\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("&@YZN*cO@%rxG&1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&@YZN*cO@%rxG&1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      try { 
        jSONObject0.append((String) null, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(2241.7003978);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float float0 = new Float((-3261.9774377940735));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append(".", ".");
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("getwait");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getwait
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(" at caater");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of  at caater
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
