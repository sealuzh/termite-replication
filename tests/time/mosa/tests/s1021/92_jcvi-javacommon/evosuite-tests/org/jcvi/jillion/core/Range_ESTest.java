/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 05:59:26 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4865056141998854
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.of(1L);
      Range range2 = Range.of(0L, 0L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(1L, 1L);
      Range range4 = Range.of(0L, 32767L);
      range3.equals(range4);
      assertSame(range3, range1);
      assertNotSame(range4, range0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775785L);
      long long0 = range0.getLength();
      assertEquals(9223372032559808491L, long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.676274470917341
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854766801L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandBegin(2195L);
      Range range1 = range_Builder0.build();
      range_Builder0.shift(1036L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertSame(range0, range1);
      //  // Unstable assertion: assertEquals(9223372036854766801L, long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 966L, 966L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 966 .. 966 ]/SB", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8450437611748662
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Range range2 = Range.ofLength(1L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.870833837037371
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(3801L, 3801L);
      Range range1 = Range.of((-1L));
      range0.getLength();
      Range range2 = Range.of(1L, 2147483647L);
      range2.complement(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5409763384326416
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(809L, 9223372036854775785L);
      Range range1 = Range.of(809L);
      Range range2 = Range.ofLength(9223372036854775785L);
      boolean boolean0 = range1.isSubRangeOf(range2);
      assertTrue(boolean0);
      
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range0.equals((Object) null);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0538382463504266
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-2342L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("offset must be >= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.offset must be >= 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.692631862808279
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem.values();
      range0.asRange();
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.329716840559713
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.of(4294967295L, 9223372036854775785L);
      Range range0 = Range.of(809L);
      range0.getLength();
      Range range1 = Range.of(766L);
      range1.equals(range0);
      range1.toString();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(809L, 9223372036854775785L);
      Range range1 = Range.of(809L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.ofLength(1299L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(1299L, long1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.7596645178617503
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals("");
      range0.getLength();
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      range0.getLength();
      // Undeclared exception!
      try { 
        range1.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.440373938516034
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Long long0 = new Long((-128L));
      Range range1 = Range.of(2019L, 2147483647L);
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      Range range2 = Range.of((-128L));
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.491915479660861
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.of(4294967295L, 9223372036854775785L);
      Range range0 = Range.of(809L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of(809L, 4294967295L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4950051246878733
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854774262L, (-2147483647L));
      range_Builder0.shift((-2147483647L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4294967295 would make range [9223372034707290614 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.981410146291498
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(9223372036854773359L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(9223372036854773359L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of(787L, 4294967357L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-2147483648L));
      Range.of(2362L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.269558419209478
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-2147483669L));
      range0.getBegin();
      String string0 = range0.toString();
      assertEquals("[ -2147483669 .. -2147483669 ]/0B", string0);
      
      Range range1 = Range.of((-2147483669L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.of((-2147483669L), 1359L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      range1.forEach(consumer0);
      range1.equals(range0);
      assertNotSame(range1, range2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long long0 = 9223372036854775785L;
      long long1 = 809L;
      Range.of(4294967311L, 9223372036854775785L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 959L, 809L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.662284193418034
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.getBegin();
      Range.of(1L);
      Range range1 = Range.of((-2053L), 32767L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8244295951203906
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 9223372036854775807L);
      Range range1 = Range.of((-9223372036854775808L));
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("d-tWz[@k43pr*[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse d-tWz[@k43pr*[ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4388210016383502
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      Long long0 = new Long(0L);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
      
      Range range2 = range0.asRange();
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4921861742632108
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(32798L);
      Range range1 = Range.of((-1351L), 32798L);
      Range range2 = Range.of(249L);
      range2.spliterator();
      long long0 = range1.getLength();
      assertEquals(34150L, long0);
      
      boolean boolean0 = range0.equals(range2);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.442593960716256
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483660L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483660L);
      range_Builder0.expandBegin(3675L);
      range_Builder0.expandBegin((-1L));
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ -3674 .. 2147483661 ]/RB", string0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      range1.equals(range0);
      range1.asRange();
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7951026516137274
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(0L, 2363L);
      Range range1 = Range.of(2363L, 2363L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.push(range1);
      assertFalse(linkedList1.contains(range0));
      
      Range range2 = Range.of(438L);
      linkedList1.add(range0);
      range2.getBegin();
      range1.complementFrom(linkedList0);
      range0.complementFrom(linkedList1);
      range1.intersection(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.129966420524349
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.630954549244313
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(9223372036854773359L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem.values();
      Range range2 = range0.intersection(range1);
      assertTrue(range1.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5902214352959168
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-1L), (-1L));
      List<Range> list0 = range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.getBegin();
      linkedList0.push(range0);
      Range range2 = Range.of((-1L));
      linkedList0.add(range1);
      range1.getBegin();
      range1.complementFrom(linkedList0);
      range0.complementFrom(list0);
      range0.intersection(range1);
      range0.isSubRangeOf(range2);
      range0.endsBefore(range2);
      // Undeclared exception!
      try { 
        range2.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.617798746965039
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getLength();
      Range range1 = Range.ofLength(65535L);
      range1.complement(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.9323260749170403
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(1L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854775785L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.92122375337389
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L));
      range0.intersection(range1);
      range0.spliterator();
      List<Range> list0 = range0.split(668L);
      range0.complementFrom(list0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = (-8L);
      Range range0 = Range.of((-8L), 18L);
      Range.of(18L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-8L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.495115750742647
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(9223372036854773359L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(9223372036854773359L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range2 = Range.ofLength(9223372036854773359L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range2.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
      
      range0.getLength();
      //  // Unstable assertion: assertFalse(range0.equals((Object)range2));
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-1L), 0L);
      Range range1 = Range.of((-1L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.794387590642011
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65535L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.ofLength(65535L);
      range0.endsBefore(range2);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967295L);
      Range range1 = Range.of(0L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      Long long1 = new Long(4294967296L);
      boolean boolean0 = range0.equals(long1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.388395473311185
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2147483647L);
      range_Builder0.expandBegin(3675L);
      range_Builder0.expandBegin((-1L));
      Range range1 = range_Builder0.build();
      range_Builder0.shift(0L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range0.complement(range1);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.388129605429797
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.of((-1L), 2147483647L);
      Range range0 = Range.of((-2147483648L), 9976L);
      Range range1 = Range.of(2147483647L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Range.of((-1L), (-1L));
      Range range2 = Range.of((-1014L), 2147483647L);
      boolean boolean0 = range0.equals(range2);
      assertNotSame(range2, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.6755574287478607
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandBegin(0L);
      Range.Builder range_Builder1 = new Range.Builder(4294967295L, 9223372036854775785L);
      Range range0 = range_Builder1.build();
      String string0 = range0.toString();
      assertEquals("[ 4294967295 .. 9223372036854775785 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 4294967295 .. 9223372036854775785 ]/0B");
      range0.getLength();
      Range range2 = Range.of(0L);
      range0.equals(range2);
      assertFalse(range2.isEmpty());
      assertSame(range0, range1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(797L, 797L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3848772524016595
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4834989383603094
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-7L), (-1L));
      Range range1 = Range.of((-1L));
      range1.getLength();
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2252568683036555
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.of((-1L), 2147483647L);
      Range range0 = Range.of((-1L), 4294967331L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.789775150380924
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-1812L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.ofLength(2147487323L);
      range1.intersection(range0);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-2147483669L));
      Range range1 = Range.of((-2147483669L));
      boolean boolean0 = range1.equals("length can not be negative");
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1522113904340032
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.of(1L);
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.891722433292198
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.of(1L);
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(4294967272L, 9223372036854775785L);
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.441320022969487
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1053L, 1053L);
      Range range0 = Range.of(1053L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-7L), (-1L));
      Range range1 = Range.of((-1L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.3286261880929136
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      assertFalse(range1.isEmpty());
      
      range0.equals((Object) null);
      Range range2 = Range.ofLength(0L);
      long long0 = range0.getEnd();
      assertSame(range0, range2);
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.837142400049574
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Range range2 = Range.ofLength(1L);
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5593500642753972
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(2705L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2023030746654286
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(9223372036854773359L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2641141459685947
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.of(9223372036854773359L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(9223372036854774999L);
      range_Builder1.expandBegin(9223372036854774999L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-9L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-7L), 9L);
      long long0 = range0.getLength();
      assertEquals(17L, long0);
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(788L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.320870833961907
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(0L, 2L);
      Range range1 = Range.of(2L, 1700L);
      assertFalse(range1.isEmpty());
      
      long long0 = new Long(2L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9804021452834966
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-2818L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2817 .. -2817 ]/RB", string0);
      
      Range range1 = Range.of((-1169L));
      range1.startsBefore(range0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.892400767303865
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-1269L), 809L);
      Range range1 = Range.of((-1269L), (-1269L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.634234770085321
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.of((-1269L), 809L);
      Range range0 = Range.of(809L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 809 .. 809 ]/0B", string0);
      
      Range.of(809L);
      Range range1 = Range.of(809L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range range2 = Range.parseRange("[ 809 .. 809 ]/0B", range_CoordinateSystem0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.873283741528966
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2280L, 2280L);
      Range range1 = Range.of((-1839L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-1269L), (-1269L));
      Range range1 = Range.of((-1269L));
      range0.startsBefore(range1);
      Long.getLong("");
      boolean boolean0 = range1.equals((Object) null);
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.424929750211553
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L, 1192L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-1228L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.9321690226669648
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-1L));
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-1L));
      range_Builder1.copy();
      Range range1 = Range.of(127L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 2745L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.717857494929298
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-1256L), 3792L);
      List<Range> list0 = range0.split(3792L);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list0.contains(range0));
      assertTrue(list1.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4406795806701997
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(2147487323L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.ofLength(2147487323L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3545344305579152
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-1644L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.756202663158118
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-1269L), (-1269L));
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.261241170292731
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(8L);
      Range range1 = Range.of(32767L);
      Range.of((-2684L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.1029322576989924
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(788L);
      Range range1 = Range.of((-2147483648L));
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.794916055691254
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Range range1 = Range.of((-1L));
      List<Range> list0 = range0.split(2147483647L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list1.size());
      assertFalse(list0.contains(range0));
      assertFalse(list1.contains(range0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2066496408781204
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L);
      Range range1 = Range.of(9223372036854775785L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      
      Range range2 = Range.of(9223372036854775785L);
      //  // Unstable assertion: assertSame(range2, range0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.79709058749954
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-1644L));
      Range range1 = Range.of((-1644L));
      boolean boolean0 = range0.intersects(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.4075545308663924
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(9223372036854773359L);
      Range range1 = Range.of(255L, 255L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2858029425571043
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-25L), 18L);
      Range range1 = Range.of((-25L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.8931574881595497
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-1269L), 809L);
      Range range1 = Range.ofLength(809L);
      assertFalse(range1.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of(809L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.3330814527346653
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(9223372036854773359L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(9223372036854773359L);
      Range range2 = Range.of(9223372036854773359L, 9223372036854773359L);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.927845063420271
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Range range1 = Range.of((-1L));
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.3549345906219408
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(5723L, 5723L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(5724L, long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(787L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.622912738490294
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      long long1 = range0.getEnd();
      assertTrue(range0.isEmpty());
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.263456771844257
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(78L, 78L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(78L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-1269L), (-1269L));
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      long long0 = range0.getEnd();
      assertEquals(4294967294L, long0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.355647603099659
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(611L, 611L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(612L, long0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.6336074234763194
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.2643476461270504
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L);
      Range range1 = Range.of(9223372036854775785L);
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.ofLength(0L);
      long long0 = range1.getLength();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.5876410928140965
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2280L, 2280L);
      Range range1 = Range.of(2147483647L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-1269L));
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.4921351512518326
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(2280L, 2280L);
      Range range1 = Range.of(2565L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(9223372036854775807L);
      List<Range> list0 = range0.split(809L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.084259275231587
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(2147487323L);
      String string0 = range0.toString();
      assertEquals("[ 2147487323 .. 2147487323 ]/0B", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.059067004520361
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-1644L), (-1644L));
      Range range1 = Range.of((-1644L));
      boolean boolean0 = range1.equals("BqEwt}");
      assertFalse(boolean0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-1052L), (-1L));
      long long0 = range0.getLength();
      assertEquals(1052L, long0);
      
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.3572215382502257
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Long long0 = new Long((-3216L));
      Range range0 = Range.ofLength(9223372036854774254L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774254L, (-3216L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3216 would make range [9223372036854774254 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = 9223372036854775785L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775785L, (-1087L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1087 would make range [9223372036854775785 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.301586756692573
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(12818L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 12818 .. 65535 ]/0B", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.539259279828685
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.complement(range1);
      assertFalse(range0.isEmpty());
      
      range_CoordinateSystem0.toString();
      range1.iterator();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.4573927976284025
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range0 = Range.of((-128L));
      List<Range> list0 = range0.split(255L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.3357504483778766
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854775807L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.3992274483023692
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2660L), (-2660L));
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = 4294967295L;
      Range.of(4294967295L, 9223372036854775785L);
      Range.of(809L);
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-785L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-784L), long1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.9787338102818284
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-32800L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(2274L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.386970397351947
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(78L);
      range0.spliterator();
      List<Range> list0 = range0.split(78L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Range range1 = Range.of(78L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.5580634206400745
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-2131L), 809L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.204601925240141
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-1256L), 3800L);
      List<Range> list0 = range0.split(3800L);
      assertEquals(2, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.794094705725584
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-1L), 2147483647L);
      Range range1 = Range.of((-1L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list1.size());
      assertFalse(list1.contains(range0));
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.7353481265045922
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(1L);
      range0.spliterator();
      long long0 = range0.getBegin();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.4931681709898883
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-3027L));
      range0.spliterator();
      range0.getBegin();
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-2113L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(2147487323L);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(0L, (-1L));
      Range range1 = Range.of((-1L));
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(1L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.5870207357066506
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder1.shift(1L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(3826L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.2915860976209297
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(809L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.8173325986583286
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(9223372036854773359L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(9223372036854773359L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854773359L), long0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-2147483658L));
      // Undeclared exception!
      try { 
        range0.split((-2147483658L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.2682408961528244
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(2274L);
      Range.of(2274L);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-32768L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.0567526361500623
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(32823L);
      Range.Builder range_Builder0 = new Range.Builder((-1351L), 32823L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandEnd(4758L);
      long long0 = range0.getLength();
      assertEquals(32823L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.2052253423451478
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.expandBegin(0L);
      Range range0 = Range.of(0L, 1268L);
      Range range1 = Range.of(0L, 1268L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(8L);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(8L, 1556L);
      range_Builder0.build();
      range_Builder0.expandEnd(1556L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(8L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(9223372036854773340L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.19453064849161
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of(9223372036854775801L);
      Range.of(9223372036854775801L);
      range0.equals("+nK");
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.3306226704810866
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(216L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1168L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.117734440816303
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.of((-1L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 990L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.0598988524110324
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of(9223372036854773359L, 9223372036854773359L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773359L, 9223372036854773359L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range1.equals(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(961L, 911L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.3203691289568624
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(13L, 127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-2818L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 22L, 22L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.of((-1264L), (-1264L));
      assertFalse(range0.isEmpty());
  }
}
