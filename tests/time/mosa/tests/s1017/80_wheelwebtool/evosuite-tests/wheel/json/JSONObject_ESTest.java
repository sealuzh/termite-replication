/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 03:03:22 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      hashMap0.put(jSONArray1, jSONArray1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("y .[[FktV4^j.RGjYN", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(false);
      jSONObject0.put("", (Object) boolean0);
      jSONObject0.getBoolean("");
      boolean boolean1 = jSONObject0.optBoolean("");
      assertFalse(boolean1);
      
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optString((String) null);
      jSONObject1.put("null", true);
      jSONObject1.getBoolean("null");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6904468438748785
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-2930), 4541);
      int int0 = (-2970);
      jSONObject0.toString(33, (-2970));
      jSONObject0.optString("{}", "{}");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      jSONObject1.optJSONArray("{}");
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9757332591880044
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = null;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("null", (Object) "null");
      try { 
        jSONObject2.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3809682098476954
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"Il", 0.0);
      jSONObject0.optJSONArray("\"Il");
      int int0 = jSONObject0.getInt("\"Il");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9181281430812296
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Long long0 = new Long((-2306L));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[3] = "";
      JSONObject jSONObject1 = new JSONObject(long0, stringArray0);
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6349250241852635
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2231), (-2231));
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.Object@0000000001\"");
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.toString((-2231));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000005\": [\njava.lang.Byte@0000000069,\njava.lang.Byte@0000000070,\njava.lang.Byte@0000000071,\njava.lang.Byte@0000000072,\njava.lang.Byte@0000000073,\njava.lang.Byte@0000000074,\njava.lang.Byte@0000000075,\njava.lang.Byte@0000000076,\njava.lang.Byte@0000000077,\njava.lang.Byte@0000000078,\njava.lang.Byte@0000000079,\njava.lang.Byte@0000000080,\njava.lang.Byte@0000000081,\njava.lang.Byte@0000000082,\njava.lang.Byte@0000000083,\njava.lang.Byte@0000000084,\njava.lang.Byte@0000000085,\njava.lang.Byte@0000000086,\njava.lang.Byte@0000000087,\njava.lang.Byte@0000000088,\njava.lang.Byte@0000000089,\njava.lang.Byte@0000000090,\njava.lang.Byte@0000000091,\njava.lang.Byte@0000000092,\njava.lang.Byte@0000000093,\njava.lang.Byte@0000000094,\njava.lang.Byte@0000000095,\njava.lang.Byte@0000000096,\njava.lang.Byte@0000000097\n],\n\"java.lang.String@0000000066\": \"java.lang.Class@0000000067\",\n\"java.lang.String@0000000003\": java.lang.Boolean@0000000004\n}");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, (-797), 3970);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.802174996396899
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.valueToString((Object) null, (-18603944), (-18603944));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.isNull("null");
      jSONObject0.put("null", (double) (-18603944));
      jSONObject1.optInt("s<4bq_ip)1=");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.getDouble("null");
      jSONObject1.toString((-2008));
      jSONObject1.optJSONObject("wheel.json.JSONObject$1");
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      Float float0 = new Float((double) (-18603944));
      Object object0 = new Object();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-2930), 4541);
      jSONObject0.toString(33, (-2970));
      jSONObject0.optString("", "");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      Double.sum(Double.NaN, Double.NaN);
      Double.min(Double.NaN, Double.NaN);
      Double.sum(Double.NaN, Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5762105290091304
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-3612));
      hashMap0.put("spl", integer0);
      JSONObject jSONObject1 = jSONObject0.put("getformat", (Map) hashMap0);
      jSONObject0.put("IzdoFe`)9Yx[3|", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("IzdoFe`)9Yx[3|");
      assertNotSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3946230206130668
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(1130.9291F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("yFL$>qd", (Collection) null);
      Long long0 = new Long(0L);
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8453270210957773
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(8, (Object) null);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[8] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = jSONObject0.opt((String) null);
      assertNull(object1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3346957999180042
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("[");
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject1 = jSONObject0.put("s,jp)B_X!.\"", (Map) hashMap0);
      jSONObject1.optJSONObject("s,jp)B_X!.\"");
      Iterator iterator0 = jSONObject1.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1969851619680454
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put((Boolean) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONObject.valueToString(hashMap0);
      String string0 = "\\u";
      try { 
        jSONObject0.getLong(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("co", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9996014842166727
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Float.min(1745.48F, 0.0F);
      jSONObject0.optDouble("}h'", 0.0);
      Float.min(0.0F, 0.0F);
      Float.sum((-2336.685F), (-2336.685F));
      Float.isFinite((-1.0F));
      Float.max(986.848F, 103.1F);
      JSONObject jSONObject1 = jSONObject0.put("}h'", (Object) float0);
      Float.min(0.0F, 0.0F);
      jSONObject1.getLong("}h'");
      JSONObject.getNames(jSONObject1);
      jSONObject0.getDouble("}h'");
      jSONObject1.toString();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.offerLast(float0);
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000002\":java.lang.Float@0000000003}", (Collection) linkedList0);
      jSONObject2.optString("rHBODv");
      jSONObject2.accumulate("", jSONObject0);
      try { 
        jSONObject2.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject.doubleToString(Double.NaN);
      Integer integer0 = new Integer((-30733247));
      linkedList0.add(integer0);
      String string0 = JSONObject.valueToString((Object) null);
      String string1 = JSONObject.valueToString(linkedList0, (-108916131), (-108916131));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.73327364559032
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.isNull("^btJ^lby");
      jSONObject1.put("^btJ^lby", 0L);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)0);
      linkedList0.addFirst(byte0);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray1.optJSONObject(47);
      Integer integer0 = new Integer(2652);
      hashMap0.put((Object) null, integer0);
      jSONObject1.put("M5s8", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString((-2114), 88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.133133739559716
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt(".5-1=hrW?]6", ".5-1=hrW?]6");
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.remove(".5-1=hrW?]6");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5876483453314068
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2231), (-2231));
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.Object@0000000001\"");
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      Boolean boolean0 = new Boolean(true);
      // Undeclared exception!
      jSONObject0.toString(243);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3);
      JSONObject jSONObject1 = new JSONObject("{}");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-508L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.646546889675962
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
      
      jSONObject0.toString(3);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = JSONObject.quote("*~y?qs9^4y3nfX]</");
      assertEquals("\"*~y?qs9^4y3nfX]<\\/\"", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.252090183495044
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Float float0 = new Float(4596.7038803282);
      JSONObject jSONObject0 = new JSONObject(float0);
      // Undeclared exception!
      jSONObject0.toString(2104, 2104);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8540646560013223
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2187));
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (double) (-2187));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.optInt("\"java.lang.Object@0000000001\"");
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      jSONObject0.put("\"java.lang.Object@0000000001\"", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("ePd;*", (Map) hashMap0);
      String string1 = jSONObject2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("getformat", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "zdoe`)9x[3|";
      JSONObject jSONObject1 = jSONObject0.put("zdoe`)9x[3|", (Map) hashMap0);
      try { 
        jSONObject1.append("zdoe`)9x[3|", hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[zdoe`)9x[3|] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.58641716671689
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Short short0 = new Short((short)27);
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("null", (Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject0.append("null", jSONObject1);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8136605216916037
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("0", (Object) "0");
      jSONObject0.optBoolean("0");
      JSONObject jSONObject2 = jSONObject0.put("0", (Map) hashMap0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("]WIaz2", 0.0);
      jSONObject0.putOpt("9?}g", "9?}g");
      try { 
        jSONObject0.getJSONObject("9?}g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9?}g\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("getformat", (Map) hashMap0);
      jSONObject0.put("IzdoFe`)9Yx[3|", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("IzdoFe`)9Yx[3|");
      assertNotSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1423);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2113529514472483
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.append("gettoString", "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONObject.getNames(jSONObject1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "{s9VBxF9r/p:w?w";
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONTokener jSONTokener0 = new JSONTokener("{s9VBxF9r/p:w?w");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {s9VBxF9r/p:w?w
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9984990462103465
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "tr");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("D\"M+jxDT|;'eu,", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6047867698526947
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.offerFirst((Integer) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1938090917981254
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject.getNames((Object) hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.length();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject1 = jSONObject0.put("eMd?w", (Map) hashMap0);
      jSONObject0.names();
      Object object0 = jSONObject1.get("eMd?w");
      assertNotSame(jSONObject1, object0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(object0);
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\"java.lang.Object@0000000001\"", 0.0);
      String string1 = jSONObject0.getString("\"java.lang.Object@0000000001\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-18603944), (-18603944));
      assertEquals("null", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("null");
      assertTrue(boolean0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string1 = JSONObject.doubleToString((-18603944));
      assertEquals("-1.8603944E7", string1);
      
      String[] stringArray0 = JSONObject.getNames((Object) "-1.8603944E7");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1045317907220684
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.TRUE;
      linkedList0.add(boolean0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.putOpt(",mAhy`>V$e(1j!", ",mAhy`>V$e(1j!");
      try { 
        jSONObject0.getDouble(",mAhy`>V$e(1j!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",mAhy`>V$e(1j!\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5620269070508646
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)376);
      Short.toUnsignedInt((short)356);
      jSONObject0.accumulate("-IY", short0);
      jSONObject0.names();
      int int0 = jSONObject0.getInt("-IY");
      assertEquals(376, int0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8534658483048736
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.doubleToString((-3351.0));
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("-3351", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put(",", (-90L));
      int int0 = jSONObject1.getInt(",");
      assertEquals((-90), int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.1382619446879207
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("Bad value from toJSONString: ", jSONArray0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("get", (-15L));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      jSONObject0.put("0", (-2884.448215848529));
      long long0 = jSONObject0.getLong("0");
      assertEquals((-2884L), long0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5212022523213995
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("getgetChars", false);
      try { 
        jSONObject0.getLong("getgetChars");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetChars\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3436884363827013
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Long> hashMap0 = new HashMap<Boolean, Long>();
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap0);
      JSONObject.getNames((Object) "0");
      String string1 = jSONObject1.optString("0", "!GC;[@6'}/");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.421847739438074
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.put("`q|rMuf\"~-5f@Ot`oZ(", (Object) boolean0);
      jSONObject0.names();
      String string0 = jSONObject0.optString("`q|rMuf\"~-5f@Ot`oZ(");
      assertNotNull(string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1512315736383276
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "0";
      JSONObject jSONObject1 = jSONObject0.put("0", (Object) "0");
      try { 
        jSONObject1.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("e@");
      jSONObject0.put("e@", (Collection) null);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("e@");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Float float0 = new Float(492.9843479);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7307541469273762
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("\t", 0L);
      String string0 = jSONObject0.toString((-1628));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("iswait", 440L);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      jSONObject0.put(string0, true);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.2066113677582964
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float(1093.9108F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(61, 61);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.6817888352168695
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "p@#[pV[K-<<[2sI5e";
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.isNull("p@#[pV[K-<<[2sI5e");
      long long0 = 1L;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("p@#[pV[K-<<[2sI5e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of p@#[pV[K-<<[2sI5e
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      jSONObject0.put("getformat", (Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("getformat");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[10];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      String string1 = jSONObject0.optString("1", "1");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8282606232787044
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.valueToString((Object) null, (-18603944), (-18603944));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.isNull("null");
      double double0 = 4809.0;
      jSONObject0.put("null", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.getDouble("null");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject1.toString((-2008));
      jSONObject1.optJSONObject("wheel.json.JSONObject$1");
      try { 
        jSONObject2.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1155151397838714
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a SONArrmy.", (int) integer0);
      JSONObject jSONObject2 = jSONObject0.putOpt("Expected a ',' or '}'", "] is not a SONArrmy.");
      jSONObject2.getDouble("] is not a SONArrmy.");
      Boolean.getBoolean("q_K,zB]r\"E");
      jSONObject1.optLong("#Ekv?:!EE-L%<]2(K", (long) 0);
      try { 
        jSONObject1.getJSONArray("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject.getNames((Object) null);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("{}");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8760902794872374
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("-*q(,}MMi", (Map) hashMap0);
      jSONObject1.accumulate("-*q(,}MMi", hashMap0);
      jSONObject0.toString(930, 930);
      Object object0 = jSONObject1.get("-*q(,}MMi");
      assertNotSame(object0, jSONArray0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      String string0 = JSONObject.valueToString(hashMap0, 32, 32);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1104.48F));
      assertEquals("-1104.47998046875", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9939826035218315
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      JSONObject jSONObject1 = jSONObject0.put("s,jp)B_X!.\"", (Map) hashMap0);
      try { 
        jSONObject1.getBoolean("s,jp)B_X!.\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s,jp)B_X!.\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("get", false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("dN1.", true);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1884181677496533
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(60, 12);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.885488118580586
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(39);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("Wke+ZWzy*<EK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Wke+ZWzy*<EK\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.quote("*~y?qs9^4y3nfX]<p/");
      assertEquals("\"*~y?qs9^4y3nfX]<p/\"", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.2752115366399062
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("_.", object0);
      jSONObject1.optBoolean("_.");
      jSONObject1.opt("_.");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toString(945);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("{}", (Collection) linkedList0);
      jSONObject0.accumulate("{}", linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("co", 101);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-2218), (-2218));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" {yNt+Wz\fl");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of  {yNt+Wz\fl
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject.quote("V-$jx=/;>2/");
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("V-$jx=/;>2/");
      assertNull(object0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0276242004980904
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0676032882216056
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("0");
      assertNull(object0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 13, 47);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 3291, 3291);
      assertEquals("{}", string0);
      
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.676288880968585
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "(}c@y /,u";
      jSONObject0.optJSONArray("(}c@y /,u");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000003.", (-102.067614828557));
      jSONObject0.optDouble("java.lang.Long@0000000003.", (-102.067614828557));
      jSONObject0.toString((-869), (-869));
      JSONObject jSONObject2 = jSONObject1.put("(}c@y /,u", (double) (-869));
      JSONObject jSONObject3 = jSONObject2.put("0", (-869));
      Object object1 = JSONObject.NULL;
      jSONObject3.put("0", object1);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-869));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("] is not a JSONArray.", (-1.0));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.576643121500665
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2187));
      jSONObject0.put("\"java.lang.Object@0000000001\"", (double) (-2187));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0, (-2187), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"", 2937.854);
      jSONObject0.has("\"java.lang.Object@0000000001\"");
      try { 
        jSONObject1.getString("Uzp;'=7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Uzp;'=7s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2187));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      long long0 = 0L;
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2187), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      jSONObject1.optLong("istoUnsignedString");
      try { 
        jSONObject2.getBoolean("[java.lang.Long@0000000007]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[java.lang.Long@0000000007]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 1414.0423062516904);
      assertEquals(1414.0423062516904, double0, 0.01);
      
      String string0 = JSONObject.quote("ezzBcbqm^kd_(d1 ");
      assertEquals("\"ezzBcbqm^kd_(d1 \"", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3848924330997707
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 9, 892);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.999005155704236
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(1093.9108F);
      Boolean boolean0 = new Boolean("true");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.logicalOr(true, false);
      JSONObject jSONObject1 = jSONObject0.put("istoLowerCase", 0L);
      double double0 = jSONObject1.optDouble("istoLowerCase");
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.0369008852318826
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("s,jp)B_X!.\"", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject0, 58, 58);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Short short0 = new Short((short) (-247));
      Short.toUnsignedLong((short) (-247));
      String string0 = JSONObject.valueToString(short0, (short) (-247), (-67));
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double(1795.9788231929313);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("?7g4T+U9#:");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.5769194387983188
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2231), (-2231));
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.Object@0000000001\"");
      boolean boolean0 = jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      assertTrue(boolean0);
      
      jSONObject0.toString((-2231));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.202883501961465
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Long long0 = new Long(0L);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.quote("getcompareTo");
      Long long1 = new Long(2325L);
      JSONObject jSONObject0 = new JSONObject((Object) "getcompareTo");
      jSONObject0.has("istoString");
      try { 
        jSONObject0.getString("has");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"has\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("\"4'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"4'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("`X?,D~n gdK[C");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("!'hUZ|E", (-2055));
      assertEquals((-2055), int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.4516904359958236
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("GesIPD'J'@c/}iO]'", 0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0, 92, 92);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.quote("Mh42ZhP#ikK");
      assertEquals("\"Mh42ZhP#ikK\"", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("n#m>Pl^&p#<XVVE!0");
      jSONObject0.accumulate("\"n#m>Pl^&p#<XVVE!0\"", "\"n#m>Pl^&p#<XVVE!0\"");
      try { 
        jSONObject0.getInt("\"n#m>Pl^&p#<XVVE!0\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"n#m>Pl^&p#<XVVE!0\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.testValidity(jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("java.lang.Long@0000000005.", "java.lang.Long@0000000005.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.7526708545233256
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getfloatToRawIntBits");
      jSONObject0.accumulate("getfloatToRawIntBits", "getfloatToRawIntBits");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.8702928936830259
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("getoptJSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getoptJSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt("sp", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\"mdoy");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("B{hR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B{hR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("}X~L<yX5<EhhxmubrN");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }X~L<yX5<EhhxmubrN
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1480.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("wa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wa\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("723,]mw");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 723,]mw
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
