/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 03:13:39 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.rowio.RowOutputTextQuoted;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("reLeg", defaultDBTable0, (-832), "reLeg");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      MockFile mockFile0 = new MockFile("reLeg");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.mkdir();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("reLeg", true, defaultDBTable0, "reLeg");
      dBCheckConstraint0.setTable(defaultDBTable0);
      defaultDBColumn0.equals(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("Bytes", stringArray0);
      DBSchema dBSchema0 = new DBSchema("Bytes");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Bytes", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-102761631), "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.engine.MetaRecord", defaultDBTable0, (-832), "SEARCHSTR");
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DBDataType dBDataType0 = DBDataType.getInstance(484, "fgMX96Q0o*0UwP:X[");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = Integer.getInteger("org.h2.engine.MetaRecord", integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("fgMX96Q0o*0UwP:X[", defaultDBTable0, dBDataType0, integer1, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("alter sessibo", "alter sessibo");
      MockFile mockFile1 = new MockFile(mockFile0, "truncate");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MockFile mockFile0 = new MockFile("setInt(String,int)");
      MockFile mockFile1 = new MockFile(mockFile0, "callselect 1 from (/eect");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callselect 1 from (/eect");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callselect 1 from (/eect", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("callselect 1 from (/eect", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", dBTable0.getObjectType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("reeLevgz", defaultDBTable0, (-832), "reeLevgz");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "reeLevgz", true, "reeLevgz");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBNotNullConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("reeLevgz NOT NULL", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6453216630083127
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("reeLevgz", defaultDBTable0, (-832), "reeLevgz");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "reeLevgz", true, "reeLevgz");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("reeLevgz", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("reeLevgz");
      mockFile0.setWritable(true, true);
      MockFile mockFile1 = new MockFile(mockFile0, "reeLevgz");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.renderColumn(dBColumnArray0[0]);
      assertEquals("reeLevgz REELEVGZ NOT NULL", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("reeLevgz", defaultDBTable0, (-777), "reeLevgz");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.parseColumnTypeAndSize("reeLevgz");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "]|`syH+&";
      stringArray0[1] = "reeLevgz";
      stringArray0[2] = "reeLevgz";
      stringArray0[3] = "reeLevgz";
      stringArray0[4] = "reeLevgz";
      stringArray0[5] = "reeLevgz";
      stringArray0[6] = "reeLevgz";
      stringArray0[7] = "reeLevgz";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "seljct ");
      dBCheckConstraint0.setName((String) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("reeLevgz", defaultDBTable0, (-777), "reeLevgz");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      SQLUtil.mutatesStructure("/*");
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "wvnWR";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = 202;
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'r';
      charArray0[2] = ':';
      charArray0[3] = '<';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(202, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 202
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4342447161495797
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLUtil.isProcedureCall("");
      TableContainer tableContainer0 = new TableContainer("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("", false);
      SQLUtil.mutatesStructure("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-yLyzhH5/&<$%n\bu[+";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      SQLUtil.ownerDotComponent(tableContainer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("renamereelevgs", defaultDBTable0, (-2624), "");
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder(32);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2624), 322);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2624
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ree`evgs");
      assertNull(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("ree`evgs", dBCatalog0);
      SQLUtil.parseColumnTypeAndSize("DATE");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance((-29), "ree`evgs");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "alter table";
      stringArray0[1] = "alter table";
      stringArray0[2] = "alter table";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "alter table";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter table", stringArray0, "alter table", "alter table", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9ISWjbV");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "9ISWjbV";
      stringArray0[3] = "9ISWjbV";
      stringArray0[4] = "execv=2fw{&*(-/<v7";
      stringArray0[5] = "9ISWjbV";
      stringArray0[6] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("//", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("9ISWjbV", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , 9ISWjbV, 9ISWjbV, execv=2fw{&*(-/<v7, 9ISWjbV, ) REFERENCES 9ISWjbV(, , 9ISWjbV, 9ISWjbV, execv=2fw{&*(-/<v7, 9ISWjbV, )", string0);
      
      String string1 = SQLUtil.join("F", "_", stringArray0, "execv=2fw{&*(-/<v7", "PSEUDO_COLUMN", stringArray0);
      assertEquals("F join execv=2fw{&*(-/<v7 as PSEUDO_COLUMN on _.null = PSEUDO_COLUMN.null and _.null = PSEUDO_COLUMN.null and _.9ISWjbV = PSEUDO_COLUMN.9ISWjbV and _.9ISWjbV = PSEUDO_COLUMN.9ISWjbV and _.execv=2fw{&*(-/<v7 = PSEUDO_COLUMN.execv=2fw{&*(-/<v7 and _.9ISWjbV = PSEUDO_COLUMN.9ISWjbV and _.null = PSEUDO_COLUMN.null", string1);
      
      String string2 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(" not in [");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|", defaultDBTable1, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("| : BLOB", string0);
      
      boolean boolean0 = SQLUtil.isDML("BLOB");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("_cKKjGj/*p{'A'YURO");
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v=2fW{Y&*(-/<v7");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("v=2fW{Y&*(-/<v7", defaultDBTable0, (-1892928865), "inner");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("v=2fW{Y&*(-/<v7", defaultDBTable0, (-1353), "inner");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v=2fW{Y&*(-/<v7";
      stringArray0[1] = "v=2fW{Y&*(-/<v7";
      stringArray0[2] = "e";
      stringArray0[3] = "v=2fW{Y&*(-/<v7";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "inner";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("reeLevgs", defaultDBTable0, (-775), ", ");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("reeLevgs", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance((-942), " or ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" or ", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.isIdentical(defaultDBTable0);
      Integer.toUnsignedLong(3306);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setFractionDigits(integer1);
      String string0 = defaultDBColumn0.toString();
      assertEquals(" or  :  OR (3,3)", string0);
      
      boolean boolean0 = SQLUtil.isDML(" or  :  OR (3,3)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "svxwr", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.constraintName(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBUniqueConstraint0.addColumnName("svxwr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CONSTRAINT svxwr ");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " does not start with ", false, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.327732405703302
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute");
      assertNull(boolean0);
      
      SQLUtil.isQuery("&idA%D^[7Hc~|C}8 ");
      boolean boolean1 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("defaultValue", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(3452);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "defaultValue";
      stringArray1[1] = "defaultValue";
      stringArray1[2] = "defaultValue";
      stringArray1[3] = "defaultValue";
      stringArray1[4] = "defaultValue";
      stringArray1[5] = "defaultValue";
      stringArray1[6] = "defaultValue";
      stringArray1[7] = "defaultValue";
      stringArray1[8] = "defaultValue";
      SQLUtil.renderColumnNames(stringArray1);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      DataStore dataStore0 = new DataStore((String) null);
      VirtualFile virtualFile0 = new VirtualFile("defaultValue", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      Locale locale0 = Locale.CHINA;
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "defaultValue";
      objectArray0[1] = (Object) stringBuilder0;
      objectArray0[2] = (Object) stringBuilder1;
      objectArray0[3] = (Object) "defaultValue";
      objectArray0[4] = (Object) "defaultValue";
      objectArray0[5] = (Object) "truncate";
      objectArray0[6] = (Object) stringBuilder1;
      objectArray0[7] = (Object) "defaultValue";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "truncate", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("COLUMN_SIZE");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("COLUMN_SIZE");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" length: ");
      assertNull(boolean0);
      
      DBSchema dBSchema0 = new DBSchema(" length: ");
      DBPackage dBPackage0 = new DBPackage(" length: ", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure(" length: ", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals(" length: . length: ", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = SQLUtil.normalize("Y=<maKZ?4}DYT\")NL[-", true);
      assertEquals("Y = < maKZ ? 4 } DYT \")NL[-\"", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("CdK6QL'", "CdK6QL'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.DropSequenceConstantAction");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("reerevncs", true, defaultDBTable0, "reerevncs");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.execute.DropSequenceConstantAction", defaultDBTable0, 40, "org.apache.derby.impl.sql.execute.DropSequenceConstantAction");
      defaultDBColumn0.setDefaultValue("org.apache.derby.impl.sql.execute.DropSequenceConstantAction");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.apache.derby.impl.sql.execute.DropSequenceConstantAction ORG.APACHE.DERBY.IMPL.SQL.EXECUTE.DROPSEQUENCECONSTANTACTION DEFAULT org.apache.derby.impl.sql.execute.DropSequenceConstantAction NULL", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2879437838302732
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isDML("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isDML("\u0001\u0107");
      assertFalse(boolean0);
      
      Boolean boolean1 = new Boolean("org.apache.derby.iapi.store.raw.RowLock");
      SQLUtil.removeComments("LyVUynJ42OO|$~K!Au");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(879, "--");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("--", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("-- --(3,3) NULL", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.4102453456579889
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.removeComments("|#@Xs");
      Object[] objectArray0 = new Object[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLUtil.substituteMarkers("", "v=2fW{&*(-/<v7", "v=2fW{&*(-/<v7");
      System.setCurrentTimeMillis((-3583L));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance((-1908874351), "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals(" : (3)", string0);
      
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" not in [", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" not in [ BLOB NULL", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ");
      DBDataType dBDataType0 = DBDataType.getInstance((-819), " as ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" as   AS (3) NULL", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("h#C|*5()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("create tablej?,ua|wt\"!he", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'", defaultDBTable0, 1434, "'");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("create tablej?,ua|wt\"!he'", stringBuilder0.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("LxFb)aH`");
      assertNull(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LxFb)aH`", defaultDBTable0, 40, "LxFb)aH`");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("LXFB)AH`", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.equals("reeLevgz");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("reeLevgz", defaultDBTable0, (-777), "reeLevgz");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("reeLevgz REELEVGZ NULL", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4570294027141286
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("{~q9c*%", true);
      assertEquals("{ ~ q9c * % ", string0);
      
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "{~q9c*%", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT {~q9c*% UNIQUE ()", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "'L(i#q", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectselect 1 from (/eect", defaultDBTable0, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn(defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SQLUtil.isDML("'L(i#q");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder(8);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.addRequiredCondition("k@M<mHO", stringBuilder1);
      assertEquals("k@M<mHO", stringBuilder1.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      Character character0 = Character.valueOf('8');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'8'", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Character character0 = Character.valueOf('0');
      String string0 = SQLUtil.substituteMarkers("ree`evgs", "ree`evgs", character0);
      assertEquals("'0'", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("reeLevgz", defaultDBTable0, (-777), "reeLevgz");
      DBColumn[] dBColumnArray0 = new DBColumn[10];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executej7()z76v<^u");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("hb2rc}$", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputTextQuoted rowOutputTextQuoted0 = new RowOutputTextQuoted("O]", "updatecreate materialized view1acfj51|lax6p", "V[uqR.Le#158:k", false, "executej7()z76v<^u");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextQuoted0, false);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("rete tablep^ition(cloF,start)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cloF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("ree`evgs", "ree`evgs", (String[]) null, "ree`evgs", "ree`evgs", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(+*[O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (+*[O
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, stringArray0, "create materialized view", "\"ia}.", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select intodazf", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(90078);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
      
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint select intodazf", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "/fVrs\"U";
      stringArray0[1] = "^Q9fjXRQoD,m@aP~";
      String string0 = SQLUtil.join("inner", "updatealter tablr.e`evg", stringArray0, "updatealter tablr.e`evg", "inner", stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.568155382556487
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("ree`evgs");
      String[] stringArray0 = null;
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("ree`evgs", (String[]) null, ".nYe*;H`5Jys)bh('s", "ree`evgs", stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.164400258041059
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("$hY5<XYCp");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[0];
      String string0 = SQLUtil.leftJoin("$hY5<XYCp", stringArray0, "$hY5<XYCp", "$hY5<XYCp", stringArray1);
      assertEquals("left join $hY5<XYCp as $hY5<XYCp on ", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("alter tableselect into");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "*/";
      stringArray0[2] = "*/";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("*/", stringArray0, "*/", "*/", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        SQLUtil.join("", (String) null, (String[]) null, "", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("alter tablereelevgs");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter indexreelev");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("b Z&n:V?0y", false, "nullToPrimitivGeTest", "nullToPrimitivGeTest");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"b Z&n:V?0y\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select intocheckpositionedstatement");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = SQLUtil.normalize("v=2fW{&*(-/<v7", false);
      assertEquals("v = 2fW { & * (- / < v7", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("vZjeU>a!j?Z", true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = SQLUtil.normalize("~sMxdI+@.gzCz,*E", true);
      assertEquals("~ sMxd  I + @.gzCz, * E", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = SQLUtil.normalize(".t)Y6B\"geLJc>65;7i", false);
      assertEquals(".t) Y6B \"geLJc>65;7i\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select into42x19");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insert");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select intodazf", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder(90078);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.641269639859855
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("seljct 1 from (/eec");
      assertNull(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("select ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'n`g^", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("'n`g^", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 'n`g^ FOREIGN KEY () REFERENCES 'n`g^()", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "nsullTorimitiveTet";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("nsullTorimitiveTet", true, "Y=<maKZ?4}DYT\")NL[-", "nsullTorimitiveTet");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.DropSequenceConstantAction");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("reerevncs", true, defaultDBTable0, "reerevncs");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT reerevncs CHECK reerevncs", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("reeLevgs");
      SQLUtil.addOptionalCondition("reeLevgs", stringBuilder0);
      assertEquals("reeLevgs or reeLevgs", stringBuilder0.toString());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("rename");
      SQLUtil.addRequiredCondition("rename", stringBuilder0);
      assertEquals("rename and rename", stringBuilder0.toString());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("${)G", dBCatalog0);
      String string0 = SQLUtil.renderValue(dBCatalog0);
      assertNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = SQLUtil.normalize("O4FjI0;#=(g`BA/h*w", true);
      assertEquals("O4FjI0 ; # = (g ` BA / h * w", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null.null, null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null.null, null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null.null, null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null.null, null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null.null, null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null.null, null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("jZ>8Q?a`L4(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: jZ>8Q?a`L4(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("HBOdq+{+NWgnDKX,", true, "HBOdq+{+NWgnDKX,", "rename");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " does not start with ", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = SQLUtil.normalize("j7()z76v<^u", true);
      assertEquals("j7 () z76v < ^ u", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.5669499167988556
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("neB$JmKXVg*L?n");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "neB$JmKXVg*L?n", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("V43c+ OGF5%qTY 6", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("v=2fW{&*(-/<v7", true, "renamereearences", "nullToPrimitiveTest");
      StringBuilder stringBuilder0 = new StringBuilder("v=2fW{&*(-/<v7");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("v=2fW{&*(-/<v7CONSTRAINT v=2fW{&*(-/<v7 ", stringBuilder0.toString());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("nullToPrimitiveTest", true, "Y=<maKZ?4}DYT\")NL[-", "nullToPrimitiveTest");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("reeLevgs", false, "reeLevgs", "reeLevgs");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK reeLevgs", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("inner", false, "inner", "inner");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT inner CONSTRAINT inner ", stringBuilder0.toString());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("wvnWR", "wvnWR", stringArray0, "wvnWR", "wvnWR", stringArray0);
      assertEquals("wvnWR join wvnWR as wvnWR on wvnWR.null = wvnWR.null and wvnWR.null = wvnWR.null and wvnWR.null = wvnWR.null", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("0`At)|J#-O#d*5Mc$f");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("0`At)|J#-O#d*5Mc$f", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("execwvt<`75%/~3z");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter session", false);
      assertEquals("alter session", string0);
      
      String string1 = SQLUtil.renderValue("alter session");
      assertEquals("'alter session'", string1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = SQLUtil.renderValue(stringBuffer0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue(object0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("LxFb)aH`");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("reeLevgs");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("reearences");
      assertNull(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.19759279820448
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT 1 FROM (/EECT ");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("L4+#u", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.4223665577792008
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null = null AND null = null WHERE null = null AND null = null", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.innerJoin("Rb%7xYr?Lr0K*", stringArray0, "Rb%7xYr?Lr0K*", "null = null AND null = null AND null = null AND null = null", stringArray0);
      assertEquals("Rb%7xYr?Lr0K* as null = null AND null = null AND null = null AND null = null on Rb%7xYr?Lr0K*.null = null = null AND null = null AND null = null AND null = null.null and Rb%7xYr?Lr0K*.null = null = null AND null = null AND null = null AND null = null.null and Rb%7xYr?Lr0K*.null = null = null AND null = null AND null = null AND null = null.null and Rb%7xYr?Lr0K*.null = null = null AND null = null AND null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("deletelxfb)ah`", (String[]) null, "LxFb)ao`", "LxFb)ao`", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = SQLUtil.normalize("'L(i#q", false);
      assertEquals("'L(i#q'", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("k&~VyijnyKo~");
      assertNull(boolean0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("&f(-vDWz}", " ON UPDATE ", "&f(-vDWz}");
      assertEquals("&f(-vDWz}", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("reearences");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderColumnListWithTableName("reeLevgs", stringArray0);
      assertEquals("reeLevgs.null", string0);
      
      String string1 = SQLUtil.join("reeLevgs", "reeLevgs.null", stringArray0, "reeLevgs", "reeLevgs.null", stringArray0);
      assertEquals("reeLevgs join reeLevgs as reeLevgs.null on reeLevgs.null.null = reeLevgs.null.null", string1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "ml~CuE]lZ-(NV-: [%D", stringArray0);
      assertEquals("null as ml~CuE]lZ-(NV-: [%D on null.null = ml~CuE]lZ-(NV-: [%D.null and null.null = ml~CuE]lZ-(NV-: [%D.null and null.null = ml~CuE]lZ-(NV-: [%D.null", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.leftJoin("OyWIy}0e+yn_x4[Q", stringArray0, "V'S\u0003r:'G}tDpM\"", "DM'", stringArray0);
      assertEquals("left join V'S\u0003r:'G}tDpM\" as DM' on OyWIy}0e+yn_x4[Q.null = DM'.null and OyWIy}0e+yn_x4[Q.null = DM'.null", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("sessionSetId", (String[]) null, "(MxFa", "(MxFa", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      String string1 = SQLUtil.leftJoin("null = null AND null = null", stringArray0, "null = null AND null = null", "null = null AND null = null", stringArray0);
      assertEquals("left join null = null AND null = null as null = null AND null = null on null = null AND null = null.null = null = null AND null = null.null and null = null AND null = null.null = null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("reerevnc", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.437465328065844
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("LxFb)aH`");
      assertNull(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("LxFb)aH`", "LxFb)aH`", "LxFb)aH`");
      assertEquals("'LxFb)aH`'", string0);
  }
}
