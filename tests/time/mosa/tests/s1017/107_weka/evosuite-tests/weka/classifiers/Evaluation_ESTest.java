/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 03:28:50 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Random;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.Loader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.KBMeanInformation();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = Double.NaN;
      int[] intArray0 = new int[5];
      intArray0[0] = 97;
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance((-1543.17224), doubleArray0, intArray0, 15);
      try { 
        evaluation0.evaluateModelOnce((Classifier) null, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.precision(2355);
      evaluation1.toMatrixString();
      evaluation1.truePositiveRate(498);
      evaluation1.numFalseNegatives(3852);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "=== Confusion Matrix ===\n\n   <-- classified as\n");
      evaluation1.setPriors(instances0);
      assertEquals(0.0, evaluation1.numInstances(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertNotEquals(double1, double0, 0.01);
      
      evaluation0.incorrect();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedRecall();
      evaluation0.addNumericTrainClass(1.0, Double.NaN);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      evaluation0.toMatrixString();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Object[] objectArray0 = new Object[0];
      evaluation0.makeDistribution(Double.NaN);
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5197207708399179
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-1));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.SFSchemeEntropy();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.stratify(782);
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      try { 
        evaluation0.evaluateModelOnce((double) 1, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8534760167386333
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-2));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.falseNegativeRate(2);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString("Y#w%^{UU5BF");
      assertEquals("Y#w%^{UU5BF\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation0.m_SumSqrErr;
      evaluation0.truePositiveRate(1);
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0275685689947403
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.falsePositiveRate(9);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1489958897117414
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 3852;
      BayesNet bayesNet0 = new BayesNet();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3852);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) bayesNet0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9574834621823012
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_MaxTarget;
      evaluation0.numFalseNegatives((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision(20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2376830354502575
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getRelationalClassFormat();
      String string0 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      System.setCurrentTimeMillis((-2));
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.addNumericTrainClass(1.0, Double.NaN);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.toMatrixString();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) simpleLogistic0, instances0, objectArray0);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9992108447729096
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.areaUnderROC((-1));
      OneR oneR0 = new OneR();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation2.crossValidateModel((Classifier) oneR0, (Instances) null, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5835494638507304
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-2));
      evaluation0.weightedAreaUnderPRC();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.numTrueNegatives((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass(0.0, (-1));
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1934386987237007
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      Capabilities capabilities0 = new Capabilities(randomSubSpace0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumClasses(1885);
      Instances instances0 = testInstances0.generate("\tOnly outputs cumulative margin distribution.\n");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.getRevision();
      evaluation0.toClassDetailsString();
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.761290277274991
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.errorRate();
      evaluation1.weightedRecall();
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.515447410954053
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.weightedAreaUnderROC();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8746664541431464
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation1.weightedTrueNegativeRate();
      evaluation1.unweightedMicroFmeasure();
      // Undeclared exception!
      try { 
        evaluation2.truePositiveRate((-7));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.916821239742648
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-2));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate(2);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.SFEntropyGain();
      String string0 = evaluation0.toMatrixString("Y#w%^{UU5BF");
      assertEquals("Y#w%^{UU5BF\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.rootRelativeSquaredError();
      evaluation0.areaUnderPRC((-557));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[1];
      Vote vote0 = new Vote();
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) vote0, instances0, (Object[]) stringArray0);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BallNode ballNode0 = new BallNode(5, (-2786), 87, binarySparseInstance0, 5);
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4659374500999824
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      String string0 = evaluation0.toSummaryString("getMetaClassifier", true);
      assertEquals("getMetaClassifier\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.getRevision();
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1151760998488176
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1, (CostMatrix) null);
      evaluation0.numFalsePositives((-2));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.getGlobalInfo(classifier0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.kappa();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.falseNegativeRate(2);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.setPriors(instances0);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-3455.09440939448));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4857142857142857
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextDirectoryLoader.main(testInstances0.DEFAULT_WORDS);
      textDirectoryLoader0.setCharSet("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 65.118946);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass(681.0747053041, 1274.0);
      double double0 = evaluation1.weightedPrecision();
      RandomTree randomTree0 = new RandomTree();
      Evaluation.handleCostOption((String) null, (-922));
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation3.equals(evaluation1);
      double double1 = evaluation3.meanPriorAbsoluteError();
      assertTrue(evaluation3.equals((Object)evaluation2));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[1];
      Vote vote0 = new Vote();
      evaluation0.evaluateModel((Classifier) vote0, instances0, (Object[]) stringArray0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.weightedTrueNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6952297464988506
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.SFMeanEntropyGain();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, (Object[]) regressionByDiscretization0.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-2));
      evaluation0.correct();
      evaluation0.KBRelativeInformation();
      Vote vote0 = new Vote();
      try { 
        evaluation0.evaluateModel((Classifier) vote0, instances0, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation.handleCostOption("", (-232));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      evaluation0.meanAbsoluteError();
      System.setCurrentTimeMillis((-2));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[0] = Double.NaN;
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.933541998291854
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.m_MaxTarget;
      double double1 = evaluation0.numFalseNegatives((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.falsePositiveRate(68);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      double double3 = evaluation1.m_SumPriorAbsErr;
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(1724.0, 2083.92);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.451662921507566
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      evaluation1.weightedTrueNegativeRate();
      evaluation1.unweightedMicroFmeasure();
      Evaluation.handleCostOption((String) null, 16);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      int[] intArray0 = new int[4];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 16;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0, intArray0, 107);
      try { 
        evaluation2.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Utils.SMALL = (-2582.0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_SumPriorSqrErr;
      testInstances0.setNumInstances((-407));
      evaluation0.areaUnderROC((-1));
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassPriorsSum = (-139.905);
      double double0 = evaluation0.falsePositiveRate(118);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1154), (char[]) null, (-1154));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5888083670994821
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      evaluation1.toClassDetailsString();
      assertTrue(evaluation1.equals((Object)evaluation0));
      
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      textDirectoryLoader0.setCharSet(".cost");
      doubleArray0[6] = (double) 0;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass(0.0, 4.0);
      evaluation0.weightedPrecision();
      RandomTree randomTree0 = new RandomTree();
      Evaluation evaluation3 = new Evaluation(instances0, costMatrix0);
      evaluation3.equals(evaluation1);
      assertTrue(evaluation3.equals((Object)evaluation0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      DecisionTable decisionTable0 = new DecisionTable();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.addNumericTrainClass((-4415.78), 1);
      evaluation0.m_Incorrect = (-4415.78);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SparseInstance sparseInstance0 = new SparseInstance(128);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.toMatrixString(".bsi");
      evaluation0.numTrueNegatives((-3054));
      double double2 = evaluation0.numTruePositives(6);
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-3054), 0.0);
      double double3 = evaluation0.weightedPrecision();
      assertEquals(double3, double0, 0.01);
      
      RandomTree randomTree0 = new RandomTree();
      evaluation0.equals((Object) null);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3169392047597572
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-3054.0), (-2));
      double double0 = evaluation0.weightedAreaUnderPRC();
      evaluation0.errorRate();
      double double1 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.addNumericTrainClass(Double.NaN, Double.NaN);
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.getGlobalInfo(lWL0);
      evaluation0.kappa();
      try { 
        evaluation0.evaluateModelOnce((Classifier) lWL0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8584064361850006
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      evaluation0.m_MarginCounts = doubleArray0;
      ArffLoader arffLoader0 = new ArffLoader();
      CostMatrix costMatrix1 = new CostMatrix(0);
      costMatrix1.initialize();
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix1);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0734736492244985
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      int int0 = 0;
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString();
      textDirectoryLoader0.setCharSet("@relation");
      double[] doubleArray0 = new double[0];
      Instance instance0 = null;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      try { 
        evaluation0.evaluateModel((Classifier) gaussianProcesses0, (Instances) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      MockRandom mockRandom0 = new MockRandom(0);
      costMatrix0.applyCostMatrix(instances0, mockRandom0);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      evaluation0.m_MarginCounts = doubleArray0;
      ArffLoader arffLoader0 = new ArffLoader();
      double double0 = evaluation0.m_MaxTarget;
      double double1 = evaluation0.truePositiveRate(0);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.areaUnderPRC(0);
      evaluation0.setDiscardPredictions(false);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correct();
      double double0 = evaluation0.weightedAreaUnderPRC();
      evaluation0.setPriors(instances0);
      evaluation0.addNumericTrainClass((-1209.144), Double.NaN);
      double double1 = evaluation0.weightedPrecision();
      assertEquals(double1, double0, 0.01);
      
      RandomTree randomTree0 = new RandomTree();
      evaluation0.equals(textDirectoryLoader0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9528003795150486
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.KBMeanInformation();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.kappa();
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(495);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(495, (char[]) null, 495);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Z';
      charArray0[1] = '#';
      charArray0[2] = '=';
      charArray0[3] = '&';
      charArray0[4] = 'O';
      evaluation0.num2ShortID(2000, charArray0, 2000);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.KBRelativeInformation();
      Vote vote0 = new Vote();
      try { 
        evaluation0.evaluateModel((Classifier) vote0, instances0, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toClassDetailsString("minWordFrequencyTipText");
      assertEquals("minWordFrequencyTipText\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.totalCost();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      String string0 = null;
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(false);
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (-1944.391755705);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3852);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.unweightedMicroFmeasure();
      double double2 = evaluation1.truePositiveRate((-3720));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6854770775933767
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      int int0 = 0;
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      ArffLoader arffLoader0 = new ArffLoader();
      CostMatrix costMatrix1 = new CostMatrix(0);
      costMatrix1.initialize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".cost", arrayList0, 0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5063874375065844
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.sizeOfPredictedRegions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.priorEntropy();
      double double1 = evaluation0.m_MaxTarget;
      double double2 = evaluation0.m_SumKBInfo;
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation0.areaUnderPRC(0);
      double double3 = evaluation0.truePositiveRate(0);
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double4, 0.01);
      
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5022809665167944
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      SparseInstance sparseInstance0 = new SparseInstance(128);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.KBInformation();
      evaluation0.toMatrixString(".arff");
      evaluation0.numTrueNegatives(1274);
      evaluation0.numTruePositives(128);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = 0.0;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.sizeOfPredictedRegions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.priorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numInstances();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9915382105018096
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.numFalsePositives((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals((-1), testInstances0.getClassIndex());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setEvaluationMeasure");
      testInstances0.clone();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalsePositives(1678);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8775224312953291
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedRecall();
      evaluation0.addNumericTrainClass((-1), 574.1914006277);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.toMatrixString();
      Object[] objectArray0 = new Object[1];
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.376170879133082
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", (-232));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numFalseNegatives((-2));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.areaUnderROC((-1));
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ArffLoader arffLoader0 = new ArffLoader();
      CostMatrix costMatrix0 = new CostMatrix(0);
      AbstractClassifier.makeCopy((Classifier) null);
      Evaluation.makeOptionString((Classifier) null, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      CostMatrix costMatrix1 = new CostMatrix(0);
      ArffLoader arffLoader1 = new ArffLoader();
      CostMatrix costMatrix2 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = Evaluation.getGlobalInfo(lWL0);
      assertEquals("\nSynopsis for weka.classifiers.lazy.LWL:\n\nLocally weighted learning. Uses an instance-based algorithm to assign instance weights which are then used by a specified WeightedInstancesHandler.\nCan do classification (e.g. using naive Bayes) or regression (e.g. using linear regression).\n\nFor more info, see\n\nEibe Frank, Mark Hall, Bernhard Pfahringer: Locally Weighted Naive Bayes. In: 19th Conference in Uncertainty in Artificial Intelligence, 249-256, 2003.\n\nC. Atkeson, A. Moore, S. Schaal (1996). Locally weighted learning. AI Review..", string0);
      
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(" -1       0    \n", string1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.93504084661911
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      textDirectoryLoader0.getStructure();
      Evaluation.main((String[]) null);
      evaluation0.addNumericTrainClass(0.0, 0);
      evaluation0.areaUnderROC(0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.708946356277848
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.correct();
      evaluation1.correct();
      double double0 = evaluation0.matthewsCorrelationCoefficient(0);
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.recall(0);
      evaluation1.pctIncorrect();
      double double1 = evaluation1.correct();
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation.handleCostOption("", (-232));
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      evaluation0.unclassified();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.341355872577755
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      SparseInstance sparseInstance0 = new SparseInstance(128);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toMatrixString(" the following packages will");
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.KBInformation();
      evaluation0.toMatrixString("@data");
      evaluation0.unweightedMacroFmeasure();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-104);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.getHeader();
      DecisionTable decisionTable0 = new DecisionTable();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 128, 0.95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      textDirectoryLoader0.getDataSet();
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(578.1967045, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) naiveBayesMultinomialText0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ArffLoader arffLoader0 = new ArffLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.KBRelativeInformation();
      double double0 = evaluation0.weightedRecall();
      evaluation0.addNumericTrainClass(Double.NaN, Double.NaN);
      double double1 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation1.numTrueNegatives(4);
      evaluation0.numTruePositives((-2565));
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(4, 0.0);
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1918.655), (-1918.655));
      double double0 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanAbsoluteError();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.truePositiveRate((-3282));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.areaUnderPRC((-3282));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(24, false, false);
      String string0 = Evaluation.makeOptionString(simpleLogistic0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setCharSet("@relation");
      Evaluation evaluation1 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation1.weightedFalsePositiveRate();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      Evaluation.makeOptionString(regressionByDiscretization0, true);
      double double2 = evaluation1.priorEntropy();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.458787927599531
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.k_MarginResolution = (-870);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.useNoPriors();
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, 12, testInstances0.DEFAULT_WORDS, (Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.pctCorrect();
      evaluation0.SFSchemeEntropy();
      Vote vote0 = new Vote();
      try { 
        evaluation0.evaluateModel((Classifier) vote0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate(1499);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Evaluation.getGlobalInfo(filteredClassifier0);
      evaluation0.falseNegativeRate(2361);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) filteredClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Evaluation.getGlobalInfo(randomCommittee0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.9999683577390486
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.truePositiveRate((-721));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.9261511226561066
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.weightedAreaUnderPRC();
      String string0 = evaluation0.toClassDetailsString("makeCopies");
      assertEquals("makeCopies\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure((-1870));
      double double1 = evaluation0.KBInformation();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.numInstances();
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.3710103400849258
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances1);
      double[] doubleArray0 = new double[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0E10, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      instances0.add((Instance) denseInstance0);
      double double0 = evaluation0.m_ConfLevel;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.182508882687605
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.falsePositiveRate((-1461032992));
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.toClassDetailsString("setEpochs");
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation3 = new Evaluation(instances0);
      try { 
        evaluation2.updateStatsForIntervalEstimator(regressionByDiscretization0, (Instance) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.4092847159802617
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numTruePositives(0);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 22.0;
      doubleArray0[1] = 1.0E-4;
      doubleArray0[2] = (double) 102;
      doubleArray0[3] = 22.0;
      doubleArray0[4] = 128.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 102, 1480.18163038138);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.fMeasure(0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      evaluation0.updateMargins(doubleArray0, 0, (-1466.67436439501));
      evaluation0.correct();
      double double2 = evaluation0.correct();
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = Evaluation.getGlobalInfo(lWL0);
      assertEquals("\nSynopsis for weka.classifiers.lazy.LWL:\n\nLocally weighted learning. Uses an instance-based algorithm to assign instance weights which are then used by a specified WeightedInstancesHandler.\nCan do classification (e.g. using naive Bayes) or regression (e.g. using linear regression).\n\nFor more info, see\n\nEibe Frank, Mark Hall, Bernhard Pfahringer: Locally Weighted Naive Bayes. In: 19th Conference in Uncertainty in Artificial Intelligence, 249-256, 2003.\n\nC. Atkeson, A. Moore, S. Schaal (1996). Locally weighted learning. AI Review..", string0);
      
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure((-1870));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getHeader();
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-3282);
      evaluation0.truePositiveRate((-3282));
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3852);
      try { 
        evaluation0.evaluateModelOnce(1658.132598451346, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1658
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.1007662568921845
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation1.numFalsePositives((-2));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      double double1 = evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation2.falseNegativeRate((-260));
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation1.avgCost();
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.fMeasure(0);
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getHeader();
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation0.errorRate();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      ArffLoader arffLoader0 = new ArffLoader();
      CostMatrix costMatrix1 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.incorrect();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      String string0 = evaluation0.toSummaryString(true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.recall((-1));
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SparseInstance sparseInstance0 = new SparseInstance(128);
      instances0.add((Instance) sparseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.m_MissingClass;
      evaluation0.numFalseNegatives((-2));
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.setOptions(testInstances0.DEFAULT_WORDS);
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) decisionStump0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      boolean boolean0 = evaluation1.getDiscardPredictions();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.278652206252129
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMacroFmeasure();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      LWL lWL0 = new LWL();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numInstances();
      evaluation0.m_SumSchemeEntropy = 6.0;
      textDirectoryLoader0.listOptions();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumClass;
      OneR oneR0 = new OneR();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) oneR0, instances0, 1958, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      OneR oneR0 = new OneR();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) oneR0, instances0, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(".bsi", false);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
      
      evaluation0.getRevision();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure((-1870));
      String string0 = evaluation0.toSummaryString("@relation", true);
      assertEquals("@relation\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.pctCorrect();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.SFMeanEntropyGain();
      evaluation0.precision(13);
      evaluation0.toMatrixString();
      try { 
        evaluation0.updateStatsForClassifier((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correct();
      ArffLoader arffLoader0 = new ArffLoader();
      ConverterUtils.DataSource.read((InputStream) null);
      arffLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      SparseInstance sparseInstance0 = new SparseInstance(128);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor(1678, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.9402041423888609
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      MockRandom mockRandom0 = new MockRandom();
      DecisionTable decisionTable0 = new DecisionTable();
      String[] stringArray0 = new String[8];
      stringArray0[6] = "SQ<u/|J:Mg/y]9V";
      try { 
        Evaluation.evaluateModel((Classifier) decisionTable0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\n\tOffset variable ";
      stringArray0[1] = "\n\tOffset variable ";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\n\tOffset variable ", arrayList0, 1849);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.440769675320202
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure(1231);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.getRevision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor(1678, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      BayesNet bayesNet0 = new BayesNet();
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.BayesNet:
         // 
         // -D
         // \tDo not use ADTree data structure
         // 
         // -B <BIF file>
         // \tBIF file to compare with
         // 
         // -Q weka.classifiers.bayes.net.search.SearchAlgorithm
         // \tSearch algorithm
         // 
         // -E weka.classifiers.bayes.net.estimate.SimpleEstimator
         // \tEstimator algorithm
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.rootMeanSquaredError();
      IBk iBk0 = new IBk(13);
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      RandomCommittee.main(testInstances0.DEFAULT_WORDS);
      String string0 = Evaluation.getGlobalInfo(randomCommittee0);
      assertEquals("\nSynopsis for weka.classifiers.meta.RandomCommittee:\n\nClass for building an ensemble of randomizable base classifiers. Each base classifiers is built using a different random number seed (but based one the same data). The final prediction is a straight average of the predictions generated by the individual base classifiers.", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) votedPerceptron0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.VotedPerceptron:
         // 
         // -I <int>
         // \tThe number of iterations to be performed.
         // \t(default 1)
         // -E <double>
         // \tThe exponent for the polynomial kernel.
         // \t(default 1)
         // -S <int>
         // \tThe seed for the random number generation.
         // \t(default 1)
         // -M <int>
         // \tThe maximum number of alterations allowed.
         // \t(default 10000)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      try { 
        Evaluation.handleCostOption(".arff", 1678);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      try { 
        Evaluation.evaluateModel("@relation", (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name @relation.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XML xML0 = new XML();
      xML0.getHeader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ConverterUtils.DataSource.read((InputStream) null);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
