/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 17:59:13 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7059455872455547
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-9223372036854775802L));
      linkedList0.addFirst(range0);
      linkedList0.addFirst(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of(202L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 202L, 202L);
      Range range2 = range_Builder0.build();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.329716840559713
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775780L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775780L, 9223372036854775780L);
      Range range2 = Range.of(9223372036854775780L, 9223372036854775780L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range1.equals(range2);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4484486833307417
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(13L, 13L);
      Range range1 = Range.of(1L);
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.386495788903917
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 268L, 6503L);
      Range range1 = Range.of(483L, 4294967334L);
      Long long0 = new Long(4294967334L);
      boolean boolean0 = range1.equals(long0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Range range2 = Range.of(1608L);
      boolean boolean1 = range2.equals(range0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.7568740441339528
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(4294967323L);
      linkedList0.addFirst(range0);
      linkedList0.addFirst(range0);
      assertTrue(linkedList0.contains(range0));
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      Range range1 = Range.of(4294967323L, 9223372036854775806L);
      long long0 = range1.getLength();
      assertEquals(9223372032559808484L, long0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6481530713390216
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2474L), 3826L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.toString();
      range0.iterator();
      Range range1 = Range.of((-930L));
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.060601531374581
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(4294967323L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-1164L));
      Range range2 = Range.of((-1815L));
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = (-2147483672L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-2147483672L), (-2147483672L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.633752055650404
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(2147483647L);
      Range.of(2147483647L, 2147483647L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2474L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range1.iterator();
      Range range2 = Range.of(2147483648L);
      range0.equals(range2);
      Range range3 = Range.ofLength(486L);
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483672L), (-2147483672L));
      Range range1 = Range.of((-2147483672L));
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-2147483672L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(13L, 13L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5465506465181935
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(483L, 483L);
      Range range1 = Range.ofLength(483L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(1331L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range2));
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.139468742815857
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 9223372036854775806L;
      Range range0 = Range.ofLength(9223372036854775806L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = range_Builder1.shift(9223372036854775806L);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 6502L, 4294967295L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(6L, 6L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775806L);
      Range range1 = Range.of(0L, 9223372036854775806L);
      range1.equals(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9796434918932646
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483672L), (-2147483672L));
      Range range1 = Range.of((-2147483672L), 0L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(2199L);
      Range range1 = Range.of(2199L, 2199L);
      boolean boolean0 = range1.equals((Object) null);
      assertSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(13L, 13L);
      Range range1 = Range.ofLength(1207L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9796434918932646
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range1 = Range.of((-2147483648L), 0L);
      range0.equals(range1);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0587765179553648
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2066496408781204
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(9223372036854775788L);
      linkedList0.addFirst(range0);
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range1 = Range.of(9223372036854775788L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6377360197491293
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(9223372036854775806L);
      Range range1 = Range.of(0L, 9223372036854775806L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertEquals(0, list1.size());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.891228606131704
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967323L, 4294967323L);
      Long long0 = new Long(4294967295L);
      Long long1 = Long.valueOf(4294967295L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.691730071841714
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertSame(range1, range0);
      assertEquals("[ 0 .. 9223372036854775807 ]/SB", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.943000942028185
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(32767L);
      linkedList0.addFirst(range0);
      linkedList0.addFirst(range0);
      Range.of(32767L, 32767L);
      range0.complementFrom(linkedList0);
      Range.of(272L, 272L);
      // Undeclared exception!
      try { 
        Range.of(32767L, 272L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.9498184157215794
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-1374L), 127L);
      Range range1 = Range.of(127L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      boolean boolean0 = range0.equals(consumer0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(6503L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(3470L, 2147482895L);
      Range range1 = Range.ofLength(2147482895L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6890278560247443
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-971L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.067220724565324
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-409L), 1L);
      Range range1 = Range.of((-1L));
      Range.of((-1L), 127L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(2, list1.size());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.7173181924694445
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(41089L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(41089L);
      Long long0 = new Long(41089L);
      range0.complement(range0);
      Long long1 = new Long(1750671L);
      Range range1 = Range.of((-9223372036854775808L));
      range1.equals(range0);
      Range range2 = Range.of(9223372036854773366L);
      // Undeclared exception!
      try { 
        range1.intersection(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854773366 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(127L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(9223372036854773366L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775780L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.of(9223372036854774477L, 9223372036854774477L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854774477L);
      Long long0 = new Long((-2015L));
      assertEquals((-2015L), (long)long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0687328541069125
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8894206965271843
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long(9223372036854771226L);
      Range range0 = Range.of((-128L));
      range0.iterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -128 .. -128 ]/0B", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(9223372036854775788L);
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2670942167452757
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-32768L), 2147483647L);
      Long long0 = new Long((-32768L));
      range0.equals(range_CoordinateSystem0);
      Range.of((-2369L));
      // Undeclared exception!
      try { 
        Range.ofLength((-2369L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.6799848759879756
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483672L), (-2147483672L));
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse q into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.268712753247533
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.of((-5688L), (-5688L));
      Range range0 = Range.of((-5688L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of(2147450905L, 2147450905L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3875468991391027
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      assertFalse(range1.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range range2 = Range.of(2147483647L);
      boolean boolean0 = range0.equals(range2);
      assertTrue(boolean0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(9223372036854775788L, 9223372036854775788L);
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.4406795806701997
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1219L), 1334L);
      long long0 = range1.getLength();
      assertEquals(2554L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem2);
      String string1 = range1.toString();
      assertEquals("[ -1219 .. 1334 ]/0B", string1);
      
      range0.iterator();
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 6503L, 6503L);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3327482277771465
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854773366L);
      Range range1 = Range.of(9223372036854773366L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range1.complementFrom(list1);
      //  // Unstable assertion: assertTrue(list2.contains(range1));
      //  // Unstable assertion: assertFalse(list2.contains(range0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(13L, 13L);
      long long0 = 1207L;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.508747660783097
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range range1 = Range.of((-1L));
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of(4294967295L);
      range1.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of(0L, 0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-32780L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.755770956626135
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2474L), 2147483647L);
      range0.getEnd(range_CoordinateSystem0);
      range1.toString();
      Iterator<Long> iterator0 = range0.iterator();
      Range range3 = range0.intersection(range2);
      range3.equals(iterator0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.386434750022149
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.of(0L, 0L);
      range0.equals((Object) null);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem1);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertEquals(1L, long0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3385967288168596
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(65535L, 65535L);
      Long long0 = new Long((-194L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(255L);
      Object object0 = new Object();
      range1.equals(object0);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.2159946937682715
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(2199L);
      Range range1 = Range.of(32767L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Long long0 = new Long((-1L));
      range0.equals(long0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.4984429727503206
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.ofLength(2147482191L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147482191L, 2147482191L);
      String string0 = ";;jc3";
      // Undeclared exception!
      try { 
        Range.parseRange(";;jc3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ;;jc3 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483672L), (-2147483672L));
      Range range1 = Range.of((-2147483672L));
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.679780135169393
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
      
      List<Range> list0 = range0.split(1660L);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-32768L), 32767L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-978L));
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-32768L));
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.268523681589375
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of(2147483647L, 2147483647L);
      long long0 = range2.getBegin();
      assertEquals(2147483647L, long0);
      assertFalse(range2.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(2147483905L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(9223372036854771226L);
      Range range1 = Range.ofLength(9223372036854771226L);
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2242924671042137
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(483L, 4294967334L);
      Range range1 = Range.of((-1436L), (-1436L));
      range0.isSubRangeOf(range1);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.250514909666123
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.ofLength(65535L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.6144658733007655
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483641L), (-2147483641L));
      Range range1 = Range.of((-2147483641L), (-2147483641L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.8021819200184863
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of(9L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      range1.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854771206L, (-9223372036854775808L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854771206 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854774842L, (-1949L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1949 would make range [9223372036854774842 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.7159172449865414
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(6503L, 9223372036854775807L);
      range0.toString();
      range0.iterator();
      Range range1 = Range.of(2198L);
      Range range2 = range1.intersection(range0);
      range2.intersects(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.intersects(range1);
      Object object0 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range range1 = Range.of(1L, 1L);
      range0.intersection(range1);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.442799634904145
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Iterator<Long> iterator0 = range0.iterator();
      range0.equals(iterator0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(0L);
      range1.split(1L);
      range0.getEnd();
      Range.ofLength(29L);
      range1.iterator();
      range0.iterator();
      range1.isSubRangeOf(range0);
      Range range2 = Range.ofLength(9997L);
      range2.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem1);
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775806L);
      Range range1 = Range.of(0L, 9223372036854775806L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.endsBefore(range0);
      //  // Unstable assertion: assertTrue(range0.equals((Object)range1));
      //  // Unstable assertion: assertNotSame(range0, range1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(3608L, 3608L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.483498938360309
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.of((-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.5896418931342247
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.ofLength(9223372036854775806L);
      linkedList0.addFirst(range0);
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
      
      Range range1 = Range.of(9223372036854775806L, 9223372036854775806L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.3319664612631987
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854773366L);
      Range range1 = Range.of(9223372036854773366L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-2147483641L), 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854773366L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.2659220555731143
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range1.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.676347345706308
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(41089L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long0 = new Long(41089L);
      range_Builder0.expandEnd(41089L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Long long1 = new Long(41089L);
      range0.equals(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 41089 .. 41090 ]/SB", string0);
      
      range0.iterator();
      Range range1 = Range.parseRange("[ 41089 .. 41090 ]/SB", range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.387833686830175
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range range2 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B");
      boolean boolean0 = range2.equals(range1);
      assertTrue(boolean0);
      
      range0.asRange();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2525348031068706
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2147483649L), (-2147483649L));
      Range range0 = Range.of((-2147483649L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.2023030746654286
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2804L), 1L);
      Range range1 = Range.of(2172L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-19L), (-19L));
      Range range1 = Range.of((-19L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(467L, 4294967334L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.301586756692573
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(3511L, 3511L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 3511 .. 3511 ]/0B", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range_CoordinateSystem1.getAbbreviatedName();
      assertEquals("SB", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(0L, 9223372036854775481L);
      Long long0 = new Long(0L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.6140240414072085
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range range1 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      long long0 = range1.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.4920578471919637
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(483L);
      Range range1 = Range.ofLength(483L);
      Range range2 = Range.of(483L, 483L);
      boolean boolean0 = range0.startsBefore(range2);
      assertTrue(boolean0);
      
      Range range3 = Range.of(9223372036854775795L);
      range0.equals(range3);
      assertSame(range0, range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.688750001065033
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.688750001065033
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range0);
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(6503L, 9223372036854775807L);
      range0.getBegin();
      Object object0 = new Object();
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.1354076945787623
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(668L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 126L, 668L);
      Range range2 = range0.intersection(range1);
      assertNotSame(range1, range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(6502L, 6502L);
      boolean boolean0 = range0.equals("[}");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.541166733025435
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-17L), (-17L));
      Range range1 = Range.ofLength(1207L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.20450410181143
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(483L);
      Range range1 = Range.of(483L, 483L);
      Range range2 = range0.intersection(range1);
      assertSame(range1, range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(1467L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.519449779615817
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483672L), (-2147483672L));
      Range range1 = Range.of((-2147483672L), 0L);
      range1.equals("length can not be less than 0");
      long long0 = range1.getEnd();
      assertEquals(0L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-2147483672L), (-1452L));
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem2);
      assertNotSame(range0, range2);
      assertFalse(range0.equals((Object)range1));
      assertEquals((-2147483672L), long1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.460362570108328
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long long0 = 9223372036854775806L;
      Range range0 = Range.ofLength(9223372036854775806L);
      range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addFirst(range0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775806L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(1455L);
      Range range1 = Range.ofLength(1455L);
      range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.66922026851607
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(483L, 483L);
      Range range1 = Range.ofLength(483L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.1323906629485916
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.ofLength(2147483905L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(2147483905L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4424469472939303
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(2199L);
      Range range1 = Range.of(2199L, 2199L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertSame(range1, range0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.080210692235636
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(65536L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(2199L);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(2199L, 32767L);
      Range range1 = range_Builder0.build();
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getBegin();
      Object object0 = new Object();
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.0670219330561372
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(4294967314L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(9223372036854775806L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.5825092772535942
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-32768L), (-32768L));
      range0.forEach(consumer0);
      range0.iterator();
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.446290125546827
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775789L), (-9223372036854775789L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = (-681L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-681L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.676552328846445
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(13L, 13L);
      Range.Builder range_Builder0 = new Range.Builder(13L);
      Range.Builder range_Builder1 = range_Builder0.shift(13L);
      Range range1 = range_Builder1.build();
      range0.complement(range1);
      range_Builder0.expandBegin(13L);
      range_Builder1.copy();
      range_Builder0.expandBegin(927L);
      Long long0 = new Long((-1L));
      Range range2 = Range.ofLength(13L);
      Object object0 = new Object();
      range2.equals(object0);
      Range range3 = range_Builder1.build();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.1313650219229507
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-964L));
      range_Builder0.expandEnd(4582L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.981410146291498
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(3548L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder1.build();
      range_Builder1.contractBegin((-1L));
      range0.isSubRangeOf(range1);
      Range range2 = range_Builder1.build();
      assertFalse(range2.isEmpty());
      
      List<Range> list0 = range0.split(3548L);
      assertFalse(list0.contains(range2));
      assertSame(range0, range1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.3568020042540603
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      String string0 = range0.toString();
      assertEquals("[ -1 .. -1 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Long long0 = new Long((-1L));
      range0.isEmpty();
      long long1 = range0.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.2005875145350458
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      List<Range> list0 = range0.split(9223372036854775807L);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(9223372036854775806L, 9223372036854775806L);
      Range range1 = Range.of(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854775807L, long0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1159572496416303
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(6503L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 6502 ]/0B", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(65535L, 37L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1325L, 1325L);
      range_Builder0.shift(1325L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1325L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$LongStartIntLengthRange", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$LongStartIntLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(815L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 467L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(1207L, 1207L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(2147482895L, 3500L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.450398458817882
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(4294967324L);
      long long0 = range0.getEnd();
      assertEquals(4294967323L, long0);
      
      Range range1 = Range.of(4294967324L, 4294967324L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.299979556435421
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.3570462044982605
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.getEnd();
      String string0 = range0.toString();
      assertEquals("[ -1 .. -1 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.6761526896635357
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = range0.asRange();
      List<Range> list0 = range1.split(2147483647L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.270991278150324
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.ofLength(1455L);
      List<Range> list0 = range0.split(255L);
      assertEquals(6, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.129966420524349
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.spliterator();
      Long long0 = new Long((-1L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(127L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.3290811126512576
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-128L), 1047L);
      range_Builder0.contractEnd((-128L));
      range_Builder0.build();
      range_Builder0.build();
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long long0 = 41089L;
      Range range0 = Range.of(41089L, 41089L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(3976L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-2932L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.3862395264912064
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range1.complement(range0);
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
      
      Range range2 = Range.of(2147483647L);
      boolean boolean0 = range2.equals((Object) null);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }
}
