/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 18:01:00 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("2y'R:gV'_", jSONObject0);
      jSONObject0.names();
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("app", 896.24);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("2y'R:gV'_");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      Long long0 = new Long(0L);
      Float float0 = new Float(2168.9F);
      hashMap0.put(long0, float0);
      Long.getLong("66<S=a$@O");
      Float float1 = new Float(1.0);
      hashMap0.put((Long) null, float1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0329233799129258
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double((-177.3052684010047));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "false";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("false", "false");
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertFalse(boolean0);
      
      String string0 = JSONObject.doubleToString((-177.3052684010047));
      assertEquals("-177.3052684010047", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("isvalueOf", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1000039501699495
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Boolean boolean0 = new Boolean("Hrd@jg\"Y@T1 s");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("Hrd@jg\"Y@T1 s", jSONArray0);
      jSONObject0.toString((-4011), (-4011));
      jSONObject0.put("{\n\"java.lang.String@0000000005\": [],\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}", 720L);
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000005\": [],\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.309587601699723
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "istoJSONArray";
      JSONObject jSONObject1 = jSONObject0.put("istoJSONArray", (-595.87));
      jSONObject0.optInt("istoJSONArray");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      hashMap0.remove((Object) jSONObject0, (Object) jSONObject1);
      JSONObject jSONObject2 = jSONObject0.put("istoJSONArray", (Collection) linkedList0);
      try { 
        jSONObject2.getString("yVf&m7Ao(q'2wS5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"yVf&m7Ao(q'2wS5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "istoUnsignedLong";
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("istoUnsignedLong", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2483298646280048
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(")hOVjHl]r", 0.0);
      jSONObject0.getInt(")hOVjHl]r");
      JSONObject jSONObject2 = jSONObject0.put(" at character ", false);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1785118019005787
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Double double0 = new Double((-3.679460985892354));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(":.Fs2k)E");
      Double double1 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      double double1 = 0.0;
      Double.min(0.0, 0.0);
      Double.isFinite(1.0);
      Double.min(0.0, (-1.0));
      Double.min(Double.NaN, 1.0);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.51076957816208
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Double double0 = new Double(3008.931261988298);
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("qlL4ax??]_\"@", hashMap0);
      JSONObject.quote("qlL4ax??]_\"@");
      String string0 = JSONObject.quote("qlL4ax??]_\"@");
      assertEquals("\"qlL4ax??]_\\\"@\"", string0);
      
      jSONObject1.put("qlL4ax??]_\"@", 0L);
      Float float0 = new Float((-1.0));
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject1.getDouble("qlL4ax??]_\"@");
      jSONObject1.names();
      jSONObject2.toString();
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3847257578340364
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoHexString", (-1524.19));
      double double0 = jSONObject1.getDouble("gettoHexString");
      assertEquals((-1524.19), double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float(114.0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) float0);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("cop", true);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray1);
      assertEquals(1, jSONArray2.length());
      
      boolean boolean0 = jSONObject1.optBoolean("cop");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.putOpt("gettoString", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("gettoString");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3109830342456608
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Boolean boolean0 = new Boolean("Hrd@jg\"Y@T1 s");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("Hrd@jg\"Y@T1 s", jSONArray0);
      JSONObject jSONObject2 = jSONObject0.append("Hrd@jg\"Y@T1 s", boolean0);
      jSONObject1.length();
      jSONObject1.optJSONArray("Hrd@jg\"Y@T1 s");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject2.put("Hrd@jg\"Y@T1 s", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("", jSONArray0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0516309349741753
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Object> hashMap1 = new HashMap<Double, Object>(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("H_q,}+Y/'f3'z;x]-7", (Map) hashMap1);
      JSONObject.quote("H_q,}+Y/'f3'z;x]-7");
      Float float0 = new Float(0.0);
      jSONObject1.length();
      jSONObject0.optJSONObject("H_q,}+Y/'f3'z;x]-7");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5179816404051354
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("C<#l", "C<#l");
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.getJSONArray("C<#l");
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.732909091992307
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(52);
      Short short0 = new Short((short)123);
      jSONObject0.putOpt("ishashCode", short0);
      stringWriter0.append('^');
      jSONObject0.write(stringWriter0);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      
      double double0 = jSONObject0.optDouble("ishashCode");
      assertEquals(123.0, double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Boolean boolean0 = new Boolean("lQZ{GT$3z_JALn]h&");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5212022523213995
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArray[", hashMap0);
      String string0 = JSONObject.quote("JSONArray[");
      String string1 = jSONObject1.toString(2590, (-172));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "{h2@1p{(s/.CH2}<";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{h2@1p{(s/.CH2}<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {h2@1p{(s/.CH2}<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.109091891672855
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("w/");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("w/", jSONArray0);
      Byte byte0 = new Byte((byte) (-29));
      Byte.compare((byte)61, (byte)97);
      JSONObject jSONObject2 = jSONObject1.accumulate(",", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      long long0 = new Integer((byte)61);
      Long long1 = new Long(0L);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optInt("equ");
      Writer writer0 = jSONArray0.write(stringWriter0);
      // Undeclared exception!
      jSONObject2.write(writer0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7280561480506345
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(52);
      Short short0 = new Short((short)123);
      JSONObject jSONObject1 = jSONObject0.putOpt("ishashCode", short0);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      jSONObject1.put("isbooleanValue", (Map) hashMap0);
      jSONObject0.write(stringWriter0);
      String[] stringArray0 = new String[5];
      jSONObject1.names();
      double double0 = jSONObject0.optDouble("ishashCode");
      assertEquals(123.0, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8033455593810737
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("|7a");
      try { 
        jSONObject0.put((String) null, (-775));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2700999245402291
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("w/");
      Boolean.valueOf("getgetLong");
      jSONObject0.opt((String) null);
      JSONObject.valueToString(jSONObject0);
      int int0 = 12;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9498522373790093
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[4] = "Hrd@jg\"Y@T1 s";
      stringArray0[5] = "getoptJSONArray";
      JSONObject jSONObject0 = new JSONObject(",O$kUSP>'P^o$:A/0", stringArray0);
      Long long0 = new Long(1L);
      JSONObject jSONObject1 = jSONObject0.put("|00hO", 1L);
      Long.max(0L, 917L);
      JSONObject jSONObject2 = new JSONObject();
      long long1 = jSONObject2.optLong("Hrd@jg\"Y@T1 s");
      assertEquals(0L, long1);
      
      boolean boolean0 = jSONObject0.isNull("Hrd@jg\"Y@T1 s");
      assertTrue(boolean0);
      
      jSONObject2.optInt("N|6H2@4('Fi,H?}<)");
      JSONObject jSONObject3 = new JSONObject(jSONObject2, stringArray0);
      JSONArray jSONArray0 = jSONObject3.names();
      assertNull(jSONArray0);
      
      jSONObject0.optJSONObject("Hrd@jg\"Y@T1 s");
      int int0 = jSONObject1.optInt("lo", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("lk5${", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("lk5${", (Object) null);
      jSONObject0.isNull("lk5${");
      try { 
        jSONObject1.getInt("lk5${");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lk5${\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("=NOz", (Object) null);
      try { 
        jSONObject1.getBoolean("=NOz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=NOz\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8454974069722634
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Gm8)ssEd@c+Ao", "Gm8)ssEd@c+Ao");
      jSONObject0.getString("Gm8)ssEd@c+Ao");
      try { 
        jSONObject0.getString("n7MIkT09F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n7MIkT09F\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.20296116421579
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(2241);
      jSONObject0.put("", (Object) integer0);
      jSONObject0.optLong("");
      int int0 = new Integer(2241);
      jSONObject0.optJSONObject("&<Ywh;<6)?z Vp|");
      try { 
        jSONObject0.getInt("&<Ywh;<6)?z Vp|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&<Ywh;<6)?z Vp|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-2228.50391));
      jSONObject0.toString();
      JSONObject.getNames(jSONObject0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("gept", "gept");
      jSONObject1.toString(1, (-2940));
      jSONObject1.put("gept", (long) 1);
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}");
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "{^l|rD:Ij&";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{^l|rD:Ij&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {^l|rD:Ij&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("{}");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.062544422889415
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = JSONObject.quote("h&hPEyA\"w_C");
      assertEquals("\"h&hPEyA\\\"w_C\"", string0);
      
      Byte byte0 = new Byte((byte) (-36));
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"h&hPEyA\"w_C\"";
      stringArray0[1] = "\"h&hPEyA\"w_C\"";
      stringArray0[2] = "\"h&hPEyA\"w_C\"";
      stringArray0[3] = "h&hPEyA\"w_C";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put("#9X:%{:We)K(D& Q/", (Object) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = jSONObject1.toString((int) (byte) (-36), (int) (byte) (-36));
      assertEquals("{}", string1);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, 0L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.993492861421494
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Boolean.valueOf("V}O");
      JSONObject jSONObject2 = jSONObject0.putOpt("V}O", hashMap0);
      jSONObject2.get("V}O");
      try { 
        jSONObject1.getBoolean("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.putOpt("gept", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("gept");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", (-1L));
      assertEquals((-1L), long0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("getwait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getwait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = JSONObject.quote("/7FZ/bG^S7@|vjP!");
      assertEquals("\"/7FZ/bG^S7@|vjP!\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.139552183830715
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Short short0 = new Short((short)9);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("getwait", (double) (short)9);
      jSONObject1.optDouble("getwait", 0.0);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(3274.543074707444);
      assertEquals("3274.543074707444", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.167807122180084
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("x;,=", 0.0);
      jSONObject1.optDouble("x;,=");
      try { 
        jSONObject0.getBoolean("x;,=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x;,=\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.clear();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.698793668685918
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(";)/=g|", 1.0);
      jSONObject1.toString((-2767));
      int int0 = jSONObject1.optInt(";)/=g|");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1071024035889305
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt("isequals", object0);
      try { 
        jSONObject0.getBoolean("isequals");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isequals\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.269342386849719
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Float float0 = new Float(0.0);
      linkedList0.add("getcompareTo");
      linkedList0.removeFirstOccurrence(float0);
      int int0 = 2686;
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 2686, 2686);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      jSONObject0.toString(17, 17);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.571505033743328
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.optInt("{", 15);
      Float float0 = new Float((-1.0));
      linkedList0.add(float0);
      int int0 = jSONObject0.optInt("{");
      assertEquals(0, int0);
      
      jSONObject0.optLong("fmp3&9j!is%6g", (long) 0);
      jSONObject0.toString(2017, (-208));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("{", jSONArray0);
      Float float1 = new Float((double) 15);
      linkedList0.offer(float1);
      Float.max(19.935953F, 15);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      
      JSONObject.valueToString(jSONObject1);
      JSONObject.numberToString(float1);
      JSONArray jSONArray2 = jSONObject1.names();
      assertNotSame(jSONArray0, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = Integer.getInteger("to", (-3950));
      JSONObject.valueToString(integer0, 2423, (-3950));
      String[] stringArray0 = JSONObject.getNames((Object) "to");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float float0 = new Float((double) (-3950));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("v3<2YYPR-A", "v3<2YYPR-A");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONObject jSONObject1 = new JSONObject("java.lang.Integer@0000000001", stringArray0);
      jSONObject1.put("v3<2YYPR-A", (Collection) linkedList1);
      jSONObject1.keys();
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.177456155877438
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(45, 45);
      jSONObject0.put("SQ'2(2_D}G\\9DgIfZ", (-1));
      JSONObject.quote("SQ'2(2_D}G\\9DgIfZ");
      jSONObject0.has("SQ'2(2_D}G\\9DgIfZ");
      String string0 = "";
      Object object0 = new Object();
      String string1 = "kB{Aqul@0$:";
      jSONObject0.put("kB{Aqul@0$:", 0L);
      try { 
        jSONObject0.getJSONArray("kB{Aqul@0$:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kB{Aqul@0$:\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!u", "!u");
      try { 
        jSONObject1.append("!u", "!u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[!u] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject.valueToString(linkedList0, (-1183), (-1183));
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-1183));
      try { 
        jSONObject0.append((String) null, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("!aPx=O/~C`_m\"@qAp&", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6083963944770798
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("6RZ[e_T1*+\u0006=RecVqy", 1L);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|,OmGO]!oLA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |,OmGO]!oLA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.33141971105748
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Double double0 = new Double((-2273.019412313015));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-1189));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote("-V,W</OIUH`2|l");
      assertEquals("\"-V,W<\\/OIUH`2|l\"", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!u", true);
      jSONObject0.accumulate("!u", "!u");
      boolean boolean0 = jSONObject0.isNull("!u");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate(":CZ/<#Tw|a'i`0<", (Object) null);
      boolean boolean0 = jSONObject0.isNull(":CZ/<#Tw|a'i`0<");
      assertTrue(boolean0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.355971656207268
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Boolean boolean0 = new Boolean("Hrd@jg\"Y@T1 s");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("Hrd@jg\"Y@T1 s", jSONArray0);
      Object object0 = JSONObject.NULL;
      jSONObject1.put("Hrd@jg\"Y@T1 s", object0);
      jSONObject0.toString((-4010), (-4010));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7545526900669153
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
      
      jSONObject0.toString(674, 2);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.337864149243252
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Float float0 = new Float(0.0);
      linkedList0.removeFirstOccurrence(float0);
      jSONObject0.toString(2686);
      // Undeclared exception!
      jSONObject0.toString(2686);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.1998047732721755
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0, (-1613), (-3230));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("getlongValue", (-1.0));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.3649933896962057
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("Hrd@jg\"Y@T1 s", jSONArray0);
      jSONObject0.toString((-3968), (-3968));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("LDU$%y-W?~", 635.37031050109);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.4082643636359706
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("#heMi|8zs){", true);
      try { 
        jSONObject0.getBoolean("#heMi|8zs){");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#heMi|8zs){\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.3451614688224813
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!u", "!u");
      jSONObject1.isNull("!u");
      try { 
        jSONObject1.getJSONArray("!u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!u\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Boolean.valueOf("getgetLong");
      jSONObject0.opt("getgetLong");
      boolean boolean0 = jSONObject0.optBoolean("getgetLong", false);
      assertFalse(boolean0);
      
      jSONObject0.optJSONArray("getgetLong");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.2292408298387976
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optBoolean("Substring bounds error", false);
      String string0 = "Bad value from toJSONString: ";
      jSONObject0.optLong("Bad value from toJSONString: ");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", jSONArray0);
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte) (-52));
      JSONObject jSONObject2 = jSONObject0.accumulate("] is not a JSONArray.", byte0);
      StringWriter stringWriter0 = new StringWriter();
      Byte.toUnsignedLong((byte)59);
      jSONArray0.toJSONObject((JSONArray) null);
      Long long0 = new Long(0L);
      JSONObject jSONObject3 = jSONObject2.append("j^1_nIc|!UkhXN<-", long0);
      jSONObject1.put("Substring bounds error", false);
      Long.max(0L, 185L);
      JSONObject.valueToString((Object) null, 0, (byte)0);
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject2.write(writer0);
      jSONObject0.toString(0);
      String string1 = "SR3{%\\p rg8It-4Ip";
      jSONObject3.opt("Bad value from toJSONString: ");
      try { 
        jSONObject0.get("SR3{%p rg8It-4Ip");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SR3{%p rg8It-4Ip\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("F");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("!u", "!u");
      jSONObject0.isNull("!u");
      try { 
        jSONObject1.getDouble("!u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!u\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.031504779735075
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("1", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", (-5240));
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.has("R aM9sR=XM");
      Object object0 = new Object();
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.1958378231092612
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString((-4010), (-4010));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("*;z.rgy_S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*;z.rgy_S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.253262043464411
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      JSONObject.getNames(jSONObject0);
      jSONObject1.optString("", "wai");
      try { 
        jSONObject0.getJSONObject("ZwJiZ/]W*;jh<@yZi=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZwJiZ/]W*;jh<@yZi=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.004822822698641
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.putOpt("2y'R:gV'_", object0);
      jSONObject1.remove("2y'R:gV'_");
      try { 
        jSONObject0.getJSONObject("2y'R:gV'_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2y'R:gV'_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("", 0L);
      String string0 = jSONObject1.optString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove((String) null);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getcompare", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.putOpt("2y'R:gV'_", object0);
      try { 
        jSONObject0.getJSONObject("2y'R:gV'_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2y'R:gV'_\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.166330769463752
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("qlLX42x?]]_\"@", hashMap0);
      jSONObject0.optString("\"\"", "{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("|Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|Z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.6932001801496757
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt(",", (-2055));
      assertEquals((-2055), int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = JSONObject.quote(",");
      assertEquals("\",\"", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.9027058216721646
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("' and instead saw '", 413);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.2483298646280048
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("pxc]~vA!'[nE+X", (Collection) linkedList0);
      jSONObject0.put("min", (-4270.209));
      int int0 = jSONObject0.getInt("min");
      assertEquals((-4270), int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.724298670278112
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("[", (Object) "[");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(2241);
      jSONObject0.put("", (Object) integer0);
      jSONObject0.put("", (-1.0));
      jSONObject0.optLong("");
      jSONObject0.getInt("");
      jSONObject0.optJSONObject("&<Ywh;<6)?z Vp|");
      try { 
        jSONObject0.getInt("&<Ywh;<6)?z Vp|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&<Ywh;<6)?z Vp|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.0909193939155815
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("min", 670.0041945228);
      int int0 = jSONObject0.optInt("Expected a ',' or '}'");
      assertEquals(0, int0);
      
      int int1 = jSONObject0.getInt("min");
      assertEquals(670, int1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3561623868707895
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", (-1));
      assertEquals(1, jSONObject0.length());
      
      long long0 = jSONObject0.getLong("0");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = new Double((-208.4277746));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\"h8gu}_~4qmP2=b\"\"";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("\"h8gu}_~4qmP2=b\"\"", object0);
      try { 
        jSONObject1.getLong("\"h8gu}_~4qmP2=b\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"h8gu}_~4qmP2=b\\\"\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("lk5${", "lk5${");
      try { 
        jSONObject1.getInt("lk5${");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lk5${\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoString", "gettoString");
      try { 
        jSONObject1.getBoolean("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.4201876269826015
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.get("d?<=3p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"d?<=3p\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("getgetL9qg", false);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("getgetL9qg");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4215002304496975
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "m;]r8oKub:ux1");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.017442531190551
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("Hrd@jg\"Y@T1 s", jSONArray0);
      StringWriter stringWriter0 = new StringWriter(454);
      StringWriter stringWriter1 = stringWriter0.append('k');
      jSONObject1.write(stringWriter1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.8136605216916037
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Q Oh$}B5m'lA*cw.f", "Q Oh$}B5m'lA*cw.f");
      String string0 = jSONObject1.toString(8192, 8192);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      String string1 = JSONObject.valueToString("{}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long long0 = new Long((-3968));
      String string0 = JSONObject.valueToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.quote("Hrd@jg\"Y@T1 s");
      assertEquals("\"Hrd@jg\\\"Y@T1 s\"", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.6526187399036565
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Hrd@jg\"Y@T1 s");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      jSONObject0.toString(80);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("qlLX42x?]]_\"@", hashMap0);
      jSONObject0.optString("\"\"", (String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.5250996295252914
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.addAll((Collection<? extends String>) linkedList1);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      boolean boolean0 = new Boolean("");
      jSONObject0.optInt("");
      linkedList0.stream();
      jSONObject0.optString("", "");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.7139470156098842
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Hrd@jg\"Y@T1 s");
      // Undeclared exception!
      jSONObject0.toString(2055, 2055);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.4278545372819558
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.3960882220782682
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = new Double(70);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(70);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(125);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("V?5xsRDGE+iH-");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("NR(");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString((Object) null, (-2664), (-2664));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 70, 70);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.3871696044639985
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("~=%/k/Mv4@.!L");
      assertEquals(0L, long0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("-:oVkHV'X7Q");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getInt("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("getlogicalXor");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getlogicalXor
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("X*P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of X*P
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
