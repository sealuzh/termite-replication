/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 18:08:46 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Random;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.RandomTree;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.577137394214398
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.correct();
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation.makeOptionString((Classifier) null, true);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.028380855958322
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom((-1));
      testInstances0.toString();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("weka.packageManager.offline", arrayList0, 1837);
      try { 
        evaluation0.crossValidateModel((Classifier) naiveBayesMultinomial0, instances1, 1224, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1304778859169557
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      SMOreg sMOreg1 = new SMOreg();
      Capabilities capabilities0 = sMOreg1.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances2.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedMatthewsCorrelation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.148943414910776
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      String string0 = evaluation0.num2ShortID(1, charArray0, 2);
      assertEquals("  ", string0);
      
      TestInstances testInstances1 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Evaluation evaluation1 = new Evaluation(instances0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.48837209302325585
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      testInstances0.setRelation(".bsi");
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.falsePositiveRate(959);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.SFEntropyGain();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.SFMeanPriorEntropy();
      assertNotEquals(double4, double3, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1432136814444385
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation.handleCostOption("", (-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_WithClass;
      evaluation1.m_Correct = 391.2687;
      evaluation0.numTruePositives((-2));
      double double1 = evaluation1.correct();
      assertEquals(391.2687, double1, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3628384609307487
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomTree randomTree0 = new RandomTree();
      evaluation0.truePositiveRate((-550));
      SMOreg sMOreg0 = new SMOreg();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives((-1116462894));
      evaluation0.confusionMatrix();
      evaluation1.falsePositiveRate((-550));
      evaluation1.falseNegativeRate((-2));
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation2 = new Evaluation(instances0, costMatrix1);
      evaluation1.trueNegativeRate(0);
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel("-num-slots", instances0, 2, testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: -num-slots
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      char[] charArray0 = new char[6];
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      charArray0[3] = 'g';
      charArray0[4] = ' ';
      charArray0[5] = ' ';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-433), charArray0, (-1842));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9907867545761528
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = '+';
      charArray0[2] = ' ';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-1), charArray0, 533);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6588611674269642
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.trueNegativeRate(0);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6373304995257283
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      instances0.deleteAttributeType((-2));
      evaluation0.KBMeanInformation();
      Object object0 = new Object();
      double double0 = evaluation0.m_WithClass;
      evaluation0.toClassDetailsString("@data");
      evaluation0.m_WithClass = 8.48528137423857;
      evaluation0.meanPriorAbsoluteError();
      evaluation0.numTruePositives((-2));
      evaluation0.totalCost();
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.759198311301149
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.listOptions();
      Instances instances1 = testInstances2.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2;
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8322572455972317
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      evaluation0.m_NoPriors = true;
      Object object0 = new Object();
      evaluation0.unweightedMacroFmeasure();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.SFPriorEntropy();
      double double2 = evaluation0.pctIncorrect();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0048375295934284
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.numFalsePositives(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.confusionMatrix();
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1843752507353837
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      Object object0 = new Object();
      double double0 = evaluation0.m_WithClass;
      evaluation0.numTruePositives((-2));
      evaluation0.SFMeanPriorEntropy();
      try { 
        evaluation0.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5659043264434764
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setRelationName("@data");
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-2);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      doubleArray2[1] = (double) (-2);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (double) (-1);
      doubleArray2[4] = (double) (-1);
      instances0.stringFreeStructure();
      doubleArray2[5] = (double) (-1);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      testInstances0.setNumDate(10);
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      evaluation0.m_ConfusionMatrix = doubleArray1;
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2.0));
      Object object0 = new Object();
      double double0 = evaluation0.m_WithClass;
      evaluation0.numTruePositives((-1));
      evaluation0.toMatrixString();
      evaluation0.toClassDetailsString("FT");
      double double1 = evaluation0.falsePositiveRate(1174);
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(-0.0, double1, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3609093299839157
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed(2014);
      Object object0 = new Object();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      MockRandom mockRandom0 = new MockRandom(2);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor((-676.3), (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.883648858474388
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setRelationName("@data");
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-2);
      doubleArray2[1] = (double) (-2);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (double) (-1);
      doubleArray2[4] = (double) (-1);
      instances0.stringFreeStructure();
      doubleArray2[5] = (double) (-1);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      evaluation0.m_ConfusionMatrix = doubleArray1;
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2.0));
      Object object0 = new Object();
      double double0 = evaluation0.m_WithClass;
      evaluation0.numTruePositives((-1));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.toMatrixString();
      evaluation0.toClassDetailsString("FT");
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.216307150112043
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toSummaryString();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.setPriors(instances0);
      SGDText sGDText0 = new SGDText();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) sGDText0, instances0, objectArray0);
      evaluation0.rootMeanPriorSquaredError();
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(55.0, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
      assertEquals(0.3903225806451613, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setModel");
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.2000000029802322);
      evaluation0.toMatrixString();
      evaluation0.trueNegativeRate((-1));
      evaluation0.addNumericTrainClass(391.2687, (-1));
      evaluation0.numInstances();
      evaluation0.toSummaryString(false);
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      MockRandom mockRandom0 = new MockRandom((-1));
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 450);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updateStatsForPredictor(1.0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.793667517139796
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumNominalValues(26);
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      String string1 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedFalseNegativeRate();
      String string2 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string2);
      
      evaluation0.precision(0);
      evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      Object object0 = new Object();
      double double1 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      double double2 = evaluation0.weightedAreaUnderROC();
      double double3 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.pctIncorrect();
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double5, double0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8075685379354076
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinearRegression linearRegression0 = new LinearRegression();
      Capabilities capabilities0 = linearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toSummaryString();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.rootRelativeSquaredError();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2272.1579598715);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3401242612177118
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.weightedFalseNegativeRate();
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      evaluation2.errorRate();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-2);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray1, sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      evaluation0.num2ShortID((-195225789), charArray0, 2);
      TestInstances testInstances1 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.areaUnderPRC((-195225789));
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.setRelationName("@data");
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[8][9];
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-2);
      doubleArray2[1] = (double) (-2);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (double) (-1);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = (double) (-1);
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      evaluation0.m_ConfusionMatrix = doubleArray1;
      doubleArray0[0] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      Object object0 = new Object();
      double double0 = evaluation0.m_WithClass;
      evaluation0.numTruePositives((-1));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.toMatrixString();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3641024099675247
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.setClassIndex((-110));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setNumDate(3305);
      double double0 = evaluation0.pctIncorrect();
      double double1 = new Float((double) (-2));
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertNotNull(doubleArray0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(2, doubleArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      double double0 = evaluation0.numFalseNegatives(20);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2282.728);
      Object object0 = new Object();
      evaluation0.toMatrixString();
      evaluation0.m_SumClass = Double.NaN;
      evaluation0.trueNegativeRate((-2));
      evaluation0.addNumericTrainClass((-1), (-2));
      evaluation0.numInstances();
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.771123643327228
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1));
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-2);
      doubleArray1[4] = (double) (-2);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) (-2);
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toSummaryString();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.rootRelativeSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.weightedFalseNegativeRate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.131251010400076
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Capabilities capabilities0 = additiveRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      String[] stringArray0 = new String[5];
      cVParameterSelection0.setClassifier((Classifier) null);
      stringArray0[0] = "\tMust handle binary attributes.";
      stringArray0[1] = "getAutoBuild";
      stringArray0[2] = "kvdc8{=";
      stringArray0[3] = "A{j|m.)Ud7vv5}N%=";
      cVParameterSelection0.setSeed(149);
      stringArray0[4] = "package weka.classifiers;\n";
      try { 
        Evaluation.evaluateModel((Classifier) cVParameterSelection0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.SingleClassifierEnhancer", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4804244844703627
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      SparseInstance sparseInstance0 = new SparseInstance(4.9E-324, doubleArray0);
      testInstances0.setNumRelationalNominalValues(44);
      evaluation0.falsePositiveRate((-2));
      evaluation0.meanPriorAbsoluteError();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("5=Wk$H-B]7wmE+tART");
      testInstances0.setRelation("getShrinkage");
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6268684772788133
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[2] = 1;
      intArray0[3] = (-2);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) "normalizeAttributesTipText";
      objectArray0[3] = (Object) 1;
      Object object0 = new Object();
      double double1 = evaluation0.falsePositiveRate(1);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.565466108252186
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.toString();
      Object object0 = new Object();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      MockRandom mockRandom0 = new MockRandom(2);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.SFMeanPriorEntropy();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.3427397799622627
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      SparseInstance sparseInstance0 = new SparseInstance((-196.2973363236), doubleArray0);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.m_WithClass = 1.0E-4;
      evaluation3.errorRate();
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.684267075303933
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      evaluation0.matthewsCorrelationCoefficient(70);
      testInstances0.setRelation((String) null);
      evaluation0.toClassDetailsString("getValidationThreshold");
      int[] intArray0 = new int[2];
      intArray0[0] = 14;
      intArray0[1] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10.0, intArray0, 14);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0753075059743384
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1));
      evaluation0.toCumulativeMarginDistributionString();
      testInstances0.setNumRelationalNominal(25);
      evaluation0.toSummaryString();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.setPriors(instances0);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, 3);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.272539375087381
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      testInstances0.toString();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.567253591056754
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      String string1 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedFalseNegativeRate();
      String string2 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string2);
      
      evaluation0.precision((-1));
      double double0 = evaluation0.recall((-482));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      instances0.setRelationName(" ");
      DenseInstance denseInstance0 = new DenseInstance(124);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3401242612177118
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2629.19234196995;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      evaluation1.errorRate();
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.7378008113384205
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.setRelationName("@data");
      double[] doubleArray0 = new double[12];
      testInstances0.toString();
      doubleArray0[1] = (double) (-1);
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toSummaryString();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.weightedPrecision();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.toClassDetailsString();
      // Undeclared exception!
      try { 
        evaluation1.precision(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7207381228860728
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = 1.0;
      evaluation0.SFPriorEntropy();
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.numTruePositives(1);
      evaluation0.totalCost();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 523.0355;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (-4203.082366741);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-2);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomTree randomTree0 = new RandomTree();
      instances0.deleteAttributeType(101);
      double double0 = evaluation0.m_SumClass;
      evaluation0.KBMeanInformation();
      evaluation0.priorEntropy();
      evaluation0.numFalsePositives(1178);
      evaluation0.confusionMatrix();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5280928638631737
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2282.728);
      Object object0 = new Object();
      evaluation0.unweightedMacroFmeasure();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      evaluation0.weightedAreaUnderROC();
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      boolean boolean0 = false;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray1, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0343946195677223
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      LinearRegression linearRegression0 = new LinearRegression();
      linearRegression0.getCapabilities();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.toSummaryString();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      SMOreg sMOreg0 = new SMOreg();
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.numFalseNegatives(0);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      MockRandom mockRandom0 = new MockRandom((-2));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8399215810545426
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ClassPriorsSum = 10.0;
      testInstances0.clone();
      Evaluation evaluation1 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      double[] doubleArray0 = new double[0];
      evaluation1.m_MarginCounts = doubleArray0;
      try { 
        evaluation1.toCumulativeMarginDistributionString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.evaluateModel(" ", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      try { 
        evaluation0.crossValidateModel("@relation", instances1, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.3299375040020918
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2282.728);
      Object object0 = new Object();
      double double0 = evaluation0.m_WithClass;
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.numTruePositives((-2));
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3164648855394714
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) 2837;
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(2837, doubleArray0);
      BallNode ballNode0 = new BallNode((-2), 2837, (-1), sparseInstance0, (-2.0));
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      instances0.add(instance0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) (-2);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.41198762861555
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[2];
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
      Object object0 = new Object();
      double double0 = evaluation0.m_WithClass;
      evaluation0.meanPriorAbsoluteError();
      evaluation0.numTruePositives((-2));
      double double1 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.227096734974258
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      instances0.setRelationName("getNormalizeNumericClass");
      double[] doubleArray0 = new double[3];
      testInstances0.getRevision();
      doubleArray0[0] = (double) (-2);
      instances0.toSummaryString();
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.falseNegativeRate((-1));
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.numTrueNegatives(0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".arff");
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      MockRandom mockRandom0 = new MockRandom(2);
      Object[] objectArray0 = new Object[1];
      try { 
        evaluation0.crossValidateModel((Classifier) filteredClassifier0, instances0, 1837, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      testInstances0.setRelation("getValidationThreshold");
      testInstances0.getRelationalClassFormat();
      evaluation0.pctUnclassified();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("useKernelEstimatorTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteAttributeType(915);
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, (Instance) null, 1.050000000745058);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0953521276386664
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".bsi");
      double double0 = evaluation0.pctUnclassified();
      evaluation0.relativeAbsoluteError();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      Vote vote0 = new Vote();
      DenseInstance denseInstance0 = new DenseInstance(116);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) vote0, (Instance) denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootRelativeSquaredError();
      Vote vote0 = new Vote();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(textDirectoryLoader0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) vote0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Object object0 = new Object();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      MockRandom mockRandom0 = new MockRandom((-1));
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        evaluation0.crossValidateModel((Classifier) additiveRegression0, instances0, 1282, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      instances0.setRelationName("getNormalizeNumericClass");
      double[] doubleArray0 = new double[2];
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((-2737.87514), (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2737
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation(".bsi");
      evaluation0.unweightedMicroFmeasure();
      SparseInstance sparseInstance0 = new SparseInstance((-2195.634894), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5957551458109667
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      String string0 = evaluation0.toClassDetailsString(".arff");
      assertEquals(".arff\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate();
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      TestInstances testInstances1 = new TestInstances();
      double double0 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String string0 = evaluation0.toMatrixString("@data");
      assertEquals("@data\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      RandomTree randomTree0 = new RandomTree();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(randomTree0);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      boolean boolean0 = evaluation0.equals(additiveRegression0);
      assertFalse(boolean0);
      
      LWL lWL0 = new LWL();
      double double0 = evaluation1.priorEntropy();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      evaluation0.trueNegativeRate(323);
      evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.SFMeanEntropyGain();
      assertNotEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      instances0.deleteAttributeType((-2));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0179153170053152
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getRevision();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SparseInstance sparseInstance0 = new SparseInstance(97);
      instances0.add((Instance) sparseInstance0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomTree randomTree0 = new RandomTree();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(randomTree0);
      evaluation0.toCumulativeMarginDistributionString();
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.toSummaryString();
      evaluation0.setNumericPriorsFromBuffer();
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.weightedFalseNegativeRate();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, Double.NaN);
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[0] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-2), (-247.981230504));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 32, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.falsePositiveRate((-2));
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.correct();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      double double1 = evaluation0.avgCost();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      double double0 = evaluation0.m_TotalCost;
      instances0.setRelationName("-file");
      evaluation0.areaUnderROC((-2));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      assertFalse(textDirectoryLoader0.getOutputFilename());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("useKernelEstimatorTipText");
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.deleteAttributeType(915);
      evaluation0.truePositiveRate(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      try { 
        Evaluation.evaluateModel((Classifier) null, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.215155951350159
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomTree randomTree0 = new RandomTree();
      evaluation0.truePositiveRate((-550));
      evaluation0.weightedTrueNegativeRate();
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.SFMeanPriorEntropy();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.429668057110678
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      naiveBayesUpdateable0.getTechnicalInformation();
      Evaluation.getGlobalInfo(naiveBayesUpdateable0);
      DecisionStump decisionStump0 = new DecisionStump();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(regressionByDiscretization0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BayesNet bayesNet0 = new BayesNet();
      evaluation0.toSummaryString();
      evaluation0.trueNegativeRate(121);
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.433427699337437
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances1 = new TestInstances();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      testInstances0.getWords();
      evaluation0.trueNegativeRate((-622));
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.m_SumSchemeEntropy;
      double double2 = evaluation0.SFMeanEntropyGain();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.kappa();
      assertEquals(1.0, double3, 0.01);
      
      evaluation0.rootMeanSquaredError();
      assertEquals(1.0, evaluation0.kappa(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.9971404513981685
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1));
      double double0 = evaluation0.pctIncorrect();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      double double2 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      String string0 = Evaluation.getGlobalInfo(multilayerPerceptron0);
      assertEquals("\nSynopsis for weka.classifiers.functions.MultilayerPerceptron:\n\nA Classifier that uses backpropagation to classify instances.\nThis network can be built by hand, created by an algorithm or both. The network can also be monitored and modified during training time. The nodes in this network are all sigmoid (except for when the class is numeric in which case the the output nodes become unthresholded linear units).", string0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression(multilayerPerceptron0);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      double double0 = evaluation0.trueNegativeRate(254);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.falsePositiveRate(254);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.setRelationName("@data");
      M5P m5P0 = new M5P();
      Evaluation.makeOptionString(m5P0, true);
      try { 
        Evaluation.handleCostOption(".bsi", (-313));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.7776548678356363
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      System.setCurrentTimeMillis((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      String string1 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      double double1 = evaluation1.numTrueNegatives((-796));
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      evaluation0.unweightedMicroFmeasure();
      evaluation0.falsePositiveRate(959);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.rootRelativeSquaredError();
      double double0 = evaluation0.precision(1092);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 835.48139190407;
      doubleArray0[1] = 835.48139190407;
      doubleArray0[2] = 835.48139190407;
      doubleArray0[3] = 835.48139190407;
      doubleArray0[4] = 835.48139190407;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 835.48139190407);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.matthewsCorrelationCoefficient((-1797656637));
      evaluation0.setDiscardPredictions(true);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setRelation("Numeric value to be used for selection on numeric attribute. Instances with values smaller than given value will be selected.");
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8149376608997776
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.SFMeanEntropyGain();
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      try { 
        evaluation1.evaluateModelOnce(Double.NaN, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_TrainClassWeights;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("5=Wk$H-B]7wmE+tART");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.setRelation("Performance Guarantees for Hierarchical Clustering");
      double[] doubleArray0 = evaluation0.makeDistribution(0.25);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      double double0 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Decision Stump: No model built yet.";
      stringArray0[1] = "Decision Stump: No model built yet.";
      stringArray0[2] = "Decision Stump: No model built yet.";
      boolean boolean0 = false;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 90;
      Instances instances0 = new Instances((String) null, arrayList0, 90);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      double double0 = evaluation0.matthewsCorrelationCoefficient(70);
      evaluation0.setDiscardPredictions(false);
      testInstances0.setRelation("getValidationThreshold");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      testInstances0.getRelationalClassFormat();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.pctUnclassified();
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      RandomTree randomTree0 = new RandomTree();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(randomTree0);
      evaluation0.equals((Object) null);
      LWL lWL0 = new LWL();
      assertEquals("If set to true, classifier may output additional info to the console.", lWL0.debugTipText());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression(multilayerPerceptron0);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      evaluation0.equals(randomCommittee0);
      LWL lWL0 = new LWL();
      assertEquals("If set to true, classifier may output additional info to the console.", lWL0.debugTipText());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[8];
      testInstances0.setRelation("JiCQPq3\"");
      objectArray0[0] = (Object) (-1);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.setOptions(testInstances0.DEFAULT_WORDS);
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "getLearningRate");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.181248372811577
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootMeanPriorSquaredError();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      try { 
        Evaluation.evaluateModel((Classifier) votedPerceptron0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.VotedPerceptron:
         // 
         // -I <int>
         // \tThe number of iterations to be performed.
         // \t(default 1)
         // -E <double>
         // \tThe exponent for the polynomial kernel.
         // \t(default 1)
         // -S <int>
         // \tThe seed for the random number generation.
         // \t(default 1)
         // -M <int>
         // \tThe maximum number of alterations allowed.
         // \t(default 10000)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.3413195272400187
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (-2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.toSummaryString("@data", false);
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.0736556314531835
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      instances0.setRelationName("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_Correct;
      evaluation1.toSummaryString(" ", true);
      try { 
        evaluation1.evaluateModel((Classifier) null, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.avgCost();
      double double1 = evaluation0.pctIncorrect();
      double double2 = evaluation0.SFSchemeEntropy();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      double double3 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double3, double1, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      evaluation0.KBInformation();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      double double1 = evaluation0.pctIncorrect();
      double double2 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.unclassified();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "7gxPqxoW~");
      assertNotNull(string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(2718.99764768);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2718
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.4782898863984224
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.numTrueNegatives(1880);
      BayesNet bayesNet0 = new BayesNet();
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        evaluation0.evaluateModel((Classifier) bayesNet0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Evaluation.getGlobalInfo(naiveBayesUpdateable0);
      DecisionStump.main(testInstances0.DEFAULT_WORDS);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.setOptions(testInstances0.DEFAULT_WORDS);
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, " ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      double[] doubleArray0 = new double[5];
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2282.728);
      instances0.toSummaryString();
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives((-1));
      evaluation0.toCumulativeMarginDistributionString();
      Object object0 = new Object();
      IBk iBk0 = new IBk();
      try { 
        evaluation0.evaluateModel((Classifier) iBk0, instances0, (Object[]) iBk0.TAGS_WEIGHTING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Evaluation.makeOptionString(multilayerPerceptron0, true);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      LWL lWL0 = new LWL();
      assertEquals("Determines weighting function. [0 = Linear, 1 = Epnechnikov,2 = Tricube, 3 = Inverse, 4 = Gaussian and 5 = Constant. (default 0 = Linear)].", lWL0.weightingKernelTipText());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.handleCostOption("t", 686);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, (-2));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.toString();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "Decision Stump: No model built yet.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = true;
      BayesNet bayesNet0 = new BayesNet();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
