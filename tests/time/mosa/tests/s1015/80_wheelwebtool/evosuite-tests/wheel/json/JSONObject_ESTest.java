/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 01:42:49 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf("X%1g+yZ-/C_ CpP2t[@");
      linkedList0.add(boolean0);
      jSONObject0.put("wdWg\"3%", (Collection) linkedList0);
      String string0 = JSONObject.quote("_LoJ]9X{KLf</N");
      assertEquals("\"_LoJ]9X{KLf<\\/N\"", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3766433129940294
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("] not found.", (-2083.456854));
      boolean boolean0 = jSONObject0.optBoolean("] not found.", true);
      boolean boolean1 = jSONObject0.isNull("] not found.");
      assertFalse(boolean1 == boolean0);
      
      int int0 = jSONObject0.getInt("] not found.");
      assertEquals((-2083), int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5985252261572267
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("JSON does not allow non-finite numbers.", true);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optBoolean("JSON does not allow non-finite numbers.", true);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)2855);
      linkedList0.add(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((int) (short)2855, (long) (short)2855);
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject0.keys();
      JSONObject.quote(",");
      String string0 = "h@w-K5'G8Mvp59f@w&(";
      StringWriter stringWriter0 = new StringWriter((short)2855);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "h@w-K5'G8Mvp59f@w&(");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "JSON does not allow non-finite numbers.", (int) (short)2855, (-1934));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7436142215758546
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float((-1372.7F));
      Float.isFinite((-1372.7F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getInt("S{0;Vs3JNvWOdqGs*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"S{0;Vs3JNvWOdqGs*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9649279290481876
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double((-2083.72622183188));
      Double.sum((-2083.72622183188), (-1932.215812));
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min(0.0, (-2732.0));
      JSONObject jSONObject1 = jSONObject0.put("?okFQMX_x?xx1?", 0L);
      jSONObject1.getInt("?okFQMX_x?xx1?");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0389712786066236
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("equ", (Object) "equ");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      boolean boolean0 = jSONObject0.optBoolean("equ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5054434290955876
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("'3,MQ5(s", 0.0);
      double double0 = jSONObject1.optDouble("'3,MQ5(s");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8391486576568163
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) hashMap0);
      jSONObject0.put("{;F", 1L);
      JSONObject.getNames((Object) "Bad value from toJSONString: ");
      jSONObject1.toString((-2723), (-2723));
      int int0 = jSONObject1.optInt("{;F");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5626057528901112
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("Q3.e5", jSONArray0);
      JSONObject.quote(")s(Oa-{T/`c-");
      String string0 = JSONObject.quote("\")s(Oa-{T/`c-\"");
      assertEquals("\"\\\")s(Oa-{T/`c-\\\"\"", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.33717554967233
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-3942.375F));
      jSONObject0.put("ishashCode", (Object) float0);
      jSONObject0.getLong("ishashCode");
      String[] stringArray0 = new String[4];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("ishashCode", (double) (-3942L));
      assertNotSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.181799854211378
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-1L));
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      jSONObject0.toJSONArray(jSONArray1);
      jSONObject0.put("QN>v]", 0.0);
      long long0 = jSONObject0.getLong("QN>v]");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.54498380032153
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("B,>$|uq$\"1.elGITQ>", (-917.94377521063));
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject0.getDouble("B,>$|uq$\"1.elGITQ>");
      assertEquals((-917.94377521063), double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4640637314403606
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject$1", "wheel.json.JSONObject$1");
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      jSONObject0.isNull("wheel.json.JSONObject$1");
      jSONObject2.names();
      JSONArray jSONArray0 = jSONObject1.getJSONArray("wheel.json.JSONObject$1");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6045317805301225
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-1974));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject.getNames(jSONObject0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      Long long0 = new Long((short) (-1974));
      JSONObject jSONObject1 = new JSONObject(long0);
      jSONObject0.isNull("");
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4211488448944323
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Short short0 = new Short((short) (-1974));
      JSONObject jSONObject0 = new JSONObject(short0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.toString(26, (-319));
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("{Gcj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {Gcj
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7284924318543142
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000002", (Collection) linkedList0);
      jSONObject0.optInt((String) null);
      Float.min(0.0F, 1.0F);
      jSONObject1.put("sh", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.has("java.lang.Float@0000000002");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4861569704508937
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Short short0 = new Short((short) (-1974));
      JSONObject jSONObject0 = new JSONObject(short0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.toString((int) (short) (-1974), (-522));
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      jSONObject1.length();
      jSONObject0.accumulate("", short0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3957094260849363
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put("getgetBytes", 2895.134856323339);
      int int0 = jSONObject1.getInt("getgetBytes");
      assertEquals(2895, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "W.@ jYES-k.Kx:";
      Boolean boolean0 = Boolean.valueOf("W.@ jYES-k.Kx:");
      jSONObject0.append("W.@ jYES-k.Kx:", boolean0);
      JSONTokener jSONTokener0 = new JSONTokener("{z#jb\"\u0002");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {z#jb\"\u0002
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9750939452796268
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      jSONArray0.put(3920, 0L);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 23, 58);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\r", "\r");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(Double.NaN);
      Double.max(1205.97102275, Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.318905384795703
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.opt((String) null);
      jSONObject0.optBoolean("getgetBytes");
      assertEquals(2, jSONObject0.length());
      
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject1 = new JSONObject((Object) "");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.541794738059664
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "N";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Long.getLong("N");
      Double double0 = new Double((-1.0));
      hashMap0.put((Long) null, double0);
      JSONObject jSONObject1 = jSONObject0.put("N", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject1.toString(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("nam", true);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject$1", "wheel.json.JSONObject$1");
      jSONObject1.accumulate("wheel.json.JSONObject$1", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.accumulate("wheel.json.JSONObject$1", jSONObject0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONObject$1";
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject$1", "wheel.json.JSONObject$1");
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("wheel.json.JSONObject$1", object0);
      try { 
        jSONObject0.getBoolean("wheel.json.JSONObject$1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$1\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4010763366655903
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      String string0 = "] is not a JSONArray.";
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONArray.", "p#&`yP ");
      jSONObject0.length();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] not found.", "] not found.");
      Double double0 = new Double((-952.943717498));
      jSONObject1.append("] not found.", double0);
      JSONObject jSONObject2 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("] not found.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6191121516709597
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      jSONObject0.put("2<5bQmw8~l,'a :X", 87);
      jSONObject0.names();
      jSONObject0.optDouble("2<5bQmw8~l,'a :X");
      stringArray0[0] = "joi";
      stringArray0[1] = "!!j,";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = JSONObject.doubleToString((-2153.54));
      String string1 = JSONObject.valueToString("joi");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("Null pointer");
      jSONObject0.put("$&w=Qddef6iPRpnRKmC", 0L);
      double double0 = jSONObject0.getDouble("$&w=Qddef6iPRpnRKmC");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.656741666595895
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("issubstring", (-1962L));
      JSONObject jSONObject1 = jSONObject0.put("N", (Map) hashMap0);
      jSONObject1.optJSONObject("N");
      JSONObject.valueToString(jSONObject1, 528, (-1));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4505078489886594
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] not found.", "] not found.");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames(jSONObject2);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("] not found.");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2510952354175586
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.append("", "");
      jSONObject1.remove("");
      JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3826174754261613
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Boolean.compare(false, true);
      String string0 = "N";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Double double0 = Double.valueOf((double) (-1));
      hashMap0.put((Long) null, double0);
      jSONObject0.put("N", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-522), (-522));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.953093269754322
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      jSONObject0.put("p&2htJPsb-|", (Map) hashMap0);
      try { 
        jSONObject0.getDouble("p&2htJPsb-|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p&2htJPsb-|\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.439734068584852
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "N";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Long long0 = new Long(1L);
      Double double0 = new Double(Double.NaN);
      hashMap0.put(long0, double0);
      jSONObject0.put("N", (Map) hashMap0);
      try { 
        jSONObject0.toString((-522), (-522));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      String string0 = "K1,";
      JSONObject jSONObject1 = jSONObject0.put("K1,", (Map) hashMap0);
      try { 
        jSONObject0.append("K1,", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[K1,] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7975345879435403
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject1 = jSONObject0.put("ismin", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("'w)ETrfrZ_[eX(q", (Object) hashMap0);
      jSONObject1.optJSONObject("par");
      JSONObject.testValidity(jSONObject0);
      jSONObject0.isNull((String) null);
      Integer integer0 = new Integer(61);
      JSONObject.valueToString(integer0);
      jSONObject0.optInt("n2D`)CxQ47L@[mY");
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 61, 0);
      jSONObject1.toString(61, 0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject3 = jSONObject0.put("] is not a Boolean.", (Collection) linkedList0);
      jSONObject1.getJSONObject("ismin");
      jSONObject3.optJSONObject((String) null);
      jSONObject2.optDouble("n2D`)CxQ47L@[mY");
      String string1 = jSONObject3.optString("'w)ETrfrZ_[eX(q", "c0?SioGAE9cQ");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1731471805599454
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("rep", (Map) hashMap0);
      String[] stringArray0 = new String[0];
      jSONObject1.get("rep");
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject1.getJSONObject("rep");
      assertNotSame(jSONObject1, jSONObject3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      try { 
        jSONObject1.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9164675226849917
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.opt("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2448999724663743
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("to", (Object) "to");
      jSONObject1.getString("to");
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0475672204411104
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.accumulate("", object0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9362909245092568
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.length();
      try { 
        jSONObject0.put((String) null, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3291016900199226
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.7448735835681599
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(2, jSONObject0.length());
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2001248812718097
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 3192;
      // Undeclared exception!
      jSONObject0.toString(3192, 3192);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", false);
      jSONObject0.toString();
      boolean boolean0 = jSONObject1.optBoolean("JSONArray[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9906188255641685
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter(44);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject$1", "wheel.json.JSONObject$1");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[14];
      JSONObject jSONObject1 = jSONObject0.putOpt("do", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, (-1), 70);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put(jSONObject0, boolean0);
      boolean boolean1 = new Boolean("0.mTXPr_P/j?Lm|<2~");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9632800269699417
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("%&+K6x&#ba!", "%&+K6x&#ba!");
      jSONObject1.get("%&+K6x&#ba!");
      try { 
        jSONObject1.getInt("%&+K6x&#ba!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%&+K6x&#ba!\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-46638682));
      assertEquals("-4.6638682E7", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("j[u", 0.0);
      try { 
        jSONObject0.getBoolean("j[u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j[u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray1, 92, 800);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("gettoHexString", false);
      jSONObject0.toString();
      try { 
        jSONObject1.getJSONObject("gettoHexString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoHexString\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1003470033431912
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put("s6W1a", (Map) hashMap0);
      jSONObject1.toString((-522), (-522));
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000006\": {},\n\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"\n}");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put(".", (Map) hashMap0);
      jSONObject1.toString((-522), (-522));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000003\": {}}");
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~q<oX;DT:Rrs2]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~q<oX;DT:Rrs2]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.421029013925705
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] not found.");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.196486797046588
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.put("to", (Object) float0);
      jSONObject1.optDouble("to", 0.0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3987046532661278
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("opt");
      JSONObject jSONObject0 = new JSONObject((Object) "\"opt\"");
      // Undeclared exception!
      jSONObject0.toString(1393);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("7\"6R 'jI.", (Object) null);
      String[] stringArray0 = new String[10];
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long((-456L));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("");
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(1.0);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("\"hBPQD_'Y9s<Zf*HYt", "\"hBPQD_'Y9s<Zf*HYt");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("fj^8&45-2ZyM8}v$", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("fj^8&45-2ZyM8}v$");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.quote("EVAX}Q%O)/");
      assertEquals("\"EVAX}Q%O)/\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = JSONObject.quote("=/bP:ES01IcLBiGo>E'");
      assertEquals("\"=/bP:ES01IcLBiGo>E'\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7322201838634412
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Long long0 = new Long(0L);
      Long.max(0L, 2167L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String string0 = jSONObject0.optString("w/#_sF", (String) null);
      assertEquals(1, jSONObject0.length());
      assertNull(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.9873982136479044
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject0);
      jSONObject1.toString();
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      String string0 = JSONObject.valueToString((Object) null, 1366, 1366);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(object0, 548, 548);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.put("{}", 23);
      long long0 = jSONObject0.optLong("{}");
      assertEquals(1, jSONObject0.length());
      assertEquals(23L, long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("getvalueOf", "getvalueOf");
      try { 
        jSONObject0.getLong("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      jSONObject0.put("] is not a JSONObject.", (Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2868.0);
      assertEquals("2868", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5194009171767542
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(",:]}/\"[{;=#", (-2841L));
      assertEquals((-2841L), long0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("get", (Object) "get");
      jSONObject0.optString("get");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("1o=KQQ\"(\"*zw<");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.5428866763466784
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("toS", (Collection) linkedList0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.optJSONArray("toS");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.8136605216916037
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("wheel.json.JSONObject$1", "wheel.json.JSONObject$1");
      String string0 = jSONObject0.toString((-2723), (-2723));
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"hBPQD_'Y9s<Zf*HYt", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("wheel.json.JSONObject", false);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("getnotifyAll", 105L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("kgucy,Q)p4Axf.v");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7749673832258979
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject0.toString((-522), (-522));
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString("", 13, 13);
      jSONObject0.toString(13);
      jSONObject1.optString("Unterminated string");
      jSONObject0.optString("Unterminated string", "");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.3043905873508845
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(84, 84);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.3871696044639985
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString(455);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("7^3XA", (-2173.16448380581));
      try { 
        jSONObject0.getBoolean("7^3XA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7^3XA\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("%k0lBOF&VyH*r-", 2223.16413143794);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.3137063051745137
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(">/UIHL", true);
      JSONObject jSONObject1 = new JSONObject();
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("] is not a number.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a number.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.700404681812747
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long.max((-1L), (-1L));
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = jSONObject0.optString("w/#_sF", "w/#_sF");
      assertEquals("w/#_sF", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.7213192226263727
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("[]", 2067L);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("iscopyValueOf", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(")");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("ZAhZ]rpy$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZAhZ]rpy$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble((String) null);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string0 = JSONObject.valueToString(jSONObject0, (-4122), (-3002));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.2632762409739886
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString((-1023), (-1023));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("OP YiYFo2Rk15+Ea3Zc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OP YiYFo2Rk15+Ea3Zc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.680421054462574
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("Expected a ',' or '}'", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.isNull("wheel.json.JSONObject");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.quote("9>t1Xhj\")A");
      assertEquals("\"9>t1Xhj\\\")A\"", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2696.59817181);
      assertEquals("2696.59817181", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.486476853275102
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Short short0 = new Short((short) (-117));
      String string0 = JSONObject.valueToString(short0, (-2780), (-2780));
      assertNotNull(string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.2146303757773043
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "6P}E@>%QP");
      jSONObject0.toString(47, 47);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, (-56592943), (-56592943));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Double double0 = new Double(1.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.6028169608189446
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("bG'YaHdj1?\";\"dL", 400);
      assertEquals(400, int0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(26, 26);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-2457));
      assertEquals((-2457), int0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("Null pointer");
      boolean boolean0 = jSONObject0.has("Null pointer");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.0927019736837496
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Qv5*DgYS$Nj;BAo1");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "Qv5*DgYS$Nj;BAo1");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("|<Y992|2^Shi4I[", "|<Y992|2^Shi4I[");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("f[K=0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f[K=0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("jo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
