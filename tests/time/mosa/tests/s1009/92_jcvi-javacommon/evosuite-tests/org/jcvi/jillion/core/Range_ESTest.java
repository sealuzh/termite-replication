/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 21:22:22 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(1L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.185379568477008
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(74L);
      Long long0 = new Long(74L);
      Range range1 = Range.ofLength(65535L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(183L);
      boolean boolean1 = range1.equals(range2);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6751231101135264
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(9223372036854775798L);
      range0.complement(range0);
      Range range1 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854775798 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ 4294967295 .. 4294967296 ]/SB", string0);
      
      range0.equals(long0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6912004809506773
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.888454746081937
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-817L));
      range0.isSubRangeOf(range1);
      range_Builder0.expandBegin((-969L));
      Range range2 = Range.ofLength(2147483647L);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(4327L);
      Long long0 = new Long((-2160L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ 4327 .. 4327 ]/0B", (Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.4415488057560357
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(2147483655L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.equals(linkedList0);
      Long long0 = new Long(2147483655L);
      Object object0 = new Object();
      Range range1 = Range.of(2147483655L);
      range0.endsBefore(range1);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = range0.equals((Object) null);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483655L, long1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.700912645980837
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.complement(range0);
      Range range1 = Range.of(9223372036854774924L);
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854774924 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 628L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long((-48L));
      range0.equals("h}E`_%qGN14!S[");
      Object object0 = new Object();
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3284514392943114
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036852194552L, 9223372036852194552L);
      range0.iterator();
      Range.ofLength(9223372036852194552L);
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 2147483630L;
      Range range0 = Range.ofLength(2147483630L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.634642427172761
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.isEmpty();
      boolean boolean0 = range0.equals(linkedList0);
      //  // Unstable assertion: assertFalse(boolean0);
      
      linkedList0.offerFirst(range0);
      range0.getEnd();
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range range1 = Range.ofLength(2147483647L);
      linkedList0.addFirst(range1);
      List<Range> list0 = range1.split(2147483647L);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      List<Range> list1 = range0.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list1.contains(range1));
      
      Range range2 = Range.ofLength(2147483647L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.141266043833974
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.equals(linkedList0);
      linkedList0.offerFirst(range0);
      assertTrue(linkedList0.contains(range0));
      
      Range range1 = Range.of(127L);
      range0.getEnd();
      range0.toString();
      range0.split(2147483647L);
      range0.complementFrom(linkedList0);
      Range range2 = range1.asRange();
      List<Range> list0 = range2.complement(range1);
      assertFalse(list0.contains(range2));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7949581313821854
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.remove((Object) range0);
      linkedList0.add(range0);
      range0.split(2147483647L);
      range0.equals(linkedList0);
      linkedList0.offerFirst(range0);
      range0.getEnd();
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1578L), 2147483647L);
      List<Range> list0 = range1.split(2147483647L);
      List<Range> list1 = range1.complementFrom(list0);
      assertFalse(list0.contains(range1));
      assertEquals(2, list0.size());
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 622L, 2147483647L);
      long long0 = range0.getEnd();
      assertEquals(2147483646L, long0);
      
      Long long1 = new Long(622L);
      range0.equals((Object) null);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7777533022086507
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1419L, 1419L);
      Range range1 = Range.of(range_CoordinateSystem0, 1419L, 1419L);
      range1.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(1419L);
      Range.of((-2131L), 2147482227L);
      range0.equals(long0);
      range1.isEmpty();
      Range range2 = Range.of(1419L, 1419L);
      assertFalse(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1419 .. 1418 ]/0B", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3284514392943114
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 628L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. -9223372036854775808 ]/SB", string0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3858672533916603
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-697L), (-697L));
      range0.equals(range_Builder1);
      range1.equals((Object) null);
      range0.iterator();
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.633906914341848
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-1L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2286L, (-216L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4921351512518326
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder0.shift((-1576L));
      Range range1 = Range.of((-697L));
      boolean boolean0 = range1.intersects(range0);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.of((-697L), (-656L));
      Object object0 = new Object();
      range2.equals(object0);
      boolean boolean1 = range2.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2670942167452757
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1421L, 1421L);
      Range range1 = Range.of(1421L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 1421 .. 1420 ]/0B", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 621L, 621L);
      Range range1 = Range.ofLength(621L);
      range0.equals(range1);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1421L, 1421L);
      Range range1 = Range.of(1421L);
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(1421L, long0);
      
      Long long1 = new Long(1421L);
      boolean boolean0 = range0.equals(long1);
      assertTrue(range0.isEmpty());
      
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.335298672692018
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(622L);
      Range range1 = Range.of(3599L);
      boolean boolean0 = range0.intersects(range1);
      long long0 = range0.getEnd();
      assertEquals(622L, long0);
      
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = Range.of(3599L, 3599L);
      String string0 = range2.toString();
      assertFalse(range2.isEmpty());
      assertEquals("[ 3599 .. 3599 ]/0B", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.528796615540143
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-16L), 152L);
      Range range1 = Range.of((-1235L), 32767L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2039851604518037
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(4327L, 4327L);
      Range range1 = Range.of(3599L);
      range0.intersects(range1);
      long long0 = range1.getEnd();
      assertEquals(3599L, long0);
      
      range0.equals(range1);
      String string0 = range0.toString();
      assertEquals("[ 4327 .. 4327 ]/0B", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(648L);
      Object object0 = new Object();
      Range range1 = Range.of(648L, 2475L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3863067172457586
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(4327L, 4327L);
      Range range1 = Range.of(0L);
      range0.intersects(range1);
      long long0 = range1.getEnd();
      assertEquals(0L, long0);
      
      range0.equals(range1);
      String string0 = range0.toString();
      assertEquals("[ 4327 .. 4327 ]/0B", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.889123342973809
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.iterator();
      range0.equals((Object) null);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      Long long1 = new Long((-740L));
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(9223372036854774924L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854774924L, long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.492082638517495
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      range_Builder0.shift((-1576L));
      Range range1 = Range.of((-697L));
      range1.intersects(range0);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.of((-697L), (-656L));
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.of(127L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.7937344655607275
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      Long long1 = new Long(2147483647L);
      Range range1 = Range.of((-43L), 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      range0.toString();
      long long2 = range1.getEnd();
      assertTrue(long2 == long0);
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range1.complementFrom(list0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.8871757684982384
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 88L, 88L);
      Range range1 = range0.asRange();
      range0.toString();
      Range range2 = Range.of(range_CoordinateSystem0, (-2413L), (-2413L));
      range0.startsBefore(range1);
      range0.intersection(range1);
      Range range3 = Range.of(9223372036854775807L);
      range0.isSubRangeOf(range2);
      List<Range> list0 = range3.split(622L);
      // Undeclared exception!
      try { 
        range2.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2413 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 607L, 4294967295L);
      Long long0 = new Long(1246L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.692057383023134
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Long.getLong("[ -9223372036854775808 .. -9223372036854775807 ]/SB");
      range0.isEmpty();
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.split(1L);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.intersects(range0);
      Long long0 = new Long((-697L));
      range0.equals(range_Builder0);
      boolean boolean1 = range0.equals(range_Builder0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Long long0 = new Long((-2010L));
      Long.valueOf((-2010L));
      Range range0 = Range.ofLength(1134L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.4424934538746115
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(2796L);
      Range.of(1945L, 2796L);
      List<Range> list0 = range0.split(1945L);
      range0.complementFrom(list0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = 621L;
      long long1 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.588932748716964
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.split(2147483647L);
      Object object0 = new Object();
      range0.intersects(range0);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range0.intersection(range1);
      String string0 = range2.toString();
      //  // Unstable assertion: assertEquals("[ 2147483647 .. 2147483646 ]/0B", string0);
      
      Range range3 = Range.of(2147483647L, 2147483647L);
      long long0 = range3.getEnd();
      //  // Unstable assertion: assertEquals(2147483647L, long0);
      
      range2.equals((Object) null);
      String string1 = range1.toString();
      //  // Unstable assertion: assertEquals("[ -1 .. 2147483646 ]/0B", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(88L);
      Long long1 = new Long(1L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(2147483648L, long2);
      
      boolean boolean0 = range0.equals("");
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals("\",V$Z]P-RcSC#");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7938131631694842
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.intersects(range0);
      Long long0 = new Long(0L);
      Long long1 = Long.valueOf((-2147483648L));
      boolean boolean1 = range0.equals(long1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(2147483655L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 2147483654 ]/0B", string0);
      
      boolean boolean0 = range0.equals("[ 0 .. 2147483654 ]/0B");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.38560985313426
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-697L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      long long0 = new Long((-697L));
      range0.equals(range_Builder0);
      assertTrue(range0.isEmpty());
      
      String string0 = range1.toString();
      assertEquals("[ -697 .. -697 ]/0B", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1421L, 1421L);
      Range range1 = Range.of(1421L, 1421L);
      range0.intersects(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.585082756868927
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem.values();
      Range range1 = Range.of((-32768L), (-1L));
      range0.isSubRangeOf(range1);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1632495137153978
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1421L, 1421L);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of((-804L), 4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.5959954976796205
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(9223372036854775798L);
      Long long0 = new Long(9223372036854775798L);
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775798 .. 9223372036854775798 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 9223372036854775798 .. 9223372036854775798 ]/0B", range_CoordinateSystem0);
      boolean boolean0 = range0.endsBefore(range1);
      boolean boolean1 = range1.equals("[ 9223372036854775798 .. 9223372036854775798 ]/0B");
      assertFalse(boolean1);
      
      range0.isSubRangeOf(range1);
      boolean boolean2 = range1.isSubRangeOf(range0);
      assertNotSame(range1, range0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.048566595938176
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(9223372036854774924L);
      Range range1 = Range.of((-9223372036854775808L));
      range0.equals(range1);
      range1.startsBefore(range0);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5761528324291585
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), 1914L);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.144858415400183
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(4327L);
      Long long0 = new Long((-2160L));
      String string0 = range0.toString();
      assertEquals("[ 4327 .. 4327 ]/0B", string0);
      
      Range range1 = Range.of(1349L);
      Range.ofLength(206L);
      boolean boolean0 = range1.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2163L, 9223372036854775797L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.601688798682604
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-16L), 152L);
      List<Range> list0 = range0.split(152L);
      assertFalse(list0.contains(range0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -16 .. 152 ]/RB", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.175024460436097
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(4329L);
      Range range1 = Range.of(3599L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      long long0 = range1.getEnd();
      assertEquals(3599L, long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2035456965977054
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(4327L, 4327L);
      Range range1 = Range.of(3599L);
      boolean boolean0 = range1.intersects(range0);
      Object object0 = new Object();
      boolean boolean1 = range0.startsBefore(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.44317315638163
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(4327L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
      
      linkedList0.offerFirst(range0);
      range0.getEnd();
      String string0 = range0.toString();
      assertEquals("[ 4327 .. 4327 ]/0B", string0);
      
      range0.split(4327L);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(2561L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals("\",V$Z]P-RcSC#");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(621L);
      Range range1 = Range.ofLength(621L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(57L);
      boolean boolean0 = range0.equals("RZ= b");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.27148982114088
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854774924L, 9223372036854774924L);
      Range range1 = Range.of(9223372036854774924L);
      range0.complement(range1);
      Range.of(9223372036854774924L);
      // Undeclared exception!
      try { 
        Range.parseRange("CQWR6RmVN7:9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse CQWR6RmVN7:9 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.0610733884692896
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(74L);
      Long long0 = new Long(74L);
      Range range1 = Range.ofLength(65535L);
      List<Range> list0 = range0.split(74L);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(1246L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.976709928476526
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Long long0 = new Long(730L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      List<Range> list0 = range0.split(4152L);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 2147483646L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5820L, 5820L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      range0.spliterator();
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("+ic,>&LNBXJl1[Mz", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse +ic,>&LNBXJl1[Mz into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.4489908925963655
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(5811L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getBegin(range_CoordinateSystem0);
      range0.iterator();
      range0.forEach(consumer0);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(5811L, long0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3499352535708766
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      Range range3 = range_Builder0.build();
      assertSame(range3, range2);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(344L, 9223372036854774652L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.527510482796678
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1049L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1050 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.7169382752759748
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(9223372036854774924L);
      Range.of((-9223372036854775808L));
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2013835344355432
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774924L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1470L), (-1470L));
      long long0 = range0.getLength();
      assertEquals(9223372036854774924L, long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.4421765357275262
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-16L));
      Range range1 = Range.of((-16L));
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-16L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967294L, 4294967294L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(4294967294L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.697154906162597
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2153L), 1L);
      range0.isSubRangeOf(range1);
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5820L, 5820L);
      Range range1 = Range.ofLength(5820L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483026L, 2147483647L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.6153584228777174
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-16L), 2147483647L);
      Range range1 = Range.of((-16L), 176L);
      range0.getBegin();
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -16 .. 2147483647 ]/RB", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.386554964003035
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-697L));
      boolean boolean0 = range1.intersects(range0);
      Long long0 = new Long((-697L));
      boolean boolean1 = range0.equals(range_Builder0);
      assertTrue(boolean1 == boolean0);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.of((-697L));
      range1.equals(range2);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.441254265790644
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(3811L);
      Range range1 = Range.of(2147483649L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
      
      String string0 = range1.toString();
      assertEquals("[ 2147483649 .. 2147483649 ]/0B", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.2400085271963146
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(2147483655L);
      Range range1 = Range.of(2147483655L);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 2147483654 ]/0B", string0);
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.543152574709723
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(9223372036854775798L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range1 = Range.of(9223372036854775798L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertSame(range2, range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036854775798 .. 9223372036854775798 ]/0B", string0);
      
      Range range3 = Range.of(32767L, 9223372036854775798L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      Range range4 = Range.parseRange("[ 9223372036854775798 .. 9223372036854775798 ]/0B");
      //  // Unstable assertion: assertSame(range4, range2);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, (-2098L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-32768L));
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.256312154943543
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1123L, 1123L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.136556853098811
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774924L);
      range0.toString();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(44L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.2026738570161886
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1860L), 0L);
      range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      long long0 = 255L;
      Range range1 = Range.ofLength(255L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.384198918389992
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Long long0 = new Long(4294967295L);
      Range range1 = Range.of(91L);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.1323906629485916
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.of(4294967295L);
      Range range0 = Range.ofLength(5798L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.9956410103399627
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-1L), 1404L);
      range0.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.contractEnd(1404L);
      range_Builder0.build();
      range_Builder0.shift((-1L));
      List<Range> list0 = range0.split(1404L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(2, list0.size());
      assertTrue(list1.isEmpty());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.5079495648879258
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(4327L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(4327L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(905L, 905L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.4756528986587716
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5820L, 5820L);
      List<Range> list0 = range0.split(5820L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1336L), 0L);
      range_Builder0.expandBegin((-1336L));
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(0L);
      long long0 = (-1368L);
      range_Builder0.expandEnd((-1368L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.792781171425418
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long0 = new Long((-9223372036854775808L));
      range_Builder0.expandBegin((-1279L));
      Long long1 = new Long(1L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-685L));
      long long0 = range0.getEnd();
      assertEquals((-685L), long0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-128L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(2147483647L, 2147483647L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854774924L, (-9223372036854775808L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775808 would make range [9223372036854774924 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.4506837102258663
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(608L, 608L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(608L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.of(608L, 1522L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.2582631367284582
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 621L, 9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(621L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.932727758641318
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.of(0L, 2147483647L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertEquals(0, list0.size());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5811L, 5811L);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(5811L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(176L, 176L);
      Range range1 = Range.ofLength(176L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.4134703701164915
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-2147483644L));
      Range range1 = Range.of((-2147483644L), (-2147483644L));
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      range0.spliterator();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.386495788903917
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1421L, 1421L);
      Range range1 = Range.of((-22780L));
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-22780L), long0);
      
      range0.isSubRangeOf(range1);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.of(1421L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.8146596973142626
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-32767L), long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-777L), (-777L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.443239938399054
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774924L);
      Range range1 = Range.of(9223372036854774924L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.442381365997716
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(65535L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range range1 = Range.of(65535L);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.136037557150588
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5811L, 5811L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(5811L, long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.242703796582509
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-21L), 1755L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.of((-610L), 255L);
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 195L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(5819L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3476L), 554L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 554L, (-3476L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((-9223372036854775808L), 124L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.1322080145467655
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2071L);
      range_Builder0.build();
      Range range0 = Range.of(9223372036854775324L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1246L, 1246L);
      Range range0 = Range.of(1246L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1123L, 1123L);
      String string0 = range0.toString();
      assertEquals("[ 1123 .. 1122 ]/0B", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.98488519516453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(5811L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(5811L, long0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(9223372036854775798L);
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(74L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.4398518232031376
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1129L), (-1L));
      range_Builder0.contractBegin((-32768L));
      range_Builder0.shift((-1L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = Range.of(1225L);
      range0.toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-1129L));
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.of((-697L), 4306L);
      range0.intersects(range0);
      range_Builder0.contractBegin((-1L));
      Long long0 = new Long((-697L));
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = 1455L;
      Range range0 = Range.ofLength(1455L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1246L);
      Range range0 = Range.of(1246L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = (-32768L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.2227895625062004
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.ofLength(4152L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.117073877376325
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 648 .. 649 ]/SB", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.32604326425789
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -9223372036854775807 .. -9223372036854775807 ]/RB", string0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.3277188385617107
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.of(9223372036854775443L);
      Range range1 = Range.ofLength(450L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.4425232703541795
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(152L);
      Range range1 = Range.of(152L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of((-1656L));
      assertFalse(range0.isEmpty());
  }
}
