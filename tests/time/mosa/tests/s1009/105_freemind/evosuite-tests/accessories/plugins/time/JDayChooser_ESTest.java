/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 21:12:31 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.concurrent.PriorityBlockingQueue;
import javax.help.BackAction;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JToolBar;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.event.MenuKeyEvent;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.metal.MetalTreeUI;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xml.serializer.ToTextSAXHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.xml.sax.ContentHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1766589951457096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.minSelectableDate = null;
      // Undeclared exception!
      try { 
        jDayChooser1.setMaxSelectableDate((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(8881);
      JProgressBar jProgressBar0 = new JProgressBar();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10019, 10019, 8881, 40, '9');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3012035332772127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.decorationBordersVisible = true;
      Color color0 = Color.PINK;
      jDayChooser0.getAlignmentX();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setFont((Font) null);
      Locale locale0 = Locale.JAPANESE;
      ComponentOrientation componentOrientation0 = ComponentOrientation.getOrientation(locale0);
      jDayChooser0.setComponentOrientation(componentOrientation0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.weekdayForeground = color0;
      jDayChooser0.isDecorationBordersVisible();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertEquals(175, color1.getGreen());
      
      Locale locale1 = Locale.KOREA;
      locale1.getDisplayName();
      locale1.toLanguageTag();
      jDayChooser0.setLocale(locale1);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 37, 26, 34, '~');
      keyEvent0.setKeyCode(37);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(24);
      assertEquals(24, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 32;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 32, 33, 32, '@');
      keyEvent0.setKeyCode(33);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.801703258778878
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(1920);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 1920, 424, 35, 'r');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1689585457945824
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale0 = Locale.FRANCE;
      locale0.getDisplayScript();
      jDayChooser0.setLocale(locale0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.updateUI();
      jDayChooser0.setMonth(10007);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2049554530011566
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(8881);
      JProgressBar jProgressBar0 = new JProgressBar();
      KeyEvent keyEvent0 = new KeyEvent(jProgressBar0, 8881, 8881, 8881, 8881, '9');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1867519944936955
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      JButton[] jButtonArray0 = new JButton[7];
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      metalTreeUI0.getCollapsedIcon();
      JButton jButton0 = new JButton("day", (Icon) null);
      jButtonArray0[0] = jButton0;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jButtonArray0[1] = (JButton) jDayChooser_DecoratorButton0;
      JToolBar jToolBar0 = new JToolBar();
      Action action0 = TransferHandler.getCutAction();
      JButton jButton1 = jToolBar0.add(action0);
      jButtonArray0[2] = jButton1;
      jDayChooser0.getSelectedDay();
      jButtonArray0[3] = null;
      JButton jButton2 = new JButton("\"E6?ouS6%>", (Icon) null);
      jButtonArray0[4] = jButton2;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jButtonArray0[5] = (JButton) jDayChooser_DecoratorButton1;
      JButton jButton3 = new JButton("\"E6?ouS6%>");
      jButtonArray0[6] = jButton3;
      jDayChooser0.days = jButtonArray0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.setMaxDayCharacters((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.896090218646746
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 13, (String) null);
      actionEvent0.setSource((Object) null);
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-92), (-92), (-92), 40, 'i');
      MockDate mockDate0 = new MockDate(221, 3429, (-92), 51, 51);
      MockDate.UTC((-92), 221, 40, 40, 10022, 40);
      java.sql.Date date0 = new java.sql.Date(3429);
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 10L, 40, 40, 'y');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1878, 1878, 1420, 39, 'E');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1771683501486114
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 36, 36, 36, 'x');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.177217605772988
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.setLocale(locale0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.800866879935626
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(255);
      jDayChooser0.setMonth(255);
      jDayChooser0.getUI();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.896211771114869
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1313, 1313, 1313);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1313,MONTH=1313,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1313,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setMonth(36);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1976586683100163
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(4872);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.897296470403161
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(4872);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4872, 4872, (-3040), (-1437625606), 125, 100);
      Boolean boolean0 = new Boolean("BDO");
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      Color color0 = jDayChooser1.getWeekdayForeground();
      jDayChooser1.setWeekdayForeground(color0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.164813263462051
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.setDay(255);
      jDayChooser0.setMonth(255);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.983176545981773
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.isDecorationBackgroundVisible();
      MockDate mockDate0 = new MockDate(34, 1, 1, 34, 34);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2126), (-2126), (-2126), (-2126), 'l');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3075332483628284
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(4872);
      jDayChooser0.firePropertyChange("", 'X', 'X');
      jDayChooser0.isOpaque();
      jDayChooser0.requestFocus(false);
      jDayChooser0.isOpaque();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.locale = null;
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      Date date2 = jDayChooser0.defaultMaxSelectableDate;
      Date date3 = jDayChooser0.setMinSelectableDate(date2);
      assertNotSame(date3, date1);
      
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1643), "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setForeground(systemColor0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.206335928909301
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.setYear(1526);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getLocale();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMaxSelectableDate(date0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(130);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-86));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.getMaxSelectableDate();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.801680933862038
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date0 = jDayChooser1.setMaxSelectableDate((Date) null);
      jDayChooser1.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8961408868334586
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-1665));
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(true);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 0L, 0, (-1665), 'q', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.addListeners(0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      ToTextSAXHandler toTextSAXHandler0 = new ToTextSAXHandler((ContentHandler) null, "day");
      toTextSAXHandler0.getOutputFormat();
      HsqlProperties hsqlProperties0 = new HsqlProperties((Properties) null);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(36);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 8192, 0, '!');
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(28, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.096591278091726
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jDayChooser0.setUI(basicPanelUI0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      metalComboBoxEditor0.addActionListener(jDayChooser0);
      jDayChooser0.addFocusListener(metalComboBoxEditor0);
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isContentAreaFilled();
      BackAction backAction0 = new BackAction(dimension0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      int int0 = (-623);
      // Undeclared exception!
      try { 
        RowSorterEvent.Type.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant javax.swing.event.RowSorterEvent.Type.day
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Object object0 = new Object();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      ActionEvent actionEvent0 = new ActionEvent(object0, 27, "day");
      assertEquals(0L, actionEvent0.getWhen());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.896128488346074
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setMaxDayCharacters(4);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.151852355939681
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getInitialValue();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      jDayChooser0.setYear((-1547));
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      Locale.lookup(stack0, priorityBlockingQueue0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-2956050), color0.getRGB());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.096676908145428
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-4123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6090497473625858
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(3287);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.2021264500326914
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.gray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.8961651689921424
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getTransferHandler();
      jDayChooser0.setYear((-1665));
      jDayChooser0.setMaxDayCharacters((-1665));
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, int0);
      
      jDayChooser0.setWeekOfYearVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(62);
      jDayChooser0.getUI();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.setTitle("day");
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setYear((-513));
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      Locale locale0 = Locale.lookup(stack0, priorityBlockingQueue0);
      assertNull(locale0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }
}
