/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 22:37:43 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.value.ValueLobDb;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("insert", false, defaultDBTable0, " WHERE ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "insert");
      stringBuilder1.reverse();
      SQLUtil.addRequiredCondition("callpfb:!*r(huq5", stringBuilder0);
      assertEquals("callpfb:!*r(huq5", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5tQP;sgr#Wr#L_7w1");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isDDL(" WHERE ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[11];
      stringArray0[1] = "MOH?5\"h[E 3t";
      stringArray0[3] = "MOH?5\"h[E 3t";
      stringArray0[5] = stringArray0[4];
      stringArray0[6] = "MOH?5\"h[E 3t";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "MOH?5\"h[E 3t", true, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter table");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.360448974670294
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "snlectHi.t*o";
      SQLUtil.mutatesDataOrStructure("snlectHi.t*o");
      String string1 = "/*";
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R~P");
      defaultDBTable0.getUniqueConstraints(false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("R~P", defaultDBTable0, (-1735635556), "R~P");
      defaultDBColumn0.setNullable(false);
      defaultDBTable0.toString();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("R~P");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("R~P R~P NOT NULL", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.ABORT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      defaultDBColumn0.setDefaultValue("DATE");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      defaultDBColumn0.setSize(integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DATE DATE DEFAULT DATE NULL", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5331810375513615
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      TableContainer tableContainer0 = new TableContainer("drop materialized viewalk4r tablemq6e~id\":o3");
      tableContainer0.getTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-3577), "_rf[En=3WhviDH");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null_RF[EN=3WHVIDH(3,2)", stringBuilder0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(1001, "SR~P");
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", defaultDBTable0, dBDataType0, integer2);
      StringBuilder stringBuilder0 = new StringBuilder("alter table");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QqHD";
      stringArray0[1] = "SR~P";
      stringArray0[2] = "hu*%x$C<I]>gLxBX:n";
      stringArray0[3] = "SR~P";
      stringArray0[4] = "SR~P";
      stringArray0[5] = "SR~P";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("QqHD", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("hu*%x$C<I]>gLxBX:n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("snle", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBSchema dBSchema0 = new DBSchema("0IUU<E-4c#|yqu");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&A~W>\"VqVE9LV", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&A~W>\"VqVE9LV";
      stringArray0[1] = "&A~W>\"VqVE9LV";
      stringArray0[2] = "0IUU<E-4c#|yqu";
      stringArray0[3] = "renamesnlect into";
      stringArray0[4] = "&A~W>\"VqVE9LV";
      stringArray0[5] = "&A~W>\"VqVE9LV";
      stringArray0[6] = "0IUU<E-4c#|yqu";
      stringArray0[7] = "0IUU<E-4c#|yqu";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("0IUU<E-4c#|yqu", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3905);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Locale locale0 = new Locale("&A~W>\"VqVE9LV");
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "&A~W>\"VqVE9LV", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("&A~W>\"VqVE9LVcreate table &A~W>\"VqVE9LV (,\n\tFOREIGN KEY (&A~W>\"VqVE9LV, &A~W>\"VqVE9LV, 0IUU<E-4c#|yqu, renamesnlect into, &A~W>\"VqVE9LV, &A~W>\"VqVE9LV, 0IUU<E-4c#|yqu, 0IUU<E-4c#|yqu) REFERENCES &A~W>\"VqVE9LV(&A~W>\"VqVE9LV, &A~W>\"VqVE9LV, 0IUU<E-4c#|yqu, renamesnlect into, &A~W>\"VqVE9LV, &A~W>\"VqVE9LV, 0IUU<E-4c#|yqu, 0IUU<E-4c#|yqu)\n", byteArrayOutputStream0.toString());
      assertEquals(336, byteArrayOutputStream0.size());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessioninterval");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "alter indewsxko@1a";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter indewsxko@1a");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      StringBuilder stringBuilder3 = stringBuilder2.append(100000L);
      SQLUtil.addOptionalCondition((String) null, stringBuilder3);
      assertEquals("a1@okxswedni retla100000 or null", stringBuilder3.toString());
      assertEquals("a1@okxswedni retla100000 or null", stringBuilder0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9557135998277697
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tablemq6eFid|:ow");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) boolean0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.042632211710285
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize(" NOT");
      SQLUtil.isQuery(" NOT");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " NOT";
      stringArray0[1] = " NOT";
      stringArray0[2] = " NOT";
      stringArray0[3] = " NOT";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = new Boolean("6ZeVB");
      SQLUtil.isDDL("VSi[v=");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")";
      stringArray0[1] = "6ZeVB";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(")", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1118, "3,tON");
      Integer integer0 = new Integer((-189669809));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("3,tON", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("3,tON 3,TON(-189669809,-189669809) NULL", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.221085853013325
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DATE");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("<<\"}^je@");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";";
      stringArray0[1] = "table null";
      stringArray0[2] = "updating ";
      stringArray0[3] = "table null";
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ; = ';' AND table null = 'table null' AND updating  = 'updating ' AND table null = 'table null'", string1);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ";", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (;, table null, updating , table null)", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("zm(oS%4iE\"%i>aH&", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.164400258041059
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SQLUtil.mutatesStructure("S~P");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)101;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)15;
      ValueLobDb.createSmallLob((-1842871993), byteArray0, (byte)101);
      DBDataType dBDataType0 = DBDataType.getInstance(15, "DATE");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("cW-HZ\"h9TJ@^;IWR");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable1, dBDataType0, (Integer) 0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DATE";
      stringArray0[1] = "cW-HZ\"h9TJ@^;IWR";
      stringArray0[2] = null;
      stringArray0[4] = " WHERE ";
      stringArray0[5] = "DATE";
      stringArray0[6] = "DATE";
      stringArray0[7] = "DATE";
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "(DATE, cW-HZ\"h9TJ@^;IWR, , ,  WHERE , DATE, DATE, DATE)");
      StringBuilder stringBuilder1 = stringBuilder0.append(13);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("(DATE, cW-HZ\"h9TJ@^;IWR, , ,  WHERE , DATE, DATE, DATE)13DATE", stringBuilder1.toString());
      assertEquals("(DATE, cW-HZ\"h9TJ@^;IWR, , ,  WHERE , DATE, DATE, DATE)13DATE", stringBuilder0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "execute");
      boolean boolean0 = SQLUtil.isProcedureCall("execselect * from");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("cawlpfb:!*rhq5", stringBuilder0);
      assertEquals("cawlpfb:!*rhq5", stringBuilder0.toString());
      
      DBSchema dBSchema0 = new DBSchema(", calendar)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", calendar)", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9410068610812892
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SQLUtil.mutatesStructure("S~P");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      SQLUtil.removeComments("`/4Z9/l|- x_\"r");
      jdbcClob jdbcClob0 = new jdbcClob("alter materialized viewil:qz8:ry}<g zme");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.addColumnName("`/4Z9/l|- x_\"r");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.isDDL("");
      SQLUtil.addRequiredCondition("insertparsesqlinfo: first 2 bytes are", stringBuilder0);
      assertEquals("insertparsesqlinfo: first 2 bytes are", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("snlectHi.t*o");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("snlectHi.t*o", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "NCLOB";
      stringArray0[1] = "snlectHi.t*o";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " = ", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("COUNT");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("snlectHi.t*o", stringBuilder1);
      SQLUtil.addOptionalCondition("snlectHi.t*o", stringBuilder2);
      assertEquals("COUNTCONSTRAINT \" = \"  and snlectHi.t*o or snlectHi.t*o", stringBuilder2.toString());
      assertEquals("COUNTCONSTRAINT \" = \"  and snlectHi.t*o or snlectHi.t*o", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create unique index");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLUtil.mutatesStructure("S~P");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      SQLUtil.removeComments("`/4Z9/l|- x_\"r");
      jdbcClob jdbcClob0 = new jdbcClob("alter materialized viewil:qz8:ry}<g zme");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "deletetu", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT deletetu ", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-1735635518), "select into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select into", defaultDBTable0, dBDataType0);
      Integer integer1 = RawTransaction.ABORT;
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("select into", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("create table");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[8];
      stringArray0[1] = stringArray0[4];
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[7] = null;
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, stringArray0[1], stringArray0[4], stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLUtil.isQuery("pFb:*R-(honq5");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DATE DATE NULL", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[14];
      SQLUtil.renderColumnListWithTableName("vi,|>pNd", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "vi,|>pNd";
      // Undeclared exception!
      try { 
        SQLUtil.join("constraint", "insertintervaq", stringArray0, "updateintervaq", "vi,|>pNd", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, "%E!35", "drop tablecall", stringArray0);
      assertEquals("%E!35 as drop tablecall on null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null and null.null = drop tablecall.null", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "MOH?5\"h[E 3t";
      stringArray0[3] = "MOH?5\"h[E 3t";
      stringArray0[5] = stringArray0[4];
      stringArray0[6] = "MOH?5\"h[E 3t";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "MOH?5\"h[E 3t", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[5], defaultDBTable0, 13, "MOH?5\"h[E 3t");
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("MOH?5\"h[E 3t", defaultDBTable0, 13, "CONSTRAINT \"MOH?5\"h[E 3t\" PRIMARY KEY (, MOH?5\"h[E 3t, , MOH?5\"h[E 3t, , , MOH?5\"h[E 3t)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("+reatsStatement()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tablemq6eFid|:ow");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("alter tablemq6eFid|:ow", (String[]) null, "alter tablemq6eFid|:ow", "alter tablemq6eFid|:ow", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("seliect into");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[3];
      stringArray0[0] = " is expected to be of type ";
      stringArray0[1] = "seliect into";
      stringArray0[2] = "seliect into";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " is expected to be of type ", false, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      jdbcClob jdbcClob0 = new jdbcClob(" is expected to be of type ");
      assertEquals(27L, jdbcClob0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("updatealter indewsxko@1a");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("((");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ((
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("pFb:*R-(honq5", stringBuilder0);
      assertEquals("pFb:*R-(honq5", stringBuilder0.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "geSessionUserId");
      SQLUtil.addOptionalCondition("geSessionUserId", stringBuilder0);
      assertEquals("geSessionUserId or geSessionUserId", stringBuilder0.toString());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insert");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        SQLUtil.removeComments(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("pFb:`*R(hoq5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: pFb:`*R(hoq5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("ALTER TABLE ");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("cTp2", " jw.*4~LrX~M-", stringArray0, "cTp2", "updateu|,tqc2,k0'auyn&zs", stringArray0);
      assertEquals("cTp2 join cTp2 as updateu|,tqc2,k0'auyn&zs on ", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("B", false, "cTp2 join cTp2 as updateu|,tqc2,k0'auyn&zs on ", "B");
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT B ", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter tablemq6eFid\":o3", false);
      assertEquals("alter tablemq6eFid \":o3\"", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = SQLUtil.normalize("5KF7fSe_L'X>w}_?$c", false);
      assertEquals("5KF7fSe_L 'X>w}_?$c'", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = SQLUtil.normalize("SELTn, * FROM ", true);
      assertEquals("SELTn, * FROM", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = SQLUtil.normalize("D5eCwKV)n 0);", false);
      assertEquals("D5eCwKV) n 0) ;", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Object[] objectArray0 = new Object[1];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.595461447091443
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("\"");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", false, "\"", "os_ide");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT update ", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isQuery("update");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execorg.apache.derby.impl.store.access.btree.btreemaxscan");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.9582149311117809
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("pFb:*R-(honq5");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("pFb:*R-(honq5", false);
      assertEquals("pFb : * R - (honq5", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("The login timeout, in seconds; 0 means no timeout beyond the normal TCP connection timout.");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter session", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter session\" PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = SQLUtil.normalize("//", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3450363141108999
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String[] stringArray0 = new String[16];
      SQLUtil.renderColumnListWithTableName("update", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "alter table";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("LIwsH$,5", stringArray0, "alter index", "alter index", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5144596543845013
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.join(", ", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "[7bBuhST@/", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[11];
      // Undeclared exception!
      try { 
        SQLUtil.join("8wc", "8wc", (String[]) null, "8wc", "8wc", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.568155382556487
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("cann!Dtest");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "t?'\"";
      stringArray1[1] = "t?'\"";
      String string0 = SQLUtil.innerJoin("cann!Dtest", stringArray0, "t?'\"", "cann!Dtest", stringArray1);
      assertEquals("t?'\" as cann!Dtest on ", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE ", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select", true, "alter indexsnlect into", "select");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT select CHECK select", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 258, "");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SQLUtil.isProcedureCall("drop materialized viewpfb:*r-(honq5");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.normalize("//", false);
      assertEquals("/ /", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", true, "-ae", "SELECT * FROM ");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" CHECK SELECT * FROM ", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("SR~P", "Uc]3KS 1^+Q", defaultDBTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("xZ<n*OoUNgU0Y");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("xZ<n*OoUNgU0Y", (DBTable) null, (-579), "xZ<n*OoUNgU0Y");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals("Y0UgNUoO*n<ZxXZ<N*OOUNGU0Y", stringBuilder1.toString());
      assertEquals("Y0UgNUoO*n<ZxXZ<N*OOUNGU0Y", stringBuilder0.toString());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.9557135998277697
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tablesyscolperms");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setSize(integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DATE", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(1001, "seliect into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("seliect into", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("seliect into SELIECT INTO(3) NULL", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isDML("V-!88BNq($bpoSD");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "V-!88BNq($bpoSD";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "6_a~", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (V-!88BNq($bpoSD)", string0);
      
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("PRIMARY KEY (V-!88BNq($bpoSD)", string1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "ckr^Sn FekfZ", "ckr^Sn FekfZ");
      assertEquals("", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("mcfI8", "mcfI8", stringArray0, "mcfI8", "nset", stringArray0);
      assertEquals("mcfI8 join mcfI8 as nset on mcfI8.null = nset.null and mcfI8.null = nset.null and mcfI8.null = nset.null", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("gO", (String[]) null, "gO", "ludr", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin(";T#", stringArray0, "C", ";T#", stringArray0);
      assertEquals("left join C as ;T# on ", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lADuCSRcOs)v6[;cmC");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "lADuCSRcOs)v6[;cmC", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("$,S:fxF1%<,Si:H8:S");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.addOptionalCondition("lADuCSRcOs)v6[;cmC", stringBuilder0);
      assertEquals("$,S:fxF1%<,Si:H8:S or lADuCSRcOs)v6[;cmC", stringBuilder0.toString());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Y&vuM~'A");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Y&vuM~'A", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("oL", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Y&vuM~'A", true, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Y&vuM~'A FOREIGN KEY () REFERENCES Y&vuM~'A()", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("PY3CX", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Character character0 = new Character('X');
      SQLUtil.renderValue(character0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("d}b7.|", true);
      assertEquals("d } b7.|", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("k}kpmRgj)i)Y+$IF*yc");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.4662665178647387
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLUtil.renderValue((Object) null);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("null");
      assertNull(boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLUtil.renderValue("V-!8H8OBq(xbpo/");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("'V-!8H8OBq(xbpo/'");
      assertNull(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("R*P", defaultDBTable0, 857, "R*P");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("R~P", defaultDBTable0, 857, "R~P");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("R~P", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("alter indewsxko@1a", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.join("NCLOB", "NCLOB", stringArray0, stringArray0[3], stringArray0[3], stringArray0);
      assertEquals("NCLOB join null as null on NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("canntfest", (String[]) null, "alter materialized view//", "canntfest", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.innerJoin("", stringArray0, "", (String) null, stringArray0);
      assertEquals(" as null on ", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4172383526509957
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.innerJoin("null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null", "null = null AND null = null AND null = null", stringArray0);
      assertEquals("null = null AND null = null AND null = null as null = null AND null = null AND null = null on null = null AND null = null AND null = null.null = null = null AND null = null AND null = null.null and null = null AND null = null AND null = null.null = null = null AND null = null AND null = null.null and null = null AND null = null AND null = null.null = null = null AND null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("W6;.s*~$/IP/6Ds<>Kd", "szlect i,to", "W6;.s*~$/IP/6Ds<>Kd");
      assertEquals("W6;.s*~$/IP/6Ds<>Kd", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("seliect int$");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select", true, "alter indexsnlect into", "select");
      dBCheckConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT select CHECK select", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("fa3~P_W],{P [d~/po");
      SQLUtil.addRequiredCondition("fa3~P_W],{P [d~/po", stringBuilder0);
      assertEquals("fa3~P_W],{P [d~/po and fa3~P_W],{P [d~/po", stringBuilder0.toString());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderColumnListWithTableName("null = null AND null = null AND null = null AND null = null", stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null.null, null = null AND null = null AND null = null AND null = null.null, null = null AND null = null AND null = null AND null = null.null, null = null AND null = null AND null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("DATE", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("seliect into");
      assertNull(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.0992975938210185
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tablemq6eFid\":o3");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter tablemq6eFid\":o3", false, "alter tablemq6eFid\":o3", "selecttruncate");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.4642567260559776
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[4] = "PY3CX";
      String string0 = SQLUtil.join("PY3CX", "PY3CX", stringArray0, stringArray0[3], stringArray0[3], stringArray0);
      assertEquals("PY3CX join null as null on PY3CX.null = null.null and PY3CX.null = null.null and PY3CX.null = null.null and PY3CX.null = null.null and PY3CX.PY3CX = null.PY3CX and PY3CX.null = null.null and PY3CX.null = null.null and PY3CX.null = null.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , PY3CX, , , )", string1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("SELECT * FROM ", false, "#?L@aV ", "SELECT * FROM ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK SELECT * FROM ", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("pFb:*R-(honq5", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop indexdrop aggregate if exists");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "drop indexdrop aggregate if exists";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop indexdrop aggregate if exists", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (drop indexdrop aggregate if exists)", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("create table ");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog create table ", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SR~P");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.normalize("Zv~ho5", false);
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
