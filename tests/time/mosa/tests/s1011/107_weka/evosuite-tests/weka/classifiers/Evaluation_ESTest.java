/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 23:06:49 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Random;
import java.util.Vector;
import javax.imageio.metadata.IIOMetadataNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CorrelationAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.supportVector.Puk;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.RandomForest;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("@relation");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "A Table of Contents ");
      evaluation0.SFMeanPriorEntropy();
      double double0 = evaluation0.m_MinTarget;
      RandomTree randomTree0 = new RandomTree();
      try { 
        Evaluation.handleCostOption("@relation", (-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.542886676346678
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.makeDistribution(Double.NaN);
      Evaluation.handleCostOption((String) null, (-1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      evaluation0.m_CostMatrix = costMatrix0;
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.errorRate();
      evaluation0.relativeAbsoluteError();
      evaluation0.weightedAreaUnderPRC();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.034140321208528
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_WithClass = (double) (-2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedRecall();
      evaluation0.pctCorrect();
      evaluation0.toMatrixString();
      evaluation0.falsePositiveRate((-1));
      double double0 = evaluation0.m_SumAbsErr;
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanPriorEntropy();
      double double0 = evaluation0.m_MinTarget;
      RandomTree randomTree0 = new RandomTree();
      try { 
        Evaluation.handleCostOption("@relation", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Logistic logistic0 = new Logistic();
      Object[] objectArray0 = new Object[1];
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.listOptions();
      int int0 = 17;
      try { 
        evaluation0.crossValidateModel((Classifier) multiClassClassifierUpdateable0, instances0, 17, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7019843947642461
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-1));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.SFSchemeEntropy();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9851618115346552
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.generate("weka/core/Capabilities.props");
      Instances instances0 = testInstances1.getData();
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, (-1));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation0.confusionMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6720347182922226
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "   * @return alays true, to ind cate that the output format can \n");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.indexOf(evaluation0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(multiClassClassifierUpdateable0);
      evaluation0.useNoPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.toSummaryString();
      evaluation2.SFPriorEntropy();
      evaluation1.confusionMatrix();
      try { 
        evaluation1.evaluateModel((Classifier) multiClassClassifierUpdateable0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8892845262264077
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.generate("weka/core/Capabilities.props");
      Instances instances0 = testInstances1.getData();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision(22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.178091668793958
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances1.getData();
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, (-1));
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.totalCost();
      // Undeclared exception!
      try { 
        evaluation0.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8896846862904333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances1.getData();
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[5] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, (-1));
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances1);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((-1));
      evaluation0.truePositiveRate((-2));
      evaluation0.unweightedMacroFmeasure();
      evaluation0.SFPriorEntropy();
      evaluation0.confusionMatrix();
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6102696575606976
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.iterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.indexOf(evaluation0);
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      evaluation1.matthewsCorrelationCoefficient((-1));
      evaluation1.m_SumPriorEntropy = (-1.7976931348623157E308);
      evaluation1.SFEntropyGain();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.falsePositiveRate(1628);
      SMO sMO0 = new SMO();
      evaluation2.equals(sMO0);
      evaluation2.weightedAreaUnderROC();
      evaluation1.sizeOfPredictedRegions();
      evaluation1.toClassDetailsString();
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.086960842373327
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      testInstances1.getData();
      AbstractClassifier.makeCopies(gaussianProcesses0, 2);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.falsePositiveRate(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "T88v-UAX.o:mg*;_");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances1.getData();
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, (-1));
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances1);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CSVLoader cSVLoader0 = new CSVLoader();
      SparseInstance sparseInstance1 = new SparseInstance(1, doubleArray0, intArray0, (-1));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance0, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.14829194542732
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.m_SumPriorAbsErr = (double) 2;
      double double0 = evaluation0.m_SumPriorAbsErr;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC(0);
      double double1 = evaluation1.m_Incorrect;
      evaluation0.equals(evaluation1);
      evaluation1.toMatrixString("@data");
      char[] charArray0 = new char[8];
      charArray0[0] = '8';
      charArray0[1] = 'R';
      charArray0[2] = 'X';
      charArray0[3] = 'S';
      charArray0[4] = ']';
      charArray0[5] = 'k';
      charArray0[6] = 'A';
      charArray0[7] = '5';
      evaluation0.num2ShortID(477, charArray0, 2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6016996179040786
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.iterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.indexOf(evaluation0);
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      evaluation1.matthewsCorrelationCoefficient((-1));
      evaluation1.m_SumPriorEntropy = (-1.7976931348623157E308);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) filteredClassifier0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.563051753213674
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      Logistic logistic0 = new Logistic();
      Evaluation.makeOptionString(logistic0, true);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 301.52806;
      doubleArray0[5] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances1.getData();
      double[] doubleArray0 = new double[1];
      capabilities1.toString();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, (-1));
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances1);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CSVLoader cSVLoader0 = new CSVLoader();
      boolean boolean0 = true;
      try { 
        evaluation0.toClassDetailsString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.111128943164732
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearRegression linearRegression0 = new LinearRegression();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(0);
      try { 
        Evaluation.evaluateModel((Classifier) gaussianProcesses0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.GaussianProcesses:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -L <double>
         // \tLevel of Gaussian Noise wrt transformed target. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      evaluation0.KBRelativeInformation();
      RandomTree randomTree0 = new RandomTree();
      Evaluation.makeOptionString(gaussianProcesses0, true);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.generate(" ");
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      LogitBoost logitBoost0 = new LogitBoost();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.m_ComplexityStatisticsAvailable = false;
      double double0 = evaluation0.m_TotalCost;
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.SFEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 1.1000000014901161;
      doubleArray0[3] = Double.NaN;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.numInstances();
      double double2 = evaluation0.numFalsePositives(498);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.areaUnderROC(2);
      double double0 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.SFPriorEntropy();
      evaluation1.confusionMatrix();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3819475579028357
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.precision((-1));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      evaluation0.truePositiveRate((-2));
      evaluation0.weightedFalseNegativeRate();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel(classifier0, (Instances) null, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8896846862904333
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      capabilities1.toString();
      Instances instances0 = testInstances2.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances2.getData();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, (-1));
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances1);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CSVLoader cSVLoader0 = new CSVLoader();
      // Undeclared exception!
      try { 
        evaluation0.weightedFMeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1837132182957943
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "   * @return alays true, to ind cate that the output format can \n");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.indexOf(evaluation0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(multiClassClassifierUpdateable0);
      evaluation0.useNoPriors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.rootMeanPriorSquaredError();
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8660609010604805
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_TotalCoverage;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation2.getClassPriors();
      // Undeclared exception!
      try { 
        evaluation2.updateMargins(doubleArray0, 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.087951579521031
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}8iUZR%3w%J,l.%!#A");
      Instances instances0 = testInstances0.generate("}8iUZR%3w%J,l.%!#A");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.getWords();
      String string0 = "listOptions";
      Instances instances1 = testInstances1.generate("listOptions");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedRecall();
      AdditiveRegression additiveRegression0 = new AdditiveRegression((Classifier) null);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0525312230501809
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      capabilities1.toString();
      Instances instances0 = testInstances2.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances2.getData();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-2);
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0, intArray0, 2855);
      instances1.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      J48 j48_0 = new J48();
      try { 
        evaluation0.crossValidateModel((Classifier) j48_0, instances0, 115, (Random) mockRandom0, (Object[]) testInstances2.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0744690805212636
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Z:y|9^6=(:UC");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumKBInfo;
      evaluation0.weightedAreaUnderROC();
      evaluation1.truePositiveRate(1);
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.067094546561575
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      capabilities1.toString();
      testInstances2.generate("weka/core/Capabilities.props");
      Instances instances0 = testInstances2.getData();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.unweightedMacroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(3429.8, doubleArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8111686505769002
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile("@relation", " ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      Vector<NaiveBayesMultinomialText> vector0 = new Vector<NaiveBayesMultinomialText>();
      instances0.retainAll(vector0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.getClassPriors();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.1000000014901161, doubleArray0);
      try { 
        evaluation2.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.06075971812573
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.getWords();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      evaluation0.errorRate();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.useNoPriors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, (Instance) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.generate();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LogitBoost logitBoost0 = new LogitBoost();
      String string0 = Evaluation.getGlobalInfo(logitBoost0);
      assertEquals("\nSynopsis for weka.classifiers.meta.LogitBoost:\n\nClass for performing additive logistic regression. \nThis class performs classification using a regression scheme as the base learner, and can handle multi-class problems.  For more information, see\n\nJ. Friedman, T. Hastie, R. Tibshirani (1998). Additive Logistic Regression: a Statistical View of Boosting. Stanford University.\n\nCan do efficient internal cross-validation to determine appropriate number of iterations.", string0);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_MissingClass;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double3 = evaluation1.recall(117);
      assertNotEquals(double3, double1, 0.01);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = 'X';
      charArray0[2] = 'G';
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      charArray0[3] = 'W';
      charArray0[4] = '\'';
      charArray0[5] = 'L';
      evaluation1.num2ShortID(44, charArray0, 2485);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.49019607843137253
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      capabilities1.toString();
      Instances instances0 = testInstances2.generate("weka/core/Capabilities.props");
      testInstances2.getData();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.sizeOfPredictedRegions();
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1803266677394324
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances1);
      double double0 = evaluation0.precision((-1));
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.KBInformation();
      double double2 = evaluation1.weightedAreaUnderROC();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation1.falseNegativeRate(16);
      assertEquals(double3, double1, 0.01);
      
      String string0 = evaluation1.toMatrixString("@relation");
      assertEquals("@relation\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double4 = evaluation0.kappa();
      assertEquals(1.0, double4, 0.01);
      
      double double5 = evaluation0.incorrect();
      assertEquals(double5, double0, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.runClassifier(decisionStump0, testInstances0.DEFAULT_WORDS);
      String string0 = Evaluation.getGlobalInfo(decisionStump0);
      assertEquals("\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", string0);
      
      double double0 = evaluation0.incorrect();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.258112793701968
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      RandomTree randomTree0 = new RandomTree();
      double double2 = evaluation0.m_SumAbsErr;
      char[] charArray0 = new char[9];
      charArray0[0] = 'v';
      charArray0[1] = 'U';
      charArray0[2] = '0';
      charArray0[3] = '`';
      charArray0[4] = 'A';
      charArray0[5] = '&';
      charArray0[6] = 'e';
      charArray0[7] = '+';
      charArray0[8] = '\\';
      evaluation0.num2ShortID(1714, charArray0, 1714);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.106847238858971
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile("@relation", " ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_Incorrect;
      evaluation0.useNoPriors();
      evaluation0.SFEntropyGain();
      String string0 = evaluation1.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      evaluation1.areaUnderPRC((-1));
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3935001788247865
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation1.kappa();
      try { 
        Evaluation.evaluateModel("numParameters", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name numParameters.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1871230841744032
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "   * @return alays true, to ind cate that the output format can \n");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.indexOf(evaluation0);
      Evaluation evaluation1 = new Evaluation(instances0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(multiClassClassifierUpdateable0);
      evaluation1.useNoPriors();
      double[] doubleArray0 = new double[3];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      double double0 = evaluation1.unweightedMacroFmeasure();
      evaluation1.SFPriorEntropy();
      evaluation1.weightedAreaUnderROC();
      double double1 = evaluation1.matthewsCorrelationCoefficient(1);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.779556900716016
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      LMT lMT0 = new LMT();
      lMT0.getCapabilities();
      CorrelationAttributeEval correlationAttributeEval0 = new CorrelationAttributeEval();
      Capabilities capabilities0 = correlationAttributeEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      testInstances0.setNoClass(false);
      evaluation0.toSummaryString(false);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.KBMeanInformation();
      evaluation1.falseNegativeRate(0);
      double double2 = evaluation1.rootMeanSquaredError();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.KBInformation();
      evaluation1.setPriors(instances0);
      assertEquals(Double.NaN, evaluation1.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IBk iBk0 = new IBk();
      try { 
        evaluation0.evaluateModelOnce((Classifier) iBk0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6964338652581576
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      testInstances0.setNoClass(true);
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = (double) (-2);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      // Undeclared exception!
      try { 
        evaluation0.weightedAreaUnderROC();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.89105406390246
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.matthewsCorrelationCoefficient((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.getClassPriors();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
      evaluation1.SFSchemeEntropy();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      try { 
        evaluation0.evaluateModelOnce(doubleArray1, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.4925373134328358
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      instances0.indexOf(evaluation0);
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      evaluation1.matthewsCorrelationCoefficient((-1));
      // Undeclared exception!
      try { 
        evaluation1.updateNumericScores((double[]) null, (double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockFile mockFile0 = new MockFile(".arff");
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      evaluation0.m_CoverageStatisticsAvailable = false;
      double double0 = evaluation0.m_SumSqrErr;
      AllFilter allFilter0 = new AllFilter();
      evaluation0.errorRate();
      double double1 = new Float(Double.NaN);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Y';
      charArray0[1] = 'z';
      charArray0[2] = 'R';
      charArray0[3] = '\"';
      charArray0[4] = '>';
      charArray0[5] = '#';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-813), charArray0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1067924097885977
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_Incorrect;
      evaluation0.useNoPriors();
      evaluation0.SFEntropyGain();
      evaluation1.toClassDetailsString(".bsi");
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.pctIncorrect();
      assertEquals(Double.NaN, evaluation2.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.makeOptionString(zeroR0, true);
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2811211713557142
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = lMT0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      testInstances1.setNoClass(true);
      evaluation0.toSummaryString(true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      double double1 = evaluation0.falseNegativeRate((-1));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation1.meanPriorAbsoluteError();
      evaluation1.KBMeanInformation();
      double double3 = evaluation1.SFEntropyGain();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation1.SFMeanEntropyGain();
      assertEquals(double4, double0, 0.01);
      
      evaluation0.getHeader();
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      capabilities1.toString();
      Instances instances0 = testInstances2.generate("weka/core/Capabilities.props");
      testInstances2.getData();
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      Instances instances1 = testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      int int0 = 21;
      evaluation1.m_NumClasses = 21;
      // Undeclared exception!
      try { 
        evaluation1.weightedMatthewsCorrelation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getData();
      testInstances0.setNumRelationalNominalValues(3);
      double double0 = evaluation0.weightedAreaUnderROC();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      String string0 = Evaluation.getGlobalInfo(classificationViaRegression0);
      assertEquals("\nSynopsis for weka.classifiers.meta.ClassificationViaRegression:\n\nClass for doing classification using regression methods. Class is binarized and one regression model is built for each class value. For more information, see, for example\n\nE. Frank, Y. Wang, S. Inglis, G. Holmes, I.H. Witten (1998). Using model trees for classification. Machine Learning. 32(1):63-76.", string0);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-67.8813734), doubleArray0);
      double[] doubleArray1 = evaluation0.getClassPriors();
      assertEquals(2, doubleArray1.length);
      
      evaluation0.areaUnderPRC((-1757));
      evaluation0.rootRelativeSquaredError();
      double double2 = evaluation0.numTrueNegatives(1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.3158288780525655
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = lMT0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.m_SumClassPredicted;
      double double1 = evaluation0.pctCorrect();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      evaluation1.pctUnclassified();
      double double3 = evaluation0.numTrueNegatives((-1));
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1315307804912607
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "   * @return alays true, to ind cate that the output format can \n");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.indexOf(evaluation0);
      AbstractClassifier.runClassifier((Classifier) null, testInstances0.DEFAULT_WORDS);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.SFMeanEntropyGain();
      double double4 = evaluation0.avgCost();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.434282242078569
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}8iUZR%3w%J,l.%!#A");
      Instances instances0 = testInstances0.generate("}8iUZR%3w%J,l.%!#A");
      testInstances0.generate(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression((Classifier) null);
      evaluation0.useNoPriors();
      testInstances0.setNoClass(false);
      evaluation0.weightedAreaUnderROC();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double1 = evaluation0.pctIncorrect();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.toSummaryString((String) null, true);
      double double2 = evaluation0.weightedPrecision();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.getClassPriors();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null\nTotal Number of Instances                0     \n");
      evaluation0.getClassPriors();
      evaluation0.getRevision();
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1015014044975926
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation1.weightedRecall();
      evaluation2.weightedRecall();
      evaluation0.numFalseNegatives((-6));
      String string0 = evaluation1.toMatrixString("getTrim");
      assertEquals("getTrim\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation1.setPriors(instances0);
      double double1 = evaluation2.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.correct();
      String string1 = evaluation1.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string1);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Instances instances0 = testInstances0.generate("}8iUZR%3w%J,l.%!#A");
      testInstances0.setNoClass(true);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falsePositiveRate((-2));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.unclassified();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0807027380687497
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile("@relation", " ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.KBInformation();
      // Undeclared exception!
      try { 
        evaluation1.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4675368896014644
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure(119);
      double double1 = evaluation0.recall((-101));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0611976639656677
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalsePositives(430);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.082864533637787
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = lMT0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate("nominal-values");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      double double0 = evaluation0.weightedRecall();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      evaluation0.weightedFMeasure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.weightedFMeasure();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.numTruePositives(0);
      double double2 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.areaUnderPRC(0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.289085672436611
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      evaluation0.useNoPriors();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.weightedPrecision();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.toClassDetailsString((String) null);
      evaluation0.pctIncorrect();
      try { 
        Evaluation.handleCostOption("@relation", 20);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2889661731386695
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom((-2));
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      AbstractClassifier.makeCopies(serializedClassifier0, 3436);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumErr = (double) 3436;
      evaluation0.equals(testInstances0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.getDiscardPredictions();
      evaluation0.pctIncorrect();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.3721596501715596
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      
      testInstances0.setRelationalClassFormat(instances0);
      double double2 = evaluation0.falseNegativeRate(16);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numTruePositives((-1938));
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.3581652745535546
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      double double1 = evaluation3.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = evaluation3.toSummaryString(".bsi", false);
      assertEquals(".bsi\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = testInstances0.getData();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.meanAbsoluteError();
      try { 
        evaluation1.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      System.setCurrentTimeMillis(300L);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      RandomForest randomForest0 = new RandomForest();
      try { 
        Evaluation.evaluateModel((Classifier) randomForest0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.RandomForest:
         // 
         // -I <number of trees>
         // \tNumber of trees to build.
         // -K <number of features>
         // \tNumber of features to consider (<1=int(logM+1)).
         // -S
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the trees, 0 for unlimited.
         // \t(default 0)
         // -print
         // \tPrint the individual trees in the output
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i#");
      Stacking stacking0 = new Stacking();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i#";
      try { 
        Evaluation.evaluateModel((Classifier) stacking0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure(119);
      evaluation0.weightedFMeasure();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1809520586087259
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      double double0 = evaluation0.weightedRecall();
      String string0 = evaluation0.toMatrixString(".arff");
      assertEquals(".arff\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.setPriors(instances0);
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5875011775569985
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      evaluation0.weightedMatthewsCorrelation();
      double double0 = evaluation0.weightedRecall();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      AbstractClassifier.runClassifier(inputMappedClassifier0, testInstances0.DEFAULT_WORDS);
      Evaluation.getGlobalInfo(inputMappedClassifier0);
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-2818));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2818
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.kappa();
      assertEquals(1.0, double2, 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9160175838494788
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      MockFile mockFile0 = new MockFile(".bsi");
      evaluation0.KBInformation();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1882097014));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1882097014
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5103090061340354
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      MockRandom mockRandom0 = new MockRandom();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 219.2983;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      int int0 = (-1052);
      testInstances0.setNumClasses((-1052));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      SparseInstance sparseInstance0 = new SparseInstance(9);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.336509750329632
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      evaluation0.weightedRecall();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-1), (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCost;
      double double1 = evaluation0.meanPriorAbsoluteError();
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.SFMeanEntropyGain();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.meanAbsoluteError();
      double double5 = evaluation0.rootMeanSquaredError();
      assertEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(120L);
      Object object0 = new Object();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) classificationViaRegression0, instances0, objectArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.makeDistribution(4.9E-324);
      try { 
        Evaluation.handleCostOption("@relation", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.falseNegativeRate(16);
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1833432589913178
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      capabilities1.toString();
      Instances instances0 = testInstances2.generate("weka/core/Capabilities.props");
      Instances instances1 = testInstances2.getData();
      Evaluation evaluation0 = new Evaluation(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) gaussianProcesses0, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFMeanSchemeEntropy();
      SparseInstance sparseInstance0 = new SparseInstance(500);
      sparseInstance0.copy();
      RandomForest randomForest0 = new RandomForest();
      try { 
        evaluation0.evaluateModelOnce((Classifier) randomForest0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile("@relation", " ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      evaluation1.numFalsePositives((-1456206972));
      LWL lWL0 = new LWL();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) lWL0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.4897959183673469
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      Instances instances1 = testInstances1.generate("weka/core/Capabilities.props");
      Instances instances2 = testInstances0.getData();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      SparseInstance sparseInstance0 = new SparseInstance((-336.0), doubleArray0, intArray0, (-1));
      instances2.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances1);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.109313935245903
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.getWords();
      Instances instances0 = testInstances1.generate("l6oZ%B&%h");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setNoClass(true);
      double double1 = evaluation0.weightedAreaUnderROC();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      classificationViaRegression0.buildClassifier(instances0);
      Evaluation.getGlobalInfo(classificationViaRegression0);
      evaluation0.weightedFMeasure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double2 = evaluation0.weightedFMeasure();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      Logistic logistic0 = new Logistic();
      Object[] objectArray0 = new Object[1];
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) logistic0, instances0, objectArray0);
      evaluation0.weightedRecall();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      evaluation0.useNoPriors();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      KStar kStar0 = new KStar();
      try { 
        evaluation0.evaluateModel((Classifier) kStar0, instances0, (Object[]) kStar0.TAGS_MISSING);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8720086468341763
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}8iUZR%3w%J,l.%!#A");
      Instances instances0 = testInstances0.generate("}8iUZR%3w%J,l.%!#A");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      testInstances0.setNoClass(true);
      evaluation0.weightedAreaUnderROC();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.getGlobalInfo(classificationViaRegression0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.SFMeanSchemeEntropy();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5843265743823953
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.makeDistribution(Double.NaN);
      try { 
        Evaluation.handleCostOption(" ", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockFile mockFile0 = new MockFile(".bsi");
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-0.25), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(0.0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.951000379567779
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedRecall();
      evaluation0.SFEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falsePositiveRate(2);
      evaluation0.equals(evaluation1);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7239348063754814
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = evaluation0.toSummaryString(".arff", true);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.0942863972825854
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LinearRegression linearRegression0 = new LinearRegression();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.toSummaryString();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double0, 0.01);
      
      String string1 = evaluation0.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string1);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falsePositiveRate(1);
      IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode(" ");
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.getGlobalInfo(classificationViaRegression0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      testInstances0.setNoClass(false);
      evaluation1.weightedAreaUnderROC();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      Evaluation.getGlobalInfo(classificationViaRegression1);
      evaluation0.weightedFMeasure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unweightedMacroFmeasure();
      evaluation1.setDiscardPredictions(true);
      assertTrue(evaluation1.getDiscardPredictions());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinearRegression linearRegression0 = new LinearRegression();
      IBk iBk0 = new IBk(0);
      String string0 = Evaluation.makeOptionString(linearRegression0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5786122886681095
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.getWords();
      Instances instances0 = testInstances1.generate("l6oZ%B&%h");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.weightedPrecision();
      evaluation0.pctIncorrect();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 289.3120517088726;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.updateStatsForPredictor(2, sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFMeasure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.setDiscardPredictions(false);
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      globalInfoJavadoc0.setUseStars(false);
      evaluation0.equals(globalInfoJavadoc0);
      assertEquals(Double.NaN, evaluation0.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Z:y|9^6=(:UC");
      testInstances0.setNumInstances((-6761));
      testInstances0.setMultiInstance(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "-V <percentage size of validation set>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.580093770149591
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.kappa();
      evaluation1.relativeAbsoluteError();
      ZeroR zeroR0 = new ZeroR();
      String string0 = zeroR0.getRevision();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, "74E~aYw)rywQ|h/I4_");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      testInstances0.generate(" ");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.fMeasure(119);
      double double1 = evaluation0.weightedFMeasure();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 108.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      testInstances0.getRevision();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.areaUnderPRC(11);
      double double0 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      evaluation0.pctIncorrect();
      Evaluation.handleCostOption((String) null, 4);
      char[] charArray0 = new char[2];
      charArray0[0] = ',';
      charArray0[1] = 'l';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(2, charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.getClassPriors();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      
      double double1 = evaluation1.numInstances();
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Z:y|9^6=(:UC");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      evaluation0.weightedRecall();
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.numFalseNegatives(122);
      evaluation0.pctIncorrect();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      Instances instances1 = testInstances0.getData();
      evaluation0.getClassPriors();
      Evaluation evaluation1 = new Evaluation(instances1);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, ".arff");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.883648858474388
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      evaluation0.meanPriorAbsoluteError();
      String string0 = evaluation0.toClassDetailsString("@relation");
      assertEquals("@relation\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.pctIncorrect();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.5766552400266622
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.toSummaryString();
      evaluation0.pctIncorrect();
      try { 
        Evaluation.handleCostOption("@data", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctIncorrect();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.SFEntropyGain();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5299168492712905
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Capabilities capabilities1 = gaussianProcesses0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      testInstances0.getWords();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities1);
      testInstances2.generate("weka/core/Capabilities.props");
      Instances instances0 = testInstances2.getData();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.weightedRecall();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}8iUZR%3w%J,l.%!#A");
      Instances instances0 = testInstances0.generate("}8iUZR%3w%J,l.%!#A");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass((-1), (-1));
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.makeCopy(decisionStump0);
      String string0 = Evaluation.getGlobalInfo(decisionStump0);
      assertEquals("\nSynopsis for weka.classifiers.trees.DecisionStump:\n\nClass for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.185684493992781
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("\n=== Predictions on test data ===\n\n");
      Evaluation evaluation1 = new Evaluation(instances1);
      testInstances1.generate("@data");
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumClassPredicted;
      double double1 = evaluation1.pctCorrect();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6854770775933767
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6828558067063368
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(2008);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.useNoPriors();
      evaluation0.KBInformation();
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.0763573766224805
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Z:y|9^6=(:UC");
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.weightedPrecision();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.unweightedMicroFmeasure();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile("@relation", " ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.sizeOfPredictedRegions();
      double double2 = evaluation0.meanAbsoluteError();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      double double0 = evaluation0.m_SumSqrErr;
      double double1 = evaluation0.errorRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.4438656505524
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.generate();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision(1714);
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falsePositiveRate((-2));
      evaluation0.equals((Object) null);
      double double2 = evaluation0.falseNegativeRate(103);
      assertEquals(double2, double1, 0.01);
      
      evaluation0.meanPriorAbsoluteError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.meanPriorAbsoluteError();
      evaluation0.toSummaryString();
      evaluation0.pctIncorrect();
      try { 
        Evaluation.handleCostOption(".bsi", (-2));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      testInstances0.generate("2UXiaZa<n[Gp'");
      Instances instances0 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
      
      AdditiveRegression additiveRegression0 = new AdditiveRegression((Classifier) null);
      evaluation0.useNoPriors();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2);
      evaluation0.updateMargins(doubleArray0, 4, (-2.0));
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.6866994899585297
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (double) 3;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 5;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, 5.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1500
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-1);
      evaluation0.updateMargins(doubleArray0, 1, 2);
      double double0 = evaluation0.meanAbsoluteError();
      evaluation0.pctIncorrect();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 5;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, 5.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, (-2), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile(" ", " ");
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile("@relation", " ");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumErr;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, (-1), (-478.95107));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom((-2));
      CostMatrix costMatrix0 = Evaluation.handleCostOption("", (-1));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.falseNegativeRate(16);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.totalCost();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.weightedRecall();
      double double1 = evaluation0.pctCorrect();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.getClassPriors();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double0 = evaluation0.m_SumClassPredicted;
      SparseInstance sparseInstance0 = new SparseInstance(0.07500000298023224, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((double) 0, (Instance) sparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.getClassPriors();
      evaluation0.SFMeanEntropyGain();
      try { 
        Evaluation.handleCostOption("=<0<|.", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.05483953446992
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.weightedRecall();
      evaluation0.SFEntropyGain();
      evaluation1.meanAbsoluteError();
      evaluation1.falsePositiveRate((-2));
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) inputMappedClassifier0, instances0, (-2), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      MockFile mockFile0 = new MockFile(".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      AdditiveRegression additiveRegression0 = new AdditiveRegression((Classifier) null);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) additiveRegression0, instances0, 108, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.9720747187584862
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances1);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.setPriors(instances0);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate((-1));
      RandomCommittee randomCommittee0 = new RandomCommittee();
      boolean boolean0 = evaluation0.equals(instances0);
      assertFalse(boolean0);
      
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.8834695023628285
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.runClassifier(decisionStump0, testInstances0.DEFAULT_WORDS);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.1779956654084303
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBInformation();
      double double0 = evaluation0.weightedFMeasure();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("softmax", arrayList0, 84);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`I^^3}wO:P");
      DecisionStump decisionStump0 = new DecisionStump();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 9;
      Instances instances0 = new Instances("getClass", arrayList0, 9);
      inputMappedClassifier0.getModelHeader(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
