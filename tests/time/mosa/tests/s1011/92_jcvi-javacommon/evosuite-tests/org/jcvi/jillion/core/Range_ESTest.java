/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 22:44:45 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5125293403511395
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-20L), 28L);
      range0.isEmpty();
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-20L), 28L);
      range0.isEmpty();
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.493859614377961
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(9223372036854775436L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036854775436 .. 9223372036854775436 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2053L, 9223372036854775436L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.parseRange("[ 9223372036854775436 .. 9223372036854775436 ]/0B", range_CoordinateSystem1);
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2052569050128246
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      boolean boolean0 = range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(2147483648L, long0);
      
      Range.of(2147483647L);
      Range range2 = Range.of(2147483648L, 2147483648L);
      boolean boolean1 = range0.equals(range2);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.9697160928642874
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(332L);
      range0.isEmpty();
      Range range1 = Range.of(32767L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-1932L), 332L);
      Object object0 = new Object();
      range2.equals(object0);
      range2.toString(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem1, 32767L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.268991599937623
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(9982L);
      Range range1 = Range.of(4764L, 9982L);
      Range.of((-2421L));
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9982 .. 9983 ]/SB", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.ofLength(318L);
      Range range0 = Range.of(318L, 4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(905L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.540390206318463
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      Range.of(4294967295L, 9223372036854775436L);
      Object object0 = new Object();
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
      
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5425144055949076
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(9223372036854775436L);
      Range range1 = Range.of(9223372036854775436L);
      range0.complement(range1);
      Range range2 = Range.of(207L);
      range2.getBegin();
      Long long0 = new Long(207L);
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        Range.parseRange("#Z#lM_5,1Lx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.7172471603730846
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.toString();
      Range range1 = Range.ofLength(2147483647L);
      range0.complement(range1);
      range1.split(2147483647L);
      range0.complement(range1);
      Object object0 = new Object();
      range1.equals(range1);
      Range range2 = Range.of((-128L), 1107L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Long long1 = new Long(1L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775793L), (-32768L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4403067477614817
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.contractEnd(0L);
      Long long0 = new Long(1L);
      Range range1 = Range.of(0L);
      assertFalse(range1.isEmpty());
      
      range0.getBegin();
      Long long1 = new Long((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.of(1L, 2467L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.8106810131356768
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.ofLength(5272L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of(1214L);
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4434037824790695
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372032559808519L);
      Range range1 = Range.of(9223372032559808519L);
      range0.startsBefore(range0);
      Range range2 = Range.ofLength(9223372032559808519L);
      List<Range> list0 = range1.split(9223372032559808519L);
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertTrue(boolean0);
      
      List<Range> list1 = range2.complementFrom(list0);
      assertTrue(list1.equals((Object)list0));
      assertFalse(range2.isEmpty());
      assertFalse(range1.equals((Object)range2));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.796560996608503
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808501L);
      Range range1 = Range.of(9223372032559808501L);
      range0.split(9223372032559808501L);
      Object object0 = new Object();
      range1.equals(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7565192509552374
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775435 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      Range range2 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      boolean boolean0 = range0.equals(range3);
      assertTrue(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(9223372036854775436L, long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.398114275760626
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-3138L), 32767L);
      Object object0 = new Object();
      Long long0 = new Long(2147483647L);
      range0.equals(long0);
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.491856304561743
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.of(373L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(range_CoordinateSystem0, 4294967316L, 9223372036854775807L);
      range0.equals(range0);
      Range range1 = Range.of((-32768L), (-32768L));
      range1.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      Range range1 = Range.of(4294967295L, 9223372036854775436L);
      Object object0 = new Object();
      range1.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7169453229376965
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3667L, 3667L);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 82966044L, 4294967295L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.of((-773L));
      Range range3 = Range.of((-913L), (-773L));
      assertNotSame(range3, range2);
      
      Range range4 = Range.of(516L, 9223372036854775807L);
      range4.equals((Object) null);
      Range range5 = Range.of((-773L), 82966044L);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.750494299989528
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      long long0 = 0L;
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range0 = Range.of((-3647L), 9223372036854710273L);
      range0.getBegin();
      long long1 = (-2147476139L);
      Range.of((-2147476139L), 0L);
      Long long2 = new Long(7507L);
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-1209L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range1.split((-1521L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.878608713361707
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-1535L), 127L);
      Range range1 = Range.ofLength(127L);
      range0.complement(range1);
      Object object0 = new Object();
      String string0 = "start offset can not be less than 0";
      // Undeclared exception!
      try { 
        Range.parseRange("start offset can not be less than 0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse start offset can not be less than 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2263476488290417
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775806L, (-1377L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1377 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6332915727573436
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(2855L);
      range0.complement(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(2855L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 2855L, 2855L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9778643962668743
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(9223372036854775426L);
      range0.toString();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(9223372036854775426L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.ofLength(9223372036854775436L);
      Range.of(4294967295L, 9223372036854775436L);
      // Undeclared exception!
      try { 
        Range.parseRange("N&Z!M4B:}tsz~lzE5_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse N&Z!M4B:}tsz~lzE5_ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967293L, 4294967293L);
      Range range1 = Range.ofLength(4294967293L);
      Long long0 = new Long(4294967293L);
      range0.equals(long0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.137021187974974
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.split(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.complement(range0);
      range1.complement(range1);
      Range range2 = Range.ofLength(2147483647L);
      range2.getBegin();
      long long0 = (-2784L);
      Range range3 = Range.of((-2784L), 1367L);
      range2.equals((Object) null);
      long long1 = 445L;
      range3.split(445L);
      Range.of(1367L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = "ZERO_BASED";
      // Undeclared exception!
      try { 
        Range.parseRange("ZERO_BASED", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ZERO_BASED into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(127L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(9223372036854772956L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4415488057560357
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range2 = Range.of((-2147483648L));
      assertFalse(range2.isEmpty());
      
      Long long0 = new Long(0L);
      Range range3 = Range.of((-9223372036854775793L));
      range3.equals(range1);
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ -2147483648 .. -2147483648 ]/RB", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.268523681589375
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Comparators.values();
      Range.of(9223372032559808519L, 9223372032559808519L);
      Range range0 = Range.of(4294967316L);
      Range range1 = Range.of(4294967316L, 9223372036854768317L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.136571960943424
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.split(2147483647L);
      Range range1 = Range.of(2147483647L);
      range1.complement(range0);
      range1.complement(range1);
      Range range2 = Range.of(2147483647L);
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-32768L), (-1471L));
      range1.equals(range2);
      Range.of(1491L);
      Range range3 = Range.of(9223372036854774513L);
      // Undeclared exception!
      try { 
        range3.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854774513 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967293L, 4294967293L);
      Long long0 = new Long(4294967293L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      range0.equals(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.7336689179390916
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.of((-2147483648L));
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.4404389791664403
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range2 = Range.of((-2147483648L));
      Long long0 = new Long(0L);
      range0.asRange();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertTrue(range0.isEmpty());
      
      boolean boolean1 = range2.endsBefore(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2664158827336083
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967316L, 4294967316L);
      Range range1 = Range.of(373L, 4294967316L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3933896256916563
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long.getLong("h]", 372L);
      Range.of((-2140L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 372L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.444382704546294
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 255L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.endsBefore(range0);
      Range.of(range_CoordinateSystem1, (-128L), 2147483647L);
      List<Range> list0 = range1.split(902L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("start offset can not be less than 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse start offset can not be less than 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.38542126284666
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1295L, 1295L);
      Long long0 = new Long(1295L);
      boolean boolean0 = range0.equals(long0);
      Range range1 = Range.of(1295L, 1295L);
      range1.iterator();
      boolean boolean1 = range1.startsBefore(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-20L), 28L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.830945064331375
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.split(2147483647L);
      Range range1 = Range.of(4294967295L);
      range1.complement(range1);
      Range range2 = Range.of(4294967295L);
      Range.of((-2784L), 1367L);
      range2.equals((Object) null);
      List<Range> list0 = range1.split(32767L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(4294967293L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(28L, 28L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range1 = Range.of(9223372036854775807L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1295L, 1295L);
      Long long0 = new Long(1295L);
      Range range0 = Range.of((-2147483682L));
      Long long1 = new Long(2467L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4936914572274604
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.isEmpty();
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      
      Range range1 = Range.of(255L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1817377124206847
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(65535L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(65536L, long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.443444943381152
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808513L, 9223372032559808513L);
      Range range1 = Range.ofLength(9223372032559808513L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range2 = Range.of(9223372032559808513L);
      List<Range> list0 = range2.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range3 = Range.ofLength(9223372032559808513L);
      //  // Unstable assertion: assertSame(range3, range1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-20L), 28L);
      boolean boolean0 = range0.equals("Jh1*`4:[t{`2*0r+L");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(2475L);
      range0.equals((Object) null);
      String string0 = "invalid startOffset %d: file is only %d bytes";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("invalid startOffset %d: file is only %d bytes", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse invalid startOffset %d: file is only %d bytes into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4535088239086424
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.474241186040161
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.isEmpty();
      range0.split(1L);
      Range.of(1L, 1L);
      range0.getBegin();
      Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        Range.parseRange("LYI,L!?i~QPq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse LYI,L!?i~QPq into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3290811126512576
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(14L, 14L);
      Range range1 = Range.of((-1L));
      long long0 = range1.getBegin();
      assertFalse(range1.isEmpty());
      assertEquals((-1L), long0);
      
      Long long1 = new Long((-1L));
      Range range2 = Range.ofLength(4024L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.1356178217257975
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.of(255L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.979024296846825
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(14L);
      long long0 = range0.getLength();
      assertEquals(14L, long0);
      
      range0.isEmpty();
      Range range1 = Range.of(14L);
      range0.equals(range1);
      List<Range> list0 = range1.split(14L);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.484202385250069
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(258L, 258L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 258 .. 258 ]/0B", string0);
      
      Range range1 = Range.of(1382L);
      range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8918711764128284
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(2851L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.isEmpty();
      Range range1 = Range.of(465L);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.442023520229242
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      boolean boolean0 = range0.isEmpty();
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals((Object) null);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.300692568913139
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range0 = Range.of((-128L), (-128L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(13L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854775436L, 9223372036854775436L);
      Object object0 = new Object();
      Range range1 = Range.of(65535L, 9223372036854775436L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.650662419323353
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(14L, 14L);
      Range range1 = Range.of((-1L), 14L);
      Range range2 = Range.of(2147483647L);
      range2.complement(range0);
      Range range3 = Range.of((-1L), 3L);
      boolean boolean0 = range3.intersects(range2);
      assertFalse(boolean0);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.956110456191066
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775781L);
      Range range1 = Range.of(1698L);
      List<Range> list0 = range0.complement(range1);
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      assertEquals(2, list0.size());
      
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1578649466435635
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3667L, 3667L);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-9223372036854775790L), (-9223372036854775790L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854772141L, (-9223372036854775790L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854775790 would make range [9223372036854772141 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("Zero Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Zero Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.520423613859566
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      
      Range range1 = Range.of(0L);
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.7557041935238757
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.ofLength(3668L);
      Range.of(3668L);
      Range range1 = Range.ofLength(3668L);
      range1.complement(range0);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$RangeIterator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$RangeIterator into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.6334021657199447
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(317L);
      Range range1 = Range.ofLength(317L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.of(422L, 422L);
      Range range0 = Range.of(422L, 4294967298L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.3388692839320795
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Long long0 = new Long(318L);
      Range range0 = Range.of(318L, 318L);
      range0.intersects(range0);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Long long0 = new Long(9223372032559808513L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.4418211781193198
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(65535L);
      Range range1 = Range.of(2378L, 2710L);
      range1.intersection(range0);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range0 = Range.of((-9223372036854775790L));
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854775789L), long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.269092218743278
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3517L), 32767L);
      List<Range> list0 = range0.split(32767L);
      assertFalse(list0.contains(range0));
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.386722122859669
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372032559808513L, 9223372032559808513L);
      Range range1 = Range.ofLength(9223372032559808513L);
      range0.isSubRangeOf(range1);
      Range.of(9223372032559808513L);
      List<Range> list0 = new LinkedList<Range>();
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854775412L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.671448297945075
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(9223372036854775436L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036854775436 .. 9223372036854775436 ]/0B", string0);
      
      List<Range> list0 = range0.complement(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(list0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 9223372036854775436 .. 9223372036854775436 ]/0B", range_CoordinateSystem0);
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.6333482931823684
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      List<Range> list0 = range0.split(2147483647L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      Range range1 = Range.ofLength(2147483647L);
      range1.getBegin();
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3853212528456598
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1295L, 1295L);
      Long long0 = new Long(1295L);
      range0.equals(long0);
      Range range1 = Range.of(1295L, 1295L);
      range1.complement(range0);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.202999696051705
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 373L;
      Range range0 = Range.of(373L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 4294967316L;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, 4294967316L, 9223372036854775807L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967317L, 4294967316L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.470114704952892
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(2553L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(range1.isEmpty());
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.344292841368524
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372032559808519L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.587496354067534
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(1876L);
      Range range1 = Range.of((-1767L), (-1767L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-1766L), long0);
      
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.ofLength(65535L);
      Range range0 = Range.of((-3793L), 65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.133562824120753
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.of((-32768L), (-32768L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-20L), 17L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-1L));
      range1.equals(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.of((-2089L), 4294967316L);
      // Undeclared exception!
      try { 
        Range.of(4294967316L, (-2089L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.9795303057019797
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long long0 = new Long(9223372036854775807L);
      Range range1 = Range.of((-1017L));
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, 4294967293L, 4294967293L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=4.110179360207003
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      range0.complement(range1);
      Range range2 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.copy();
      range_Builder0.shift(563L);
      Range range3 = range_Builder0.build();
      range0.complement(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.4403067477614817
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range range1 = Range.ofLength(1667L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.3427415201956934
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      Range range1 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.3848772524016595
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2553L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(1L);
      Long long0 = new Long(4439L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2322L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.344980491477481
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 905L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1 .. 905 ]/0B", string0);
      
      long long0 = range0.getLength();
      assertEquals(907L, long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(55L);
      Range range1 = range0.asRange();
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 381L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.4575095239252036
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-128L), (-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.8660910107093636
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 9223372036854775436 .. 9223372036854775435 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      range0.complement(range1);
      Range range2 = Range.of(9223372036854775436L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775436L);
      range_Builder1.build();
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      range0.asRange();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(65535L, 9223372036854775436L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(9223372036854775436L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), (-32768L));
      range_Builder0.expandBegin((-32768L));
      range_Builder0.contractEnd(9223372036854775807L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4414086761361373
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_Builder0.contractBegin((-2147483648L));
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.of((-2147483648L));
      Long long0 = new Long(0L);
      Range range2 = Range.of((-9223372036854775793L));
      range2.equals(range1);
      List<Range> list0 = new LinkedList<Range>();
      List<Range> list1 = range2.complementFrom(list0);
      range2.complementFrom(list1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.0769949809093085
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      range0.isEmpty();
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.4430305284622147
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(18L);
      List<Range> list0 = range0.split(18L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      assertTrue(list0.contains(range0));
      
      Range range1 = Range.ofLength(18L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.1342954248533537
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775436L);
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775435 ]/0B");
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.300692568913139
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2968L, 2968L);
      Range range0 = Range.of(2968L, 2968L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.3584884981309253
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-140L), (-140L));
      Range range0 = Range.of((-140L), (-140L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.1139696645160146
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(2719L);
      range0.getBegin();
      Object object0 = new Object();
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.357284162522736
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-198L));
      Range range0 = Range.of((-198L), (-198L));
      long long1 = range0.getBegin();
      assertEquals((-198L), long1);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.205787757663296
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(9223372036854775436L);
      range0.toString();
      range0.complement(range0);
      Range range1 = Range.of(9223372036854775436L, 9223372036854775436L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.387726255250662
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-2140L));
      boolean boolean0 = range0.isEmpty();
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      boolean boolean1 = range0.equals(range0);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.200113693165702
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(28L, 28L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.717622692036118
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-1L), 14L);
      Range range1 = Range.of((-1L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      assertFalse(list0.isEmpty());
      
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.2052569050128246
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-2140L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Range range1 = Range.of((-1932L));
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range1));
      
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-32768L), 351L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.0808360831049293
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(4294966978L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of((-1L), 14L);
      Object object0 = new Object();
      Range range1 = range0.asRange();
      // Undeclared exception!
      try { 
        range1.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.203776696828706
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(9223372036854775436L, 9223372036854775436L);
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775436 .. 9223372036854775436 ]/0B", string0);
      
      Range.parseRange("[ 9223372036854775436 .. 9223372036854775436 ]/0B");
      range0.split(9223372036854775436L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(2851L, 2851L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.3146525490016976
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(2553L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2553L, 2553L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(2553L);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.3052682756599547
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1369L), (-1369L));
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -1369 .. -1369 ]/0B", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(9982L);
      String string0 = range0.toString();
      assertEquals("[ 9982 .. 9982 ]/0B", string0);
      
      boolean boolean0 = range0.equals("[ 9982 .. 9982 ]/0B");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.1470823338168756
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(9223372036854772956L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854772956L, long0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.181672696269445
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(1314L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1314L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.of(218L, 218L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.267638227190276
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.of(14L, 14L);
      Range range0 = Range.of((-1L), 14L);
      range0.iterator();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.386371757896165
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-23L));
      Range.of((-23L), 876L);
      Range range1 = Range.of(876L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1295L, 1295L);
      range0.getEnd();
      range0.intersection(range0);
      Range range1 = Range.of(1295L, 1295L);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(1296L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.8940784789052407
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.1349250982103
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem1);
      range0.intersects(range1);
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1295L, 1295L);
      Long long0 = new Long(1295L);
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(1295L, 1295L);
      long long1 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(1296L, long1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of((-1L), 14L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of((-23L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.7964122534878726
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.of(65528L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1223L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.3420661016778452
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 905L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 618L;
      Range.Builder range_Builder1 = new Range.Builder(618L);
      range_Builder1.expandEnd(618L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(65535L, 3564L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.51994339677531
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.of((-23L));
      Range.of((-3302L), (-3302L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-3302L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.697258623442196
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-357L), 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem2);
      Range.of(0L, (-1L));
      range0.startsBefore(range0);
      range1.isSubRangeOf(range1);
      Range range2 = Range.ofLength(0L);
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 0L);
      range_Builder0.expandBegin((-1L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.build();
      range2.isEmpty();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(14L);
      Range range0 = Range.of(14L, 14L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of((-752L));
      range0.getEnd();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -752 .. -752 ]/0B", string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.597956439095072
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(0L);
      Range.ofLength(4294967295L);
      String string0 = "";
      Range range0 = Range.of(0L);
      range0.getEnd();
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.717622692036118
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of((-1L), 14L);
      Range range1 = Range.of((-1L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.2880966068153166
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 905L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.301586756692573
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range range0 = Range.of(620L, 620L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 621 .. 621 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 621 .. 621 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range range0 = Range.ofLength(1857L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 1856 ]/0B", string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.3003083871902303
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range range0 = Range.of((-128L), 272L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.632930113365047
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.ofLength(2613L);
      List<Range> list0 = range0.split(2613L);
      Range range1 = Range.of(2613L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list1.size());
      assertTrue(list1.contains(range0));
      assertFalse(range1.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.371838784120754
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-289L), 2672L);
      Range range1 = Range.of(799L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.1328844901090855
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.9797520106127435
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(9223372036854775798L, long0);
      
      range0.isEmpty();
      Range.of(1L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775798L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-128L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range range0 = Range.of((-2571L));
      assertFalse(range0.isEmpty());
  }
}
