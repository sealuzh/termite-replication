/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 22:47:57 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5646864935634275
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("LOr", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, Long> hashMap1 = new HashMap<Boolean, Long>();
      HashMap<Integer, Double> hashMap2 = new HashMap<Integer, Double>();
      Double double0 = new Double(615.9185851);
      hashMap2.put((Integer) null, double0);
      jSONObject1.put("wheel.json.JSONObject@0000000001", (Map) hashMap2);
      JSONObject jSONObject2 = new JSONObject();
      int int0 = (-2954);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-2954), (-2954));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.844047895106879
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float((-207.998092));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("null", (Collection) linkedList0);
      jSONObject0.optJSONArray("null");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String string0 = "p[]";
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1546856420984069
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      jSONObject0.put("]ST", false);
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.accumulate("Expected '", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(2800.0996F);
      hashMap0.put(object0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONObject$Null cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3785208658816814
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "\f2'";
      stringArray0[6] = "";
      stringArray0[7] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("toH", (-557.8996365));
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5448281619898196
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}\"m7`f}4YVu~n0~Xm", (-1290.361617));
      jSONObject1.put("M+ne2M,w", true);
      jSONObject1.getInt("}\"m7`f}4YVu~n0~Xm");
      String string0 = "p";
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6596300959013135
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Hx+Q/ x`x";
      stringArray0[1] = "ac";
      stringArray0[2] = "R";
      stringArray0[3] = "]sG' aG4~n!QhSRmLA";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.remove("Hx+Q/ x`x");
      JSONObject jSONObject1 = jSONObject0.put("Hx+Q/ x`x", 0L);
      jSONObject0.put("n0)ACvfN+j6", 238);
      jSONObject0.getLong("n0)ACvfN+j6");
      JSONObject.getNames((Object) "Hx+Q/ x`x");
      jSONObject1.names();
      try { 
        jSONObject1.getInt("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1829235631042345
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONObject.";
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (-837.0));
      jSONObject1.optDouble("] is not a JSONObject.");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject1.put("wheel.json.JSONTokener", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("val", (-2065L));
      double double0 = jSONObject1.optDouble("val", 0.0);
      assertEquals((-2065.0), double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONException";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONException", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, Long> hashMap1 = new HashMap<Boolean, Long>();
      HashMap<Integer, Double> hashMap2 = new HashMap<Integer, Double>();
      jSONObject1.put("wheel.json.JSONObject@0000000001", 1103.0);
      try { 
        jSONObject1.getJSONObject("q[3WtO>U))VHc</:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q[3WtO>U))VHc<\\/:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.770103968167668
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("p>Gx0)$]Gth");
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) "{}");
      jSONObject1.put("{}", (Collection) null);
      String string0 = jSONObject1.toString(790);
      JSONObject.quote(string0);
      // Undeclared exception!
      jSONObject1.getDouble(string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.669734222705066
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      jSONObject0.put("j1`W]A5Mjnl8", (Collection) null);
      JSONObject.valueToString(hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      HashMap<Boolean, Long> hashMap2 = new HashMap<Boolean, Long>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap2);
      JSONObject jSONObject2 = new JSONObject((Object) "{}");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append('}');
      jSONObject1.toString((-2081), 1167);
      JSONObject jSONObject3 = new JSONObject((Object) "j1`W]A5Mjnl8");
      JSONArray jSONArray0 = (JSONArray)jSONObject1.opt("j1`W]A5Mjnl8");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.7494502426070615
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((double) 92);
      JSONObject jSONObject1 = new JSONObject(float0);
      Long long0 = Long.valueOf((-3493L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4402082378786427
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Byte byte0 = new Byte((byte)81);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.optJSONArray("<&?5<2q{`WvC4 dc3^");
      jSONObject0.length();
      jSONObject0.optLong("<&?5<2q{`WvC4 dc3^");
      Double double0 = new Double(Double.NaN);
      Double.max((-549.29), (-617.53745595556));
      Double.sum(0L, 596.15245);
      try { 
        jSONObject0.putOpt("<&?5<2q{`WvC4 dc3^", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2384341352026067
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[10];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 122, 61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("LOr", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      jSONObject0.append("LOr", (Object) null);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("`&`4@rpJ$\">q?m%", (Map) hashMap0);
      try { 
        jSONObject1.append("`&`4@rpJ$\">q?m%", "`&`4@rpJ$\">q?m%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[`&`4@rpJ$\">q?m%] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2789389564075417
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("wSzFH[_>/Qz");
      assertEquals(0, int0);
      
      String string0 = JSONObject.quote("wSzFH[_>/Qz");
      assertEquals("\"wSzFH[_>/Qz\"", string0);
      
      boolean boolean0 = jSONObject0.optBoolean("wSzFH[_>/Qz");
      assertFalse(boolean0);
      
      int int1 = jSONObject0.optInt("wSzFH[_>/Qz", 0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3192204551301083
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("[]", (Object) "[]");
      jSONObject1.put("{}", 0L);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString(jSONObject2);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      double double0 = jSONObject1.getDouble("{}");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7940714044097708
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) jSONObject0);
      long long0 = jSONObject1.optLong("{}", 2498L);
      assertEquals(2498L, long0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cEq\"";
      stringArray0[1] = "{}";
      stringArray0[2] = "{}";
      stringArray0[3] = "{}";
      stringArray0[4] = "{}";
      stringArray0[5] = "{}";
      stringArray0[6] = "{}";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("{}");
      assertNotNull(jSONObject3);
      
      Float float0 = new Float(0.0);
      JSONObject.numberToString(float0);
      String string1 = JSONObject.quote("@");
      assertEquals("\"@\"", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1065965221696015
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not found.", (Map) null);
      JSONObject.quote("] not found.");
      jSONObject0.isNull("] not found.");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("] not found.");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6480950586435879
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONObject0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 1788);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      jSONObject0.put("getparseBoolean", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('');
      Writer writer0 = jSONObject0.write(stringWriter1);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("MMuLc", (Map) null);
      jSONObject0.isNull("MMuLc");
      try { 
        jSONObject0.getInt("MMuLc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MMuLc\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8565954897428565
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) "{}");
      jSONObject1.put("{}", (Collection) null);
      String string0 = jSONObject1.toString(769);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      JSONTokener jSONTokener1 = new JSONTokener(string0);
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      jSONObject0.put("{}", (Map) hashMap1);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject3 = new JSONObject(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(3556.0F);
      JSONTokener jSONTokener0 = new JSONTokener("{bB}Lqt");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {bB}Lqt
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9597469246800725
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(0.0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      String string0 = JSONObject.quote("co");
      assertEquals("\"co\"", string0);
      
      jSONObject0.accumulate("co", jSONArray1);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject.getNames((Object) "");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5108434098084844
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.doubleToString(528.016671);
      JSONObject jSONObject0 = new JSONObject((Object) "528.016671");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1167, 1167);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0.0);
      jSONObject1.getInt("] is not a JSONObject.");
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2002025435261348
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      jSONObject0.put("getparseBoolean", (Map) hashMap0);
      jSONObject0.isNull("getparseBoolean");
      try { 
        jSONObject0.getDouble("getparseBoolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getparseBoolean\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.270559257984013
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.append("] is not a number.", "] is not a number.");
      jSONObject1.remove("] is not a number.");
      jSONObject0.toJSONArray(jSONArray1);
      try { 
        jSONObject0.getDouble("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0987996145617602
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("Yx!m", (Collection) null);
      jSONObject1.toString(102);
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                                      \"java.lang.String@0000000005\": [],\n                                                                                                      \"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      JSONObject jSONObject3 = new JSONObject();
      assertEquals(0, jSONObject3.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("true", (Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull("true");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("%^M)XHY*[`#A%Ezh5(");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6445890551341336
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      jSONObject0.put("{}", (Object) jSONObject0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject0.has("{}");
      boolean boolean0 = jSONObject0.optBoolean("{}");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.490403227787064
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoString", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("[]");
      Boolean boolean0 = Boolean.valueOf("[]");
      JSONObject jSONObject1 = jSONObject0.put("[]", (Object) boolean0);
      jSONObject1.getBoolean("[]");
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject1.write(writer0);
      JSONObject jSONObject2 = jSONObject0.put("getoptJSONObject", 0L);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.586577333232116
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "TbA7<K3+}OAp,";
      stringArray0[2] = "TbA7<K3+}OAp,";
      stringArray0[4] = "TbA7<K3+}OAp,";
      stringArray0[5] = "TbA7<K3+}OAp,";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      jSONObject0.accumulate("TbA7<K3+}OAp,", jSONObject1);
      String string0 = jSONObject1.optString("L", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Byte byte0 = new Byte((byte)49);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertEquals(5, stringArray0.length);
      
      String string0 = JSONObject.valueToString(linkedList0, 160, (byte)49);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3605640319920043
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "L4(M9-T=/Y");
      JSONObject jSONObject0 = new JSONObject("L4(M9-T=/Y", stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.putOpt("L4(M9-T=/Y", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}3EsV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }3EsV
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.pollFirst();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.valueToString(linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("[]", linkedList0);
      jSONObject1.names();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)92);
      String string0 = JSONObject.numberToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(8192);
      try { 
        jSONObject0.accumulate((String) null, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1, (-1432));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6519057806485584
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("LOr", (Collection) linkedList0);
      JSONObject.valueToString(jSONObject1);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, Long> hashMap1 = new HashMap<Boolean, Long>();
      jSONObject1.putOpt("LOr", hashMap0);
      HashMap<Integer, Double> hashMap2 = new HashMap<Integer, Double>();
      jSONObject1.put("wheel.json.JSONObject@0000000001", (Map) hashMap2);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.toString((-2954), (-2954));
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5134049813662336
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      HashMap<JSONArray, Float> hashMap1 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(hashMap1, 39, 39);
      assertEquals("{}", string0);
      
      Byte byte0 = new Byte((byte)62);
      String string1 = JSONObject.quote("aQ|mPU0is#Jm");
      assertEquals("\"aQ|mPU0is#Jm\"", string1);
      
      JSONObject.valueToString("\"aQ|mPU0is#Jm\"");
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("M&5>)0RW$U?vhi", 8.221273187860831);
      try { 
        jSONObject0.getJSONObject("M&5>)0RW$U?vhi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M&5>)0RW$U?vhi\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4999182338511856
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("z(g", "z(g");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(3045, 1L);
      jSONObject0.toJSONArray(jSONArray0);
      Integer integer0 = new Integer(19);
      JSONObject jSONObject2 = jSONObject1.accumulate("z(g", integer0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", (Object) "[]");
      boolean boolean0 = new Boolean("[]");
      String string0 = jSONObject0.getString("[]");
      assertNotNull(string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.572592226611343
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put((Byte) null, jSONArray0);
      JSONObject.valueToString(hashMap0);
      Long long0 = new Long((-2388L));
      hashMap0.values();
      jSONObject0.remove("~m;Ut{q{Y*tnu3@inIV");
      jSONObject0.optBoolean("1<?5{vlIa");
      jSONObject0.optBoolean("in", true);
      jSONObject0.names();
      jSONObject0.has("F83v8TFUh@7");
      jSONObject0.optBoolean("~m;Ut{q{Y*tnu3@inIV", false);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@00000000030", (Map) hashMap0);
      jSONObject1.toJSONArray((JSONArray) null);
      jSONObject0.put("GolKp^*Gi5Os&;", true);
      jSONObject0.putOpt("3?V@ti(!:1C", "F83v8TFUh@7");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.977183323425756
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("&k7PZ_]9w_jPKo}", 4548.43213245036);
      try { 
        jSONObject1.getBoolean("&k7PZ_]9w_jPKo}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&k7PZ_]9w_jPKo}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("uCUoL|05", 3712.69);
      jSONObject0.optBoolean("uCUoL|05");
      JSONObject jSONObject1 = new JSONObject();
      String string0 = jSONObject0.optString("uCUoL|05", "true");
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("QDA=kS4af_Jz2Xo:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QDA=kS4af_Jz2Xo:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("max", "max");
      assertEquals("max", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.004822822698641
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("not", 1965L);
      jSONObject0.putOpt("7`buQ'&E=", "7`buQ'&E=");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.257503732489207
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.toString(102, 39);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.5764082587002846
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      jSONObject0.put("{}", (Object) jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      String string1 = jSONObject0.optString("{}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      jSONObject0.optLong("7T-qY", 0L);
      stringArray0[0] = "cEq\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("cEq\"", true);
      jSONObject1.getBoolean("cEq\"");
      JSONObject jSONObject2 = new JSONObject();
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("fo", (Object) "fo");
      try { 
        jSONObject1.getLong("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.27760102290036
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.toString(42, 42);
      StringWriter stringWriter1 = new StringWriter();
      assertEquals("", stringWriter1.toString());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 123, 557);
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A_Vh*w$/Q2", (Object) null);
      String string0 = jSONObject0.toString((-2));
      assertEquals("{}", string0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{QZ?R5z??M9HY\"w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {QZ?R5z??M9HY\"w
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.6122914913710056
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject.doubleToString(528.016671);
      JSONObject jSONObject0 = new JSONObject((Object) "528.016671");
      JSONObject jSONObject1 = jSONObject0.put("528.016671", 9);
      // Undeclared exception!
      jSONObject1.toString(2364);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("wSzFH[_>/Qz", (Collection) linkedList0);
      jSONObject0.getJSONArray("wSzFH[_>/Qz");
      Integer integer0 = new Integer(709);
      linkedList0.add(integer0);
      jSONObject1.toString((-4301));
      String string0 = JSONObject.quote("._7?w'Da(`eM^??515");
      assertEquals("\"._7?w'Da(`eM^??515\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.3791235169376774
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("\b", (Map) null);
      Object object0 = jSONObject1.get("\b");
      assertFalse(object0.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.4606859989158063
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not fou/nd.", (Map) null);
      jSONObject1.isNull("] not fou/nd.");
      jSONObject0.accumulate("] not fou/nd.", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("wg*)@kO", 10);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5800753406953993
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("wSzFH[_>/Qz", (-850));
      JSONObject.quote("wSzFH[_>/Qz");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      try { 
        jSONObject0.put("wtHT3f,&<?U+t8[[A", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.9891373440826869
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject.doubleToString(528.016671);
      JSONObject jSONObject0 = new JSONObject((Object) "528.016671");
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.4205472719467087
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.doubleToString(528.016671);
      assertEquals("528.016671", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "528.016671");
      String string1 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0115053753997263
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("vR=\"SZMfA@r>RvpT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vR=\\\"SZMfA@r>RvpT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] not fou/nd.", (Map) null);
      int int0 = jSONObject0.optInt("] not fou/nd.");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, (-1012), (-1012));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("isoptJSONObject");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6892786115222247
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Q~yDR+m2[_~xM)%:j^9", 0L);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0549746278485177
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.append("c8oMlL%iT/b~7,5hM", "c8oMlL%iT/b~7,5hM");
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.169885039244633
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("Substring bounds error");
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.get("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.put((String) null, (-1401L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONObject.";
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0.0);
      try { 
        jSONObject1.getJSONArray("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("d;H7(jW7c GHaaiB7", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONTokener jSONTokener0 = new JSONTokener("Missing value");
      Object object1 = jSONObject0.opt("Missing value");
      assertNull(object1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.3350026060706126
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("\"k\"tY#PimUSy", (-2380L));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("wheel.json.JSONObject$1");
      assertEquals("", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5559470913862425
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("Null key.");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("--`0Z9%8p^pFxwzL1", (Collection) linkedList0);
      String string0 = jSONObject1.toString(787);
      String string1 = JSONObject.quote("{\"java.lang.String@0000000003\": []}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.6047867698526947
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) jSONObject0);
      JSONObject.quote("{}");
      boolean boolean0 = jSONObject1.optBoolean("{}");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0276242004980904
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", (Object) "[]");
      try { 
        jSONObject0.getBoolean("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("get");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("Q<VWf'`R/NC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Q<VWf'`R/NC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double double0 = new Double(119.5478);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = JSONObject.quote("Q");
      assertEquals("\"Q\"", string0);
      
      String string1 = JSONObject.valueToString("Q", 97, 97);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer integer0 = new Integer(1605);
      String string0 = JSONObject.valueToString(integer0, 1605, 1605);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 1577, 1577);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 10, 10);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.3960882220782682
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float float0 = Float.valueOf(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-592));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.788336980067754
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Map) null);
      jSONObject0.isNull("] not found.");
      String string0 = jSONObject1.toString(342);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.2079297593205902
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject.doubleToString(528.016671);
      JSONObject jSONObject0 = new JSONObject((Object) "528.016671");
      // Undeclared exception!
      jSONObject0.toString(1167, 1167);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-80));
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(72, 72);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "cJ%\"\\uD!IjxV]*~_apf";
      try { 
        jSONObject0.getJSONArray(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cJ%\\\"\\\\uD!IjxV]*~_apf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("d;H7(jW7c GHaaiB7", 498.21555274814);
      assertEquals(498.21555274814, double0, 0.01);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.3137063051745137
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("wSzoYFH[_>/Qz", false);
      assertFalse(boolean0);
      
      String string0 = JSONObject.quote("wSzoYFH[_>/Qz");
      assertEquals("\"wSzoYFH[_>/Qz\"", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (-1932.56250060057));
      assertEquals((-1932.56250060057), double0, 0.01);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("getjoin", true);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("|bxJ/");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("{}", (Object) null);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(":b-7XUb");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject0.has("{}");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\"\"");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject.testValidity(";v?|dDZfK");
  }

  /**
  //Test case number: 151
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote("[G>%/,");
      assertEquals("\"[G>%/,\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = JSONObject.quote("\r");
      assertEquals("\"\\r\"", string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = JSONObject.quote("gGy7Ta/");
      assertEquals("\"gGy7Ta/\"", string0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("?^a[bOi`dtp&yN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"?^a[bOi`dtp&yN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
