/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 22:38:55 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.schememode.SchemeMode;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.metal.MetalToolBarUI;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.fop.pdf.PDFInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8017001372418333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, (-1681), (-1280L), (-2323), 37, 'y', menuElementArray0, menuSelectionManager0);
      jDayChooser1.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(13, jDayChooser1.getDay());
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1608702501827213
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      JButton[] jButtonArray0 = new JButton[9];
      jDayChooser0.days = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setDecorationBackgroundColor((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2083849980791506
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 40, 40, 8968, 40, 'y', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.consume();
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.695518092694581
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth(14);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.274931397944667
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(3);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = Locale.FRENCH;
      jDayChooser0.setLocale(locale0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Timestamp timestamp0 = new Timestamp((-891L));
      jDayChooser0.setSelectableDateRange(date0, timestamp0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6963396215840074
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      jDayChooser0.setMonth(8709);
      jDayChooser0.setMaxDayCharacters(8709);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.800878608352407
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, (-1136L), 49, 38, 'S', 3);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6963003629184747
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekOfYearVisible(false);
      assertFalse(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton jButton0 = new JButton("day");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 37, "day", 37);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"day\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1608702501827213
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.days = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setDecorationBackgroundColor((Color) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.11445141593029
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.weeks = jButtonArray0;
      jDayChooser0.maxDayCharacters = (-1621);
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(10057);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(47);
      jDayChooser0.setMonth(47);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8961651689921424
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(594);
      jDayChooser0.setLocation(1738, 594);
      assertEquals(14, jDayChooser0.getDay());
      
      JYearChooser jYearChooser0 = new JYearChooser();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jYearChooser0, 700, 3486L, (-1774), 36, ':', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2358253639551506
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1951496043409153
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.addKeyListener(jDayChooser0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser1.isWeekOfYearVisible();
      MenuElement[] menuElementArray0 = new MenuElement[5];
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      SchemeMode schemeMode0 = new SchemeMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FocusEvent focusEvent0 = null;
      jDayChooser0.focusGained((FocusEvent) null);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      String string0 = "u1";
      // Undeclared exception!
      try { 
        RowSorterEvent.Type.valueOf(".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant javax.swing.event.RowSorterEvent.Type..
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.05861803958271
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0632311444031184
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10, 0L, 10, 10, 'E');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8961408868334586
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setLocation(7, 210);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 210, 7, 7, 7, '2');
      jDayChooser0.keyPressed(keyEvent0);
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.696615563937925
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8961408868334586
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BorderLayout borderLayout0 = new BorderLayout(160, (-753));
      ImageIcon imageIcon0 = new ImageIcon("day");
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(imageIcon0);
      Dimension dimension0 = borderLayout0.minimumLayoutSize(jCheckBoxMenuItem0);
      jDayChooser0.setMaximumSize(dimension0);
      jDayChooser0.createImage(160, 160);
      KeyStroke.getKeyStroke("day");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.unregisterKeyboardAction((KeyStroke) null);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      Locale locale0 = Locale.CANADA_FRENCH;
      jDayChooser0.setLocale(locale0);
      jPanel0.requestFocus();
      jDayChooser0.getDecorationBackgroundColor();
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, (-1037), false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      System.setCurrentTimeMillis(4);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getY();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(24);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1584));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1584), (-1136L), (-1584), 38, 'S', 3);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.301237318963344
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isPaintingForPrint();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setMonth(331);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setEnabled(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(331, 8595, 32, 414, 12);
      mockGregorianCalendar0.getCalendarType();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=331,MONTH=8595,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=32,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=414,HOUR_OF_DAY=414,MINUTE=12,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate(4024L);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.maxDayCharacters = (-1621);
      jDayChooser0.init();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setAlwaysFireDayProperty(false);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.MAGENTA;
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.800890177739808
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ri~tq-Q~hw58jl8Z");
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton jButton0 = new JButton();
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.896128488346074
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.drawDays();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1584));
      jDayChooser0.setDay((-1584));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(21);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setYear((-37));
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange(".", '2', '2');
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.keyReleased((KeyEvent) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.dayBordersVisible = true;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)2;
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 39, "day", (-513));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1679045161494495
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.MAGENTA;
      jDayChooser0.setForeground(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      Color color0 = Color.ORANGE;
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 'V', 'V', 41, 41, 'V');
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(28, int0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setForeground((Color) null);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.8009128521913698
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Font.getFont("day");
      jDayChooser0.getMaxSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.16779739752152
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.setForeground(systemColor0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8963472851822716
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setMonth((-1599));
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters((-1599));
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.5775965232296514
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setMonth(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
