/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 11:52:29 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.134006824564753
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483616L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-2856L));
      range_Builder0.expandBegin(1031L);
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      range1.equals(range0);
      range1.iterator();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.267734353307742
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of((-1379L), 4294967295L);
      boolean boolean0 = range1.intersects(range0);
      boolean boolean1 = range1.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.05979471828628
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483616L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(1031L);
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      range1.iterator();
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.796837966557264
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483616L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0587765179553648
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-7L), (-7L));
      Object object0 = new Object();
      Range range1 = Range.of((-7L));
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4535914753674404
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6910517378300467
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(4294967280L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.676860512925512
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(256L, 4294967380L);
      range0.getBegin();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-1573L), 9223372032559805613L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.059686199566801
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of((-2147483648L));
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer((-1913));
      Range.of((-969L), 32767L);
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      assertEquals("Zero Based", range_CoordinateSystem0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0589252610759954
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L, 255L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 4294967380L;
      Range range0 = Range.of(256L, 4294967380L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2021678481610336
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.of((-3708L), (-3708L));
      Object object1 = new Object();
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.675944125706596
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(228L);
      Range range1 = Range.of(9223372036854775807L);
      range0.startsBefore(range1);
      Range range2 = Range.of(228L, 4294967380L);
      Range.ofLength(228L);
      Range.ofLength(4294967380L);
      Range.of(228L);
      range2.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.204174232109962
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      range1.equals(range0);
      range0.equals(range1);
      Range.of(1L, 1L);
      // Undeclared exception!
      try { 
        Range.of(2443L, 927L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.20405020110221
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      Range.ofLength(1501L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6089134893284736
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-2703L), (-644L));
      Range range3 = Range.of((-3206L), 255L);
      Object object0 = new Object();
      range3.equals(range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4402372984941714
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.ofLength(256L);
      Range range0 = Range.of(256L, 4294967380L);
      Range range1 = Range.ofLength(4294967380L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(255L, 2528L);
      Range range1 = Range.of(2528L, 4294967295L);
      range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.716285151293069
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(700L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 700L, 700L);
      Range range2 = Range.of(1811L);
      range1.complement(range0);
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.of((-359L), (-1454L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of(237L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add((Range) null);
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3304200479668307
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem1, 255L, 9223372036854775807L);
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      Range.of(1L, 255L);
      range2.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.134783825341754
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(4294967296L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.of(4294967296L);
      boolean boolean1 = range2.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.268771928346651
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 280L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem1, 280L, 9223372036854775807L);
      Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1897));
      range1.equals(range0);
      long long0 = 9223372036854773997L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854773997L, 280L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.387377745920117
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.of(297L, 2356L);
      Range.of(253L, 2356L);
      Range range0 = Range.of(4294967322L, 9223372032559808514L);
      Range range1 = Range.ofLength(255L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -9223372036854775808 .. -9223372036854775808 ]/RB", string0);
      
      range0.equals((Object) null);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.070088206659905
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(2147483590L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long(2147483590L);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(32767L);
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 972L, 2147483590L);
      List<Range> list1 = range2.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list2 = range2.complement(range0);
      assertEquals(0, list2.size());
      
      Range range3 = Range.of(2147483590L);
      boolean boolean0 = range0.intersects(range3);
      assertFalse(range3.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-386L));
      Object object0 = new Object();
      Range range1 = Range.of((-386L), (-386L));
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder(range1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.134470173651956
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range2.equals((Object) null);
      assertSame(range2, range1);
      assertFalse(boolean0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Integer integer0 = new Integer((-570));
      boolean boolean0 = range0.equals(integer0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.268771928346651
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 280L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem1, 280L, 9223372036854775807L);
      Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1897));
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854773997L, 280L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.8700672856717
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(700L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-1L));
      range0.intersects(range1);
      range0.intersection(range1);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("XIwS8<aw&WAu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.XIwS8<aw&WAu
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4916672329035845
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(4294967295L);
      range1.equals(range0);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(4294967295L);
      boolean boolean1 = range2.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 9223372036854775807L, 9223372036854775807L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1320150760941314
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.ofLength(0L);
      Range range0 = Range.of(599L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.of(9223372036854775807L);
      range0.getEnd();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-128L), (-128L));
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-386L), 4450L);
      Object object0 = new Object();
      Range range1 = Range.of((-386L), (-386L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.ofLength(256L);
      Range range0 = Range.of(4294967280L, 4294967322L);
      boolean boolean0 = range0.equals("value can not be <0");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.133562824120753
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.of((-2533L), (-2533L));
      Range range0 = Range.of(277L, 9223372036854775528L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4404389791664403
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.ofLength(4294967280L);
      Range range0 = Range.of(256L, 65534L);
      Object object0 = new Object();
      Range range1 = Range.of(579839L, 9223372036854775571L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5636060694197846
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range0.toString();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.667349769711051
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = range0.getLength();
      assertEquals(9223372036854775807L, long0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      boolean boolean0 = range0.equals(list0);
      assertEquals(0, list0.size());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.271401073783724
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(9223372036854774498L);
      Range range1 = Range.of(9223372036854774498L);
      range1.getEnd();
      range0.getLength();
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1453L), 9223372036854774498L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3890312753224383
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(1085L, 1085L);
      linkedList0.add(range0);
      linkedList0.add(range0);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8922772952702807
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-128L), 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range_Builder0);
      assertSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Long.getLong("");
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8899587648618628
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775807L, long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4402372984941714
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(65535L, 4294967380L);
      Range range2 = Range.ofLength(4294967380L);
      assertFalse(range2.isEmpty());
      
      Long long0 = new Long(1207L);
      boolean boolean0 = range1.equals(long0);
      assertFalse(range1.equals((Object)range2));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9844423972346124
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(256L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4924642996977817
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.ofLength(1L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      List<Range> list0 = range0.split(2887L);
      assertFalse(list0.contains(range2));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2028955619269524
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      range1.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.4455414218236373
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.of(9223372036854775807L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2513L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2513 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      boolean boolean1 = range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(262L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.1347095035283017
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(256L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(256L);
      Range range2 = Range.of(256L);
      range2.equals(range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9848941644582636
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = 256L;
      Range range0 = Range.ofLength(4294967380L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range range1 = Range.of(1L, 2019L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.668885070338185
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.of(1L, 1L);
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range1 = range_Builder1.build();
      Object object0 = new Object();
      range1.intersects(range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(linkedList0);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6960217125411647
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      String string0 = range0.toString();
      assertEquals("[ 255 .. 9223372036854775807 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 255 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      Object object0 = new Object();
      Range range2 = Range.of(1L, 255L);
      range1.equals(range0);
      assertFalse(range1.equals((Object)range2));
      assertSame(range1, range0);
      
      Object object1 = new Object();
      long long0 = range2.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.1846186864494777
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.8304744063689755
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(256L, 4294967380L);
      Range range1 = Range.ofLength(4294967380L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(4902L);
      List<Range> list0 = range2.complement(range0);
      assertFalse(list0.contains(range1));
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.794249564417028
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(256L);
      Range range1 = Range.ofLength(1503L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(256L, long0);
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(1, list0.size());
      assertFalse(list1.contains(range1));
      assertEquals(1, list1.size());
      assertTrue(list1.equals((Object)list0));
      
      range1.asRange();
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(1L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.6688831611777957
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-576L), (-576L));
      Range range1 = Range.ofLength(65535L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.870165328861826
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.567119181285601
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      List<Range> list0 = range0.complementFrom(linkedList0);
      boolean boolean0 = range1.equals(list0);
      assertFalse(boolean0);
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.5881853105011716
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1061L, 1061L);
      Range range1 = Range.ofLength(107L);
      range1.intersection(range0);
      Range range2 = Range.of(0L, 1748L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.58468153174128
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      Range range0 = Range.of((-3752L), (-3752L));
      range0.getLength();
      Object object0 = new Object();
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.323934824062405
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(9223372036854775108L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854775108L, long0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.0159451817460607
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = Range.ofLength(1L);
      boolean boolean0 = range2.intersects(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(1485L, 1485L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.8100335729366357
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), 2118L);
      range0.intersection(range1);
      Range.ofLength(80L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(2147483647L);
      Object object1 = new Object();
      Object object2 = new Object();
      Integer integer0 = new Integer((-1897));
      range0.equals(integer0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-518L), 0L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 0L);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.329213344056216
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Range range1 = Range.of(255L, 255L);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder0.build();
      assertTrue(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3812353033811244
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.of((-128L), 2443L);
      // Undeclared exception!
      try { 
        Range.parseRange("y8N[A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse y8N[A into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.203625422341148
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.toString();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 1L, 1L);
      range_Builder0.contractBegin((-3311L));
      Range.Builder range_Builder1 = new Range.Builder(1312L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = Range.of(255L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(7L, 7L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-4271L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4271 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.2202062884642895
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      range1.getBegin();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.startsBefore(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.3849954138101435
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long1);
      
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.633006653740095
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483616L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      long long0 = range0.getLength();
      assertEquals(2147483617L, long0);
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.540763039227181
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      long long0 = new Long(2147483647L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("E}ffxn;^f{K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.E}ffxn;^f{K
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.ofLength(2452L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.5895499160448816
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1155L), 145L);
      range0.complement(range0);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.7563421520565714
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(256L, 4294967380L);
      Range.ofLength(4294967380L);
      Range range1 = Range.of(4294967380L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.266970744711691
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2528L, 2528L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complement(range0);
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.458433506269885
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-32768L), 11545L);
      range0.iterator();
      Object object0 = new Object();
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.507395480632556
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3752L), (-3752L));
      Range range0 = Range.of((-1027L));
      range0.getBegin();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.of(494L, (-3752L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.1386344129776833
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.4916286386713726
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(256L);
      range0.getLength();
      Range range1 = Range.of(254L, 4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.32914830340581
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.toString();
      Range.of(1L, 1L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(5294L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1 .. 1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1 .. 1 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      // Undeclared exception!
      try { 
        Range.parseRange("number of entries must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse number of entries must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-2854L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.699443051416315
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of((-1369L), 4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.5153799964692576
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-25L), (-25L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.isSubRangeOf(range0);
      Object object0 = new Object();
      List<Range> list0 = range0.split(4294968000L);
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -25 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.328358975124177
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(256L, 4294967380L);
      Range range1 = Range.ofLength(4294967380L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(11545L, 9223372036854775156L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(1031L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.4576633869013826
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.689532269643912
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(1L);
      range0.toString();
      range0.getEnd(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.080210692235636
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(4294967280L, 4294967280L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.2113352785938525
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(9223372036854775156L);
      range0.getBegin();
      range0.getEnd();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.ofLength(4294967280L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.of(4294967280L, 256L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.135560826118755
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(1811L, 1811L);
      List<Range> list0 = range0.split(1L);
      range0.equals(list0);
      Range range1 = Range.of(1811L);
      range0.equals(list0);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
      assertSame(range0, range1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(9223372036854774637L, 9223372036854774637L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(1811L, 1811L);
      Range range1 = Range.of(1811L);
      List<Range> list0 = range1.split(1811L);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.357284162522736
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      // Undeclared exception!
      try { 
        range0.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.3036106384978754
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.059202231024756
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(1177L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1177L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd(1177L);
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.492626683491879
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.ofLength(256L);
      Range.of(256L, 4294967380L);
      Range.ofLength(256L);
      Range.Builder range_Builder0 = new Range.Builder(256L, 4294967380L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967380L);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-32768L), 11545L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-32768L), 11545L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-1285L), (-1285L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.729008672125281
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483616L);
      Range range1 = Range.ofLength(0L);
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range range2 = Range.parseRange("[ 1 .. 0 ]/RB");
      assertTrue(range2.isEmpty());
      
      long long0 = range1.getEnd();
      assertEquals((-1L), long0);
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.714783978460339
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.ofLength(255L);
      Range range0 = Range.of((-1379L), 4294967295L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.323283518756498
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(145L, 145L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 146 .. 146 ]/RB", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.358118538826449
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of(28L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(28L, long0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.8904325862312064
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1155L), 145L);
      range0.toString(range_CoordinateSystem0);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1155 .. 145 ]/RB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of((-2026L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2026L), long0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.202026104716668
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.of((-638L), 4294967380L);
      Range range0 = Range.ofLength(9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.3442115143575917
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range1));
      //  // Unstable assertion: assertNotSame(range2, range1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-32782L), (-32782L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32781L), long0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.070040043649396
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.316170621585798
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(256L, 4294967380L);
      long long0 = range0.getEnd();
      assertEquals(4294967380L, long0);
      
      Long long1 = new Long(256L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.633101871431542
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      List<Range> list0 = range0.split(4627L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.0574866708943733
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range range0 = Range.of(256L, 256L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.133680985529237
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.ofLength(256L);
      Range range1 = Range.of(256L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-381L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.446290125546827
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long long0 = (-2147483648L);
      Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.2518217906291524
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), (-9223372036854775808L));
      Range.of((-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.3878591950820947
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of(1811L);
      List<Range> list0 = range0.split(1L);
      boolean boolean0 = range0.equals(list0);
      assertTrue(list0.contains(range0));
      
      Range range1 = Range.of(1811L);
      boolean boolean1 = range1.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      
      Range.ofLength(1811L);
      String string0 = range1.toString();
      assertEquals("[ 1811 .. 1811 ]/0B", string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of((-1342L), 4294967295L);
      range0.startsBefore(range0);
      Range range1 = range0.asRange();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.329237503279859
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(4294967380L, 4294967380L);
      Range range1 = Range.ofLength(1L);
      range0.startsBefore(range1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of(256L, 4294967380L);
      Range range1 = Range.ofLength(4294967380L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.contractBegin(255L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.5415984611152345
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4033L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4033L, 4033L);
      Range.ofLength(4033L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.4936575847573104
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(2452L);
      List<Range> list0 = range0.complement(range1);
      assertNotSame(range1, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.1342029606832194
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of(256L, 256L);
      Range range1 = range0.intersection(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4033L, 4033L);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4224L, 4224L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("$VALUES", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $VALUES into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      range1.getEnd();
      boolean boolean0 = range0.intersects(range1);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.2667063692986047
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 431L, 431L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(431L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-32794L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range range0 = Range.of(240L);
      assertFalse(range0.isEmpty());
  }
}
