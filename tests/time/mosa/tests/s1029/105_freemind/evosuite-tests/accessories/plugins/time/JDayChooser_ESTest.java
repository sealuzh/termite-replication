/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 12:20:49 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.datatransfer.SystemFlavorMap;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.awt.image.IndexColorModel;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.Locale;
import java.util.Stack;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xml.serializer.ToUnknownStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.897031714939994
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setFocus();
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.getMindMapController();
      jDayChooser1.getPropertyChangeListeners();
      jDayChooser0.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setYear(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser1.updateUI();
      jDayChooser1.getDayPanel();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.drawWeeks();
      jDayChooser0.setMonth((-6057));
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHierarchyListeners();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-536870912), 3448L, 29, 39, 'v');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-506));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2057967123790014
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-3336L));
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getHierarchyListeners();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 19, 65535L, 19, 19, '3');
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser1.getDay());
      
      jDayChooser0.setDay(1783);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.801667661801385
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-3336L));
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, (-2892), 3, 44);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getCharacterElement((-135));
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument();
      try { 
        defaultStyledDocument1.getText((-1273), (-1273));
        fail("Expecting exception: BadLocationException");
      
      } catch(BadLocationException e) {
         //
         // Length must be positive
         //
         verifyException("javax.swing.text.AbstractDocument", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(1);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getMinSelectableDate();
      Color color0 = jDayChooser0.sundayForeground;
      assertEquals(255, color0.getAlpha());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6954701913713075
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getHierarchyListeners();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-536870912), (-4070), (-4070), 228, '<');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-506));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.896090218646746
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-3336L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      SystemFlavorMap.getDefaultFlavorMap();
      jDayChooser0.createVolatileImage(31, 31);
      jDayChooser0.invalidate();
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      assertEquals(203, dimension0.width);
      
      jDayChooser0.getDay();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHierarchyListeners();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4070), (-4070), 38, 18, 'g');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(210);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1410716269472356
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getCharacterElement(1854);
      JDayChooser jDayChooser1 = new JDayChooser();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.lookup(canvasGraphicsNode0, canvasGraphicsNode0);
      // Undeclared exception!
      try { 
        jDayChooser1.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2056114235461948
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1854, (-287), 1854, 1854, 2, 84);
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setYear((-728));
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.896128488346074
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(29);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getMinSelectableDate();
      Color color0 = jDayChooser0.sundayForeground;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8960770909801887
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-3336L));
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = ImageObserver.WIDTH;
      jDayChooser0.getAutoscrolls();
      SystemFlavorMap.getDefaultFlavorMap();
      jDayChooser0.createVolatileImage(2512, (-1437625606));
      jDayChooser0.invalidate();
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      assertEquals(140, dimension0.height);
      
      int int1 = jDayChooser0.getDay();
      assertEquals(31, int1);
      
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.89697784160571
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.invalidate();
      jDayChooser0.getPreferredSize();
      System.setCurrentTimeMillis(140);
      jDayChooser1.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8017001372418333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-3336L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      SystemFlavorMap.getDefaultFlavorMap();
      jDayChooser0.createVolatileImage(2485, (-1437625606));
      jDayChooser0.invalidate();
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      assertEquals(203, dimension0.width);
      
      int int0 = jDayChooser0.getDay();
      assertEquals(31, int0);
      
      Color color0 = Color.BLUE;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 21, 31, 34, 4, 'M');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setDay(31);
      PDFDocument pDFDocument0 = new PDFDocument("Metal");
      PDFInfo pDFInfo0 = pDFDocument0.getInfo();
      pDFInfo0.getCreationDate();
      jDayChooser1.setMaxSelectableDate((Date) null);
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.695595912841106
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("1", 0L, 0L);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.getMindMapController();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(true);
      jDayChooser0.updateUI();
      jDayChooser0.setWeekOfYearVisible(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Parameters";
      stringArray0[1] = "accessories/plugins/ClonePlugin.properties";
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Timestamp timestamp0 = new Timestamp(67L);
      jDayChooser0.setWeekOfYearVisible(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "accessories.plugins.time.JDayChooser$1";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.609062502627321
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Boolean boolean0 = new Boolean("day");
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.getMindMapController();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setMaxDayCharacters((-6057));
      jDayChooser0.getDaysInMonth();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      ToUnknownStream toUnknownStream0 = new ToUnknownStream();
      toUnknownStream0.getOutputStream();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(false, (OutputStream) null, 8818, (-6057));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.fop.pdf.PDFDocument", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis((-3336L));
      JDayChooser jDayChooser0 = new JDayChooser();
      Timestamp timestamp0 = new Timestamp(19);
      jDayChooser0.setMinSelectableDate(timestamp0);
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getAccessibleContext();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.drawDays();
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-806);
      int int1 = 10056;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-28);
      byteArray0[0] = (byte) (-28);
      byte byte1 = (byte)11;
      byteArray0[1] = (byte)11;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-806), 10056, byteArray0, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9831272903573964
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 61440, 61440, 61440, 61440, '-');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getDecorationBackgroundColor();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "QC9a";
      stringArray0[1] = ";5GV'H*Wx_L&^et";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9831644895092557
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1854, (-287), 1854, 1854, 2, 84);
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setYear(210);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8962341432302643
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1854, (-287), 1854, 1854, 2, 84);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      MockDate mockDate1 = new MockDate(1854, (-287), 2, 1854, (-287), 2);
      jDayChooser0.setYear((-287));
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2667227214627617
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setFocus();
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.getMindMapController();
      jDayChooser1.getPropertyChangeListeners();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setEnabled(true);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser1.invalidate();
      int int0 = jDayChooser1.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis((-3336L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      SystemFlavorMap.getDefaultFlavorMap();
      jDayChooser0.createVolatileImage(2485, (-1437625606));
      jDayChooser0.invalidate();
      jDayChooser0.getPreferredSize();
      jDayChooser0.getDay();
      Color color0 = Color.BLUE;
      Color color1 = color0.darker();
      jDayChooser0.setForeground(color1);
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.800854989187817
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color.getColor((String) null);
      jDayChooser0.setWeekdayForeground((Color) null);
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      stack0.sort((Comparator<? super Locale.LanguageRange>) null);
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.lookup(stack0, canvasGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-57), false);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      LabelView labelView0 = new LabelView(element0);
      jDayChooser0.getFont();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695518092694581
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.init();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setMaxDayCharacters(27);
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.getDaysInMonth();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.801674346181659
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      SystemFlavorMap.getDefaultFlavorMap();
      jDayChooser0.createVolatileImage(2485, (-1437625606));
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 677, 677, 0, 0, '3', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8961770597399514
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setSundayForeground(color0);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlignmentY(1230.3876F);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.focusGained((FocusEvent) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.invalidate();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Timestamp timestamp0 = new Timestamp(83L);
      jDayChooser0.setMinSelectableDate(timestamp0);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.896987831782037
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(29);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getMinSelectableDate();
      assertEquals(28, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setEnabled(false);
      jDayChooser1.getSelectedDay();
      assertEquals(14, jDayChooser1.getDay());
  }
}
