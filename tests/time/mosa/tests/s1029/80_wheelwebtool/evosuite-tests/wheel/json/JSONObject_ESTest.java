/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 12:19:32 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.064538292591587
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.append("p<bHe2yBUAQ+", linkedList0);
      jSONObject1.toString(259);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Boolean boolean0 = new Boolean(true);
      hashMap0.put((JSONObject) null, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString(47, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4540447216025663
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "cle";
      JSONObject jSONObject1 = jSONObject0.put("cle", 3613);
      jSONObject0.optDouble("cle");
      jSONObject1.remove("wheel.json.JSONTokener");
      jSONObject0.optInt("cle");
      try { 
        jSONObject0.getString("z`FIVbHV(Nx~'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z`FIVbHV(Nx~'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.568413258053965
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("tw", (Map) hashMap0);
      jSONObject0.keys();
      JSONObject jSONObject2 = jSONObject1.optJSONObject("tw");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Boolean boolean0 = Boolean.FALSE;
      Double double0 = null;
      hashMap0.put(boolean0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.138261944687921
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotNull(jSONArray2);
      
      String string0 = jSONObject0.optString((String) null, "");
      assertNotSame(jSONArray1, jSONArray2);
      assertNotNull(string0);
      assertNotSame(jSONArray0, jSONArray2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.090919393915582
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("] is not a number.", (-26L));
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      jSONObject1.put("Expected a ',' or ']'", (Map) hashMap1);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "7n%)_o");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("7n%)_o", stringArray0);
      jSONObject0.keys();
      jSONObject0.append("7n%)_o", "7A}\"<#=7P3");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.putOpt("sum", boolean0);
      jSONObject1.getBoolean("sum");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject2 = jSONObject0.put("get", (Collection) linkedList0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4368192399644037
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("Q] is not a numbe>r.", (-26L));
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      jSONObject2.optBoolean("'7getoptJSONArray");
      jSONObject1.put("Expected a ',' or ']'", (Map) hashMap1);
      JSONObject jSONObject3 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "'7getoptJSONArray");
      Writer writer0 = jSONObject3.write(stringWriter1);
      Writer writer1 = jSONObject2.write(writer0);
      assertSame(writer1, writer0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6809758931039966
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      String string0 = "\\u";
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject1 = jSONObject0.put(string0, (Map) hashMap0);
      String string1 = jSONObject1.optString(string0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(false);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      JSONObject jSONObject0 = jSONArray1.toJSONObject(jSONArray1);
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoJSONObject", jSONArray1);
      JSONArray jSONArray2 = jSONObject0.names();
      assertNotNull(jSONArray2);
      
      JSONArray jSONArray3 = jSONObject1.getJSONArray("gettoJSONObject");
      assertNotSame(jSONArray3, jSONArray0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0954579187426967
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      jSONObject0.accumulate("0", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6332004508871008
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      Long long0 = new Long(0L);
      hashMap0.put((Byte) null, long0);
      Long long1 = new Long(0L);
      Long long2 = new Long(1474L);
      hashMap0.getOrDefault(long1, long2);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-2211), (-2211));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.866297152724486
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(0);
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{}";
      stringArray0[1] = "getintValue";
      stringArray0[0] = "getintValue";
      stringArray0[3] = "getintValue";
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.put("] is not a number.", (long) 0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      jSONObject2.optBoolean("O");
      JSONObject jSONObject3 = jSONObject0.put("F>D>aV`hE~N", (Map) hashMap1);
      jSONObject1.put("Cn", 0);
      jSONObject0.toString(0, 0);
      int int0 = jSONObject3.getInt("] is not a number.");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("false", "false");
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("s&r!", 0.0);
      jSONObject1.accumulate("s&r!", jSONObject0);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.178861466274231
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Wns6w=", (Object) null);
      jSONObject1.isNull("Wns6w=");
      JSONObject jSONObject2 = jSONObject1.append("Wns6w=", "Wns6w=");
      JSONObject jSONObject3 = jSONObject1.accumulate("Wns6w=", jSONObject0);
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8690529818095458
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt("isvalueOf", "isvalueOf");
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject2 = jSONObject1.accumulate("isvalueOf", "isvalueOf");
      double double0 = jSONObject2.optDouble("isvalueOf");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(" at character ", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.152791022150616
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.quote("] is not a number.");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4352718511829727
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isintern", 46);
      JSONObject jSONObject2 = jSONObject0.put("isintern", true);
      jSONObject2.optBoolean("isintern");
      jSONObject0.toString(46);
      JSONArray jSONArray0 = jSONObject1.names();
      try { 
        jSONObject1.append("isintern", jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isintern] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5121694242933703
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", (Object) null);
      jSONObject1.isNull("WaGns6w=");
      jSONObject1.put("Expected a ':' after a key", 3875);
      // Undeclared exception!
      jSONObject1.toString(3875, 2148);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Integer integer0 = new Integer((-22654515));
      jSONObject0.accumulate("]R_+k*5>X~Q9", integer0);
      jSONObject0.getInt("]R_+k*5>X~Q9");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.125311919071928
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double(1548.41754891);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("J#Z@D\"gnR3", (Object) double0);
      jSONObject0.getInt("J#Z@D\"gnR3");
      try { 
        jSONObject0.getBoolean("acc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"acc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getvalueOf", (Object) "getvalueOf");
      try { 
        jSONObject1.getJSONArray("getvalueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getvalueOf\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8479965994826997
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "WaGns6w=";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", jSONObject0);
      try { 
        jSONObject1.getDouble("WaGns6w=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WaGns6w=\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("sum", (Collection) linkedList0);
      Double.min(0.0, 0.0);
      Boolean boolean0 = new Boolean("sum");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("sum");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.getNames(jSONObject0);
      Double double0 = new Double(0L);
      JSONObject.valueToString(double0, 0, 13);
      JSONTokener jSONTokener0 = new JSONTokener("{Auy]?!5-V8$L:~");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {Auy]?!5-V8$L:~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3126328398468408
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", jSONObject0);
      jSONObject1.isNull("WaGns6w=");
      String string0 = jSONObject1.optString("WaGns6w=", "istoString");
      assertNotNull(string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Unterminated string";
      try { 
        jSONObject0.accumulate((String) null, "Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      Object object0 = new Object();
      JSONObject.getNames(jSONObject0);
      String string0 = JSONObject.valueToString(jSONObject0, (-2820), (-2820));
      assertEquals("{}", string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      Float float0 = new Float((double) (-2820));
      JSONObject.numberToString(float0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8751832500087795
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isintern", 3216);
      Long long0 = new Long(1L);
      Object object0 = new Object();
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(jSONObject0, 8391, 8391);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject0.put("isintern", 3216);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "{Pu0v\"j";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Pu0v\"j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {Pu0v\"j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.353363451324745
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString(7);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("\r", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0327524056262956
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.put("NZRA%Z", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~>{ew[o'ke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~>{ew[o'ke
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject.quote("getvalueOf");
      JSONObject.quote("<fh/L#/v!HrRNCHSO");
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(1513);
      jSONArray0.put(false);
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.091217127583354
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      Float float0 = new Float(3638.2160814911513);
      JSONObject.numberToString(float0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Float@0000000001";
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("$]Ay", 0L);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      jSONObject1.optBoolean("F>D>aV`hE~N");
      JSONObject jSONObject3 = jSONObject2.put("$]Ay", (Map) hashMap1);
      JSONObject jSONObject4 = jSONObject1.put("(S{4jS&70Crx", 0);
      jSONObject4.toString(0, 0);
      JSONObject.getNames(jSONObject1);
      jSONObject2.toString(0);
      jSONObject4.opt((String) null);
      jSONObject3.putOpt("", hashMap0);
      assertEquals(3, jSONObject3.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5857917758475968
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.testValidity("md5jH");
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("md5jH", "toS");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("toS", (Map) hashMap0);
      boolean boolean0 = new Boolean("md5jH");
      jSONObject1.putOpt("o*({1kZ(OdxXr", "toS");
      JSONObject jSONObject2 = jSONObject0.getJSONObject("toS");
      jSONObject2.keys();
      try { 
        jSONObject1.getLong("^ncUxh}\"1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^ncUxh}\\\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 3560L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("T8Kr", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7005631560081493
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      jSONObject0.put("u],!Hwb2AOXd", 1867.0);
      jSONObject1.has("u],!Hwb2AOXd");
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = jSONObject1.putOpt("va", "u],!Hwb2AOXd");
      jSONObject2.optLong("u],!Hwb2AOXd");
      JSONObject.doubleToString(121.9143384190067);
      int int0 = jSONObject2.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 109, (-1546));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5134049813662336
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Object object0 = new Object();
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(hashMap0, 2747, 1);
      JSONTokener jSONTokener0 = new JSONTokener("*a&H|Yc,tl");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of *a&H|Yc,tl
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7281493471760747
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      Float.isFinite(0.0F);
      jSONObject0.optString("gG6.5W.1(<", "gG6.5W.1(<");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("gG6.5W.1(<", (Map) hashMap0);
      jSONObject0.put("getisNaN", 0);
      jSONObject1.toString(0, 123);
      // Undeclared exception!
      jSONObject0.toString(8448);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7480895599985722
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("JSONArray initial value should be a string or collection or array.", (-3664));
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9956238305691735
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.append("aGl2x[!92`-_\"2~K4=", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7366255599158564
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      jSONObject0.toString(519);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9948516297969727
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4242753321202222
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("|/|wk W2", 2875L);
      assertEquals(2875L, long0);
      
      jSONObject0.keys();
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Unterminated string", "Unterminated string");
      Byte byte0 = new Byte((byte)13);
      try { 
        jSONObject1.getLong("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = JSONObject.quote(":/]LT");
      assertEquals("\":/]LT\"", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isintern", 3216);
      Long long0 = new Long(1L);
      Object object0 = new Object();
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", (Collection) null);
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 8448, 8448);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8666883842082265
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.quote("jIH7");
      assertEquals("\"jIH7\"", string0);
      
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      hashMap0.clear();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("isreverse", 2973.620575);
      double double0 = jSONObject0.getDouble("isreverse");
      assertEquals(2973.620575, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 338, 338);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0992338308014475
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("istoString", 8448);
      JSONObject.valueToString(jSONObject0, 87, 2464);
      Object object0 = new Object();
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble("istoString");
      jSONObject0.toString();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "{\"java.lang.String@0000000002\":java.lang.Integer@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0093994817375425
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("Unterminated string", (-3592L));
      jSONObject0.accumulate("Unterminated string", "Unterminated string");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.7342098183013035
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong((String) null, 0L);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.append("{}", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.571831599661383
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("P", (-2308));
      String string0 = jSONObject0.getString("P");
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.2039958490137452
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      jSONObject0.put("!}B!@)?O ", 92);
      JSONObject.getNames((Object) "!}B!@)?O ");
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("T");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8451797954111244
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", (-1561.0947));
      Short short0 = new Short((short)28);
      JSONObject.valueToString(short0, 2065, (-1271));
      JSONObject jSONObject3 = jSONObject2.put("", 0L);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      jSONObject3.remove("");
      jSONObject0.remove("W-");
      String string1 = jSONObject1.optString(" rlF> v]8 STM5");
      assertEquals("", string1);
      
      Float float0 = new Float(357.73F);
      JSONObject.numberToString(float0);
      jSONObject0.put("", (double) 2065);
      jSONObject0.getDouble("");
      long long0 = jSONObject1.optLong("");
      assertEquals(0L, long0);
      
      long long1 = jSONObject0.getLong("");
      assertEquals(2065L, long1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.150726406505984
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", (-1561.0947));
      Short short0 = new Short((short)28);
      JSONObject.valueToString(short0, 2065, (-1271));
      JSONObject jSONObject3 = jSONObject2.put("", 0L);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject.valueToString(boolean0, (-1596), 0);
      jSONObject3.remove("");
      jSONObject0.remove("W-");
      String string1 = jSONObject1.optString(" rlF> v]8 STM5");
      assertEquals("", string1);
      
      Float float0 = new Float(357.73F);
      JSONObject.numberToString(float0);
      jSONObject0.put("", (-2233.912312));
      jSONObject0.getDouble("");
      long long0 = jSONObject1.optLong("");
      assertEquals(0L, long0);
      
      long long1 = jSONObject0.getLong("");
      assertEquals((-2233L), long1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.2308510013064207
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "sQP4Ca[";
      JSONObject.quote("sQP4Ca[");
      JSONObject jSONObject0 = new JSONObject((Object) "\"sQP4Ca[\"");
      Iterator iterator0 = jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.accumulate("sQP4Ca[", iterator0);
      jSONObject1.remove("sQP4Ca[");
      try { 
        jSONObject0.getJSONObject("sQP4Ca[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sQP4Ca[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float(1.0F);
      JSONObject jSONObject1 = jSONObject0.putOpt("null", float1);
      jSONObject1.optLong("null", (-1323L));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8727808476063772
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", jSONObject0);
      boolean boolean0 = jSONObject1.isNull("WaGns6w=");
      assertFalse(boolean0);
      
      long long0 = jSONObject1.optLong("WaGns6w=");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.4574653869995418
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", jSONObject0);
      jSONObject1.isNull("WaGns6w=");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("WaGns6w=");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getDouble("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7506817223249798
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("5T&-{nu'1U,", (-50462705));
      double double0 = jSONObject0.getDouble("5T&-{nu'1U,");
      assertEquals(3, jSONObject0.length());
      assertEquals((-5.0462705E7), double0, 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.4082746217878275
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!Hwb2AOXd", float0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "u],!Hwb2AOXd";
      stringArray0[1] = "u],!Hwb2AOXd";
      stringArray0[2] = "Q(BW6#n2t/tS<o$qXJ";
      stringArray0[3] = "u],!Hwb2AOXd";
      stringArray0[4] = "u],!Hwb2AOXd";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject3 = jSONObject2.put("Q(BW6#n2t/tS<o$qXJ", (double) 0.0F);
      jSONObject3.keys();
      jSONObject3.optDouble("m;jZ", Double.NaN);
      jSONObject0.opt("u],!Hwb2AOXd");
      jSONObject1.opt("wheel.json.JSONObject");
      try { 
        jSONObject2.getJSONObject("Xzq/{h`yYWZxo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Xzq/{h`yYWZxo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = " ";
      JSONObject jSONObject0 = new JSONObject();
      String string1 = null;
      try { 
        jSONObject0.put((String) null, (-2545));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("KN7[[Jsv# xW6G", (-522.0));
      Double double0 = new Double((-2485.343947649941));
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.quote("jV/Jw1]}~\"dD0*g_");
      assertEquals("\"jV/Jw1]}~\\\"dD0*g_\"", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 2445, 69);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.498798710617937
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-807), 1981);
      JSONObject jSONObject1 = jSONObject0.accumulate("Unterminated string", "Unterminated string");
      jSONObject1.put(": ", (-1447.11026710926));
      Float float0 = new Float((-1447.11026710926));
      Byte byte0 = new Byte((byte)13);
      Byte.toUnsignedLong((byte)13);
      boolean boolean0 = new Boolean("{}");
      jSONObject0.optInt("Unterminated string", 1297);
      int int0 = jSONObject1.optInt(": ");
      assertEquals(2, jSONObject1.length());
      assertEquals((-1447), int0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "J?J`y=cXDC/Dz\"Q!");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      jSONObject0.accumulate("{}", "{}");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getmin", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = JSONObject.quote("WaGns6w=");
      assertEquals("\"WaGns6w=\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      JSONObject jSONObject1 = jSONObject0.put("u],!Hwb2AOXd", 0.0);
      jSONObject1.optDouble("u],!Hwb2AOXd", 0.0);
      try { 
        jSONObject1.getJSONObject("u],!Hwb2AOXd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u],!Hwb2AOXd\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      jSONObject0.put("u],!Hwb2AOXd", 0.0);
      int int0 = jSONObject0.optInt("u],!Hwb2AOXd", 4353);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1157L));
      try { 
        jSONObject0.append((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.177018148301881
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", jSONObject0);
      jSONObject1.putOpt("WaGns6w=", jSONObject0);
      jSONObject1.isNull("WaGns6w=");
      try { 
        jSONObject0.append("WaGns6w=", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[WaGns6w=] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2544.5));
      assertEquals("-2544.5", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.9797255793768046
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("rR5#If%#0_?(z", true);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.214377754835028
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.quote("$id@Xbk%");
      assertEquals("\"$id@Xbk%\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "$id@Xbk%");
      jSONObject0.toString(7, 115);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.2132755662033166
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ".>Zox ");
      jSONObject0.toString((-4179), 59);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("{I!LB3*OqmK");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0121515258995455
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5094656225315988
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "] is not a JSONObject.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("has");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of has
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.07116588513456
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      try { 
        jSONObject1.getBoolean("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8058518250452344
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Float.sum((-1074.4828F), (-1074.4828F));
      JSONObject.valueToString(float0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.names();
      boolean boolean0 = jSONObject0.has("java.lang.Float@0000000002");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("WaGns6w=");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("BdsS^$f8aCqf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"BdsS^$f8aCqf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean(",", false);
      assertFalse(boolean0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.111940764054574
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(";S([{[#ReEs[H", true);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      try { 
        jSONObject1.getDouble(";S([{[#ReEs[H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";S([{[#ReEs[H\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("tr");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", (-1376));
      Integer.remainderUnsigned(2172, 46);
      Integer.max(46, 10);
      Integer.getInteger("", (-1376));
      JSONObject.numberToString(integer0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt("java.lang.Integer@0000000001");
      assertNull(object0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("haGns6w=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of haGns6w=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("#)1:=4X}", 1400.904709073689);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = new Double(1548.41754891);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString((-1.0));
      jSONObject0.put("-1", (-1.0));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-Kuk.7\".;y9^ArHH", (-451));
      jSONObject0.toString((-451), (-451));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-1070), (-1070));
      try { 
        jSONObject0.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("$3zmr'E<F-NZ-4", (Object) "$3zmr'E<F-NZ-4");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("null", 127);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.valueToString("] is not a JSONObject.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("t3Hab");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.700404681812747
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("q87e3Ig.3y>", Double.NaN);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("<q/SSp(#U@]");
      assertEquals("", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",\n", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.2022413954579148
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-42841071), 9);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.3960882220782682
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float(3190.806F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(103);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.112704644485289
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("WaGns6w=", jSONObject0);
      try { 
        jSONObject1.getBoolean("WaGns6w=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WaGns6w=\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString((-1248), 1312);
      String string0 = JSONObject.valueToString(jSONArray0, 47, 47);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Short short0 = new Short((short)2614);
      String string0 = JSONObject.valueToString(short0, (short)2614, (short)2614);
      assertNotNull(string0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("],!wb2AX", "],!wb2AX");
      JSONObject.valueToString(jSONObject0, 1663, 1663);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote("h\t");
      assertEquals("\"h\\t\"", string0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("] is not a JSONArray.");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("],!wb2AX", "],!wb2AX");
      try { 
        jSONObject1.getBoolean("],!wb2AX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"],!wb2AX\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("_nmD>:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_nmD>:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Unterminated string", "Unterminated string");
      try { 
        jSONObject0.getInt("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
