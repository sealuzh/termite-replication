/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 01:13:41 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("r<Tqiak_x+U1-!W");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("r<Tqiak_x+U1-!W", defaultDBTable0, (-8339742), "r<Tqiak_x+U1-!W");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "r<Tqiak_x+U1-!W", true, "r<Tqiak_x+U1-!W");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("r<Tqiak_x+U1-!W NOT NULL", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop tablev--pky[cof&p9=", false);
      assertEquals("drop tablev -- pky [ cof & p9 =", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5856355335482935
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*E@An'y'9lL?eP?B_L";
      stringArray0[1] = "*E@An'y'9lL?eP?B_L";
      stringArray0[2] = "*E@An'y'9lL?eP?B_L";
      stringArray0[3] = "*E@An'y'9lL?eP?B_L";
      stringArray0[4] = "*E@An'y'9lL?eP?B_L";
      stringArray0[5] = "*E@An'y'9lL?eP?B_L";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[6] = "[m\"";
      String string0 = SQLUtil.join("*E@An'y'9lL?eP?B_L", "*E@An'y'9lL?eP?B_L", stringArray0, "*E@An'y'9lL?eP?B_L", "[m\"", stringArray0);
      assertEquals("*E@An'y'9lL?eP?B_L join *E@An'y'9lL?eP?B_L as [m\" on *E@An'y'9lL?eP?B_L.*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and *E@An'y'9lL?eP?B_L.*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and *E@An'y'9lL?eP?B_L.*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and *E@An'y'9lL?eP?B_L.*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and *E@An'y'9lL?eP?B_L.*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and *E@An'y'9lL?eP?B_L.*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and *E@An'y'9lL?eP?B_L.[m\" = [m\".[m\"", string0);
      
      boolean boolean0 = SQLUtil.isQuery("$Dbe0f4u({^Ts{");
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertTrue(boolean1 == boolean0);
      
      String string1 = SQLUtil.leftJoin("[m\"", stringArray0, "exec", "[m\"", stringArray0);
      assertEquals("left join exec as [m\" on [m\".*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and [m\".*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and [m\".*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and [m\".*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and [m\".*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and [m\".*E@An'y'9lL?eP?B_L = [m\".*E@An'y'9lL?eP?B_L and [m\".[m\" = [m\".[m\"", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("03R5s$%,n()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("R~*/xn3dw=^/u>$hG", (DBTable) null, (-1113665277), "R~*/xn3dw=^/u>$hG");
      defaultDBColumn0.setDefaultValue("R~*/xn3dw=^/u>$hG");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("R~*/xn3dw=^/u>$hG R~*/XN3DW=^/U>$HG DEFAULT R~*/xn3dw=^/u>$hG NULL", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("9.AvE8c<x.1f;L}", defaultDBTable0, (-2461), "9.AvE8c<x.1f;L}");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      String string0 = SQLUtil.renderValue(defaultDBTable0);
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("select into");
      assertFalse(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("call");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "call";
      stringArray0[1] = "call";
      String string0 = SQLUtil.renderColumnListWithTableName("select into", stringArray0);
      assertEquals("select into.call, select into.call", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, (-64416996), "drop tablecreate type");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)12;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      defaultDBColumn0.setDoc(" join ");
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE call = 'call' AND call = 'call'", string1);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "call", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (call, call)", string2);
      
      defaultDBColumn0.setName("drop indexselect intoq[{#/6''");
      String string3 = SQLUtil.join("select into", "drop indexselect intoq[{#/6''", stringArray0, "drop tablecreate type", ":K_cF& _!", stringArray0);
      assertEquals("select into join drop tablecreate type as :K_cF& _! on drop indexselect intoq[{#/6''.call = :K_cF& _!.call and drop indexselect intoq[{#/6''.call = :K_cF& _!.call", string3);
      
      String string4 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop indexselect intoq[{#/6'' DROP TABLECREATE TYPE NOT NULL", string4);
      
      SQLUtil.removeComments("");
      String string5 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string5);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("ny3RR~6\"rwF)!nt");
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6237180760658338
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("delete", stringBuilder0);
      assertEquals("delete", stringBuilder0.toString());
      
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0504696471801742
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.parseNumbers();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String string1 = SQLUtil.renderValue(streamTokenizer0);
      assertEquals("Token[NOTHING], line 1", string1);
      
      String string2 = SQLUtil.normalize("c</*<#9[4V$,AK5`u/", false);
      assertEquals("c < /* < # 9 [ 4V $, AK5 ` u /", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionalter tablenull org.h2.engine.undologrecord(3,0) null");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Ufz=Cw_Zja-W7", true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT Ufz=Cw_Zja-W7 ", stringBuilder0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("j7?hTr@t8h\"jM\"", true, (String) null, "ZK");
      dBCheckConstraint0.equals((Object) null);
      dBCheckConstraint0.setName((String) null);
      boolean boolean0 = SQLUtil.isDML("ZK");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
      
      String string1 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.725192893420558
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnListWithTableName("seJlect into", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "create unique index";
      stringArray1[1] = "seJlect into.null, seJlect into.null, seJlect into.null";
      stringArray1[2] = "seJlect into.null, seJlect into.null, seJlect into.null";
      stringArray1[3] = "seJlect into";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2893, "NCLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jBps\"#gP%-@g]", defaultDBTable1, dBDataType0, integer1, integer2);
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "delete";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "jBps\"#gP%-@g]";
      stringArray0[4] = "NCLOB";
      stringArray0[5] = null;
      stringArray0[6] = "NCLOB";
      stringArray0[7] = null;
      stringArray0[8] = "NCLOB";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable1, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table null (,\n\tFOREIGN KEY () REFERENCES null(delete, , , jBps\"#gP%-@g], NCLOB, , NCLOB, , NCLOB),\n\tFOREIGN KEY () REFERENCES null(delete, , , jBps\"#gP%-@g], NCLOB, , NCLOB, , NCLOB)\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.548917710628375
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      SQLUtil.removeComments("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      SQLUtil.parseColumnTypeAndSize("updaterelatifcve");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" on ");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " on ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" on \" UNIQUE (, , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DBCatalog dBCatalog0 = new DBCatalog("");
      dBCatalog0.getSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", (DBSchema) null);
      Integer integer1 = new Integer((-311880055));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (DBDataType) null, integer1, (Integer) null);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.360448974670294
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "\tNuber f extra non-qualifiers is : ";
      SQLUtil.mutatesDataOrStructure("\tNuber f extra non-qualifiers is : ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = "/*pIwuu7hqtaY";
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*pIwuu7hqtaY");
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "call");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0959243989205865
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("update", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("update");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "update");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      String string1 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT update ", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.199663191579221
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("select");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      Object object0 = new Object();
      constraintDescriptorList0.add(object0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4168185977125947
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "inner";
      stringArray0[1] = "Cannot read from non-existingfile: ";
      stringArray0[2] = "Cannot read from non-existingfile: ";
      stringArray0[3] = "Cannot read from non-existingfile: ";
      stringArray0[4] = "inner";
      stringArray0[5] = "Cannot read from non-existingfile: ";
      stringArray0[6] = "cannot";
      SQLUtil.join("inner", "Cannot read from non-existingfile: ", stringArray0, "cannot", "(/w;sCob2TMA)x[", stringArray0);
      SQLUtil.mutatesDataOrStructure("Cannot read from non-existingfile: ");
      Integer integer0 = RawTransaction.ABORT;
      assertEquals(1, (int)integer0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ryelative", true, "ryelative", "ryelative");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ryelative");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("z(2A0ygvk\"O[OU");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLUtil.normalize("(5R*o+", true);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(5R * o +");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (5R * o +
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.494162885397007
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DBDataType.getInstance(65, "org.h2.engine.UndoLoRecord");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("e2C(g%<n oUS", false, "e2C(g%<n oUS", "INDEXSCAN");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("e2C(g%<n oUS", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.addRequiredCondition("org.h2.engine.UndoLoRecord", stringBuilder2);
      assertEquals("CONSTRAINT \"e2C(g%<n oUS\"  and e2C(g%<n oUSCONSTRAINT \"e2C(g%<n oUS\"  and org.h2.engine.UndoLoRecord", stringBuilder2.toString());
      
      SQLUtil.isProcedureCall("org.h2.engine.UndoLoRecord");
      Boolean boolean0 = SQLUtil.mutatesStructure("org.h2.engine.UndoLoRecord");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1432136814444385
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[10];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized viewny3rr~6\"rwf)!n>)");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      stringBuilder0.append(2146.74139525787);
      assertEquals("2146.74139525787", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesStructure("openFileOutputStream");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executecannot ea from yq-exi\t]ngfile:");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("renamev");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("seJlect into");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition("seJlect into", stringBuilder0);
      assertEquals("seJlect into", stringBuilder0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8YN58G$en0m<^g\"0*?", defaultDBTable0, (-2688), "8YN58G$en0m<^g\"0*?");
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(8, "call[2_bi!q%jl|y_s[tkn7x");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer2);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("8YN58G$en0m<^g\"0*?, ", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8YN58G$en0m<^g\"0*?", defaultDBTable0, (-2698), "8YN58G$en0m<^g\"0*?");
      String string0 = defaultDBColumn0.toString();
      assertEquals("8YN58G$en0m<^g\"0*? : 8YN58G$EN0M<^G\"0*?", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("8YN58G$en0m<^g\"0*?, 8YN58G$en0m<^g\"0*?", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop materialized viewselec}t intsq[{#/6''";
      stringArray0[1] = "drop materialized viewselec}t intsq[{#/6''";
      stringArray0[2] = "drop materialized viewselec}t intsq[{#/6''";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop materialized viewselec}t intsq[{#/6''", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter sessionrename", defaultDBTable0, (-2461), "alter sessionrename");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter sessionrename");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("org.apache.derby.catalog.TypeDescriptor", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.removeComments("");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.47058823529411764
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(3608, "");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" (0,3) NULL", string0);
      
      defaultDBTable0.getColumns();
      SQLUtil.removeComments("");
      String string1 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column ", string1);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ORDINAL_POSITION", defaultDBTable0, 3608, "=M?}ocEaU/H");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string2);
      
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "alter materialized viewse!lect";
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter materialized viewse!lect";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("MkFJ");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("MkFJ", false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-3265), (Object) stringBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3265
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.459562444957137
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBDataType dBDataType0 = DBDataType.getInstance((-315393527), " REFERENCES ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("gGc/5)");
      assertNull(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("ny3RR~6\"rwF)!nt");
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter tablenull org.h2.engine.undlogrecord(3,0) null");
      assertEquals(3, objectArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("drop indexa(pjy8dg:.bpsfz{#f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: drop indexa(pjy8dg:.bpsfz{#f
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablenull org.h2.engineundlogrecord(3,0) null", defaultDBTable0, (-225869467), "alter tablenull org.h2.engineundlogrecord(3,0) null");
      assertEquals(3, (int)defaultDBColumn0.getSize());
      
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("alter tablenull org.h2.engineundlogrecord(3,0) null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("op_bItch_segments ", stringBuilder0);
      assertEquals("op_bItch_segments ", stringBuilder0.toString());
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("op_bItch_segments ", false, "op_bItch_segments ", "op_bItch_segments ");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \"op_bItch_segments \" ", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1248), "Vb7a[-DvAl.qsu");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Vb7a[-DvAl.qsu", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("VB7A[-DVAL.QSU", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ny3RR~6\"rwF)!n>)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".");
      DBDataType dBDataType0 = DBDataType.getInstance(45, "ny3RR~6\"rwF)!n>)");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ny3RR~6\"rwF)!n>)", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      Boolean boolean0 = new Boolean(".");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tablenull org.h2.engineundlogrecord(3,0) null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("deletejx", defaultDBTable0, 1348, "7Z9?B-=Z1s9d");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "alter tablenull org.h2.engineundlogrecord(3,0) null");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("alter tablenull org.h2.engineundlogrecord(3,0) null7Z9?B-=Z1S9D", stringBuilder0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      boolean boolean1 = SQLUtil.isProcedureCall("executedor materiaized view5z1 ` h-y, yrb");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("executege!s'#n5u`9a&,hg");
      assertNull(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Object[] objectArray0 = new Object[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablenull org.h2.engine.undlogrecord(3,0) null", defaultDBTable0, (-225869467), "alter tablenull org.h2.engine.undlogrecord(3,0) null");
      assertEquals(3, (int)defaultDBColumn0.getSize());
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("alter tablenull org.h2.engine.undlogrecord(3,0) null", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("8YN58G$en0m<^g\"0*?", defaultDBTable0, (-2698), "8YN58G$en0m<^g\"0*?");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4666666666666667
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1501), "org.h2.engine.UndoLogRecord");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = new Integer((-1501));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.engine.UndoLogRecord", defaultDBTable0, dBDataType0, integer2, integer0);
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(",SQPw$fMQQ", defaultDBTable0, dBDataType0, integer1, integer3);
      SQLUtil.removeComments(")z_&5[c{Hc");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) ")z_&5[c{Hc");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format(",SQPw$fMQQ", (Object[]) null);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(")z_&5[c{Hc,SQPw$fMQQcreate table null (\n\torg.h2.engine.UndoLogRecord ORG.H2.ENGINE.UNDOLOGRECORD(-1501,3) NULL,\n\t,SQPw$fMQQ ORG.H2.ENGINE.UNDOLOGRECORD(0,1) NULL\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4318903673030103
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = SQLUtil.normalize("Ap;F/x#jEr(-", true);
      assertEquals("Ap ; F / x # jEr (-", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = SQLUtil.normalize("IW\"LLYi", false);
      assertEquals("IW \"LLYi\"", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop table9.ave8c<x.1fhl}");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.576869397469737
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("\u0003\u00067\uFFFF\u0001I@\u0007\u0007\uFFFF\u0001\u0007\u0003\uFFFF\u0001\u0005");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u0003\u00067\uFFFF\u0001I@\u0007\u0007\uFFFF\u0001\u0007\u0003\uFFFF\u0001\u0005";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\u0003\u00067\uFFFF\u0001I@\u0007\u0007\uFFFF\u0001\u0007\u0003\uFFFF\u0001\u0005", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \u0003\u00067\uFFFF\u0001I@\u0007\u0007\uFFFF\u0001\u0007\u0003\uFFFF\u0001\u0005 UNIQUE (\u0003\u00067\uFFFF\u0001I@\u0007\u0007\uFFFF\u0001\u0007\u0003\uFFFF\u0001\u0005)", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "HA-QsAEF%Ud";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "HA-QsAEF%Ud", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT HA-QsAEF%Ud UNIQUE (HA-QsAEF%Ud)", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.555971214471979
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("relative");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("relative");
      DBDataType dBDataType0 = DBDataType.getInstance((-392980458), "relative");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("relative", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("RELATIVE(2)", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SDtXO47u&";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("SDtXO47u&", stringArray0, "left", "SDtXO47u&", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String[] stringArray0 = new String[13];
      String string0 = SQLUtil.join((String) null, "NWLOB", stringArray0, stringArray0[0], stringArray0[1], stringArray0);
      assertEquals("null as null on NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null and NWLOB.null = null.null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ryelative", true, "ryelative", "ryelative");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ryelative CHECK ryelative", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2;[e<V[*Hceve#B^P*l");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("duzGmjQE", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT duzGmjQE FOREIGN KEY () REFERENCES 2;[e<V[*Hceve#B^P*l()", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.585098775154596
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[12];
      String string0 = SQLUtil.join("se<c iItoq[l#/'", stringArray0[1], stringArray0, " Tr", stringArray0[6], stringArray0);
      assertEquals("se<c iItoq[l#/' join  Tr as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("se<c iItoq[l#/' join  Tr as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null");
      assertNull(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Z7T5@.w!8F#iN", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , , , , , , , , , ) REFERENCES null(, , , , , , , , , , , )", string1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = SQLUtil.normalize("='", false);
      assertEquals("= ''", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("relative");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("qYcK`", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Character character0 = new Character('n');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'n'", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.5669499167988556
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selec}t intoq[{#/6''");
      Character character0 = new Character('N');
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "^LO&9Uvgg(<#y5Z>?", character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter sessionrename", defaultDBTable0, (-2461), "alter sessionrename");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter sessionrename");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("g)JV8Fh");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("CHECK ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBPrimaryKeyConstraint0.toString();
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.9557135998277697
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tablenull org.h2.engine.undologrecord(3,0) null");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.056276685768579
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("[(5UkR*+B", true, "^", "deletedefault");
      SQLUtil.normalize("[(5UkR*+B", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT [(5UkR*+B ", stringBuilder0.toString());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("generE_t", false, "generE_t", "generE_t");
      SQLUtil.removeComments("generE_t");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("relative", false, "relative", "relative");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK relative", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("relative", false, "relative", "relative");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK relative", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.join("ISDEF", "ISDEF", stringArray0, "ISDEF", stringArray0[0], stringArray0);
      assertEquals("ISDEF join ISDEF as null on ISDEF.null = null.null and ISDEF.null = null.null and ISDEF.null = null.null and ISDEF.null = null.null and ISDEF.null = null.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\n/* index sorted */", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , )", string1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "table null";
      stringArray0[1] = "table null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "table null", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"table null\" PRIMARY KEY (table null, table null)", string1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = SQLUtil.normalize("huL.1_`b-e@y=", false);
      assertEquals("huL.1_ ` b - e @ y =", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(703, "table null");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBTable0.getColumns();
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.table null", string1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("insertalter tablenul org.h2.engine.undlogrecord(3,0) null");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("updateznjvp3^m[vg");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[1], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "J473^e*QS|Z[{";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isProcedureCall("J473^e*QS|Z[{");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND J473^e*QS|Z[{ = 'J473^e*QS|Z[{'", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.960841804955975
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter tablenull org.h2.engineundlogrecord(3,0) null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("selec}t intoq[{#/6''", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Cannot read from non-existingfile: ");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Cannot ea from YQ-exi\t]ngfile: ", (DBTable) null, 3, "Cannot ea from YQ-exi\t]ngfile: ");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Cannot ea from YQ-exi\t]ngfile:  CANNOT EA FROM YQ-EXI\t]NGFILE:  NULL", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selec}t itSq[{#/6''");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("selec}t itSq[{#/6''", (String) null, "selec}t itSq[{#/6''");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.7385727210046005
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter tablenull org.h2.engine.undologrecord(3,0) null");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ny3RR~6\"rwF)!n>)");
      SQLUtil.addRequiredCondition("ny3RR~6\"rwF)!n>)", stringBuilder0);
      assertEquals("ny3RR~6\"rwF)!n>) and ny3RR~6\"rwF)!n>)", stringBuilder0.toString());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter tablealter tablenull org.h2.engine.undologrecord(3,0) null", true);
      assertEquals("alter tablealter tablenull org.h2.engine.undologrecord (3, 0) null", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<4");
      SQLUtil.addOptionalCondition("<4", stringBuilder0);
      assertEquals("<4 or <4", stringBuilder0.toString());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " (";
      stringArray0[1] = "p!";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals(" ( = ' (' AND p! = 'p!' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.innerJoin("", stringArray0, " ?xt`0/VgE`_", "", stringArray0);
      assertEquals(" ?xt`0/VgE`_ as  on . ( = . ( and .p! = .p! and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null and .null = .null", string1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL(" DEFAULT ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[13];
      String string0 = SQLUtil.renderColumnListWithTableName("NWLOB", stringArray0);
      assertEquals("NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null", string0);
      
      SQLUtil.innerJoin("NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null", stringArray0, "NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null", "NWLOB", stringArray0);
      boolean boolean0 = SQLUtil.isDDL("NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null, NWLOB.null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = SQLUtil.innerJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "drop index", "drop index", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("ryelative", (String[]) null, "ryelative", "ryelative", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = SQLUtil.renderColumnNames((String[]) null);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.substituteMarkers("f", "f", stringBuilder0);
      char[] charArray0 = new char[2];
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("drop index", "02Nudt{7k[|!6Zlpm\"", "drop index");
      assertEquals("drop index", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      String string1 = SQLUtil.substituteMarkers("null = null", "null = null", "null = null");
      assertEquals("'null = null'", string1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = SQLUtil.renderValue("kiN");
      assertEquals("'kiN'", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBUniqueConstraint dBUniqueConstraint0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("ny3RR~63rw=8!n>)");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema ny3RR~63rw=8!n>)", string0);
      
      boolean boolean0 = SQLUtil.isDML("ny3RR~63rw=8!n>)");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("table null");
      assertNull(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select i");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = ".null, .";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(".null, .", stringArray0, "{@9|", "update", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String[] stringArray1 = new String[1];
      stringArray1[0] = "select";
      // Undeclared exception!
      try { 
        SQLUtil.join("select", "select", stringArray0, "J;cOPHzh$kvh?Bc", "select", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "RESERVED";
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        SQLUtil.join("RESERVED", "RESERVED", (String[]) null, stringArray0[0], stringArray0[1], stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("create materialized view'ql0.9k-=aj", (String[]) null, "create materialized view'ql0.9k-=aj", "\u0001\u00B9", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = new String[13];
      SQLUtil.removeComments("NWLB");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("NWLB", (String[]) null, "alter ta", "NWLB", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String[] stringArray0 = new String[13];
      String string0 = SQLUtil.join("NCLOB", "NCLOB", stringArray0, stringArray0[0], stringArray0[1], stringArray0);
      assertEquals("NCLOB join null as null on NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null and NCLOB.null = null.null", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.7485029167305814
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[12];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      String string1 = SQLUtil.leftJoin(string0, stringArray0, "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = SQLUtil.normalize("enF;9*:", false);
      assertEquals("enF ; 9 * :", string0);
  }
}
