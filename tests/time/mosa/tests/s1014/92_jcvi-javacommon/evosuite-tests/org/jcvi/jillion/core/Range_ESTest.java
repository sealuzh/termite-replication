/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 01:09:56 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7800184416506264
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      List<Range> list0 = range0.split(750L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 727L, 65535L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range0));
      
      List<Range> list2 = range1.split(727L);
      assertEquals(90, list2.size());
      
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range2.getEnd(range_CoordinateSystem1);
      assertEquals(0L, long0);
      
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.011840025714751
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-5294L), 1936L);
      Range range0 = Range.ofLength(9223372036854710654L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-5294L), 9223372036854710654L);
      linkedList0.add(range1);
      linkedList0.addFirst(range0);
      range1.complementFrom(linkedList0);
      Range.ofLength(9223372036854710654L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.635480952274217
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-912L), 65535L);
      range0.getEnd(range_CoordinateSystem0);
      range0.split(78L);
      long long0 = 32767L;
      List<Range> list0 = range0.split(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      range0.equals(list0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.859630538787584
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.split(78L);
      List<Range> list0 = range0.split(78L);
      range0.complementFrom(list0);
      range0.getBegin();
      Long long0 = new Long((-32768L));
      range0.toString();
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8652382168177475
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Range range1 = Range.ofLength(4294967295L);
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      Range.of((-609L), 65535L);
      Range range2 = Range.of(4294967295L);
      boolean boolean1 = range2.equals("A$'");
      assertTrue(boolean1 == boolean0);
      
      Range.of(450L);
      range1.iterator();
      long long0 = range2.getLength();
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(4294967294L, long1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5816053810374346
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-469L), (-469L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of((-609L), (-609L));
      boolean boolean0 = range1.endsBefore(range0);
      Range.Comparators.values();
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6689583587911936
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774075L);
      Range range1 = Range.of((-1728L), 32767L);
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      range2.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1311208216787505
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(79L, 79L);
      Range range0 = Range.ofLength(79L);
      Long long0 = new Long(79L);
      range0.equals((Object) null);
      range0.getBegin();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      range1.getLength();
      long long1 = range0.getEnd();
      assertEquals(78L, long1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.269404008863985
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem.values();
      long long0 = range0.getEnd();
      assertEquals((-2147483648L), long0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-2147483648L), (-2206L));
      boolean boolean0 = range1.endsBefore(range0);
      Range.Comparators.values();
      range1.startsBefore(range0);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8896985514868954
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 736L, 4294967310L);
      List<Range> list0 = range0.split(4294967310L);
      Long long0 = new Long(736L);
      long long1 = range0.getEnd();
      assertEquals(4294967310L, long1);
      
      Range.Comparators.values();
      range0.equals(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(736L, long2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2691404463777123
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-469L), (-469L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of((-609L), (-609L));
      Range range1 = Range.of((-609L));
      range0.equals(range1);
      Long long0 = new Long((-469L));
      assertEquals((-469L), (long)long0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = 65535L;
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-912L), 65535L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.8165613727190135
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(0L, 737L);
      Range range1 = Range.of(0L, 9223372036854775764L);
      Range range2 = Range.of(range_CoordinateSystem0, (-1173L), 0L);
      range2.endsBefore(range0);
      long long0 = new Long(9223372036854775764L);
      // Undeclared exception!
      try { 
        range1.split(9223372036854775764L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -89 would make range [9223372036854775764 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.9937672095556183
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      Range range0 = Range.ofLength(65535L);
      range0.split(78L);
      long long0 = (-4120L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 1L;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range_Builder0.expandBegin(78L);
      List<Range> list0 = range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 735L, 65535L);
      range2.complementFrom(list0);
      // Undeclared exception!
      range0.split(78L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.333024165092917
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(9223372036854711186L);
      Range.CoordinateSystem.values();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(9223372036854775764L, 9223372036854775764L);
      boolean boolean0 = range0.endsBefore(range1);
      Range.Comparators.values();
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range1.equals(range0);
      Object object0 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1311208216787505
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      long long0 = (-469L);
      Range range0 = Range.of((-469L), (-469L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7708100536348406
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = 78L;
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      Range range0 = Range.ofLength(65535L);
      List<Range> list0 = range0.split(78L);
      long long1 = (-4120L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = 1L;
      Range.of(range_CoordinateSystem0, 1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 735L, 65535L);
      // Undeclared exception!
      range1.complementFrom(list0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7946485850575375
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1144L);
      range0.equals((Object) null);
      range0.toString(range_CoordinateSystem0);
      long long0 = 4294967295L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 1144L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.522058826785167
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(736L, 736L);
      Range range1 = Range.of(736L);
      range0.getBegin();
      Range range2 = Range.of((-9223372036854710125L), (-9223372036854710125L));
      Range range3 = Range.of((-9223372036854710125L), 736L);
      range1.endsBefore(range2);
      Long long0 = new Long((-912L));
      Range.Comparators.values();
      range3.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("~Oq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.~Oq
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.541211179445276
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(3040L, 3040L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of((-609L), 9223372036854774075L);
      Range.of((-609L));
      range1.equals(object0);
      Long long0 = new Long(1410L);
      assertEquals(1410L, (long)long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.7580833185518485
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 78L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-912L), 65535L);
      range0.toString();
      range0.getEnd(range_CoordinateSystem0);
      range0.split(78L);
      range0.split(32767L);
      Range range1 = range0.intersection(range0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.Comparators.values();
      Range range2 = Range.ofLength(1118L);
      // Undeclared exception!
      try { 
        range2.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.9001267178505907
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-5295L), 1936L);
      Range range0 = Range.ofLength(9223372036854710654L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(1936L);
      linkedList0.add(range1);
      linkedList0.addFirst(range0);
      range1.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5896260227634134
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-5295L), 1936L);
      Range range0 = Range.of((-5295L), 9223372036854710654L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.addFirst(range0);
      range0.complementFrom(linkedList0);
      range_Builder0.expandEnd(1936L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3351L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4925876194659407
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 78L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-912L), 65535L);
      Range range0 = Range.of((-194L), 78L);
      Range range1 = Range.ofLength(65520L);
      range0.intersects(range1);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4929074147969286
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(0L, 737L);
      Range range2 = Range.of(0L, 9223372036854775764L);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(range_CoordinateSystem0, (-1173L), 0L);
      boolean boolean0 = range3.endsBefore(range0);
      Range.Comparators.values();
      boolean boolean1 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.794805938169278
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-5295L), 1936L);
      Range range0 = Range.ofLength(9223372036854710654L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(1936L);
      linkedList0.add(range1);
      assertFalse(linkedList0.contains(range0));
      
      linkedList0.addFirst(range0);
      range1.complementFrom(linkedList0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1936L);
      range_Builder1.contractEnd(1L);
      range1.intersection(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8995251408594784
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774075L);
      Range range1 = Range.of((-128L), 17238L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      Long long0 = new Long(127L);
      range0.equals(list1);
      assertFalse(list1.contains(range1));
      assertFalse(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertTrue(list0.equals((Object)list1));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.965729265426001
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 78L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-912L), 65535L);
      range0.toString();
      range0.getEnd(range_CoordinateSystem0);
      range0.split(78L);
      range0.split(78L);
      Range range1 = Range.parseRange("[ -912 .. 65535 ]/0B");
      Range.ofLength(4294966559L);
      Range range2 = range1.intersection(range0);
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem1, (-1396L), (-1396L));
      Range range3 = range_Builder1.build();
      range2.startsBefore(range1);
      range3.toString();
      range_Builder0.expandEnd(9223372036854775807L);
      range0.startsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ -912 .. 65535 ]/0B", range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = (-128L);
      Range.of((-191L), (-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2579L), (-2580L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4689087037981055
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(736L, 736L);
      range0.getEnd();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString();
      assertEquals("[ 736 .. 736 ]/0B", string0);
      
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 478L, 736L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Long long0 = new Long(127L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.493755988969011
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(736L, 736L);
      range0.getEnd();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 736L, 736L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 736 .. 736 ]/0B", string0);
      
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(736L, 65535L);
      Range.of(736L);
      Range range3 = Range.of(736L, 736L);
      range3.equals(range2);
      range0.iterator();
      //  // Unstable assertion: assertNotSame(range0, range1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.20423340720908
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(736L, 736L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 736L, 736L);
      String string0 = range0.toString();
      assertEquals("[ 736 .. 736 ]/0B", string0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      range1.split(736L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Long long0 = new Long(9223372036854775807L);
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.300781200429001
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      range0.getBegin();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.444184784962068
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-469L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-469L), (-469L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range range0 = Range.of((-469L), 0L);
      range_Builder1.copy();
      range_Builder0.expandEnd((-469L));
      Range.Builder range_Builder2 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range_Builder1);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5829308616247357
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-384L), 737L);
      range0.split(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      range0.getLength();
      Long long0 = new Long((-384L));
      assertEquals((-384L), (long)long0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4048364979807486
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(98L, 65535L);
      range_Builder0.copy();
      long long0 = (-257L);
      Range.of((-1173L), (-257L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-257L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -257 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.540872802686925
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(736L);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(9223372036854775764L, 9223372036854775764L);
      range0.endsBefore(range1);
      range1.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      
      range1.equals(range0);
      Range range2 = Range.ofLength(736L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.9012482265591393
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = Range.ofLength(1496L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range2);
      linkedList0.addFirst(range2);
      List<Range> list0 = range1.complementFrom(linkedList0);
      assertTrue(list0.contains(range2));
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(1496L);
      range_Builder2.contractEnd(1496L);
      Range range3 = Range.of(0L);
      boolean boolean0 = range1.isSubRangeOf(range2);
      assertTrue(boolean0);
      
      range1.intersection(range3);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
      assertNotSame(range3, range2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.9011839728820847
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      Range range0 = Range.ofLength(65535L);
      List<Range> list0 = range0.split(78L);
      assertEquals(841, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4120L), (-2751L));
      String string0 = range0.toString();
      assertEquals("[ 0 .. 65534 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem1);
      assertEquals((-4120L), long0);
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(4294967294L);
      List<Range> list1 = range0.complement(range1);
      List<Range> list2 = range2.complementFrom(list1);
      assertTrue(list2.contains(range0));
      
      Long long1 = new Long(2360L);
      boolean boolean1 = range2.equals(long1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 736L, 736L);
      List<Range> list0 = range0.split(736L);
      Long long0 = new Long(736L);
      long long1 = range0.getEnd();
      assertEquals(736L, long1);
      
      Range.of(736L, 736L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Long long2 = new Long(736L);
      boolean boolean0 = range0.equals(list0);
      assertEquals(1, list0.size());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.054702900199091
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(736L, 736L);
      range0.getEnd();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-469L), 4294967295L);
      List<Range> list0 = range1.complement(range0);
      Range range2 = Range.of(range_CoordinateSystem0, (-469L), 736L);
      range2.complementFrom(list0);
      // Undeclared exception!
      try { 
        range1.split((-469L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.27904963068484
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(0L);
      Long long0 = new Long(737L);
      range0.getEnd();
      Range.Comparators.values();
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1173L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = (-469L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, (-469L), (-469L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.201200886033717
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-469L), (-469L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-1000L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1001 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.541790197286263
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-469L), (-469L));
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range1 = Range.of((-609L), (-609L));
      Range range2 = Range.of((-609L));
      assertSame(range2, range1);
      
      Range range3 = Range.ofLength(65535L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.604323333485506
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(736L);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(9223372036854775764L, 9223372036854775764L);
      boolean boolean0 = range0.endsBefore(range1);
      long long0 = range1.getEnd();
      assertEquals(9223372036854775764L, long0);
      
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.7828696189664734
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      range_Builder0.copy();
      Range range0 = Range.of(78L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range.ofLength(4294967295L);
      Range range1 = Range.of(6094L);
      // Undeclared exception!
      try { 
        range1.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.105372760784375
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(877L, 3842L);
      Range.Comparators.values();
      Range range1 = Range.ofLength(255L);
      Range range2 = Range.of((-772L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      long long0 = range1.getEnd();
      assertEquals(254L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.toString();
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
      
      Range.ofLength(932L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      range_CoordinateSystem0.getAbbreviatedName();
      Range range4 = range2.asRange();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.851272580342176
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147483648L), 1L);
      Range range2 = Range.of(65535L, 65535L);
      Range.of((-609L));
      Long long0 = new Long((-2147483648L));
      boolean boolean0 = range2.equals(long0);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
      
      range0.iterator();
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.9517329053794192
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 884L, 884L);
      List<Range> list0 = range0.split(65408L);
      List<Range> list1 = range0.complementFrom(list0);
      Range range1 = Range.ofLength(65408L);
      Range.ofLength(884L);
      Range range2 = range0.intersection(range1);
      Range range3 = range0.asRange();
      range3.split(884L);
      List<Range> list2 = range3.complement(range2);
      assertFalse(range1.isEmpty());
      assertTrue(range3.isEmpty());
      assertTrue(list2.equals((Object)list1));
      
      Range range4 = Range.of((-1030L));
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getBegin();
      Range range1 = Range.ofLength(0L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("=[Uc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse =[Uc into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.789181876622164
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147483648L), 1L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.717157611809779
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(417L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list0.contains(range1));
      assertTrue(list1.isEmpty());
      
      Long long0 = new Long((-2487L));
      Range range2 = Range.of((-2789L), 127L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.9304128931883118
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 736L, 4294967310L);
      List<Range> list0 = range0.split(4294967310L);
      Long long0 = new Long(736L);
      range0.getEnd();
      Range.Comparators.values();
      range0.equals(list0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder(736L, 737L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.996494491962859
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 78L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-912L), 65535L);
      range0.getEnd(range_CoordinateSystem0);
      range0.split(78L);
      List<Range> list0 = range0.split(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(list0);
      Long long0 = new Long(78L);
      assertEquals(78L, (long)long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5414921346931187
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-912L), 65535L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ -912 .. 65535 ]/0B");
      Range.of((-911L));
      range1.getBegin();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-912L));
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2000428065800537
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.of(9223372036854775807L);
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.parseRange("e+~o$E\"^Q^|Kq6iKK!9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse e+~o$E\"^Q^|Kq6iKK!9 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.491915479660861
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(736L);
      Range range1 = Range.of(3159L, 9223372036854775807L);
      Range.of(9223372036854775807L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.540763039227181
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      long long1 = range0.getBegin();
      assertEquals(0L, long1);
      
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range range1 = Range.of(0L, 0L);
      Range range2 = Range.of(0L);
      range1.equals(range2);
      range1.iterator();
      assertFalse(range1.isEmpty());
      assertSame(range1, range2);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      long long1 = 1144L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5061610993802965
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-469L), (-469L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-469L));
      range0.getBegin();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      long long2 = range1.getEnd();
      assertEquals((-469L), long2);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5423765149766404
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-912L), 0L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range3 = range_Builder0.build();
      range3.startsBefore(range2);
      range2.toString();
      range_Builder0.expandEnd((-979L));
      range1.intersects(range3);
      range1.intersects(range2);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, (-995L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3852171187209072
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      Range.of(range_CoordinateSystem0, (-892L), 0L);
      range0.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-892L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.parseRange("s]UGl._");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse s]UGl._ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1322080145467655
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(736L, 736L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range_CoordinateSystem0.toString();
      long long0 = (-1772L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1772L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.3285404468599546
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(736L);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(9223372036854775764L, 9223372036854775764L);
      range0.endsBefore(range1);
      long long0 = range1.getEnd();
      assertEquals(9223372036854775764L, long0);
      
      Range.Comparators.values();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854775765L, long1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.7571061019577012
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((-32768L), 737L);
      range1.split(1041L);
      range0.toString(range_CoordinateSystem0);
      long long0 = range1.getLength();
      Long long1 = new Long((-32768L));
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.208698743753928
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0547452758288847
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.of(32767L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange(".1W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse .1W into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.8723624294281405
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(736L, 736L);
      range0.getEnd();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 736L, 736L);
      range0.toString();
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(736L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = Range.of((-2047L), 2147483647L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.791946795121705
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-469L), 4294967295L);
      // Undeclared exception!
      try { 
        range0.split((-469L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.600060236202178
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1144L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1144L);
      range0.toString(range_CoordinateSystem0);
      long long1 = 4294967317L;
      Range.of(1144L, 4294967317L);
      // Undeclared exception!
      try { 
        Range.parseRange("end of file reached before entire block was skipped");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse end of file reached before entire block was skipped into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.178008108691081
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.267638227190276
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774075L);
      Range range1 = Range.of((-128L), 17238L);
      range0.isSubRangeOf(range1);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.756503405356908
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(78L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-912L), 65535L);
      String string0 = range0.toString();
      assertEquals("[ -912 .. 65535 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ -912 .. 65535 ]/0B");
      Range range2 = Range.of((-911L));
      range2.isSubRangeOf(range1);
      Range range3 = range2.intersection(range1);
      assertFalse(range2.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3287088395517115
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(736L);
      Range range1 = Range.of(9223372036854775764L, 9223372036854775764L);
      boolean boolean0 = range0.endsBefore(range1);
      Range.Comparators.values();
      boolean boolean1 = range1.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 736L, 4294967295L);
      range0.split(4294967295L);
      long long1 = new Long(736L);
      long long2 = (-1258L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4294967295L, (-1258L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.809544962896374
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-469L), (-469L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = range0.asRange();
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      range1.getEnd();
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem0);
      assertEquals((-469L), long1);
      
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.389719867413766
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774075L);
      Range range1 = Range.of(9223372036854774075L, 9223372036854774075L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Long long0 = new Long(127L);
      long long1 = new Long(127L);
      assertEquals(127L, long1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.2686517143657654
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(1278L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-1008L), 1959L);
      Range range2 = Range.of((-1008L));
      boolean boolean0 = range2.endsBefore(range1);
      assertFalse(boolean0);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.3288655179692594
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range range1 = Range.ofLength(9223372036854774075L);
      boolean boolean0 = range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean1 = range1.endsBefore(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2679158250435196
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.of((-128L));
      Range range0 = Range.of(749L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.388169114724359
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-114L));
      Range range1 = Range.of((-114L), (-114L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Long long0 = new Long((-114L));
      boolean boolean0 = range1.equals("number ^f entries must be >=0");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.7170443230366965
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(749L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      range1.complementFrom(linkedList0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.9131036443757403
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.getEnd(range_CoordinateSystem0);
      List<Range> list0 = range0.split(78L);
      range0.split(78L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(list0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.parseRange("offset must be >= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse offset must be >= 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.819885552634109
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147483648L), 1L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.7897491833401147
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((-32768L), 737L);
      range1.split(1041L);
      range0.toString(range_CoordinateSystem0);
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder(1041L, 1041L);
      range_Builder0.shift((-32768L));
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-32768L), 1L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.824404570676774
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-1078L), 3040L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = Range.of(3040L, 3040L);
      Range.of((-1078L));
      range1.equals(object0);
      Long long0 = new Long((-609L));
      assertEquals((-609L), (long)long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.329716840559713
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-469L), (-469L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-609L), (-609L));
      Range.of((-609L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.4954107301456308
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-32768L), 737L);
      List<Range> list0 = range1.split(1041L);
      Range.Comparators.values();
      range1.equals(list0);
      assertEquals(33, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.0581000423930447
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      boolean boolean0 = range0.equals("[ 0 .. 0 ]/0B");
      assertFalse(boolean0);
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(0L);
      range0.iterator();
      range0.asRange();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.4956469929809053
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-32768L), 737L);
      List<Range> list0 = new LinkedList<Range>();
      range0.split(255L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.973278742811257
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      range0.getBegin();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.0543110595891974
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(0L, 2147486308L);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("inputstream can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.inputstream can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      long long1 = range1.getEnd();
      assertEquals((-128L), long1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      boolean boolean0 = range0.equals(long0);
      range0.getBegin();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      Range range1 = range0.asRange();
      long long1 = range1.getLength();
      range1.getEnd();
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(long2 == long1);
      assertEquals(0L, long2);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.541665294866279
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774075L);
      Range range1 = Range.ofLength(9223372036854774075L);
      Range range2 = Range.of((-291L));
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.492626683491879
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of((-2147483648L), 1L);
      Range range2 = range1.intersection(range0);
      range2.spliterator();
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range2));
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.717818742415767
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-5295L), 1936L);
      Range range0 = Range.ofLength(1936L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(1936L);
      linkedList0.add(range1);
      linkedList0.addFirst(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertEquals(0, list0.size());
      
      range_Builder0.expandEnd((-674L));
      range_Builder0.contractEnd(1936L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.131810952803664
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandBegin((-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("&{/Rn7v", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse &{/Rn7v into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.756021849224803
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-5295L), 1936L);
      Range range0 = Range.ofLength(1936L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addFirst(range0);
      range0.complementFrom(linkedList0);
      Range.Builder range_Builder1 = new Range.Builder(1171L, 1171L);
      range_Builder0.contractEnd(1936L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.7932987949383397
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getBegin();
      Range range1 = Range.of((-912L), (-3L));
      range1.spliterator();
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-912L));
      range_Builder0.contractBegin((-1107L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-32768L), (-2167L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.330700781242146
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.of(1L, 1L);
      Range range1 = Range.of(1L, 1L);
      range0.startsBefore(range1);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.068910803836612
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      range0.isEmpty();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-172L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.1296233673511074
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(79L, 79L);
      Range.of(9223372036854775744L);
      Range.Builder range_Builder1 = new Range.Builder();
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(1696L, 905L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.3298119835119984
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-4252L));
      long long0 = range0.getBegin();
      assertEquals((-4252L), long0);
      
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range range1 = range_Builder0.build();
      range1.startsBefore(range0);
      String string0 = range1.toString();
      assertEquals("[ 0 .. 254 ]/0B", string0);
      
      range_Builder0.expandEnd(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.parseRange("[ 0 .. 254 ]/0B", range_CoordinateSystem0);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Long long0 = new Long(0L);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.41831904741401
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(3040L, 3040L);
      Range range1 = Range.of(255L, 2147483647L);
      range1.startsBefore(range0);
      Range.of(255L, 3040L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.8702192745557173
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.of((-912L), (-3L));
      range1.complement(range0);
      Range range2 = Range.of(0L, 127L);
      Range range3 = Range.of(127L);
      long long1 = range3.getBegin();
      assertEquals(127L, long1);
      
      Range range4 = range1.intersection(range0);
      assertNotSame(range0, range2);
      assertFalse(range0.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.of(736L);
      long long0 = 255L;
      // Undeclared exception!
      try { 
        Range.of(736L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.5280001559681686
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L, 1L);
      range0.startsBefore(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(1L);
      String string0 = range0.toString();
      assertSame(range0, range1);
      assertEquals("[ 1 .. 1 ]/0B", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.complementFrom(linkedList0);
      Long long0 = new Long((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.of((-128L), 17238L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Long long0 = new Long(127L);
      assertEquals(127L, (long)long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of((-14L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of((-14L));
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-128L));
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.7959184263273786
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774075L);
      Range range1 = Range.ofLength(9223372036854774075L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range2 = range1.asRange();
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.1322080145467655
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      range0.spliterator();
      range0.endsBefore(range0);
      range0.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1243L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1111L), (-1111L));
      long long0 = range0.getEnd();
      assertEquals((-1111L), long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.3843476615106227
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      range0.isEmpty();
      Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder();
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Object object0 = new Object();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-549L), (-549L));
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }
}
