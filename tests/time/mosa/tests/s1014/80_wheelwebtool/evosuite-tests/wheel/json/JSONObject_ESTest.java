/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 00:49:06 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.putOpt("true", "true");
      boolean boolean0 = jSONObject0.optBoolean("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7242986702781118
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Waa~&Cqa";
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt("Waa~&Cqa", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      int int0 = 1198;
      try { 
        JSONObject.valueToString(double0, 1198, 1198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.093308880176036
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("'");
      JSONObject jSONObject1 = jSONObject0.putOpt("", boolean0);
      boolean boolean1 = jSONObject1.optBoolean("");
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "'";
      stringArray0[4] = "'";
      stringArray0[5] = "'";
      stringArray0[6] = "'";
      stringArray0[7] = "'";
      JSONObject jSONObject2 = new JSONObject("'", stringArray0);
      jSONObject2.put("'", 65);
      String[] stringArray1 = JSONObject.getNames((Object) jSONObject2);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.925250065787779
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^| ZA%|7(ir6%&(8";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optLong("<W{v@'d&DPns!w", 484L);
      String string0 = jSONObject1.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{+HoEu393:zD87]H^p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 15 of {+HoEu393:zD87]H^p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7632244150209984
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = new Double((-3963.21763982));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray0);
      JSONObject.valueToString((Object) null);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5652475189671287
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("NjUeA+%@R", (Collection) linkedList0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte)19);
      jSONObject0.putOpt("NjUeA+%@R", byte0);
      linkedList0.sort(comparator0);
      jSONObject1.getDouble("NjUeA+%@R");
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("<=m", (Map) hashMap0);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject2 = jSONObject0.optJSONObject("<=m");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0966173996135877
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(849.99);
      JSONObject jSONObject1 = jSONObject0.append("Bad value from toJSONString: ", double0);
      JSONObject jSONObject2 = jSONObject1.put("nT%0]rr(|R5D+", 128);
      jSONObject1.getLong("nT%0]rr(|R5D+");
      JSONObject.getNames(jSONObject1);
      JSONObject.numberToString(double0);
      JSONArray jSONArray0 = jSONObject2.optJSONArray("Bad value from toJSONString: ");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "1Fr*/F+aR9e4FDt@/SUW";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{Mmtr.!]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {Mmtr.!]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "eY\"VP<dj>wsF?V";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{W#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {W#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.80657813074762
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("is", (Collection) linkedList1);
      JSONObject jSONObject2 = jSONObject1.accumulate("[]", linkedList1);
      jSONObject2.getString("is");
      Byte byte0 = new Byte((byte)8);
      jSONObject2.putOpt("] not found.", byte0);
      jSONObject2.toString((-1690), (-1690));
      int int0 = jSONObject1.optInt("] not found.");
      assertEquals(3, jSONObject1.length());
      assertEquals(8, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6042996210543117
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      linkedList1.add(double0);
      jSONObject0.put("E", (Collection) linkedList1);
      JSONObject jSONObject1 = jSONObject0.accumulate("[]", "[]");
      jSONObject1.put("A JSONObject text must end with '}'", true);
      try { 
        jSONObject0.toString((-1690), 101);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.524999402259769
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.accumulate("=V2m{-^:j", (Object) null);
      JSONObject jSONObject2 = jSONObject0.put("=V2m{-^:j", (-1003));
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5995350797109884
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("JSONArra initial value houldbe a string or collection or array.", "JSONArra initial value houldbe a string or collection or array.");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "JSONArra initial value houldbe a string or collection or array.";
      stringArray0[1] = "JSONArra initial value houldbe a string or collection or array.";
      stringArray0[2] = "JSONArra initial value houldbe a string or collection or array.";
      stringArray0[3] = "JSONArra initial value houldbe a string or collection or array.";
      stringArray0[4] = "JSONArra initial value houldbe a string or collection or array.";
      jSONObject1.put("C/6", 3154);
      stringArray0[5] = "JSONArra initial value houldbe a string or collection or array.";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.has("JSONArra initial value houldbe a string or collection or array.");
      jSONObject1.keys();
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.append("Qi(;", jSONObject1);
      JSONArray jSONArray0 = jSONObject2.optJSONArray("Qi(;");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("su", 0.0);
      JSONObject jSONObject1 = jSONObject0.put("su", (Object) "su");
      String string0 = jSONObject1.getString("su");
      assertNotNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7988457068767891
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.getString("</B;xCh7t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/B;xCh7t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0705902860728673
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("E)", "E)");
      jSONObject0.names();
      try { 
        jSONObject0.getDouble("E)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E)\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.732929873336089
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject.quote("V23.p6+");
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("V23.p6+", "\t");
      Double double0 = new Double(1.0);
      JSONObject jSONObject2 = new JSONObject(double0);
      JSONObject jSONObject3 = jSONObject1.put("JSON does not allow non-finite numbers.", 1.0);
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(0L);
      Long.max(0L, 0L);
      jSONObject2.accumulate("toJ", long0);
      assertEquals(4, jSONObject2.length());
      
      JSONObject jSONObject4 = new JSONObject(jSONArray0);
      jSONObject4.toString(45, 30);
      jSONObject3.toJSONArray(jSONArray0);
      int int0 = jSONObject0.getInt("JSON does not allow non-finite numbers.");
      assertEquals(1, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("h9]t~i]Y:[8%v{&I-Z", (Collection) linkedList0);
      Double double0 = new Double(3318.91);
      JSONObject jSONObject1 = jSONObject0.accumulate("h9]t~i]Y:[8%v{&I-Z", double0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5869843816913654
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "WKO5 !fb0]aT)Q7";
      jSONObject0.toString(102);
      JSONObject jSONObject1 = jSONObject0.append("WKO5 !fb0]aT)Q7", "WKO5 !fb0]aT)Q7");
      jSONObject1.append("WKO5 !fb0]aT)Q7", jSONObject0);
      try { 
        jSONObject1.getLong("WKO5 !fb0]aT)Q7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WKO5 !fb0]aT)Q7\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Qi(;";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.addLast(jSONObject0);
      jSONObject0.put("Qi(;", (Collection) linkedList0);
      jSONObject0.getJSONArray("Qi(;");
      try { 
        jSONObject0.getLong("Qi(;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Qi(;\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4827586206896552
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Qi(;";
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("Qi(;", (Collection) linkedList0);
      jSONObject0.getJSONArray("Qi(;");
      try { 
        jSONObject0.getLong("Qi(;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Qi(;\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.680917130983091
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      Byte.valueOf((byte) (-11));
      Double double0 = new Double(32);
      JSONObject jSONObject1 = jSONObject0.putOpt("getcompare", double0);
      jSONObject0.optLong("getcompare");
      JSONObject.quote("getcompare");
      jSONObject1.toString();
      jSONObject0.optJSONObject("gettoString");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8008878292697186
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.append("Qi(;", jSONObject1);
      JSONObject jSONObject3 = jSONObject2.put("-f,Fe2'<iA/]dCn6Oy", 0.0);
      jSONObject3.getInt("-f,Fe2'<iA/]dCn6Oy");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.names();
      JSONObject jSONObject4 = new JSONObject((Object) "vR}");
      jSONObject4.toString();
      jSONObject0.append("c20\"Z\"lcFr:Xc", "-f,Fe2'<iA/]dCn6Oy");
      try { 
        jSONObject1.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8083695164005986
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("Substring unds error", "Substring unds error");
      boolean boolean0 = jSONObject0.optBoolean("Substring unds error");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.430758633903798
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.clone();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("*\"hAJ[C*w9!a,=2M", (-1652.91865404));
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject1.optLong("*\"hAJ[C*w9!a,=2M");
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.names();
      try { 
        jSONObject0.getBoolean("Y/N2q8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y/N2q8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2829253831659817
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optBoolean("Null key.");
      jSONObject0.put("' and instead saw '", 0L);
      jSONObject0.optLong("' and instead saw '", 0L);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.149385224312701
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("issut", object0);
      try { 
        jSONObject0.getBoolean("issut");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issut\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.765976792018692
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.valueToString(jSONObject0);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-901L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.434799037944202
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong(",\n");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.toString(105, 363);
      jSONObject0.put("{}", (-2456));
      jSONObject0.toString(105);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(1739.902);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      linkedList0.add((Float) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6457928323748754
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7209175023255674
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = new Double((-53.16406));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString(jSONObject0, 418, 199);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.283562747916579
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("vXt5:HE`eL+n>LXT", (-1552));
      jSONObject1.toString((-1552));
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005,\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      Object object1 = new Object();
      JSONObject jSONObject3 = new JSONObject(object1);
      String string0 = JSONObject.doubleToString((-1552));
      assertEquals("-1552", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0037312012287596
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      Byte.valueOf((byte)81);
      JSONObject jSONObject1 = new JSONObject((Object) "JSONArray initial value should be a string or collection or array.");
      Long long1 = new Long((-1L));
      JSONObject jSONObject2 = jSONObject1.putOpt("JSONArray initial value should be a string or collection or array.", long1);
      JSONObject.doubleToString((byte)81);
      jSONObject2.optBoolean("81");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.toString(24, (-2319));
      jSONObject1.toString(24);
      String string0 = "nKszS_VO-v+ OEn<";
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of get
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2458103121064514
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", jSONArray0);
      String string0 = jSONObject1.toString((-1690), (-1690));
      assertNotNull(string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.703686774441842
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject.doubleToString((-484.1402221));
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = Byte.valueOf((byte) (-11));
      jSONObject0.putOpt("-484.1402221", byte0);
      JSONObject.quote("`@ZolD1TciiLGC^");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.toString((int) (byte) (-11), 126);
      jSONObject0.toString((int) (byte) (-11));
      int int0 = jSONObject0.getInt("-484.1402221");
      assertEquals((-11), int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.27660795407654
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("W*-%FWO4");
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("W*-%FWO4", 558L);
      try { 
        jSONObject1.getJSONArray("W*-%FWO4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W*-%FWO4\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.874099239168671
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject1 = jSONObject0.put("zQ2zD.%Wl", (Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("O}%YZI", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(123);
      Writer writer0 = jSONObject2.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1411461439556105
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", 1);
      jSONArray0.put((-1951.16553));
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = jSONObject1.optString("JSONArray initial value should be a string or collection or array.", "JSONArray initial value should be a string or collection or array.");
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.384892433099771
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(2657.433916);
      assertEquals("2657.433916", string0);
      
      String string1 = jSONObject0.optString("2657.433916", "2657.433916");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1559172330823015
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("~8i?|]Us0/1`d3", (-1L));
      assertEquals((-1L), long0);
      
      JSONObject jSONObject1 = jSONObject0.put("~8i?|]Us0/1`d3", (-1632));
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean0, (-1632), 371);
      double double0 = jSONObject1.optDouble("~8i?|]Us0/1`d3", (double) (-1L));
      assertEquals((-1632.0), double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.4120747171312216
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString((-4482.98639683656));
      assertEquals("-4482.98639683656", string0);
      
      boolean boolean0 = jSONObject0.optBoolean(")I`1hj0O%T");
      assertFalse(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put("-4482.98639683656", 0.0);
      double double0 = jSONObject1.optDouble("-4482.98639683656");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "[";
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      Long long0 = new Long((-2204L));
      Double double0 = new Double((-2204L));
      hashMap0.putIfAbsent(long0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("[", (Object) null);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5387203971956156
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long((-25L));
      StringWriter stringWriter0 = new StringWriter(32);
      JSONObject.quote("ws4X0I82fw[A2nO");
      JSONObject jSONObject0 = new JSONObject((Object) "7GAJ3($+(saDF.");
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>(39);
      jSONObject0.put("7GAJ3($+(saDF.", (Map) hashMap0);
      // Undeclared exception!
      jSONObject0.toString(1557);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(",\n", ",\n");
      try { 
        jSONObject1.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4814814814814815
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("|xKXKr4?ut", "|xKXKr4?ut");
      try { 
        jSONObject1.getLong("|xKXKr4?ut");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|xKXKr4?ut\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.4532005973722195
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Float float0 = new Float(4715.33F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.numberToString(float0);
      // Undeclared exception!
      jSONObject0.toString(2893, 2893);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0494708544146145
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
      
      jSONObject0.toString(9, 9);
      double double0 = jSONObject0.optDouble("");
      assertEquals(3, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8104399097753396
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.accumulate("W4r", linkedList0);
      jSONObject1.toString((-1690), (-1690));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8734738482993778
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Long long0 = new Long(256L);
      JSONObject.getNames((Object) long0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wM?L", (Object) "~8i?|]Us0/1`d3");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.opt("wM?L");
      jSONObject1.toString();
      JSONObject.getNames(jSONObject0);
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.opt("j.V@!~^|q&A'");
      try { 
        jSONObject2.getJSONArray("j.V@!~^|q&A'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j.V@!~^|q&A'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.2801315622513108
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("vXt5:HE`eL+n>LXT", (-1552));
      jSONObject1.toString((-1552));
      JSONObject jSONObject2 = new JSONObject("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject3 = new JSONObject(object0);
      assertEquals(1, jSONObject3.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.8471728851442626
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject.quote("01@r4/h+aR9FDt@/SUW");
      JSONObject jSONObject0 = new JSONObject("{}");
      jSONObject0.putOpt("01@r4/h+aR9FDt@/SUW", "01@r4/h+aR9FDt@/SUW");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5134049813662336
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject.quote("V>-uC(BPhja?z}");
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 42, (-105));
      JSONObject jSONObject1 = jSONObject0.put("V>-uC(BPhja?z}", (-2104.60295));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject.quote("V>-uC(BPhja?z}");
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 42, 42);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("\"V>-uC(BPhja?z}\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"V>-uC(BPhja?z}\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("\r");
      try { 
        jSONObject0.put((String) null, (Object) "\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject.valueToString("+6>8j{GyfdP&k");
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Unclosed comment", 4209.216044045);
      assertEquals(4209.216044045, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("false", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.4736842105263158
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject1 = jSONObject0.putOpt("getgetOrDefault", "zQ2zD.%Wl");
      JSONObject jSONObject2 = jSONObject1.accumulate("getgetOrDefault", "getgetOrDefault");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.163735415854063
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("-fRHc]h[NEgA*x", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("-fRHc]h[NEgA*x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-fRHc]h[NEgA*x\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.5135721994546856
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "su";
      stringArray0[1] = "su";
      JSONObject jSONObject0 = new JSONObject("su", stringArray0);
      int int0 = jSONObject0.length();
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      Float float0 = new Float((-1636.09347));
      Object object0 = new Object();
      hashMap0.put(float0, object0);
      jSONObject0.put("su", (Map) hashMap0);
      jSONObject0.toString(0, 1301);
      JSONObject.quote("su");
      jSONObject0.optInt("\"su\"", 0);
      int int1 = jSONObject0.length();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.85441987781001
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject.quote("] nWt found.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, (-1166), 54);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7308430321501822
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject1);
      JSONObject jSONObject2 = new JSONObject();
      long long0 = jSONObject2.optLong("wheel.json.JSONObject@0000000002", (-2351L));
      assertEquals((-2351L), long0);
      
      String string1 = JSONObject.quote("wheel.json.JSONObject@0000000002");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 120, 22);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1746286620414268
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.422205407625463
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 1253, 1253);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean((String) null, false);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("getsplit", true);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("Expected a ',' or '}'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble(".=$$ 1;Gp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".=$$ 1;Gp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("SLT1/4z3H", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 12, 709);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.864555230685108
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      JSONObject jSONObject1 = jSONObject0.put("is", (Map) hashMap0);
      JSONObject.getNames((Object) hashMap0);
      jSONObject1.optString("is");
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Short short0 = new Short((short)1048);
      String string0 = JSONObject.valueToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3808546144405294
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = new Long((-18L));
      JSONObject.quote("K/kp(RcA=");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(1001);
      jSONObject0.put("\"K/kp(RcA=\"", (Object) integer0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1077052571971504
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject.valueToString("] not found.", 2392, 2392);
      JSONObject jSONObject0 = new JSONObject((Object) "] not found.");
      jSONObject0.opt("8(b;yl;m");
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(2392);
      assertEquals("2392", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      JSONObject jSONObject1 = jSONObject0.put(string0, false);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.2039958490137452
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("", (Collection) linkedList0);
      jSONObject0.isNull("");
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0276242004980904
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull(",\n");
      assertTrue(boolean0);
      
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote("1Fr*/h+aR9e4FDt@/SUW");
      assertEquals("\"1Fr*/h+aR9e4FDt@/SUW\"", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.407802997335826
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("issum", object0);
      assertEquals(1, jSONObject1.length());
      
      jSONObject1.remove("issum");
      jSONObject0.names();
      boolean boolean0 = jSONObject0.optBoolean("issum");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("D^4]j\"U]sJ", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("9]fLNi", (-2179));
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("getlongBitsToDouble", 122);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble(",\n", (double) (-1L));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4885239550490779
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "W4r");
      jSONObject0.toString((-1680), (-1680));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.2084969742950655
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject.getNames((Object) "] npt fDund.");
      JSONObject jSONObject0 = new JSONObject((Object) "] npt fDund.");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 1353, 1353);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.3960882220782682
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Double double0 = new Double((-2523.027211));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-1566));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5768731582333269
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(",\n", ",\n");
      JSONObject.valueToString(jSONObject0, (-18603944), (-18603944));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 0.0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "EW{/W?BHi#!{,p";
      JSONTokener jSONTokener0 = new JSONTokener("EW{/W?BHi#!{,p");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of EW{/W?BHi#!{,p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.0842357119918957
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.optLong("iswait", 0L);
      boolean boolean0 = jSONObject0.optBoolean("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", (Map) hashMap0);
      jSONObject0.get("Substring bounds error");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("Substring bounds error");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("K}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("issum", jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("issum");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.019726163288044
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      int int0 = jSONObject0.optInt("");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.9556913461207355
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getBoolean("getgetBytes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetBytes\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("Expected a ',' or ']'");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0121515258995455
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.add((Float) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString(";:?jO[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";:?jO[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.133133739559716
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "062R/BwKtNW#;`bb}7g");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject("062R/BwKtNW#;`bb}7g", stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("#?FH-LHui*_", 5753L);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote(".*a5\"NM}%[F");
      assertEquals("\".*a5\\\"NM}%[F\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Long long0 = new Long((-1L));
      String string0 = JSONObject.valueToString(long0, (-1905), (-1905));
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = Double.valueOf(3342.0);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("/]*#TXi=j+1F!;@2");
      assertEquals("\"/]*#TXi=j+1F!;@2\"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("5*V5\"NM}%[F");
      assertEquals(0L, long0);
      
      String string0 = JSONObject.quote("5*V5\"NM}%[F");
      assertEquals("\"5*V5\\\"NM}%[F\"", string0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer((-1634));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("lp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("issum", object0);
      jSONObject1.optBoolean("issum");
      try { 
        jSONObject0.append("issum", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[issum] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-3909));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("nKszS_VO-v+ OEn<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nKszS_VO-v+ OEn<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
