/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 04:36:42 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3279501861614795
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-2147481874L));
      long long0 = range0.getLength();
      assertEquals(9223372034707293935L, long0);
      
      Range range1 = Range.of(9223372034707293935L);
      Long long1 = new Long(9223372034707293935L);
      boolean boolean0 = range1.equals(long1);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2616579618262698
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775786L);
      range_Builder1.shift(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -24 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.444509248084134
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(9223372032559808514L, 9223372036854775785L);
      Range range1 = Range.of(9223372036854775785L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1341068345657535
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.of((-2147481874L), (-2147481874L));
      range0.iterator();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147481874L), (-4339L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range0.equals(range_CoordinateSystem0);
      boolean boolean1 = range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 529L, 4294967317L);
      Range range0 = range_Builder0.build();
      range0.spliterator();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7959184263273786
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertNotSame(range1, range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.796255979069995
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      long long0 = range0.getLength();
      assertEquals(2147483647L, long0);
      
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range1.asRange();
      boolean boolean0 = range2.equals((Object) null);
      assertSame(range2, range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.588695035517939
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-66L), (-66L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-66L), (-66L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-4639L), (-327L));
      range1.isSubRangeOf(range2);
      range1.startsBefore(range2);
      Range range3 = range1.intersection(range0);
      range0.isSubRangeOf(range2);
      range0.spliterator();
      range3.complement(range1);
      range3.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9792886722599112
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3285404468599546
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-64L));
      Range range1 = Range.of((-64L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.iterator();
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("6DA1Mj \u0005I>S#R[b", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 6DA1Mj \u0005I>S#R[b into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.8408077685829944
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(127L, 127L);
      range1.isSubRangeOf(range0);
      range0.getEnd();
      Object object0 = new Object();
      range1.getLength();
      range0.getBegin();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range1.startsBefore(range0);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range1.split((-3492L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.133310203178477
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.getLength();
      Range range1 = Range.of(2147483647L);
      range1.equals(range0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.133033233229716
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775786L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775786L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967317L, 9223372036854775786L);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7278098200275878
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-37L), 127L);
      range0.spliterator();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 342L, 342L);
      range_Builder0.build();
      Long long0 = new Long((-37L));
      Object object0 = new Object();
      Range range1 = Range.of((-3419L), (-3419L));
      Range range2 = Range.of(1L, 127L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854775786L);
      boolean boolean0 = range1.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(9223372036854775790L);
      range0.spliterator();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2688850185360776
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.getLength();
      Range range1 = Range.ofLength(1L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-1L), (-1L));
      range2.equals(range0);
      long long0 = range2.getLength();
      assertSame(range2, range0);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775786L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.309710421125441
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(0L);
      range0.getBegin(range_CoordinateSystem0);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      Range range1 = Range.of(0L);
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.605112517807325
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.spliterator();
      range0.iterator();
      range0.iterator();
      List<Range> list0 = new LinkedList<Range>();
      range0.complementFrom(list0);
      Range range1 = Range.ofLength(65535L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(4169L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5885548911692595
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of(1781L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range1.spliterator();
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(922L);
      Range range3 = Range.ofLength(29191L);
      boolean boolean0 = range3.endsBefore(range2);
      range2.spliterator();
      boolean boolean1 = range2.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.588249157268929
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(1781L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range1.spliterator();
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(922L);
      Range.ofLength(921L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2751L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2751 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4171002290807335
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of(4294967295L);
      range1.equals(range0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = (-89L);
      long long1 = 3841L;
      Range range0 = Range.of((-89L), 3841L);
      range0.spliterator();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.134470173651956
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-2147481874L), (-2147481874L));
      range0.iterator();
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147481874L), (-2147481874L));
      range1.spliterator();
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.24990376310064
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      String string0 = range0.toString();
      assertEquals("[ -32768 .. -32768 ]/0B", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.9592009697997614
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-501L));
      Object object0 = new Object();
      Range range1 = Range.of(462L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range range2 = Range.of(462L, 462L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 463 .. 463 ]/RB", string0);
      
      Range range3 = Range.of((-1542L), 32767L);
      range2.spliterator();
      range2.iterator();
      List<Range> list0 = range3.split(462L);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(2, list1.size());
      
      Object object1 = new Object();
      range2.equals(range3);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(9223372032559808514L, 9223372036854775785L);
      Range range1 = Range.ofLength(9223372032559808514L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(9223372032559808514L, 9223372036854775785L);
      Range range1 = Range.of(9223372036854775785L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1L);
      range_Builder0.expandEnd((-258L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.4958473848421847
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 33449L);
      Range range0 = range_Builder0.build();
      range0.iterator();
      Range range1 = Range.of(65535L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3273309911150397
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range.of(529L);
      Object object1 = new Object();
      Range range0 = Range.of(1496L, 9223372036854775807L);
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6445086249981284
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      long long1 = 1669L;
      long long2 = 2147483680L;
      // Undeclared exception!
      try { 
        Range.of(2147483680L, 32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.584791863653902
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 9223372036854775786 ]/RB", string0);
      
      boolean boolean0 = range0.startsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1305L, 9223372036854775786L);
      Range range1 = Range.parseRange("[ 1 .. 9223372036854775786 ]/RB");
      boolean boolean1 = range1.equals("[ 1 .. 9223372036854775786 ]/RB");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.072151657525716
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(0L);
      range0.toString();
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Object object0 = new Object();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.931650942004176
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(1781L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range1.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.ofLength(0L);
      range2.intersects(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.440165474892936
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(2147483681L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      range0.spliterator();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483681L, 2147483681L);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(2147483681L, long1);
      
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      long long2 = range1.getEnd();
      assertEquals(2147483680L, long2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.of((-32745L));
      long long0 = 738L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, (-32745L), 738L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd();
      assertEquals((-32768L), long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4294967316L, 4294967316L);
      Range range1 = range_Builder0.build();
      range1.equals(object0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.603289025120529
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.getLength();
      Range range1 = Range.of(4294967295L);
      Range range2 = range1.asRange();
      range2.endsBefore(range2);
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$EmptyShortRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$EmptyShortRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.7362484867087353
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.spliterator();
      range0.iterator();
      List<Range> list0 = range0.split(2147483647L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range.of((-1655L), 2147483647L);
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3312678187643874
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-3476L), 255L);
      range1.isSubRangeOf(range0);
      Range range3 = Range.of((-1L), 214L);
      boolean boolean0 = range0.startsBefore(range2);
      assertTrue(boolean0);
      
      Range range4 = range0.intersection(range1);
      boolean boolean1 = range4.isSubRangeOf(range3);
      range3.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      boolean boolean2 = range4.equals(range2);
      assertTrue(boolean2 == boolean1);
      assertFalse(range2.isEmpty());
      
      boolean boolean3 = range0.endsBefore(range4);
      assertFalse(range4.isEmpty());
      assertFalse(boolean3);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2691873616955633
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(9223372036854775780L);
      Range range1 = Range.of((-32768L));
      range1.iterator();
      boolean boolean0 = range0.isSubRangeOf(range1);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775780L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2803L), (-2803L));
      Range range2 = range_Builder0.build();
      boolean boolean1 = range2.equals(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range range0 = Range.of((-375L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-375L));
      Object object1 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.7564130363379817
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range.of(4294967315L, 4294967315L);
      Range range1 = Range.of((-1L), 4294967315L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
      
      range1.equals(range0);
      long long1 = range1.getLength();
      assertEquals(4294967317L, long1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(9223372032559808514L, 9223372032559808514L);
      Range range1 = Range.of(9223372032559808514L);
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1305L, 1305L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1305L, long0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.5360188865054223
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of(4294967295L);
      Range range2 = range1.asRange();
      boolean boolean0 = range2.isSubRangeOf(range1);
      boolean boolean1 = range2.equals(range0);
      assertFalse(boolean1 == boolean0);
      
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
      
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
      assertSame(range0, range3);
      assertFalse(range0.equals((Object)range2));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.205587146915018
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(9223372032559808514L, 9223372036854775785L);
      Range range1 = Range.of(9223372036854775785L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3274662176194347
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = range_Builder0.build();
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      range1.equals(object0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9794121442934958
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(529L);
      long long0 = range0.getEnd();
      assertEquals(529L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 529L, 529L);
      range_Builder0.build();
      range0.equals(object0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775786L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775786L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -45 would make range [9223372036854775786 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775786L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775786 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3867746355940067
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.ofLength(1L);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of((-1L), 4294967315L);
      range2.equals(range0);
      long long1 = range2.getLength();
      assertEquals(4294967317L, long1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-1L), long0);
      
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6168411762153947
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      long long0 = range0.getEnd();
      assertEquals(211L, long0);
      
      Range range1 = Range.of(212L);
      boolean boolean0 = range0.endsBefore(range1);
      range1.spliterator();
      Range.of(211L, 2907L);
      long long1 = new Long(211L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 3903L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(255L, 255L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3952333401838946
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775787L);
      Iterator<Long> iterator0 = range0.iterator();
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(iterator0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8884613105342196
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(2147483650L);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(2147483649L, long0);
      
      range0.iterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5523797144482643
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1305L, 1305L);
      Range range1 = Range.of(1305L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.399057315098267
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65561L, 65561L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 65561L, 65561L);
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.329616221754058
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(9223372036854775780L);
      Range range1 = Range.of(473L, 9223372036854775780L);
      Range range2 = Range.of(9223372036854775780L);
      assertSame(range2, range0);
      
      String string0 = range1.toString();
      assertEquals("[ 473 .. 9223372036854775780 ]/0B", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.2683870415675123
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-376L), 255L);
      range0.spliterator();
      range0.iterator();
      Range.of(2792688L, 9223372036851986624L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Xh}GcTgd}=.gp~hyc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Xh}GcTgd}=.gp~hyc
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.056474781190351
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(65561L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.equals("org.jcvi.jillion.core.Ranges");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9785775358639506
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(4169L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(4169L, long0);
      
      range0.getBegin();
      Range range1 = Range.ofLength(0L);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.317437099788056
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1305L, 1305L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(1305L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.891722433292198
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1305L, 1305L);
      Range range1 = Range.of(range_CoordinateSystem0, 1305L, 1305L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1305L, long0);
      
      Object object0 = new Object();
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2227634799363307
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1575L), 2147483647L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1328844901090855
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-126L), 4294967328L);
      Range range0 = Range.of((-126L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-2147483649L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-65045L), 5694L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3903419693945267
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(4169L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(4169L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals(4168L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.2807083494057676
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(192L);
      Range range1 = Range.of(192L, 192L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      List<Range> list0 = range1.split(192L);
      assertTrue(list0.contains(range1));
      
      boolean boolean1 = range0.equals("");
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.240804857920011
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.4716285207444604
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-89L), (-89L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder((-1312L), (-89L));
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals((-88L), long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.4924642996977817
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      range0.iterator();
      Object object0 = new Object();
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372036854775785 ]/0B", string0);
      
      Range range1 = Range.of(9223372036854775786L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.parseRange("[ 0 .. 9223372036854775785 ]/0B", range_CoordinateSystem0);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.1322080145467655
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.parseRange("8%@3,7\":U*Q", range_CoordinateSystem0);
      range0.spliterator();
      range0.iterator();
      // Undeclared exception!
      try { 
        range0.split((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
      
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      range0.equals(range_Builder0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.3846246314593835
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.iterator();
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = range_Builder0.build();
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range1.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 65561L, 65561L);
      Range range0 = Range.of((-32771L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.28248757118963
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(212L);
      range0.getEnd();
      Range range1 = Range.of(212L);
      range0.endsBefore(range1);
      range1.spliterator();
      Range range2 = Range.of((-128L));
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.542498146225446
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(9223372036854775790L);
      range0.spliterator();
      range0.iterator();
      List<Range> list0 = range0.split(9223372036854775790L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      //  // Unstable assertion: assertFalse(list1.isEmpty());
      
      Range range1 = Range.ofLength(9223372036854775790L);
      boolean boolean0 = range0.intersects(range1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.2947356610848955
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Zero Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Zero Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2172412589811494
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(4169L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.280943972308736
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775786L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-128L));
      Range range2 = Range.of(8L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.9383793784533507
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Comparators.values();
      Object object0 = new Object();
      Range range0 = Range.ofLength(2936L);
      range0.equals(object0);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.456929113850004
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of(1L);
      boolean boolean0 = range1.startsBefore(range0);
      range0.asRange();
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1 == boolean0);
      
      Range range2 = Range.of(1L);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(255L);
      Object object1 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.2660952157462746
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, (-120L), 0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1320150760941314
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-1L));
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Comparators.values();
      long long0 = (-971L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-971L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.059454851967032
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(2602L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 611L, 611L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.split(2602L);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.984876765142732
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(4169L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1661L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(65561L);
      Range range1 = Range.of(255L);
      boolean boolean0 = range0.endsBefore(range1);
      Object object0 = new Object();
      boolean boolean1 = range1.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.059686199566801
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-4073L), (-128L));
      Range range1 = Range.of((-4073L));
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range0.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.of(2147483647L, 2147483647L);
      Range range0 = Range.of(179L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.4914587692804866
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-3230L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-3230L), (-3230L));
      range0.getBegin();
      Range range1 = Range.ofLength(255L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.3307743196659723
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-66L), 3841L);
      range0.spliterator();
      range0.iterator();
      List<Range> list0 = range0.split(3841L);
      assertEquals(2, list0.size());
      assertFalse(list0.contains(range0));
      
      Range range1 = Range.of(3841L, 3841L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.4405716288697485
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(9223372036854775786L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-128L));
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.536964765243299
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-89L), 3841L);
      Range range1 = Range.of((-89L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.3631004827386226
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of(4294967295L);
      range1.asRange();
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(1192L);
      Range range1 = range0.asRange();
      range1.equals(range0);
      Range range2 = Range.ofLength(255L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.3880676104307272
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(2573L, 2573L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2574L, long0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.794932706872322
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-89L), 3841L);
      range0.spliterator();
      range0.iterator();
      List<Range> list0 = range0.split(3841L);
      range0.complementFrom(list0);
      range0.getBegin();
      Range range1 = Range.of((-355L), (-355L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.79438837168257
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(1827L);
      range0.split(1827L);
      String string0 = range0.toString();
      assertEquals("[ 1827 .. 1827 ]/0B", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.329396550163086
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of((-32768L));
      Range range2 = Range.of(1L, 10520L);
      range1.equals(range0);
      long long1 = range2.getLength();
      assertEquals(10520L, long1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.976709928476526
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(1738L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1739L, long0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-32745L), (-32745L));
      // Undeclared exception!
      try { 
        range0.split((-32745L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.391546504356525
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.equals(range_CoordinateSystem1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.5409763384326416
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(277L, 277L);
      Range range1 = Range.of(3613L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range range2 = range0.asRange();
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.5406464687311736
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(9223372032559808514L, 9223372032559808514L);
      Range range2 = range0.intersection(range1);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.ofLength(4169L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.3307743196659723
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of((-32745L), (-32745L));
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.508747660783097
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = range0.asRange();
      Range range2 = Range.of(18L, 690L);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.216212418083071
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.ofLength(9223372036854775786L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.633593075244739
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.ofLength(2147483648L);
      List<Range> list0 = range0.split(2147483648L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      //  // Unstable assertion: assertEquals(2, list2.size());
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.3205115324413628
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2590L, 4294967315L);
      Range.Builder range_Builder0 = new Range.Builder(1618L);
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.240780038630771
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2147483648 .. -2147483648 ]/0B", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.4402372984941714
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(2147483681L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      range0.spliterator();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483681L, 2147483681L);
      range_Builder0.copy();
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(2147483681L, long1);
      
      Object object0 = new Object();
      range1.equals(object0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(3019L);
      range_Builder0.expandBegin(2674L);
      range_Builder1.shift(2674L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.of((-905L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.0574866708943733
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(924L);
      range_Builder0.expandBegin(924L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift(9223372036854775732L);
      range_Builder1.contractBegin(255L);
      Range range0 = range_Builder1.build();
      String string0 = range0.toString();
      assertEquals("[ -669 .. 923 ]/0B", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.ofLength(4169L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(3774L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.891401766304864
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(106L);
      Range range1 = null;
      Range.of(106L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.8876911911657177
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of((-89L), (-89L));
      long long0 = new Long((-89L));
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(263L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of((-89L), (-89L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-153L), (-1511L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.5330549983076875
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 255L, 2147483647L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-32768L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 65811L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2590L, 2590L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 607L, 1618L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(529L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 529L, 529L);
      range_Builder0.expandEnd(65561L);
      Range.Builder range_Builder1 = range_Builder0.shift(529L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.0558584483706284
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(255L);
      range_Builder0.contractEnd(255L);
      Range range0 = Range.of(255L, 2816047L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(2425L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.2023030746654286
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range range0 = Range.of(1781L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.of((-128L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.3306226704810866
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-32745L), (-32745L));
      List<Range> list0 = range0.complement(range0);
      boolean boolean0 = range0.equals(list0);
      assertFalse(boolean0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.976432073516815
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2202L, 2202L);
      long long0 = range0.getBegin();
      assertEquals(2202L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of((-32795L), (-32795L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2202L, 2202L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      assertFalse(range0.isEmpty());
  }
}
