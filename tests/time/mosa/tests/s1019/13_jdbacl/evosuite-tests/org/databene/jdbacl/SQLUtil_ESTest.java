/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 05 04:26:41 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.parseColumnTypeAndSize("?w|#6,KR$4}");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "alter session";
      stringArray0[1] = "alter session";
      stringArray0[2] = "execparameter";
      stringArray0[3] = "alter session";
      stringArray0[4] = "left";
      stringArray0[5] = "left";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "left", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("alter session", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("C]$@n8(1!u-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: C]$@n8(1!u-
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LOWER", defaultDBTable0, 40, "LOWER");
      MockPrintStream mockPrintStream0 = new MockPrintStream("LOWER");
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("LOWER", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintStream mockPrintStream0 = new MockPrintStream("LOWER");
      String[] stringArray0 = new String[6];
      stringArray0[4] = "LOWER";
      stringArray0[0] = "LOWER";
      stringArray0[4] = "LOWER";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBDataType dBDataType0 = DBDataType.getInstance((-1804), "BLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'wCk", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("'wCk BLOB NOT NULL", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4223665577792008
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null AND null = null");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) defaultDBTable0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1727009699827267
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "truncate";
      stringArray0[1] = "{pXLf8Z";
      stringArray0[6] = "{pXLf8Z";
      stringArray0[3] = "NCLOB";
      stringArray0[4] = "truncate";
      stringArray0[5] = "NCLOB";
      stringArray0[6] = "y(]aa\"7oDsEqB3";
      stringArray0[7] = "N{ }`gjG";
      stringArray0[8] = "y(]aa\"7oDsEqB3";
      String string0 = SQLUtil.join("NCLOB", "truncate", stringArray0, "NCLOB", "{/5WR_f8H{}Q7lC{", stringArray0);
      assertEquals("NCLOB join NCLOB as {/5WR_f8H{}Q7lC{ on truncate.truncate = {/5WR_f8H{}Q7lC{.truncate and truncate.{pXLf8Z = {/5WR_f8H{}Q7lC{.{pXLf8Z and truncate.null = {/5WR_f8H{}Q7lC{.null and truncate.NCLOB = {/5WR_f8H{}Q7lC{.NCLOB and truncate.truncate = {/5WR_f8H{}Q7lC{.truncate and truncate.NCLOB = {/5WR_f8H{}Q7lC{.NCLOB and truncate.y(]aa\"7oDsEqB3 = {/5WR_f8H{}Q7lC{.y(]aa\"7oDsEqB3 and truncate.N{ }`gjG = {/5WR_f8H{}Q7lC{.N{ }`gjG and truncate.y(]aa\"7oDsEqB3 = {/5WR_f8H{}Q7lC{.y(]aa\"7oDsEqB3", string0);
      
      String string1 = SQLUtil.normalize("c1X5O`", true);
      assertEquals("c1X5O `", string1);
      
      String string2 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("create unique index");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(7, "M1SW7;s5");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique index", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      defaultDBColumn0.setDefaultValue("SYSCS_INPLACE_COMPRESS_TABLE");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create unique index M1SW7;S5 DEFAULT SYSCS_INPLACE_COMPRESS_TABLE NULL", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6237180760658338
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("*/", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("vtiArg");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "vtiArg");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "- ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("LOWER", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("IX8qk2]6#kVVy|na9%V");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"- \" ", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executeg kl\u0006a");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "d{!r/";
      SQLUtil.join("d{!r/", "rename", stringArray0, "rename", "rename", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = (-783);
      // Undeclared exception!
      try { 
        stringBuilder1.replace((-783), (-783), "au{vv2-_\"n8|w,x?d");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -783
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "fn0dpv2Ae/*3%j|'h.";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("fn0dpv2Ae/*3%j|'h.");
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select inton", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      assertEquals("CONSTRAINT \"select inton\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("selct it", stringBuilder0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, "drop table", "SCOPE_IDENTITY");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("selct itCONSTRAINT  ", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6944890474613858
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil.renderValue(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      Object object0 = new Object();
      StringBuilder stringBuilder2 = stringBuilder1.insert(4, object0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder2);
      String[] stringArray0 = new String[9];
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(42, "V^0N} Rxe");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("V^0N} Rxe");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("delete", defaultDBTable0, 42, "ALTER TABLE ");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("delete");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = null;
      String string1 = "XSCH1.S";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "LOWER";
      stringArray0[1] = "LOWER";
      stringArray0[2] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=G|\"6[y^G!NT", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(3087);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("\n\tcol[", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(3087, (long) 40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3087
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1676782369996106
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("create table");
      SQLUtil.normalize("S3YH.|N/?b=xO5,>", false);
      SQLUtil.normalize("/*", false);
      SQLUtil.mutatesDataOrStructure("&UhI7(sXoT");
      MockPrintStream mockPrintStream0 = new MockPrintStream(" QPVx v0C<BwU3;~a");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "create table");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, true);
      mockPrintWriter0.append((CharSequence) "/*");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(2822L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = " QPVx v0C<BwU3;~a";
      stringArray0[1] = "S3YH.| N / ? b = xO5, >";
      stringArray0[2] = "S3YH.| N / ? b = xO5, >";
      stringArray0[3] = "create table";
      stringArray0[4] = "S3YH.|N/?b=xO5,>";
      stringArray0[5] = "S3YH.| N / ? b = xO5, >";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9817892936686632
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      
      String[] stringArray0 = new String[1];
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("FOREIGN KEY ", false, dBUniqueConstraint0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("d_l`F0n/");
      assertNull(boolean0);
      
      String string2 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4102453456579889
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setbigdeSc", true, "setbigdeSc", "setbigdeSc");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1);
      assertEquals(" cSedgibtes TNIARTSNOCCONSTRAINT setbigdeSc ", stringBuilder1.toString());
      assertEquals(" cSedgibtes TNIARTSNOCCONSTRAINT setbigdeSc ", stringBuilder0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[12];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("5P8>G}]8Prmd(hGE/)9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"hGE/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " DEFAULT ", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" DEFAULT \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4878048780487805
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q");
      SQLUtil.renderValue("Q");
      SQLUtil.normalize("k> E", true);
      DBDataType dBDataType0 = DBDataType.getInstance((-126579865), "F8P(:7Yoavm#^keOjB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":LPmqv", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("(", defaultDBTable0, (-126579865), "k> E");
      SQLUtil.normalize("RANGE", true);
      SQLUtil.mutatesDataOrStructure("_|(>");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintStream mockPrintStream0 = new MockPrintStream("F8P(:7Yoavm#^keOjB");
      mockPrintStream0.append('0');
      mockPrintStream0.append((CharSequence) "k> E");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      mockPrintWriter0.append((CharSequence) "Q");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(2822L);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("o^C]Gt/*");
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      // Undeclared exception!
      SQLUtil.isProcedureCall("/*");
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5692005239622273
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("I&t+y");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "I&t+y", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT I&t+y PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1015830955806851
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(329, "BLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("BLOB BLOB NULL", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("select inton");
      StringBuilder stringBuilder1 = stringBuilder0.append(335544325);
      stringBuilder1.append("select inton");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select inton", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("SYSSTATISTICS", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(335544325, "\"v#=");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SYSSTATISTICS", dBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("select inton335544325select inton\"V#=(2)", stringBuilder0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLUtil.removeComments("Cb<=|3c)tD>]");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("Cb<=|3c)tD>]", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("$3");
      DBDataType dBDataType0 = DBDataType.getInstance(42, "LdB");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = Integer.getInteger("Cb<=|3c)tD>]", 42);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Cb<=|3c)tD>]", defaultDBTable0, dBDataType0, integer1, integer0);
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 42);
      StringBuilder stringBuilder2 = stringBuilder1.append("SN KIm, 8qS!5}C6");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      assertEquals("Cb<=|3c)tD>]42.0SN KIm, 8qS!5}C6LDB(42,0)", stringBuilder2.toString());
      assertEquals("Cb<=|3c)tD>]42.0SN KIm, 8qS!5}C6LDB(42,0)", stringBuilder0.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setbigdeSc", true, "setbigdeSc", "setbigdeSc");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT setbigdeSc ", stringBuilder0.toString());
      
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT setbigdeSc ", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select inton", true, stringArray0);
      SQLUtil.renderColumnListWithTableName("alter tableselect i", stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"select inton\" ", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("calltimestampadg");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("exec4t 47.u");
      assertNull(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(427, "timestampAdG");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("timestampAdG", defaultDBTable0, (-1257), "08U`J1A,YA");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("timestampAdG", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn1.setFractionDigits(integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("timestampAdG TIMESTAMPADG(3,3) NULL", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("select inton");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "0CE1ukG3Q55";
      stringArray0[2] = "inner";
      stringArray0[3] = "create tables%\"cj*w0n=\"9rnr[";
      stringArray0[4] = "n";
      SQLUtil.join("inner", "create tables%\"cj*w0n=\"9rnr[", stringArray0, "0z$Sv!^oE:`mE+(", "create tables%\"cj*w0n=\"9rnr[", stringArray0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      int[] intArray0 = new int[2];
      UUID uUID0 = constantActionActivation0.getObjectID();
      assertNull(uUID0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join(" DEFAULT ", " DEFAULT ", (String[]) null, " DEFAULT ", " DEFAULT ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SQLUtil.mutatesStructure("#\"5T`<cx[O!72D&A,");
      SQLUtil.removeComments("#\"5T`<cx[O!72D&A,");
      StringBuilder stringBuilder0 = new StringBuilder("#\"5T`<cx[O!72D&A,");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4102453456579889
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setbigdeci", true, "setbigdeci", "setbigdeci");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec1);
      assertEquals("CONSTRAINT setbigdeci CONSTRAINT setbigdeci ", stringBuilder0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table Q", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(":{6h{vW1/r[@!1", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("exec", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals(":{6h{vW1/r[@!1.exec", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("delete");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5407108604577937
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("sgeect inon");
      assertNull(boolean0);
      
      TableContainer tableContainer0 = new TableContainer("XX.d_(1+7b hg49N*{");
      tableContainer0.getTable("sgeect inon");
      DBDataType dBDataType0 = DBDataType.getInstance((-1788), "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ro'>!=(it2;a8-O w", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2946736392028413
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      DBSchema dBSchema0 = new DBSchema("null = null AND null = null AND null = null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null = null AND null = null AND null = null", dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("null = null AND null = null AND null = null", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null = null AND null = null AND null = null");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"null = null AND null = null AND null = null\" FOREIGN KEY (, , ) REFERENCES null = null AND null = null AND null = null(, , )", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select inton", true, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select inton");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Cb<=|3c)tD>]";
      SQLUtil.removeComments("Cb<=|3c)tD>]");
      SQLUtil.removeComments("Cb<=|3c)tD>]");
      SQLUtil.isDML(" DEFAULT ");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Cb<=|3c)tD>]");
      // Undeclared exception!
      try { 
        stringBuilder0.replace((-1683933188), 46, "Cb<=|3c)tD>]");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1683933188
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setbigdeci", false, (String) null, "setbigdeci");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5813709093577648
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select inton");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select inton", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"select inton\" PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("5)XRClFxC**6@Mq!!", true);
      assertEquals("5) XRClFx  C * * 6 @ Mq ! !", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = SQLUtil.normalize("Xm,5E[(Ji", false);
      assertEquals("Xm, 5E [ (Ji", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[12];
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "IPS?9K";
      stringArray1[1] = "y(]aa\"7oDsEqB3";
      // Undeclared exception!
      try { 
        SQLUtil.join("y(]aa\"7oDsEqB3", "y(]aa\"7oDsEqB3", stringArray0, "/*", "y(]aa\"7oDsEqB3", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5748027648585858
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" WHERE ", defaultDBTable0, 55, " WHERE ");
      boolean boolean0 = SQLUtil.isDML(" WHERE ");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" WHERE ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" WHERE \" FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8662943611198906
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("inner");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "inner";
      stringArray0[1] = "inner";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "inner";
      stringArray0[5] = "";
      stringArray0[6] = "inner";
      stringArray0[7] = "";
      stringArray0[8] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesStructure("inner");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop tablejava");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop table");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLUtil.isDDL("create materialized view_");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "inner";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("inner");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize(";{r'ZCl6NUe&", true);
      assertEquals("; { r 'ZCl6NUe&'", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.8543161548256344
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.parseColumnTypeAndSize("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "alter materialized viewalter mat_riklized view";
      stringArray1[1] = "write to page ";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", stringArray0, "alter materialized viewalter mat_riklized view", "write to page ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("-.[R6cgc@Y");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-.[R6cgc@Y", (DBTable) null, (-1741460673), ".O<.}NGhCk0/~Vf~");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("-.[R6cgc@Y.O<.}NGHCK0/~VF~", stringBuilder0.toString());
      
      boolean boolean0 = SQLUtil.isQuery("-.[R6cgc@Y");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("setbigdeSc", true, "setbigdeSc", "setbigdeSc");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT setbigdeSc CHECK setbigdeSc", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("l)K#.f)qs(T u/r!/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: l)K#.f)qs(T u/r!/
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName(" - please convert the database to a SQL script and re-create it.", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.join("d{!r/", "d{!r/", stringArray0, "d{!r/", "d{!r/", stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("d{!r/");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = SQLUtil.normalize("Q-KgyF/0TN", false);
      assertEquals("Q - KgyF / 0TN", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = SQLUtil.normalize("(#5bKgmFhg\"BDw", true);
      assertEquals("(# 5bKgmFhg \"BDw\"", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = SQLUtil.normalize("-.[R6cgc@Y", false);
      assertEquals("-.[ R6cgc @ Y", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLUtil.mutatesStructure("aASkX' x'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create materialized view-.[\r6cgc@y";
      stringArray0[1] = "create materialized view-.[\r6cgc@y";
      stringArray0[2] = "create materialized view-.[\r6cgc@y";
      stringArray0[3] = "create materialized view-.[\r6cgc@y";
      stringArray0[4] = "create materialized view-.[\r6cgc@y";
      stringArray0[5] = "create materialized view-.[\r6cgc@y";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "create materialized view-.[\r6cgc@y";
      stringArray1[1] = "create materialized view-.[\r6cgc@y";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("create materialized view-.[\r6cgc@y", stringArray0, "create materialized view-.[\r6cgc@y", "create materialized view-.[\r6cgc@y", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Boolean boolean0 = new Boolean("setbigdeci");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.join("setbigdeci", "setbigdeci", stringArray0, "setbigdeci", "setbigdeci", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7682293763712118
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderValue(" ");
      assertEquals("' '", string1);
      
      String[] stringArray1 = new String[0];
      String string2 = SQLUtil.leftJoin("null = null AND null = null AND null = null AND null = null AND null = null", stringArray1, "org.databene.jdbacl.SQLUtil", "org.databene.jdbacl.SQLUtil", stringArray0);
      assertEquals("left join org.databene.jdbacl.SQLUtil as org.databene.jdbacl.SQLUtil on ", string2);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("timestampAdd", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Character character0 = new Character('h');
      Character.isBmpCodePoint(1991);
      SQLUtil.renderValue(character0);
      System.setCurrentTimeMillis(3625L);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("8rqs'H&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8rqs'H&", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8rqs'H&";
      stringArray0[1] = "cm$!-5*kt";
      stringArray0[2] = "cm$!-5*kt";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cm$!-5*kt", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (8rqs'H&, cm$!-5*kt, cm$!-5*kt)", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "S^d", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT S^d UNIQUE (, , , )", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&JF~dTo6E;gw4%", defaultDBTable0, 8, "alter table");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ALTER TABLE", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("alter tables%\"tj*w0kn=\"9hnr[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("", "", stringArray0, "", "", stringArray0);
      assertEquals(" as  on .null = .null", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop indexbt{5j5u1.evq", (String[]) null, "select inton", "select inton", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.6663317712332457
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.innerJoin("8QN>W;", stringArray0, "8QN>W;", "null = null AND null = null AND null = null", stringArray0);
      assertEquals("8QN>W; as null = null AND null = null AND null = null on 8QN>W;.null = null = null AND null = null AND null = null.null and 8QN>W;.null = null = null AND null = null AND null = null.null and 8QN>W;.null = null = null AND null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("f6.3");
      SQLUtil.addOptionalCondition("f6.3", stringBuilder0);
      assertEquals("f6.3 or f6.3", stringBuilder0.toString());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("selct it");
      SQLUtil.addRequiredCondition("selct it", stringBuilder0);
      assertEquals("selct it and selct it", stringBuilder0.toString());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.4782608695652174
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("rowDeleted");
      assertNull(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select inton");
      assertTrue(boolean0);
      
      String string0 = SQLUtil.renderValue("select inton");
      assertEquals("'select inton'", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = SQLUtil.renderValue(integer0);
      assertEquals("2", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[5];
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" join ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " join ";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  join  WHERE  join  = ' join '", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(92, "SECONDARY");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null SECONDARY(3) NULL", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, 371, "drop indexupdateas");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("call DROP INDEXUPDATEAS NULL", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.renderColumnListWithTableName("defaul", stringArray0);
      assertEquals("defaul.null, defaul.null, defaul.null, defaul.null, defaul.null", string0);
      
      String string1 = SQLUtil.leftJoin("defaul.null, defaul.null, defaul.null, defaul.null, defaul.null", stringArray0, "defaul.null, defaul.null, defaul.null, defaul.null, defaul.null", "defaul", stringArray0);
      assertEquals("left join defaul.null, defaul.null, defaul.null, defaul.null, defaul.null as defaul on defaul.null, defaul.null, defaul.null, defaul.null, defaul.null.null = defaul.null and defaul.null, defaul.null, defaul.null, defaul.null, defaul.null.null = defaul.null and defaul.null, defaul.null, defaul.null, defaul.null, defaul.null.null = defaul.null and defaul.null, defaul.null, defaul.null, defaul.null, defaul.null.null = defaul.null and defaul.null, defaul.null, defaul.null, defaul.null, defaul.null.null = defaul.null", string1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6851287363978402
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null", string0);
      
      String string1 = SQLUtil.innerJoin("drop tableforeign key", stringArray0, "null = null", "drop tableforeign key", stringArray0);
      assertEquals("null = null as drop tableforeign key on drop tableforeign key.null = drop tableforeign key.null", string1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.6809837858852603
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.leftJoin("null = null AND null = null AND null = null", stringArray0, "null = null AND null = null AND null = null", "null = null AND null = null AND null = null", stringArray0);
      assertEquals("left join null = null AND null = null AND null = null as null = null AND null = null AND null = null on null = null AND null = null AND null = null.null = null = null AND null = null AND null = null.null and null = null AND null = null AND null = null.null = null = null AND null = null AND null = null.null and null = null AND null = null AND null = null.null = null = null AND null = null AND null = null.null", string1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("H~}7/Qiydm$sO", (String[]) null, "H~}7/Qiydm$sO", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("S%\"Tj*W0kN=\"9Hnr[");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "drop materialized view", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.substituteMarkers("null = null AND null = null AND null = null", "null = null AND null = null AND null = null", "null = null AND null = null AND null = null");
      assertEquals("'null = null AND null = null AND null = null'", string1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
