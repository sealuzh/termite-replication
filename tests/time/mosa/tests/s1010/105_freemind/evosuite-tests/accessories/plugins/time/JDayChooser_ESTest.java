/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 22:15:04 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.MindIcon;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.io.PrintStream;
import java.sql.Time;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import javax.help.ForwardAction;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JToolTip;
import javax.swing.border.BevelBorder;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.text.StringContent;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xalan.templates.ElemTemplateElement;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.CountersTable;
import org.apache.xalan.transformer.TransformerImpl;
import org.apache.xerces.util.SymbolTable;
import org.apache.xml.utils.DefaultErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1815512626204407
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      ParsePosition parsePosition0 = new ParsePosition(46);
      mockSimpleDateFormat0.parse("Y}8k [9\".#bA", parsePosition0);
      jDayChooser0.maxSelectableDate = null;
      jDayChooser0.setDay(2445);
      jDayChooser0.getInputVerifier();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 46, 46, 46, 46, '%');
      KeyEvent.getExtendedKeyCodeForChar(46);
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.151003002680045
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 949;
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.weeks = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.setMonth(949);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2163863036186866
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setMaxDayCharacters(2);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Locale locale0 = Locale.ITALIAN;
      jDayChooser0.setLocale(locale0);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(2445);
      jDayChooser0.getInputVerifier();
      jDayChooser0.getInputMap();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2445, 2445, 46, 40, '%');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8961770597399514
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 40, 40, 40, '%');
      KeyEvent.getExtendedKeyCodeForChar(40);
      jDayChooser0.setYear(40);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawWeeks();
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMouseMotionListeners();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.decorationBordersVisible = false;
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setEnabled(true);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.983176545981773
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setMaxDayCharacters(7);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1448), true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8962341432302643
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, 1773L, 35, 35, '?');
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent.getExtendedKeyCodeForChar(35);
      jDayChooser0.setMonth(520);
      jDayChooser0.getWeekdayForeground();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentListeners();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.createVolatileImage(22, 18);
      jDayChooser0.setMaxDayCharacters(2967);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1962795130893347
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setMaxDayCharacters(1466);
      jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7095867132696725
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initialized = false;
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.firePropertyChange("   [-TS (Trace each selection event.)]", (short)2312, (short)308);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(1477);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3016850082362668
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date(1000L);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.removeAll();
      jDayChooser0.setDay((-767));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      SystemColor systemColor0 = SystemColor.desktop;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setEnabled(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentListeners();
      SystemColor systemColor0 = SystemColor.desktop;
      jDayChooser0.setForeground(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.210845297161443
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      JPanel jPanel0 = new JPanel(false);
      jDayChooser0.setMaxDayCharacters(1979);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.getDayPanel();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.096591278091726
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.800878608352407
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, (-1565L), 35, 35, '?');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(35);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.696355012118828
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      jDayChooser0.getComponentPopupMenu();
      metalToolBarUI0.getDockingColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setEnabled(false);
      jDayChooser0.drawWeeks();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8010653361551396
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(10);
      StringContent stringContent0 = new StringContent(6);
      jDayChooser0.setMonth(1466);
      jDayChooser0.getWeekdayForeground();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2604669442279604
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      jDayChooser0.repaint();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDebugGraphicsOptions(2);
      jDayChooser0.setMaxDayCharacters(43);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser();
      Rectangle rectangle0 = jDayChooser0.getVisibleRect();
      sVGGeneratorContext_GraphicContextDefaults0.setClip(rectangle0);
      sVGGeneratorContext_GraphicContextDefaults0.getFont();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Time time0 = new Time(742L);
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setMinSelectableDate(time0);
      ActionEvent actionEvent0 = new ActionEvent(time0, (-733), "wOM^<[U&+D|");
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      actionEvent0.setSource(time0);
      JButton jButton0 = new JButton("28");
      actionEvent0.setSource(jButton0);
      jDayChooser0.actionPerformed(actionEvent0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(28, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6954944735299913
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getTreeLock();
      Color color0 = Color.green;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setMonth((-2958));
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8010466314555837
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler(true);
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      TransformerImpl transformerImpl0 = new TransformerImpl(stylesheetRoot0);
      CountersTable countersTable0 = transformerImpl0.getCountersTable();
      CountersTable countersTable1 = transformerImpl0.getCountersTable();
      countersTable0.putAll(countersTable1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser_DecoratorButton0.isFocusable();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setYear(2454);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-3336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.801703258778878
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date(1000L);
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2033, 1000L, 63736, 49, '0');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date2 = mockGregorianCalendar0.getGregorianChange();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setSelectableDateRange(date1, date2);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.X;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON, "pzV;z1cpb8G e- ", (int) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_LTR);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      jDayChooser0.setSundayForeground(color0);
      System.setCurrentTimeMillis(14);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.577623359861654
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.repaint((long) 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("", "");
      // Undeclared exception!
      try { 
        imageHandlerPNGEncoder0.buildBufferedImage((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.svggen.ImageHandlerPNGEncoder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-266));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.800866879935626
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 238, 533L, 238, 238, 'R');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(238);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("day");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addFocusListener(jDayChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Color color0 = Color.magenta;
      BevelBorder bevelBorder0 = new BevelBorder((-9), color0, color0, color0, color0);
      jDayChooser0.setBorder(bevelBorder0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(rowOutputBinary0, true);
      Object[] objectArray0 = new Object[1];
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 43, (-2454L), 1044, (-2212), 'P');
      jDayChooser0.keyReleased(keyEvent0);
      objectArray0[0] = (Object) rowOutputBinary0;
      PrintStream printStream0 = mockPrintStream0.printf("day", objectArray0);
      DebugGraphics.setLogStream(printStream0);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.createToolTip();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("day", "day");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      ElemTemplateElement elemTemplateElement0 = processorCharacters0.appendChild((ElemTemplateElement) processorCharacters0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemTemplateElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.096688477532829
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1153, 0L, 8776, (-3269), '&', (-2939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(164, color0.getRed());
      
      jDayChooser0.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.800780038842421
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Color color0 = jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        debugGraphics0.setXORMode(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JToolTip jToolTip0 = new JToolTip();
      jDayChooser0.getMaxDayCharacters();
      Locale locale0 = Locale.ITALIAN;
      locale0.stripExtensions();
      jDayChooser0.setLocale(locale0);
      FocusEvent focusEvent0 = new FocusEvent(jToolTip0, 0, false, jDayChooser_DecoratorButton0);
      jDayChooser0.isWeekOfYearVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8008307070291334
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-867));
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9839925730055517
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setAlwaysFireDayProperty(false);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusTraversalPolicy();
      OsmTileSource.CycleMap osmTileSource_CycleMap0 = new OsmTileSource.CycleMap();
      osmTileSource_CycleMap0.getAttributionImage();
      osmTileSource_CycleMap0.getTilePath(3161, 3161, 0);
      osmTileSource_CycleMap0.getTileUrl(3161, 0, (-1741));
      jDayChooser0.imageUpdate((Image) null, 0, 0, 0, (-1741), 262);
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      jDayChooser0.getToolkit();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 33, 0, 0, (-2963), (-1741), 25, (-6315), 26, true, 0, 26, 7);
      ForwardAction forwardAction0 = new ForwardAction("http://a.tile.opencyclemap.org/cycle/3161/0/-1741.png");
      forwardAction0.mouseClicked(mouseWheelEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint(90, 0, (-3333), (-2825));
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.keyTyped((KeyEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6954063955180376
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Locale.forLanguageTag("day");
      SymbolTable symbolTable0 = new SymbolTable();
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setIgnoreRepaint(true);
      jDayChooser0.setWeekOfYearVisible(false);
      int int0 = (-2742);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2742));
      focusEvent0.paramString();
      JButton[] jButtonArray0 = new JButton[2];
      JButton jButton0 = new JButton();
      jButtonArray0[0] = jButton0;
      MindIcon mindIcon0 = MindIcon.factory("");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      JButton jButton1 = new JButton((String) null, imageIcon0);
      jButtonArray0[1] = jButton1;
      jDayChooser0.weeks = jButtonArray0;
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.drawDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2402706067587856
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.sql.Date date0 = new java.sql.Date(1000L);
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setMonth(63736);
      jDayChooser0.setDecorationBackgroundVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 63736, (-643L), 45, 10149, '9');
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      Hashtable<JButton, MockCalendar> hashtable1 = new Hashtable<JButton, MockCalendar>();
      jDayChooser0.getDayPanel();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DebugGraphics debugGraphics0 = new DebugGraphics();
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setMonth(1653);
      jDayChooser0.getLocale();
      jDayChooser0.setInheritsPopupMenu(true);
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext_GraphicContextDefaults0.getFont();
      Font font0 = Font.getFont("day");
      assertNull(font0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6954452179056148
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setMaxDayCharacters(949);
      DebugGraphics debugGraphics0 = new DebugGraphics();
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.695379558886035
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(9);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.setDay(2445);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.9832231481044995
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int0 = 0;
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      jDayChooser_DecoratorButton0.firePropertyChange("day", '(', '2');
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9999, 2161, (-30), 0, 234);
      hashtable0.putAll(hashMap0);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser_DecoratorButton0.isFocusable();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setYear(0);
      jDayChooser0.addListeners(0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getDaysInMonth();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color.getColor("c0J");
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDay((-305));
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.0968061057208205
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getDayPanel();
      jDayChooser0.setMonth(2);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.getMaxDayCharacters();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, int0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.577636487528211
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Time time0 = new Time(1333L);
      jDayChooser0.setMinSelectableDate(time0);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8961031581030303
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getTransferHandler();
      jDayChooser0.setYear(3);
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2444673852125203
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDayPanel();
      jDayChooser0.setMaxDayCharacters(2);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1468));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
