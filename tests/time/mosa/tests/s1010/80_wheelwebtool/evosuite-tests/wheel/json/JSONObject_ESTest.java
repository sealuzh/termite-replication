/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 27 18:22:20 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.543082936399969
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("get", (Object) "get");
      String string0 = jSONObject0.toString(59, 59);
      assertNotNull(string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.quote("/u,J;3*'&Cj?fz$");
      assertEquals("\"/u,J;3*'&Cj?fz$\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{45F2bPMJm<V#6r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {45F2bPMJm<V#6r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("sc`W", (Object) "sc`W");
      Object object0 = jSONObject1.remove("sc`W");
      assertEquals("sc`W", object0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Q#=X_", 1.0);
      long long0 = jSONObject1.optLong("Q#=X_");
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0449311748495913
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("o,~@&", stringArray0);
      Double double0 = new Double((-2870.3519852286));
      jSONObject0.put("o,~@&", (Object) double0);
      long long0 = jSONObject0.optLong("o,~@&");
      assertEquals((-2870L), long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7782333057997077
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject("{}");
      JSONObject jSONObject2 = jSONObject1.put("{}", (Object) jSONObject0);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("{}");
      assertSame(jSONObject3, jSONObject0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("J/v", jSONArray0);
      JSONArray jSONArray1 = jSONObject1.optJSONArray("J/v");
      assertNotSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(" jy", 2576L);
      int int0 = jSONObject1.optInt(" jy");
      assertEquals(2576, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isdoubleToRawLongBits", (-2258L));
      int int0 = jSONObject0.optInt("isdoubleToRawLongBits");
      assertEquals((-2258), int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("F~NOGk-jlwiQf_k3C*^", 9L);
      double double0 = jSONObject1.optDouble("F~NOGk-jlwiQf_k3C*^");
      assertEquals(9.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("xL9#x6FJoPl", (-4151L));
      double double0 = jSONObject1.optDouble("xL9#x6FJoPl");
      assertEquals((-4151.0), double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.809514255849282
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte)4);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("", (-1L));
      jSONObject0.opt("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("4%d UV^", "4%d UV^");
      boolean boolean0 = jSONObject1.isNull("4%d UV^");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("isdecode", 0L);
      boolean boolean0 = jSONObject1.has("isdecode");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("sk,W}*", (Object) "sk,W}*");
      String string0 = jSONObject0.getString("sk,W}*");
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("%^~#y)(ZHK3Vx", 0L);
      long long0 = jSONObject1.getLong("%^~#y)(ZHK3Vx");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.accumulate("o\"Gv]$p#1qH$tC", jSONObject1);
      JSONObject jSONObject3 = jSONObject0.getJSONObject("o\"Gv]$p#1qH$tC");
      assertFalse(jSONObject3.equals((Object)jSONObject2));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0", (Object) "0");
      int int0 = jSONObject0.getInt("0");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("F~NOGk-jlwiQf_k3C*^", 9L);
      int int0 = jSONObject0.getInt("F~NOGk-jlwiQf_k3C*^");
      assertEquals(9, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", (-33));
      double double0 = jSONObject1.getDouble("JSONObject[");
      assertEquals((-33.0), double0, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject1 = jSONObject0.put("sc`W", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("sc`W");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("sk,W", (Object) "sk,W");
      Object object0 = jSONObject0.get("sk,W");
      assertEquals("sk,W", object0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected a ':' after a key", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7896298845496406
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.valueToString(jSONObject0, 34, 0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(47, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 803);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Short short0 = new Short((byte)4);
      JSONObject.testValidity(short0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", false);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray[", (Collection) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Collection<Object> collection0 = hashMap0.values();
      try { 
        jSONObject0.put((String) null, collection0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", 0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 8);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1580510496905323
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "<VToVVvFpH");
      jSONObject0.put("<VToVVvFpH", 0.0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1860.1713701782937));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-2029.573555287259));
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("6lV{5yH", "6lV{5yH");
      assertEquals("6lV{5yH", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("o,~@&", stringArray0);
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("va", (-1630L));
      assertEquals((-1630L), long0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("Om[8qy.^", 269L);
      assertEquals(269L, long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("=Di_64f", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("] not found.", (-2371));
      assertEquals((-2371), int0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 2303);
      assertEquals(2303, int0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 3854);
      assertEquals(3854, int0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("\b", 956.0816);
      assertEquals(956.0816, double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", (-136.825637109));
      assertEquals((-136.825637109), double0, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("xs<w", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Short short0 = new Short((short)1097);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.opt("bGZ");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Float float0 = new Float((double) 1L);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject("7.261766224148017", stringArray0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("o,~@&", stringArray0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1049.6855250961041));
      assertEquals("-1049.6855250961041", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.5146861055007865
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("] is not a number.", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 1061, 1061);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.8239592165010823
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(263, 70);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 0, 263);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.8308939447177783
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      jSONObject0.toString(4426);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8073365769337295
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      Float float0 = new Float(1.0F);
      hashMap0.put((JSONObject) null, float0);
      jSONObject0.put("] is not a JSONArray.", (Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-18603944));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.put((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject0.putOpt("eNH[qD", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) "sc`<h W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 456);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer(115);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONArray0, integer0, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // wheel.json.JSONArray cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      jSONObject0.put("%u2", (Map) hashMap0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, 128, 128);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, (-916), (-2264));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9293375585014199
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("", object0);
      jSONObject1.toString((-1653), (-1653));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 50, 50);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.788416115453943
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject.valueToString(jSONObject0, 22, 22);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Double double0 = new Double(0.42341078867003135);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("|;P*$8qLcD.</0fC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|;P*$8qLcD.<\\/0fC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5116838185235997
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Byte byte0 = new Byte((byte)4);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      try { 
        jSONObject0.getDouble(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{oBE(vb", false);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("{}");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optJSONObject((String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("`vja#", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("`vja#");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", 0L);
      double double0 = jSONObject1.optDouble(".");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.844621476365503
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("OscAW", (Object) "OscAW");
      try { 
        jSONObject0.getLong("OscAW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"OscAW\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("o\"Gv]$p#1qH$tC", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("o\"Gv]$p#1qH$tC");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", (-33));
      try { 
        jSONObject1.getJSONObject("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("null");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("@~(4Y%0'm'(", "@~(4Y%0'm'(");
      try { 
        jSONObject1.getJSONArray("@~(4Y%0'm'(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@~(4Y%0'm'(\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("{`$;O,3$", (-1));
      int int0 = jSONObject1.getInt("{`$;O,3$");
      assertEquals(3, jSONObject0.length());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.5751765904639274
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Integer integer0 = new Integer(23);
      JSONObject jSONObject1 = jSONObject0.accumulate("EwO", integer0);
      jSONObject1.getDouble("EwO");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.0692024658203625
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-WV", true);
      boolean boolean0 = jSONObject0.optBoolean("-WV");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.4080604617178538
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null pointer", (Object) "Null pointer");
      try { 
        jSONObject0.getBoolean("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null pointer\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.6726254461503207
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", (Object) "false");
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("sc`W", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("sc`W");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1648.42);
      assertEquals("1648.42", string0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("+V{Y~-TJI!=!.;+&|Gh", (Object) "+V{Y~-TJI!=!.;+&|Gh");
      try { 
        jSONObject1.append("+V{Y~-TJI!=!.;+&|Gh", "+V{Y~-TJI!=!.;+&|Gh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[+V{Y~-TJI!=!.;+&|Gh] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=1.6859646722371444
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("isparseDouble", stringWriter0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 170
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("+<S;(H", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.append("+<S;(H", "+<S;(H");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.9600951351245586
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Byte byte0 = new Byte((byte)4);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (-1L));
      jSONObject1.accumulate("", byte0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("[", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("Z", (Collection) linkedList0);
      Short short0 = new Short((short)491);
      JSONObject jSONObject1 = jSONObject0.accumulate("Z", short0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 174
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Float float0 = new Float((double) (byte) (-3));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 176
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{)?5q'V");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {)?5q'V
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 177
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 178
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000002\": \"java.lang.String$CaseInsensitiveComparator@0000000003\",\n\"java.lang.String@0000000004\": null\n}");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 179
  /*Coverage entropy=1.4708084763221114
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Byte byte0 = new Byte((byte)4);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 180
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("`@", object0);
      boolean boolean0 = jSONObject1.isNull("`@");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 181
  /*Coverage entropy=1.5353632953768164
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("sc`W", object0);
      try { 
        jSONObject0.getBoolean("sc`W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sc`W\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 182
  /*Coverage entropy=1.939290554095524
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      jSONObject0.toString(2061);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 183
  /*Coverage entropy=1.8884699676219987
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "1648.42");
      // Undeclared exception!
      jSONObject0.toString(1204, (-723));
  }

  /**
  //Test case number: 184
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "-1049.6855250961041");
      jSONObject0.put("-1049.6855250961041", 25);
      jSONObject0.optString("-1049.6855250961041");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 185
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 186
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 187
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 188
  /*Coverage entropy=1.7206699609551361
  */
  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 189
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Float float0 = new Float(15.051403F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("{c]@pF:^ffyo", (double) 15.051403F);
      long long0 = jSONObject0.getLong("{c]@pF:^ffyo");
      assertEquals(4, jSONObject0.length());
      assertEquals(15L, long0);
  }

  /**
  //Test case number: 190
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("OscAW", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 191
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("%^~#y)(ZHK3Vx", 0L);
      double double0 = jSONObject1.getDouble("%^~#y)(ZHK3Vx");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 192
  /*Coverage entropy=1.5358551955461082
  */
  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 193
  /*Coverage entropy=1.6249563683998391
  */
  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("wheel.json.JSONObject", (Collection) linkedList0);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 194
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("");
      assertFalse(boolean0);
  }
}
