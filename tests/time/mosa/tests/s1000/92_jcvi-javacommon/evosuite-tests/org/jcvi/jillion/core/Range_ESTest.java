/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 15:16:14 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.713438373516249
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1647L), 258L);
      Range range1 = Range.of((-1647L));
      List<Range> list0 = new LinkedList<Range>();
      range0.equals(range1);
      List<Range> list1 = range0.complement(range1);
      assertFalse(list1.contains(range0));
      assertEquals(2, list1.size());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.573372300303075
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.of((-8L), 127L);
      Range range0 = Range.of(255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.137778557236742
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372032559808509L), (-9223372032559808509L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372032559808509L), (-9223372032559808509L));
      range0.complement(range1);
      range0.equals((Object) null);
      //  // Unstable assertion: assertNotSame(range0, range1);
      //  // Unstable assertion: assertTrue(range0.equals((Object)range1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1486991585299138
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-2412L);
      range_Builder0.expandBegin((-2412L));
      range_Builder0.expandEnd(257L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6079823918731346
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-610L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854775807L;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -610 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.978882553402459
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of((-610L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-610L), 295L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.456623471695838
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of((-67L), (-67L));
      Range range1 = Range.of((-67L), (-32L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-32L));
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147486378L, 2147486378L);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147486378L, 2147486378L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L), 0L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65570L, 65570L);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      Long long1 = new Long((-2147483647L));
      boolean boolean0 = range0.equals(long1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.32914830340581
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.of(297L);
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.137778557236742
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372032559808509L), (-9223372032559808509L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372032559808509L), (-9223372032559808509L));
      range0.complement(range1);
      range1.equals(range_CoordinateSystem0);
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(9223372036854775772L, 9223372036854775772L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.644367786097916
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-729L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(9223372032559808514L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1334393520871684
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854775795L, 9223372036854775795L);
      Long long0 = new Long(9223372036854775795L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (long) long0, 9223372036854775795L);
      boolean boolean0 = range1.equals(range0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 127L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-2147483706L));
      boolean boolean0 = range0.equals("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4426074773349384
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(32733L);
      range0.split(774L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      String string0 = range0.toString();
      assertEquals("[ 32733 .. 32733 ]/0B", string0);
      
      Range range1 = Range.of(774L, 774L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.183233888070458
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L);
      range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6905579106695527
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(2011L);
      Range range1 = Range.ofLength(127L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.7916511756877003
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775806L, 9223372036854775807L);
      Range range2 = Range.of((-1377L));
      range1.equals(range2);
      Range.of((-1332L));
      range1.asRange();
      // Undeclared exception!
      try { 
        range1.complement(range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1377 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      
      Range range1 = Range.of((-1L), (-1L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 1007L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 1007L, 1007L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0538382463504266
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      range0.equals(range_CoordinateSystem0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.58836865656687
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 127L);
      List<Range> list0 = range0.complement(range0);
      range0.equals(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.384753780368075
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(3349L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.parseRange("1Uc4`OJsP`ArjQsn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 1Uc4`OJsP`ArjQsn into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long long0 = 1814L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 1814L, 1814L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertSame(range0, range1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.248666522147964
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.contains(range0));
      
      Range range1 = range0.intersection(range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4352L, 4352L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2680842177352765
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long long0 = new Long(1291L);
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getEnd();
      range0.equals("org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange");
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483646L, 2147483646L);
      range0.startsBefore(range1);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.393314764381755
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(0L);
      range1.toString();
      Range range2 = Range.of(0L);
      Range range3 = Range.of(0L);
      long long0 = range2.getEnd();
      assertEquals(0L, long0);
      assertSame(range2, range3);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.9890913365206973
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-113L), 2147483647L);
      List<Range> list0 = range1.complement(range1);
      assertTrue(list0.isEmpty());
      
      Long long0 = new Long(0L);
      range0.equals(long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(4294967000L);
      range0.equals((Object) null);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.755303241932098
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      long long1 = 4294967273L;
      Range.ofLength(4294967273L);
      Range.of(4294967273L);
      range0.getLength();
      Range range1 = Range.of(range_CoordinateSystem0, 4294967273L, 9223372036854775807L);
      Long long2 = new Long(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Object object0 = new Object();
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(4294967001L, 9223372032559808601L);
      range0.getEnd();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.equals("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775772L, (-2357L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2358 would make range [9223372036854775772 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(4294967000L, 4294967000L);
      range0.equals((Object) null);
      range0.getLength();
      Range.of((-8589940205L), 775L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.442023520229242
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.complement(range0);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.4490418017201354
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(65535L);
      range1.getLength();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      
      Range range2 = Range.of(65535L);
      long long0 = range2.getLength();
      assertEquals(1L, long0);
      assertSame(range2, range1);
      
      range0.split(127L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.757133146884682
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(32770L);
      range0.split(774L);
      range0.split(32770L);
      String string0 = range0.toString();
      assertEquals("[ 32770 .. 32770 ]/0B", string0);
      
      Range range1 = Range.of(774L, 32770L);
      Range range2 = Range.of(4659L);
      range0.endsBefore(range2);
      Range range3 = Range.of(772L);
      Range range4 = range3.intersection(range1);
      Range range5 = Range.parseRange("[ 32770 .. 32770 ]/0B");
      List<Range> list0 = range1.complement(range5);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
      
      Range range6 = range1.intersection(range3);
      assertSame(range6, range4);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 108598122L, 108598122L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.5097825387705837
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 295L, 1249L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 295L, 295L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertSame(range2, range1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4390626350804188
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      Range range1 = Range.of(0L, 0L);
      long long1 = range0.getBegin();
      assertTrue(long1 == long0);
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Long long0 = new Long(1291L);
      Range range0 = Range.of(1291L, 9223372036854775807L);
      long long1 = range0.getEnd();
      assertEquals(9223372036854775807L, long1);
      
      boolean boolean0 = range0.equals("org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-88L), (-88L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.4409907033043714
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(257L, 257L);
      Long long0 = new Long(257L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (long) long0, 257L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.7759735523091207
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.spliterator();
      range0.getLength();
      Range range1 = Range.of(0L, 0L);
      range1.intersects(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4943472320027444
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1507L);
      Range range1 = Range.of((-1L));
      range0.complement(range1);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(4294967296L, 9223372036854710238L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.133562824120753
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals((Object) null);
      Range range1 = Range.of((-32768L), 437L);
      long long0 = range1.getLength();
      assertEquals(33206L, long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(65539L, 9223372036854775522L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(4294967295L, 4294967295L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.589081669044589
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(1049L, 4294967295L);
      Range range1 = Range.of(1049L);
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1360633176392105
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(9223372036854775772L, 9223372036854775772L);
      range0.complement(range0);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1431L));
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5648914429056373
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 354L, 354L);
      range0.iterator();
      List<Range> list0 = range0.split(354L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list0.contains(range0));
      assertEquals(1, list1.size());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.7812635470996177
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      
      Range range2 = range0.intersection(range1);
      assertSame(range2, range1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.32914830340581
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-3346L));
      Range range1 = Range.ofLength(4294967295L);
      Range.of(819L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.7957925672535544
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.ofLength(32767L);
      long long1 = 774L;
      List<Range> list0 = range0.split(774L);
      range0.complementFrom(list0);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("Zg\"_=Y54");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Zg\"_=Y54 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(295L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(799L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.3319664612631987
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-1L), 9223372036854775772L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(9223372036854771456L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775806L, long0);
      
      long long1 = range0.getLength();
      assertEquals(9223372036854775807L, long1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3857846019328623
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(1049L, 4294967295L);
      range0.equals((Object) null);
      Range range1 = Range.of(1007L);
      range0.isEmpty();
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(1049L, 4294967295L);
      boolean boolean0 = range0.equals("_Eq/k");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3117896114619447
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(65539L, 4294967001L);
      // Undeclared exception!
      range0.split(65539L);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.580783058594304
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775806L, 9223372036854775807L);
      range1.isSubRangeOf(range0);
      range1.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.4012310378469834
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(2515L);
      List<Range> list0 = range0.split(2515L);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-443L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -443 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-2443L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2443 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2286398730467667
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 258L, 65570L);
      Range range1 = Range.of(258L, 258L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.3752873220774395
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-27L));
      Range range1 = Range.of(295L, 295L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(304L, 9223372032559808601L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(757L);
      boolean boolean0 = range0.equals("org.jcvi.jillion.core.Range$UnsignedShortStartLongLengthRange");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3352073540125335
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.2594634806097305
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(296L);
      Range range1 = Range.of(296L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(296L, long0);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(608L, 608L);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.680361919380909
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(0L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-128L), 749L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.44239816283991
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(2702L);
      Range range1 = Range.of(2702L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      long long0 = range0.getLength();
      assertSame(range0, range1);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.440841856864282
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(1051L);
      Range range1 = Range.ofLength(1051L);
      range0.complement(range1);
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(1052L, long0);
      
      boolean boolean0 = range0.startsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.5407056438302917
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-376L), (-376L));
      Range range1 = Range.of(1036L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(15973975L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.438264548030422
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(4294967296L, 4294967296L);
      long long0 = range0.getBegin();
      assertEquals(4294967296L, long0);
      
      Range range1 = Range.ofLength(4294967296L);
      range1.equals(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(2949L, 4294967296L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(65570L, 65570L);
      assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.3763292857269653
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-88L), 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-2147483634L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(1237L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.6870204957035666
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(764L);
      boolean boolean0 = range0.endsBefore(range0);
      boolean boolean1 = range0.equals("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.3589913857537868
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(261L, 65570L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.885700150847151
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.145776642580429
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(1377L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.2058270243041633
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.ofLength(1051L);
      Range range0 = Range.of((-2107L));
      Range range1 = Range.ofLength(1051L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.0598988524110324
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483646L);
      range_Builder0.contractEnd(2147483646L);
      range_Builder0.copy();
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-1470L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = (-2290L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2290L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.3844894049549885
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.getLength();
      Range.of(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-128L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.133133660972153
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(9223372036854774541L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.2062955063862235
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      assertSame(range1, range0);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.3278369999701947
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(9223372032559808511L);
      Range range0 = range_Builder0.build();
      Range.of((-1360L), (-1360L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.406843574312277
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(261L, 65570L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-32760L), (-32760L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.011032408119845
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.528792442920865
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(1757L);
      range_Builder0.build();
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.1126512729537206
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-3L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(1122L, 1122L);
      range0.equals("2J");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals(1122L, long0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(1049L, 1049L);
      boolean boolean0 = range0.equals("org.jcvi.jillion.cor<.Range$UnsignedShortStartLongLengthRange");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32770L, 757L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.216212418083071
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.ofLength(65562L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.1925508151904074
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.of((-32768L));
      Range range0 = Range.of((-32768L));
      long long0 = range0.getEnd();
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.1133442736467214
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775772L, 9223372036854775772L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.330539547264772
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of((-2L), (-2L));
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of((-3216L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(840L, 2157L);
      List<Range> list0 = range0.split(2157L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-472L), (-472L));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=4.078581561423741
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 1051L);
      List<Range> list0 = range0.split(9223372036854775807L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range.Comparators.values();
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ -1 .. 1051 ]/SB");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -1 .. 1051 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -1 .. 1051 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.183220085050876
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 1 ]/RB", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.386923482034096
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.4659799280625503
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1330L), (-1330L));
      long long0 = range0.getBegin();
      assertEquals((-1330L), long0);
      
      List<Range> list0 = range0.split(1L);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(2450L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.5887383058928766
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of(65576L, 4294967001L);
      List<Range> list0 = range0.split(4294967001L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.1866848071632385
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483646L, long0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.493244711364936
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(9223372036854775772L, 9223372036854775772L);
      Long long0 = new Long(9223372036854775772L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775772 .. 9223372036854775772 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 9223372036854775772 .. 9223372036854775772 ]/0B", range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      
      Range range3 = Range.ofLength(2945L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.438979798883769
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-9223372032559808509L), (-9223372032559808509L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372032559808509L), long0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.648603769924572
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 127L);
      long long0 = 65535L;
      Range.of(65535L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range range0 = Range.of(4294967296L, 4294967296L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.386434750022149
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(2079L);
      Range range1 = Range.of(2079L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.189445966850307
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      String string0 = range0.toString();
      assertEquals("[ -32768 .. -32768 ]/0B", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.180683087165041
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.344292841368524
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long long0 = 65539L;
      Range range0 = Range.ofLength(65539L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1814L, 1814L);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.0561774276369764
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.of(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range range0 = Range.of((-271L));
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.97613471996344
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(1263L, 1263L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals(1263L, long0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.442023520229242
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(0L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.intersects(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(1L, 1L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967275L, 4294967275L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.128419031742918
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.parseRange("RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.794110516722859
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(670L, long0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.200113693165702
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of(1438L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(1438L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-409L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long long0 = 804L;
      Range range0 = Range.of(804L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.975815740697092
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of(4294967296L, 4294967296L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 164
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(0L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.ofLength(3415L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.9769701418514933
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Range range0 = Range.of(9223372036854774541L, 9223372036854774541L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Range range0 = Range.of((-129L), (-129L));
      assertFalse(range0.isEmpty());
  }
}
