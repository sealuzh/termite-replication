/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 27 11:56:15 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = JSONObject.quote("hUE/&cDa(/4OwX");
      assertEquals("\"hUE/&cDa(/4OwX\"", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N}.6yp3_Zs1j[U-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {N}.6yp3_Zs1j[U-'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("~w%Rlx<by4B!^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ~w%Rlx<by4B!^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "+Dvjo[/Ia,");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject1 = jSONObject0.put("+Dvjo[/Ia,", (Collection) linkedList0);
      jSONObject1.remove("+Dvjo[/Ia,");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("WTh/&z[j#?K`C`x", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-1665.841473466901", (-1665.841473466901));
      String string0 = jSONObject1.optString("-1665.841473466901");
      assertNotNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", (-1L));
      long long0 = jSONObject1.optLong("{}");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", 1179.8145617);
      int int0 = jSONObject1.optInt("is");
      assertEquals(1179, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0317592185692717
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-1665.841473466901", (-1665.841473466901));
      int int0 = jSONObject1.optInt("-1665.841473466901");
      assertEquals((-1665), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONArray initial value should be a string or collection or array.", 2209);
      double double0 = jSONObject1.optDouble("JSONArray initial value should be a string or collection or array.");
      assertEquals(2209.0, double0, 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Short short0 = new Short((short) (-1618));
      JSONObject jSONObject1 = jSONObject0.put("1", (Object) short0);
      double double0 = jSONObject1.optDouble("1");
      assertEquals((-1618.0), double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9512595041439562
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      jSONObject0.put("isjoin", (Object) boolean0);
      boolean boolean1 = jSONObject0.optBoolean("isjoin");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("{}", (long) 1);
      Object object0 = jSONObject0.opt("{}");
      assertEquals(1L, object0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put(",", (Collection) linkedList0);
      boolean boolean0 = jSONObject0.has(",");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("b,Z0GiCfpXSy )4", "b,Z0GiCfpXSy )4");
      String string0 = jSONObject0.getString("b,Z0GiCfpXSy )4");
      assertNotNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iQ", 1175.9822187479253);
      long long0 = jSONObject1.getLong("iQ");
      assertEquals(1175L, long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0947290475276494
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      hashMap0.put(jSONObject0, "zI6\"a79BwpquQRsq9");
      JSONObject jSONObject1 = jSONObject0.put("zI6\"a79BwpquQRsq9", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("zI6\"a79BwpquQRsq9");
      assertNotSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("A JSONObject text must end with '}'", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("A JSONObject text must end with '}'");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", 1180.2005742035724);
      int int0 = jSONObject1.getInt("is");
      assertEquals(1180, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("-1665.841473466901.", (-713L));
      int int0 = jSONObject1.getInt("-1665.841473466901.");
      assertEquals((-713), int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.valueToString("wheel.json.JSONObject@0000000001", 0, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", linkedList0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gBb`r", (Map) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) linkedList0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 118L);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", (-791));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 32);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 1362.5429);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.optString("va", "");
      assertEquals("", string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optString((String) null, (String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optString("", "\"java.lang.String@0000000010\"");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("[", 775L);
      assertEquals(775L, long0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, (-491L));
      assertEquals((-491L), long0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("JUET0tjHe<9M/", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7248301468410545
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      long long0 = jSONObject0.optLong("", (-598L));
      assertEquals((-598L), long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-2151));
      assertEquals((-2151), int0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 38);
      assertEquals(38, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("wheel.json.JSONArray", (-539.3));
      assertEquals((-539.3), double0, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("getreplaceFirst", 203.548327);
      assertEquals(203.548327, double0, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("", 457.5730483471386);
      assertEquals(457.5730483471386, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("getlongBitsToDouble", false);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt((String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has(",");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5358551955461082
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5228146795137598
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2334.88402248233));
      assertEquals("-2334.88402248233", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("", "");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.accumulate("", linkedList0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 3756, 35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.7822053480824616
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, (-1), 8192);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8884699676219987
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "nam");
      // Undeclared exception!
      jSONObject0.toString(2086, 2086);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8377933025778024
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      // Undeclared exception!
      jSONObject0.toString(8448);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.9252628437715016
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, JSONObject> hashMap0 = new HashMap<Long, JSONObject>();
      hashMap0.put((Long) null, jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("=bLE!Kid!6S~N_\"", (Map) hashMap0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject2 = jSONObject1.put("false", (Collection) linkedList0);
      // Undeclared exception!
      try { 
        jSONObject2.toString((-4636));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) null);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.4681399390162087
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.putOpt("[3q92Yxo=6<\"f;", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1780L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("ndE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ndE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      try { 
        jSONObject0.getBoolean("iswait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iswait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.3986496111888456
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("' and instead saw '", (Collection) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      jSONObject0.put("istoString", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7280868748471145
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0, (-653), (-653));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7398385585424117
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("wheel.json.JSONObject", hashMap0);
      String string0 = jSONObject0.toString(4, (-1));
      assertNotNull(string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 14, 14);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1837, 1837);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.6867831479680375
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.167723997949895
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(3, jSONObject0.length());
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.3653722558116261
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("false", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("H b_</?f{FI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"H b_<\\/?f{FI\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.7606100385958865
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString(1385, 1385);
      // Undeclared exception!
      JSONObject.quote(string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("g@aU", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.1752045970807579
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ec;2", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("ec;2");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.6769877743224175
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("o9r", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("o9r");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("toU", 0L);
      double double0 = jSONObject1.optDouble("toU");
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.1221730695082126
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Long long0 = new Long((-1824L));
      JSONObject.valueToString(long0);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.toString(58, (-32864431));
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.7234814019295517
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=1.5294599036351055
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject@0000000001", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("wheel.json.JSONObject@0000000001");
      assertNotSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.3961001489141087
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("true", (-75.845));
      try { 
        jSONObject0.getJSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("YdwRJ#TZx 9,P", "YdwRJ#TZx 9,P");
      JSONArray jSONArray0 = jSONObject1.getJSONArray("YdwRJ#TZx 9,P");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=1.5806491250694639
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Map) hashMap0);
      try { 
        jSONObject1.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.205598359026394
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("2395.3991", "2395.3991");
      long long0 = jSONObject0.optLong("2395.3991");
      assertEquals(2395L, long0);
  }

  /**
  //Test case number: 165
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^rL@ORZXid", true);
      boolean boolean0 = jSONObject0.getBoolean("^rL@ORZXid");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("is", (Object) "is");
      boolean boolean0 = jSONObject0.optBoolean("is");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=1.581573107414146
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("000", (Object) jSONObject0);
      boolean boolean0 = jSONObject0.optBoolean("000");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("c", false);
      boolean boolean0 = jSONObject1.getBoolean("c");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 169
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 170
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = JSONObject.doubleToString(3.7523418502853265E-4);
      assertEquals("3.7523418502853265E-4", string0);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("94 yt[8R4tdiAL", true);
      try { 
        jSONObject1.append("94 yt[8R4tdiAL", "94 yt[8R4tdiAL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[94 yt[8R4tdiAL] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 173
  /*Coverage entropy=1.3820569345794618
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      jSONObject0.append("jhmvvAO", double0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 174
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append(": |vb/aA8_m?Z", ": |vb/aA8_m?Z");
      Float float0 = new Float((-1486.13777141616));
      JSONObject jSONObject2 = jSONObject1.accumulate(": |vb/aA8_m?Z", float0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("A JSONArray text must start with '['", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 176
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.String@0000000004\"", integer0);
      jSONObject1.getInt("\"java.lang.String@0000000004\"");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 177
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", 27);
      JSONObject jSONObject2 = jSONObject1.accumulate(".", jSONObject0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 178
  /*Coverage entropy=1.7326587201992076
  */
  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float((-1.0));
      JSONObject jSONObject1 = jSONObject0.putOpt("u+Dz!", float0);
      long long0 = jSONObject1.getLong("u+Dz!");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 179
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{fd:n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 5 of {fd:n
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 180
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{. U*LOPYeN,'%*.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 13 of {. U*LOPYeN,'%*.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 181
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 182
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 183
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 184
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 185
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", false);
      boolean boolean0 = jSONObject0.isNull("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 186
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("JSONArray[", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 187
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.put("a.6K", 1);
      double double0 = jSONObject0.getDouble("a.6K");
      assertEquals(3, jSONObject0.length());
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 188
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 189
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 190
  /*Coverage entropy=1.7879677305228177
  */
  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((-1), (-1));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 191
  /*Coverage entropy=1.6094379124341
  */
  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", 1180.2005742035724);
      assertEquals(1, jSONObject0.length());
      
      Object object0 = jSONObject1.get("is");
      assertEquals(1180.2005742035724, object0);
  }

  /**
  //Test case number: 192
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.put("toU", 0L);
      try { 
        jSONObject1.getJSONArray("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toU\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 193
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }
}
