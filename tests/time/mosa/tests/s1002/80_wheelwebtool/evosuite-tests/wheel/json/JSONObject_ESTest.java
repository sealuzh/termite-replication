/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 16:16:16 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("istoString", "istoString");
      JSONObject jSONObject2 = jSONObject1.put("istoString", 5777L);
      int int0 = jSONObject2.getInt("istoString");
      assertEquals(5777, int0);
      
      String string0 = JSONObject.quote("istoString");
      assertEquals("\"istoString\"", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7509304346546228
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = new Double(930.2760190208156);
      Double.isFinite(0.0);
      Double.min(0.0, 0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject.quote("hFVbOx0S/k-ZYZW");
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("hFVbOx0S/k-ZYZW", (Collection) linkedList0);
      jSONObject1.keys();
      assertEquals(9, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9013748126241692
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.quote("pnA}R,B8*</`-@9");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"pnA}R,B8*</\\`-@9\"";
      stringArray0[1] = "\"pnA}R,B8*</\\`-@9\"";
      stringArray0[2] = "\"pnA}R,B8*</\\`-@9\"";
      stringArray0[3] = "pnA}R,B8*</`-@9";
      stringArray0[4] = "\"pnA}R,B8*</\\`-@9\"";
      stringArray0[5] = "\"pnA}R,B8*</\\`-@9\"";
      stringArray0[6] = "pnA}R,B8*</`-@9";
      JSONObject jSONObject0 = new JSONObject("pnA}R,B8*</`-@9", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("\"pnA}R,B8*</\\`-@9\"", (Object) "pnA}R,B8*</`-@9");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.826187720729818
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "PLX\tilaIs";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.min(0.0F, (-1.0F));
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("B", (Object) jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(Double.NaN);
      linkedList0.add(double0);
      jSONObject2.put("PLX\tilaIs", (Collection) linkedList0);
      Double double1 = new Double((-1.0F));
      JSONObject.valueToString(double1);
      try { 
        jSONObject2.toString(192, (-1275));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("B", (Object) jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.optJSONObject("B");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject.doubleToString((-1949.43238351));
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.41019248359628
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      int int0 = 16;
      Integer integer0 = new Integer(16);
      Integer.toUnsignedString(16);
      Short short0 = new Short((short)116);
      Integer.remainderUnsigned(12, 62);
      Short.compare((short) (-2205), (short) (-2205));
      hashMap0.put(integer0, short0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("&#[S>M`x%", 1034);
      jSONObject0.put("tnS4.j:_p6C", 43);
      String string0 = "wv.m|#Ef{_'";
      Integer integer1 = new Integer((short) (-2205));
      Short short1 = new Short((short) (-431));
      Short.toUnsignedInt((short)2624);
      hashMap0.put(integer1, short1);
      JSONObject jSONObject1 = jSONObject0.putOpt("wv.m|#Ef{_'", "DbZ >");
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.059615150468091
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.isNull(" of ");
      JSONObject.testValidity((Object) null);
      String string0 = jSONObject0.optString("wheel.json.JSONObject@0000000001", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.968547443015301
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) "is");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optBoolean("Hp</-dLaDe);)PT");
      jSONObject0.put("c).hUfN2ZM:)eCW~h_I", (-1773L));
      jSONObject0.toString(13, 13);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 55, 55);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2644672162886303
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      jSONObject0.optDouble("l&G8n[ErK([zN*");
      Byte byte0 = new Byte((byte)0);
      jSONObject0.put("Expected a ',' or '}'", (Object) byte0);
      JSONObject jSONObject2 = jSONObject1.put("0CAh%`9#!7}YD:)%", true);
      JSONObject.quote("0CAh%`9#!7}YD:)%");
      jSONObject1.getLong("Expected a ',' or '}'");
      JSONObject.getNames((Object) jSONObject0);
      JSONObject jSONObject3 = jSONObject2.put("l&G8n[ErK([zN*", 92);
      assertEquals(3, jSONObject3.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONObject";
      jSONObject0.put("wheel.json.JSONObject", 0.0);
      jSONObject0.getDouble("wheel.json.JSONObject");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject.quote("Unclosed comment");
      Float float0 = new Float(Double.NaN);
      Float.max(0.0F, 0.0F);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.367934296213352
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", true);
      JSONObject.valueToString(jSONObject1);
      jSONObject1.isNull("] is not a Boolean.");
      try { 
        jSONObject1.getLong("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.accumulate("A JSONObject text must end with '}'", jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("A JSONObject text must end with '}'");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.455206480917429
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Byte byte0 = new Byte((byte)4);
      Byte.toUnsignedLong((byte)4);
      JSONObject jSONObject2 = jSONObject1.accumulate("mi", byte0);
      double double0 = jSONObject2.optDouble("mi");
      assertEquals(4.0, double0, 0.01);
      
      boolean boolean0 = jSONObject0.optBoolean("\n");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Y?A+ow?l%bG");
      JSONObject jSONObject0 = new JSONObject("Y?A+ow?l%bG", stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.900156510048972
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optString("", "");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Object object1 = jSONObject0.opt((String) null);
      assertNull(object1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.949694022650366
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(34, 34);
      assertEquals("{}", string0);
      
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("fo", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = jSONObject1.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2327272160989624
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("isvalueOf", (-1L));
      double double0 = jSONObject1.getDouble("isvalueOf");
      assertEquals((-1.0), double0, 0.01);
      
      Boolean boolean0 = new Boolean("isvalueOf");
      String string0 = JSONObject.doubleToString(503.24);
      assertEquals("503.24", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.321991904460089
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = new Long(1658L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", (double) 1658L);
      jSONObject1.getDouble(",\n");
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1965164469072214
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("put", jSONArray0);
      boolean boolean0 = jSONObject0.optBoolean("put");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.750029771542021
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", false);
      jSONObject1.optBoolean("9JY");
      jSONObject0.names();
      jSONObject1.optString("] is not a Boolean.");
      jSONObject0.optLong("9JY");
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Boolean@0000000003", 9);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 73);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.48000000000000004
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) "3");
      JSONObject jSONObject1 = jSONObject0.put("3", false);
      jSONObject1.getBoolean("3");
      try { 
        jSONObject0.getDouble("3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", false);
      boolean boolean0 = jSONObject0.optBoolean("] is not a Boolean.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0300388177574233
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("put", "put");
      try { 
        jSONObject1.getBoolean("put");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"put\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9555141264033407
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("istJSONArray", (Collection) linkedList0);
      try { 
        jSONObject0.getBoolean("istJSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istJSONArray\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.160858742064353
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("?L4BD\"", (Collection) null);
      String string0 = jSONObject0.toString(693, 693);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.optJSONArray("?L4BD\"");
      String string1 = jSONObject0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9037872154860769
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float(1.0F);
      jSONObject0.append("0", float0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("0");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("^'^VuCCDc(6%", (Object) jSONObject0);
      Object object0 = jSONObject1.opt("^'^VuCCDc(6%");
      assertSame(object0, jSONObject1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "{g\"A))HJ+GwR3B";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{g\"A))HJ+GwR3B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {g\"A))HJ+GwR3B
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1015014044975926
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      jSONObject1.toString((-1295), (-1295));
      jSONObject1.put("isdoubleToLongBits", true);
      jSONObject0.toString((-1295));
      JSONObject.quote("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000003\n}");
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000003\n}");
      int int0 = jSONObject2.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.865891589185984
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Double.min(0.0, 0.0);
      jSONObject1.optLong("^'^VuCCDc(6%", (-2747L));
      JSONObject jSONObject2 = jSONObject0.append("cdi?l4XlBQ%0f{i1", "(!{GkW~vm;WEQ|lg");
      int int0 = 2326;
      JSONObject.valueToString(jSONObject1, (-108916131), 2326);
      JSONObject jSONObject3 = new JSONObject();
      Float float0 = new Float((double) (-4147));
      JSONObject.testValidity(float0);
      String string0 = "\\u";
      jSONObject1.put(string0, (Object) jSONObject2);
      StringWriter stringWriter0 = new StringWriter();
      Byte.toUnsignedInt((byte) (-64));
      JSONObject.numberToString(float0);
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.099633990865473
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "PLX\tilaIs";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("B", (Object) jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject3 = jSONObject2.put("PLX\tilaIs", (Collection) linkedList0);
      jSONObject3.optInt("PLX\tilaIs", 93);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject3.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",:]}/\"[{;=#", (Collection) null);
      Float float0 = new Float((-1.0));
      jSONObject0.accumulate(",:]}/\"[{;=#", float0);
      boolean boolean0 = jSONObject0.optBoolean(",:]}/\"[{;=#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6624653023670355
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      Double.min(0.0, 0.0);
      jSONObject1.optLong("^'^VuCCDc(6%", (-2747L));
      JSONObject jSONObject2 = jSONObject0.append("cdi?l4XlBQ%0f{i1", "(!{GkW~vm;WEQ|lg");
      JSONObject.valueToString(jSONObject1, (-108916131), 2326);
      JSONObject.valueToString("(!{GkW~vm;WEQ|lg", (-4147), 2861);
      JSONObject jSONObject3 = new JSONObject();
      Float float0 = new Float((double) (-4147));
      JSONObject.testValidity(float0);
      jSONObject0.put("^'^VuCCDc(6%", (Object) "(!{GkW~vm;WEQ|lg");
      jSONObject1.put("", (Object) jSONObject2);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.numberToString(float0);
      Object object0 = jSONObject3.opt("] not found.");
      assertNull(object0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9930083118246225
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Float float0 = Float.valueOf(0.0F);
      JSONObject jSONObject2 = new JSONObject(float0);
      assertEquals(3, jSONObject2.length());
      
      Short short0 = new Short((short)1835);
      JSONObject.valueToString(short0, (-241), 34);
      String string0 = jSONObject1.toString(2730, 34);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6535251648570022
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = JSONObject.quote("t4F!U*_EsAct7;/dl");
      assertEquals("\"t4F!U*_EsAct7;/dl\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"t4F!U*_EsAct7;/dl\"");
      jSONObject0.toString(8);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.3373641978673163
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("");
      Object object0 = jSONObject0.get("");
      assertFalse(object0.equals((Object)string0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1714080501251627
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Null pointer", "Null pointer");
      StringWriter stringWriter0 = new StringWriter(870);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.write(stringWriter0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt("is", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 2005, (-30733275));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.048844359649284
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Object object0 = JSONObject.NULL;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("~^J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~^J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString(jSONObject0, 2208, 2208);
      Double double0 = new Double(2208);
      JSONObject jSONObject1 = new JSONObject("{}");
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      double double0 = jSONObject0.optDouble("Qj1ER2<h5ojm[p_", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = jSONObject1.optBoolean("Expected a ',' or '}'");
      assertTrue(boolean0);
      
      JSONObject jSONObject2 = jSONObject1.put("N", true);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject2.put("int", (Map) hashMap0);
      String string0 = JSONObject.quote("int");
      assertEquals("\"int\"", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.166831391086261
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      jSONObject1.getBoolean("Expected a ',' or '}'");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.73981275551012
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      jSONObject1.toString((-1295), 693);
      JSONObject jSONObject2 = jSONObject0.put("Expected a ',' or '}'", 101);
      jSONObject2.optInt("Expected a ',' or '}'", 101);
      JSONObject.doubleToString(0.0);
      boolean boolean0 = jSONObject2.has("Expected a ',' or '}'");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6083963944770798
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("S\":&vQ:ovc:+=N", 0L);
      String string0 = jSONObject0.toString(18, 18);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7911998103932196
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject.doubleToString((-1949.432383506));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "7(?`#U)-E~yRG1=e";
      Integer integer0 = new Integer((-1668));
      hashMap0.putIfAbsent((String) null, integer0);
      Long.sum((-1668), 364L);
      Long long0 = new Long((-1304L));
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-1668), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1668));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 34, 34);
      Double double0 = new Double(34);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONArray0.toJSONObject(jSONArray0);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((-936));
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray0);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.4886065653255873
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(1.0);
      Short short0 = new Short((short)2);
      JSONObject jSONObject1 = new JSONObject(short0);
      JSONObject jSONObject2 = jSONObject0.append("jhmvvAO", jSONObject1);
      Boolean boolean0 = new Boolean("jhmvvAO");
      Double.min(Double.NaN, Double.NaN);
      JSONObject jSONObject3 = jSONObject2.append("jhmvvAO", short0);
      jSONObject2.toString((int) (short)2, 759);
      JSONObject jSONObject4 = new JSONObject();
      jSONObject3.getJSONArray("jhmvvAO");
      jSONObject0.length();
      JSONObject jSONObject5 = new JSONObject(short0);
      try { 
        jSONObject5.getDouble("~>Hya");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~>Hya\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.547067373853964
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "Substring bounds error";
      JSONObject.getNames((Object) "Substring bounds error");
      JSONObject jSONObject0 = new JSONObject((Object) "Substring bounds error");
      JSONObject.getNames((Object) jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(1325);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}r+L;t/{(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }r+L;t/{(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-22654515), (-22654515));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.quote("oz3r}\"/LH9Vyly");
      assertEquals("\"oz3r}\\\"/LH9Vyly\"", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7305017813188235
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(8);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5834607735165944
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getparseLong", linkedList0);
      jSONObject0.optBoolean("getparseLong");
      try { 
        jSONObject1.getDouble("getparseLong");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getparseLong\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.7931511307298944
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      int int0 = jSONObject0.optInt("", 0);
      assertEquals(0, int0);
      
      double double0 = jSONObject0.optDouble("", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = jSONObject0.optLong("wheel.json.JSONArray");
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONObject0.optBoolean("WVS");
      assertFalse(boolean0);
      
      jSONObject0.put("qD!jl=nvbREY\"?rf", false);
      String string0 = JSONObject.quote(",");
      assertEquals("\",\"", string0);
      
      Long long1 = new Long(0L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.3199044298479494
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("put", "put");
      boolean boolean0 = jSONObject1.isNull("put");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8121790402101223
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("put", object0);
      boolean boolean0 = jSONObject0.optBoolean("put");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.4939011435213314
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.getNames((Object) "3");
      JSONObject jSONObject0 = new JSONObject((Object) "3");
      JSONObject.quote("KKp");
      // Undeclared exception!
      jSONObject0.toString(4580, 4);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.names();
      assertNull(jSONArray1);
      
      JSONObject jSONObject1 = jSONObject0.put("qYWWO,PJIk_G)f|E5", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5722964991944255
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("[]");
      assertEquals("\"[]\"", string0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      JSONObject jSONObject1 = jSONObject0.accumulate("in", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4572926768921821
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("q%/sQ,^VE", (-1L));
      try { 
        jSONObject0.getString("q%/sQ,^VE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"q%/sQ,^VE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.054071868040543
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("B69(QwD", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = JSONObject.quote("re");
      assertEquals("\"re\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject.quote((String) null);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6047867698526947
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.582483256410045
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("] is not a Boolean.", false);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", "] is not a Boolean.");
      boolean boolean0 = jSONObject1.optBoolean("] is not a Boolean.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.454482887875094
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{}", 356L);
      String string0 = jSONObject0.toString();
      String string1 = jSONObject0.getString("{}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("", (-267L));
      jSONObject0.optDouble("", 0.0);
      jSONObject0.put("Bad value from toJSONString: ", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("u0P[hEFl'{/dhKx", 1908.818);
      assertEquals(1908.818, double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("lis", (-2463.72));
      assertEquals((-2463.72), double0, 0.01);
      
      String[] stringArray0 = JSONObject.getNames((Object) "kCgYj?eB*=*rD>!c");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONTokener", 0L);
      double double0 = jSONObject1.optDouble("wheel.json.JSONTokener");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.2810351688613943
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("tr", 2903);
      jSONObject0.optLong("tr");
      jSONObject0.accumulate("pu1/t", "pu1/t");
      assertEquals(2, jSONObject0.length());
      
      JSONObject.quote("pu1/t");
      JSONObject.doubleToString(2903L);
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.0688986282206043
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) 927);
      JSONObject jSONObject1 = jSONObject0.accumulate("Expected a ',' or '}'", float0);
      jSONObject1.optBoolean("Expected a ',' or '}'");
      jSONObject0.optLong("Expected a ',' or '}'", (long) 927);
      try { 
        jSONObject0.getJSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6773250792303758
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("SAy-`7_66U>ep7vmK", 2318L);
      assertEquals(2318L, long0);
      
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "put";
      JSONObject jSONObject1 = jSONObject0.accumulate("put", "put");
      try { 
        jSONObject1.getInt("put");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"put\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.0978100054573563
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"2", "\"2");
      jSONObject1.optLong("\"2");
      boolean boolean0 = jSONObject1.optBoolean("\"2");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5164586295246056
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "t4F!U*_Esct7;/dl");
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "{N}.6yp3_Zs1j[U-'";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N}.6yp3_Zs1j[U-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {N}.6yp3_Zs1j[U-'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.1469454321841117
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("getmin", "getmin");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-40));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0054877090461907
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "t4F!U*_EsAct7;/dl");
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.2128785044602155
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString((Object) null);
      Double.isFinite(0.0);
      jSONObject0.toString();
      JSONObject.doubleToString((-472.572));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\",\"java.lang.String@0000000009\":wheel.json.JSONArray@0000000008}", (Collection) linkedList0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.159813847226612
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = " }eo|UJ;i@3zwIl";
      JSONObject jSONObject1 = jSONObject0.put(" }eo|UJ;i@3zwIl", 0.0);
      try { 
        jSONObject1.append(" }eo|UJ;i@3zwIl", " }eo|UJ;i@3zwIl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ }eo|UJ;i@3zwIl] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, (-48));
      assertEquals((-48), int0);
      
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.855204568965708
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("%/ooyK[N{lzU`", 2005);
      assertEquals(2005, int0);
      
      String string0 = JSONObject.valueToString(jSONObject0, 10, 2005);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0, (-677), (-677));
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      int int0 = jSONObject0.length();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8423943585863412
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 0L);
      jSONObject1.getInt("false");
      JSONObject.quote("Expected a ',' or '}'");
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.753440343014635
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString(101, 101);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.2900951976233848
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("put", "put");
      jSONObject0.optBoolean("put");
      jSONObject1.optString("put", "put");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.4999138335216076
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-(7~8*xPRQ ", (-202.391));
      jSONObject0.getInt("-(7~8*xPRQ ");
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double(5274.6943F);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.quote("lJz<=F9l;fMpF");
      assertEquals("\"lJz<=F9l;fMpF\"", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = JSONObject.quote("x^p_}NDw(|/j:y");
      assertEquals("\"x^p_}NDw(|/j:y\"", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = JSONObject.quote("H!\"\"6a.~P");
      assertEquals("\"H!\\\"\\\"6a.~P\"", string0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.1983857508370273
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double(2797.02699729);
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.1759058012496004
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("put", "put");
      int int0 = jSONObject1.optInt("put", 9);
      assertEquals(1, jSONObject0.length());
      assertEquals(9, int0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("set");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"set\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", false);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.remove(".");
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4771123124520242
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.optBoolean("\b", false);
      assertFalse(boolean0);
      
      String string0 = jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("getmin", true);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dou\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("isdoubleToLongBits");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.9758040107493536
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertEquals(1, jSONObject1.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("getjoin");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getjoin
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float((float) 6);
      String string0 = JSONObject.valueToString(float0, 6, 6);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("wheel.json.JSONArray");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("z0J6T:~w\")");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("KFg#.T`WY^e5YR%<e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KFg#.T`WY^e5YR%<e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(2222, 2222);
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.475644998784904
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(32, 32);
      String string0 = jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      assertNotNull(string0);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.8677758426013722
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"d2", "\"d2");
      jSONObject1.toString((-40));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.753440343014635
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-2764), (-2764));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.4615384615384615
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.5652789553347763
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("su m");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ryvF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ryvF
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.1693376567504215
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("{}", false);
      try { 
        jSONObject1.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 159
  /*Coverage entropy=0.45454545454545453
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=0.47619047619047616
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"73");
      jSONObject0.optString(".puWN[=0", ".puWN[=0");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 162
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = JSONObject.quote("sbrrW");
      assertEquals("\"sbrrW\"", string0);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=0.9873982136479044
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "J_(Gg=");
      String string0 = jSONObject0.optString("J_(Gg=");
      assertEquals("", string0);
      assertEquals(3, jSONObject0.length());
  }
}
