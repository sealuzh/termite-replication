/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 16:24:54 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2130476896311855
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-785L));
      Range range1 = Range.of((-32768L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of(9223372036854775803L, 9223372036854775803L);
      Range range1 = Range.of(4294967295L, 9223372036854775803L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.850455357500194
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 61L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(range_CoordinateSystem0, (-1528L), (-1L));
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$1
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.691653638544273
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.of(127L, 1853L);
      Long long0 = new Long(1853L);
      range0.equals(range1);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.675944125706596
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-624L), 2147483647L);
      Range range1 = Range.of((-624L), 3011L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.5256604751831957
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range.of(168L, 168L);
      range0.isEmpty();
      List<Range> list0 = new LinkedList<Range>();
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.135297931119018
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775795L));
      Range.of((-9223372036854775795L), (-9223372036854775795L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775795L), (-2654L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8888043637074614
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2401L, 9223372036854775268L);
      Long long0 = new Long(32758L);
      Long.toUnsignedString(32758L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(9223372036854775269L, long1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5873951613737387
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(32757L);
      Range range1 = Range.of(32757L, 32757L);
      Range range2 = Range.of(748L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      range0.asRange();
      String string0 = range0.toString();
      assertEquals("[ 0 .. 32756 ]/0B", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(32757L);
      Long long0 = new Long(32757L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5574667278795955
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 127L, 127L);
      Range.of(127L, 2147483647L);
      Range.of(127L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.9155505084438382
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range2 = Range.of((-270L));
      List<Range> list0 = range1.complement(range0);
      // Undeclared exception!
      try { 
        range2.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -270 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9799561547384963
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      Range range1 = Range.of((-1L), 117L);
      String string0 = range1.toString();
      assertEquals("[ -1 .. 117 ]/0B", string0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.979024296846825
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      Range range1 = Range.of((-1L), 101L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.78941191454213
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = Range.of(127L);
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-1760L), 32767L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.of(2065L, 2147483647L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8921481463615892
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range0.equals(range0);
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(6632L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.469997512107659
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 127L);
      Range range0 = Range.of((-2761L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.20243222357412
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-315L), 127L);
      Range range0 = Range.of(127L, 2147483647L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6044290123496125
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of((-255L), (-255L));
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -255 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4406221852733103
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65535L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.89156615887432
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775468L);
      boolean boolean0 = range0.equals(range1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertNotSame(range1, range0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.317922492902887
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(626L, 6337L);
      Range range1 = Range.of(869L, 6337L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-430L));
      Range range1 = Range.of((-1909L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1346325508541963
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774466L);
      Range.of(5704L);
      Range range1 = Range.ofLength(9223372036854771883L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967264L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(65535L, 4294967295L);
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 10913511896594L, 9223361149112682983L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5001147619785575
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of(4294967315L);
      Range range1 = Range.ofLength(4294967315L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.778275250658579
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.isEmpty();
      Range range1 = Range.ofLength(1662L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of(9223372036854775807L);
      range2.getLength();
      range1.endsBefore(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range1.isEmpty();
      linkedList0.addFirst(range2);
      // Undeclared exception!
      try { 
        range1.complementFrom(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.430826447549999
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.of((-571L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7909571860173013
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 127L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.266564625854239
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.of(6632L, 9223372036854775807L);
      Object object0 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 371L;
      Range range0 = Range.of((-2737L), 371L);
      linkedList0.add(range0);
      range0.isEmpty();
      Range range1 = null;
      linkedList0.addFirst((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 41L, 1065L);
      Range range1 = Range.of(127L, 127L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0593313799334476
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range range1 = Range.of(127L, 127L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(2692L);
      Long long0 = new Long(2692L);
      Long long1 = new Long((long) long0);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.690895463412169
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-571L));
      Range range1 = Range.of((-571L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774466L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(9223372036854774466L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.4437784771849342
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774466L);
      Range range1 = Range.of(9223372036854774466L);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
      
      List<Range> list1 = range0.complement(range1);
      assertTrue(list1.contains(range0));
      assertFalse(list1.contains(range1));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals("[ 1 .. 9223372036854774466 ]/RB", string0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6663341904590556
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(32757L);
      Long long0 = new Long(32757L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32757L, 32757L);
      range0.equals(range1);
      range0.intersection(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2692330175417945
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range0.intersection(range1);
      range1.getLength();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.expandBegin((-1063L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0599988624120327
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long0 = Long.valueOf(9223372036854775807L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 9223372036854775807 ]/RB", string0);
      
      Range.Comparators.values();
      Range range1 = Range.parseRange("[ 1 .. 9223372036854775807 ]/RB", range_CoordinateSystem0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1099L, 1099L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-430L));
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-430L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775783L));
      range0.equals((Object) null);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775795L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0610733884692896
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.of((-2147483648L));
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6855966703594754
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.8993658798306523
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.isEmpty();
      Range range2 = Range.of(0L, 0L);
      Range range3 = Range.of((-32768L));
      Range.of((-32768L));
      Range range4 = range2.intersection(range3);
      range4.intersects(range2);
      range0.getLength();
      range2.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("invalid startOffset %d: file is only %d bytes");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse invalid startOffset %d: file is only %d bytes into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5887637452698398
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775803L);
      Range range1 = Range.of(9223372036854775803L, 9223372036854775803L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.6761962217764883
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of((-3822L));
      // Undeclared exception!
      try { 
        range1.complement(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3822 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(939L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(65535L, 65535L);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.335685561595388
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775783L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854775783L), long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.4921861742632108
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(32757L);
      Range range1 = Range.of(2692L, 2692L);
      Long long0 = new Long(32757L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.133174976674082
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(626L, 6337L);
      Range range1 = Range.of(626L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-780L), (-780L));
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2025556956077046
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      range0.iterator();
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.ofLength(255L);
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.6870010143338687
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775795L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ -9223372036854775794 .. -9223372036854775794 ]/RB", string0);
      
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertFalse(list1.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.6369879561314145
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 286L);
      Range range1 = Range.of(286L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.4420915613260648
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(4294967295L);
      range0.equals(object0);
      List<Range> list0 = range0.split(4294967295L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.538366212856417
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(9223372036854773695L, 9223372036854773695L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773695L, (-9223372036854773413L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854773413 would make range [9223372036854773695 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.387956298958967
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6865862794638793
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(0L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.388129605429797
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L), (-128L));
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.199540027226181
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.3092813506787335
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-571L), (-571L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775553L, (-571L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -572 would make range [9223372036854775553 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.384753780368075
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-945L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -945 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(946L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.5873928183218178
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(2150L);
      Range range1 = Range.of(2150L, 2150L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 323L, 323L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.060276460265276
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 326L, 4294967295L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 326 .. 4294967295 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 326 .. 4294967295 ]/0B");
      assertSame(range1, range0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.6677526866784667
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 6417L, 6417L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4921351512518326
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(2692L, 2692L);
      Range range1 = Range.of(2536L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.407629051723588
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      List<Range> list0 = range0.split(2337L);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(255L, 9223372036854775807L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      Range range0 = Range.ofLength(1202L);
      List<Range> list0 = range0.split(1202L);
      assertFalse(range0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.203625422341148
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.split(1L);
      range0.iterator();
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.684404064515707
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(41L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.5202186045769546
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775783L));
      Range range1 = Range.of(9223372036854775806L);
      boolean boolean0 = range0.intersects(range1);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.44318584633436
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774466L);
      Range range1 = Range.of(9223372036854774466L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.653556397963837
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775803L);
      Range range1 = Range.of(2691L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.0124301704127268
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1109L, 1109L);
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.2017210871781594
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range0);
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = (-3462L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3462L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.of((-1052L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(378L, 9223372036854775803L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.97379553867689
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(6348L, 2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.97915952335122
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(773L, 773L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.2662596083157305
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
      assertTrue(range0.isEmpty());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.245345709031526
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.4419999547761964
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(41L);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4936065232892717
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.067023452397511
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.132563823121752
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      range1.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.674443644366476
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.getBegin();
      range0.iterator();
      Range range1 = Range.of(9223372036854775225L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of((-526L));
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(2698L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.of(2692L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-932L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.2039179696972515
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 9223372036854743051L;
      Range range0 = Range.of(9223372036854743051L);
      linkedList0.add(range0);
      range0.isEmpty();
      linkedList0.addFirst(range0);
      Range.Builder range_Builder0 = new Range.Builder(3605L);
      Range range1 = range_Builder0.build();
      range_Builder0.contractBegin(3605L);
      Range range2 = Range.of(0L);
      range1.equals(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.0479998912648156
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.shift(0L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.885074759977858
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.437082204107301
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.378135317829767
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775807L, long0);
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.4152745138545826
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.510449754505839
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 127L);
      range0.equals(range_CoordinateSystem0);
      range0.iterator();
      List<Range> list0 = range0.split(1L);
      assertFalse(list0.contains(range0));
      assertEquals(126, list0.size());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.1547558621110463
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(65538L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.386554964003035
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.ofLength(3082L);
      Range.of(3082L);
      List<Range> list0 = range0.split(3082L);
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.482276946927626
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.3545344305579152
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 286L, 286L);
      Range.Builder range_Builder1 = new Range.Builder(286L);
      Range range0 = Range.of(286L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.458776559443127
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      range0.getEnd();
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.0652140234516176
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 9223372036854775807 ]/RB", string0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-790L), (-790L));
      range_Builder0.expandBegin(104L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.506699167714975
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-790L), (-790L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.685029455385
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-242L));
      // Undeclared exception!
      try { 
        range0.split((-242L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range range0 = Range.of(41L, 41L);
      List<Range> list0 = range0.split(41L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.2668415958029997
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.6017778286806665
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-2965L), 4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.2229760260062394
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775783L));
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.200113693165702
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(286L, 286L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.130582753344072
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 9223372036854775803L;
      Range range0 = Range.of(9223372036854775803L, 9223372036854775803L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.796837966557264
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65536L, (-430L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.8296949802035267
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2740L, 2740L);
      Range range1 = Range.of(2740L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), (-9223372036854775808L));
      Range range3 = range_Builder0.build();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.6560830737525536
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range range1 = Range.of(65535L, 65535L);
      Range range2 = range0.intersection(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertSame(range2, range1);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.1792007145348498
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-125L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-124L), long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range range0 = Range.of((-87L), 6329L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.086870484872592
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range range0 = Range.of((-128L), 4294967306L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range range0 = Range.of((-2147483634L), (-2147483634L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.327189247670674
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.7923810113613925
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(286L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(287L, long0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.334589127061743
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-790L), (-790L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(583L, 273L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.1362432125950908
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range range0 = Range.of(85L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.2337020515322816
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Range range0 = Range.of(626L, 4444L);
      boolean boolean0 = range0.endsBefore(range0);
      Range range1 = Range.of(626L, 6337L);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1 == boolean0);
      assertNotSame(range1, range0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long long0 = (-571L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-571L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.1362432125950908
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L);
      Range range0 = Range.of(127L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.170366270745894
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(65535L, long0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.6877906150720685
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 9223372036854775807 ]/RB", string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 160
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-790L), (-790L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 161
  /*Coverage entropy=3.133269744238794
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(4294967295L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Range range0 = Range.ofLength(5724L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=3.597995220845101
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775795L), (-9223372036854775795L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.790389971042826
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Range range0 = Range.of(380L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 166
  /*Coverage entropy=3.0546768301451444
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range0 = range_Builder0.build();
      range_Builder0.expandEnd(0L);
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      Range range1 = range_Builder0.build();
      assertTrue(range1.isEmpty());
      assertSame(range1, range0);
  }
}
