/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 16:39:53 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.io.InputStream;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.help.ForwardAction;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.fop.image.FopImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.800923963425939
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(297);
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.clearSelectedPath();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3726), 0L, 297, 1866, 'm', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(1384);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.324550066409076
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setMaxDayCharacters(238);
      jDayChooser0.removePropertyChangeListener("Metal", (PropertyChangeListener) null);
      jDayChooser0.setMonth(8764);
      jDayChooser0.setDay(8764);
      Locale locale0 = Locale.KOREAN;
      jDayChooser0.setLocale(locale0);
      MenuSelectionManager.defaultManager();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setFocus();
      jDayChooser0.initDecorations();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setMonth(0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.896356811259909
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setMaxDayCharacters(238);
      jDayChooser0.removePropertyChangeListener("Metal", (PropertyChangeListener) null);
      jDayChooser0.setMonth(8764);
      jDayChooser0.setDay(8764);
      Locale locale0 = Locale.KOREAN;
      jDayChooser0.setLocale(locale0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 8764, 611L, 'v', 8764, 'v', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setFocus();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1);
      MenuSelectionManager.defaultManager();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, (-3699), (-530), 38, 'm');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.302687880265204
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.weekdayForeground = null;
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setFocusable(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 0L, (-660), 28, '6', 3);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.setEnabled(false);
      Color color1 = jDayChooser0.getWeekdayForeground();
      assertNull(color1);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.info;
      JButton jButton0 = new JButton("x");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 42, "Dialog Plain 11", 42, 42);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"x\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.211263088283608
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser0.setDay(1);
      jDayChooser0.drawDays();
      Locale locale0 = Locale.KOREAN;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDayBordersVisible(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8961159133677654
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(384L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.monthChooser = jMonthChooser0;
      Locale locale0 = Locale.CHINESE;
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.getComponentListeners();
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      jDayChooser0.setWeekdayForeground(colorUIResource0);
      jDayChooser0.getWeekdayForeground();
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-6029312), color0.getRGB());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      int int0 = 1782;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1782, 1782, 28, (-1876), 28, (-2009));
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.695616860294419
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.controlDkShadow;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setMonth((-190));
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0643519858964243
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(63740);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultLeafIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", icon0, true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 36, true, jCheckBoxMenuItem0);
      focusEvent0.setSource((Object) null);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.validate();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser1.setWeekOfYearVisible(false);
      Calendar calendar0 = MockCalendar.getInstance();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setCalendar(calendar0);
      Color color0 = jDayChooser2.getWeekdayForeground();
      assertEquals(90, color0.getGreen());
      
      jDayChooser2.getDayPanel();
      assertEquals(14, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1782, 28, (-1876), 28, (-2009));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(1782);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8969943718974696
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale.getISOCountries();
      JDayChooser jDayChooser1 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, '6', 1136, 39, '6', 3);
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser1.getDay());
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.896090218646746
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.695482417057474
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CANADA_FRENCH;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 39, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(14);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9831398653357044
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FlowLayout flowLayout0 = new FlowLayout();
      Dimension dimension0 = flowLayout0.preferredLayoutSize(jDayChooser0);
      assertEquals(213, dimension0.width);
      
      flowLayout0.layoutContainer(jDayChooser0);
      flowLayout0.addLayoutComponent("@9", jDayChooser0);
      jDayChooser0.setLayout(flowLayout0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-483), true);
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      focusEvent0.getOppositeComponent();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getDaysInMonth();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals((-2956050), color0.getRGB());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 4510, 28, 28, 4510, '4', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(1501);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          JDayChooser jDayChooser0 = new JDayChooser();
          jDayChooser0.setMaxDayCharacters(5);
          jDayChooser0.getFont();
          FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
          Color color0 = Color.RED;
          jDayChooser0.setWeekdayForeground(color0);
          InputStream inputStream0 = fopImage_ImageInfo0.inputStream;
          // Undeclared exception!
          try { 
            Font.createFont(17, (InputStream) null);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // font format not recognized
             //
             verifyException("java.awt.Font", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6953930755047177
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.167758575133943
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, (-463L), (-376), 4507, '`', 0);
      keyEvent0.getExtendedKeyCode();
      KeyEvent.getExtendedKeyCodeForChar(4507);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.decorationBordersVisible = true;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true);
      focusEvent0.setSource(keyEvent0);
      jDayChooser0.focusLost(focusEvent0);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.addListeners(0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.695432462640879
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-2256));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-2573));
      jDayChooser0.setFocus();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(579);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.063465677936315
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.doLayout();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.decorationBackgroundColor = null;
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1603), true);
      focusEvent0.setSource(jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.validate();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setWeekOfYearVisible(true);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.updateUI();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8008429327153
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6954577928839227
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.getColor("day", (-1810));
      jDayChooser0.setForeground(color0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.896153112519625
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font.decode("day");
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertSame(date1, date0);
      
      jDayChooser0.setWeekOfYearVisible(true);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser0.setDay(13);
      jDayChooser0.isWeekOfYearVisible();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDecorationBordersVisible(true);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getFont();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2063666994187083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8008183085417486
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(49, (-3198), (-3198));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=49,MONTH=-3198,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3198,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setForeground((Color) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.169980761415708
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setForeground((Color) null);
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals((-6029312), color0.getRGB());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.695419523184595
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1345774226934484
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getFont();
      jDayChooser0.setDayBordersVisible(false);
      String[] stringArray0 = new String[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(827);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(7);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.8007535911625436
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.800792978298705
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8008057335634406
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setDefaultCapable(false);
      ImageIcon imageIcon0 = new ImageIcon("", "day");
      jDayChooser_DecoratorButton0.setIcon(imageIcon0);
      ForwardAction forwardAction0 = new ForwardAction(jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8007669111758635
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
